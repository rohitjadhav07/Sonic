"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@metamask";
exports.ids = ["vendor-chunks/@metamask"];
exports.modules = {

/***/ "(ssr)/./node_modules/@metamask/safe-event-emitter/dist/cjs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@metamask/safe-event-emitter/dist/cjs/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports[\"default\"] = SafeEventEmitter;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3NhZmUtZXZlbnQtZW1pdHRlci9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxxREFBcUQsVUFBVSxXQUFXLFFBQVE7QUFDbEY7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1zb25pYy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyL2Rpc3QvY2pzL2luZGV4LmpzPzBiYTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5mdW5jdGlvbiBzYWZlQXBwbHkoaGFuZGxlciwgY29udGV4dCwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICAgIFJlZmxlY3QuYXBwbHkoaGFuZGxlciwgY29udGV4dCwgYXJncyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gVGhyb3cgZXJyb3IgYWZ0ZXIgdGltZW91dCBzbyBhcyBub3QgdG8gaW50ZXJydXB0IHRoZSBzdGFja1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIpIHtcbiAgICBjb25zdCBuID0gYXJyLmxlbmd0aDtcbiAgICBjb25zdCBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSArPSAxKSB7XG4gICAgICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xufVxuY2xhc3MgU2FmZUV2ZW50RW1pdHRlciBleHRlbmRzIGV2ZW50c18xLkV2ZW50RW1pdHRlciB7XG4gICAgZW1pdCh0eXBlLCAuLi5hcmdzKSB7XG4gICAgICAgIGxldCBkb0Vycm9yID0gdHlwZSA9PT0gJ2Vycm9yJztcbiAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRvRXJyb3IgPSBkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFkb0Vycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICAgICAgICBpZiAoZG9FcnJvcikge1xuICAgICAgICAgICAgbGV0IGVyO1xuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIFtlcl0gPSBhcmdzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgICAgICAgICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgICAgICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBVbmhhbmRsZWQgZXJyb3IuJHtlciA/IGAgKCR7ZXIubWVzc2FnZX0pYCA6ICcnfWApO1xuICAgICAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzYWZlQXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlcik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgc2FmZUFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2FmZUV2ZW50RW1pdHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/safe-event-emitter/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/sdk/dist/node/cjs/metamask-sdk.js":
/*!******************************************************************!*\
  !*** ./node_modules/@metamask/sdk/dist/node/cjs/metamask-sdk.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({value:!0}));var e=__webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\"),t=__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"),n=__webpack_require__(/*! buffer */ \"buffer\"),r=__webpack_require__(/*! node:crypto */ \"node:crypto\"),i=__webpack_require__(/*! eventemitter2 */ \"(ssr)/./node_modules/eventemitter2/lib/eventemitter2.js\"),o=__webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\"),s=__webpack_require__(/*! socket.io-client */ \"(ssr)/./node_modules/socket.io-client/build/cjs/index.js\"),a=__webpack_require__(/*! events */ \"events\"),c=__webpack_require__(/*! stream */ \"stream\"),d=__webpack_require__(/*! util */ \"util\");function l(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))}\"function\"==typeof SuppressedError&&SuppressedError;var u=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{};function h(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}var f={},p={},m={};function g(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`positive integer expected, not ${e}`)}function v(e){if(\"boolean\"!=typeof e)throw new Error(`boolean expected, not ${e}`)}function y(e){return e instanceof Uint8Array||null!=e&&\"object\"==typeof e&&\"Uint8Array\"===e.constructor.name}function E(e,...t){if(!y(e))throw new Error(\"Uint8Array expected\");if(t.length>0&&!t.includes(e.length))throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`)}function b(e){if(\"function\"!=typeof e||\"function\"!=typeof e.create)throw new Error(\"hash must be wrapped by utils.wrapConstructor\");g(e.outputLen),g(e.blockLen)}function w(e,t=!0){if(e.destroyed)throw new Error(\"Hash instance has been destroyed\");if(t&&e.finished)throw new Error(\"Hash#digest() has already been called\")}function S(e,t){E(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}Object.defineProperty(m,\"__esModule\",{value:!0}),m.isBytes=y,m.number=g,m.bool=v,m.bytes=E,m.hash=b,m.exists=w,m.output=S;const _={number:g,bool:v,bytes:E,hash:b,exists:w,output:S};m.default=_,function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.wrapCipher=e.Hash=e.nextTick=e.isLE=e.createView=e.u32=e.u16=e.u8=void 0,e.bytesToHex=r,e.hexToBytes=s,e.hexToNumber=a,e.bytesToNumberBE=function(e){return a(r(e))},e.numberToBytesBE=function(e,t){return s(e.toString(16).padStart(2*t,\"0\"))},e.asyncLoop=async function(t,n,r){let i=Date.now();for(let o=0;o<t;o++){r(o);const t=Date.now()-i;t>=0&&t<n||(await(0,e.nextTick)(),i+=t)}},e.utf8ToBytes=c,e.bytesToUtf8=function(e){return(new TextDecoder).decode(e)},e.toBytes=function(e){if(\"string\"==typeof e)e=c(e);else{if(!(0,t.isBytes)(e))throw new Error(\"Uint8Array expected, got \"+typeof e);e=l(e)}return e},e.concatBytes=function(...e){let n=0;for(let r=0;r<e.length;r++){const i=e[r];(0,t.bytes)(i),n+=i.length}const r=new Uint8Array(n);for(let t=0,n=0;t<e.length;t++){const i=e[t];r.set(i,n),n+=i.length}return r},e.checkOpts=function(e,t){if(null==t||\"object\"!=typeof t)throw new Error(\"options must be defined\");return Object.assign(e,t)},e.equalBytes=function(e,t){if(e.length!==t.length)return!1;let n=0;for(let r=0;r<e.length;r++)n|=e[r]^t[r];return 0===n},e.setBigUint64=d,e.u64Lengths=function(t,n){const r=new Uint8Array(16),i=(0,e.createView)(r);return d(i,0,BigInt(n?n.length:0),!0),d(i,8,BigInt(t.length),!0),r},e.isAligned32=function(e){return e.byteOffset%4==0},e.copyBytes=l,e.clean=function(...e){for(let t=0;t<e.length;t++)e[t].fill(0)};const t=m;e.u8=e=>new Uint8Array(e.buffer,e.byteOffset,e.byteLength);e.u16=e=>new Uint16Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/2));e.u32=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4));if(e.createView=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),e.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!e.isLE)throw new Error(\"Non little-endian hardware is not supported\");const n=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,\"0\")));function r(e){(0,t.bytes)(e);let r=\"\";for(let t=0;t<e.length;t++)r+=n[e[t]];return r}const i={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function o(e){return e>=i._0&&e<=i._9?e-i._0:e>=i._A&&e<=i._F?e-(i._A-10):e>=i._a&&e<=i._f?e-(i._a-10):void 0}function s(e){if(\"string\"!=typeof e)throw new Error(\"hex string expected, got \"+typeof e);const t=e.length,n=t/2;if(t%2)throw new Error(\"padded hex string expected, got unpadded hex of length \"+t);const r=new Uint8Array(n);for(let t=0,i=0;t<n;t++,i+=2){const n=o(e.charCodeAt(i)),s=o(e.charCodeAt(i+1));if(void 0===n||void 0===s){const t=e[i]+e[i+1];throw new Error('hex string expected, got non-hex character \"'+t+'\" at index '+i)}r[t]=16*n+s}return r}function a(e){if(\"string\"!=typeof e)throw new Error(\"hex string expected, got \"+typeof e);return BigInt(\"\"===e?\"0\":`0x${e}`)}function c(e){if(\"string\"!=typeof e)throw new Error(\"string expected, got \"+typeof e);return new Uint8Array((new TextEncoder).encode(e))}e.nextTick=async()=>{};e.Hash=class{};function d(e,t,n,r){if(\"function\"==typeof e.setBigUint64)return e.setBigUint64(t,n,r);const i=BigInt(32),o=BigInt(4294967295),s=Number(n>>i&o),a=Number(n&o),c=r?4:0,d=r?0:4;e.setUint32(t+c,s,r),e.setUint32(t+d,a,r)}function l(e){return Uint8Array.from(e)}e.wrapCipher=(e,t)=>(Object.assign(t,e),t)}(p);var C={},x={};Object.defineProperty(x,\"__esModule\",{value:!0}),x.AEAD_TAG_LENGTH=x.XCHACHA20_NONCE_LENGTH=x.CURVE25519_PUBLIC_KEY_SIZE=x.ETH_PUBLIC_KEY_SIZE=x.UNCOMPRESSED_PUBLIC_KEY_SIZE=x.COMPRESSED_PUBLIC_KEY_SIZE=x.SECRET_KEY_LENGTH=void 0,x.SECRET_KEY_LENGTH=32,x.COMPRESSED_PUBLIC_KEY_SIZE=33,x.UNCOMPRESSED_PUBLIC_KEY_SIZE=65,x.ETH_PUBLIC_KEY_SIZE=64,x.CURVE25519_PUBLIC_KEY_SIZE=32,x.XCHACHA20_NONCE_LENGTH=24,x.AEAD_TAG_LENGTH=16,function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.ephemeralKeySize=e.symmetricNonceLength=e.symmetricAlgorithm=e.isHkdfKeyCompressed=e.isEphemeralKeyCompressed=e.ellipticCurve=e.ECIES_CONFIG=void 0;var t=x,n=function(){this.ellipticCurve=\"secp256k1\",this.isEphemeralKeyCompressed=!1,this.isHkdfKeyCompressed=!1,this.symmetricAlgorithm=\"aes-256-gcm\",this.symmetricNonceLength=16};e.ECIES_CONFIG=new n;e.ellipticCurve=function(){return e.ECIES_CONFIG.ellipticCurve};e.isEphemeralKeyCompressed=function(){return e.ECIES_CONFIG.isEphemeralKeyCompressed};e.isHkdfKeyCompressed=function(){return e.ECIES_CONFIG.isHkdfKeyCompressed};e.symmetricAlgorithm=function(){return e.ECIES_CONFIG.symmetricAlgorithm};e.symmetricNonceLength=function(){return e.ECIES_CONFIG.symmetricNonceLength};e.ephemeralKeySize=function(){var n={secp256k1:e.ECIES_CONFIG.isEphemeralKeyCompressed?t.COMPRESSED_PUBLIC_KEY_SIZE:t.UNCOMPRESSED_PUBLIC_KEY_SIZE,x25519:t.CURVE25519_PUBLIC_KEY_SIZE,ed25519:t.CURVE25519_PUBLIC_KEY_SIZE};if(e.ECIES_CONFIG.ellipticCurve in n)return n[e.ECIES_CONFIG.ellipticCurve];throw new Error(\"Not implemented\")}}(C);var k={},M={},A={},T={},I={},P={};Object.defineProperty(P,\"__esModule\",{value:!0}),P.crypto=void 0;const R=r;P.crypto=R&&\"object\"==typeof R&&\"webcrypto\"in R?R.webcrypto:R&&\"object\"==typeof R&&\"randomBytes\"in R?R:void 0,function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.gcm=e.ctr=e.cbc=e.utils=void 0,e.randomBytes=i,e.getWebcryptoSubtle=o,e.managedNonce=function(e){return(0,n.number)(e.nonceLength),(t,...n)=>({encrypt(o,...s){const{nonceLength:a}=e,c=i(a),d=e(t,c,...n).encrypt(o,...s),l=(0,r.concatBytes)(c,d);return d.fill(0),l},decrypt(r,...i){const{nonceLength:o}=e,s=r.subarray(0,o),a=r.subarray(o);return e(t,s,...n).decrypt(a,...i)}})};const t=P,n=m,r=p;function i(e=32){if(t.crypto&&\"function\"==typeof t.crypto.getRandomValues)return t.crypto.getRandomValues(new Uint8Array(e));if(t.crypto&&\"function\"==typeof t.crypto.randomBytes)return t.crypto.randomBytes(e);throw new Error(\"crypto.getRandomValues must be defined\")}function o(){if(t.crypto&&\"object\"==typeof t.crypto.subtle&&null!=t.crypto.subtle)return t.crypto.subtle;throw new Error(\"crypto.subtle must be defined\")}e.utils={async encrypt(e,t,n,r){const i=o(),s=await i.importKey(\"raw\",e,t,!0,[\"encrypt\"]),a=await i.encrypt(n,s,r);return new Uint8Array(a)},async decrypt(e,t,n,r){const i=o(),s=await i.importKey(\"raw\",e,t,!0,[\"decrypt\"]),a=await i.decrypt(n,s,r);return new Uint8Array(a)}};const s={CBC:\"AES-CBC\",CTR:\"AES-CTR\",GCM:\"AES-GCM\"};function a(t){return(r,i,o)=>{(0,n.bytes)(r),(0,n.bytes)(i);const a={name:t,length:8*r.length},c=function(e,t,n){if(e===s.CBC)return{name:s.CBC,iv:t};if(e===s.CTR)return{name:s.CTR,counter:t,length:64};if(e===s.GCM)return n?{name:s.GCM,iv:t,additionalData:n}:{name:s.GCM,iv:t};throw new Error(\"unknown aes block mode\")}(t,i,o);return{encrypt:t=>((0,n.bytes)(t),e.utils.encrypt(r,a,c,t)),decrypt:t=>((0,n.bytes)(t),e.utils.decrypt(r,a,c,t))}}}e.cbc=a(s.CBC),e.ctr=a(s.CTR),e.gcm=a(s.GCM)}(I);var O={},N={},D={},L={};function B(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`positive integer expected, not ${e}`)}function K(e){if(\"boolean\"!=typeof e)throw new Error(`boolean expected, not ${e}`)}function j(e){return e instanceof Uint8Array||null!=e&&\"object\"==typeof e&&\"Uint8Array\"===e.constructor.name}function $(e,...t){if(!j(e))throw new Error(\"Uint8Array expected\");if(t.length>0&&!t.includes(e.length))throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`)}function H(e){if(\"function\"!=typeof e||\"function\"!=typeof e.create)throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");B(e.outputLen),B(e.blockLen)}function U(e,t=!0){if(e.destroyed)throw new Error(\"Hash instance has been destroyed\");if(t&&e.finished)throw new Error(\"Hash#digest() has already been called\")}function F(e,t){$(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}Object.defineProperty(L,\"__esModule\",{value:!0}),L.isBytes=j,L.number=B,L.bool=K,L.bytes=$,L.hash=H,L.exists=U,L.output=F;const q={number:B,bool:K,bytes:$,hash:H,exists:U,output:F};L.default=q;var z={},W={};Object.defineProperty(W,\"__esModule\",{value:!0}),W.crypto=void 0;const V=r;W.crypto=V&&\"object\"==typeof V&&\"webcrypto\"in V?V.webcrypto:V&&\"object\"==typeof V&&\"randomBytes\"in V?V:void 0,function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.Hash=e.nextTick=e.byteSwapIfBE=e.byteSwap=e.isLE=e.rotl=e.rotr=e.createView=e.u32=e.u8=void 0,e.isBytes=function(e){return e instanceof Uint8Array||null!=e&&\"object\"==typeof e&&\"Uint8Array\"===e.constructor.name},e.byteSwap32=function(t){for(let n=0;n<t.length;n++)t[n]=(0,e.byteSwap)(t[n])},e.bytesToHex=function(e){(0,n.bytes)(e);let t=\"\";for(let n=0;n<e.length;n++)t+=r[e[n]];return t},e.hexToBytes=function(e){if(\"string\"!=typeof e)throw new Error(\"hex string expected, got \"+typeof e);const t=e.length,n=t/2;if(t%2)throw new Error(\"padded hex string expected, got unpadded hex of length \"+t);const r=new Uint8Array(n);for(let t=0,i=0;t<n;t++,i+=2){const n=o(e.charCodeAt(i)),s=o(e.charCodeAt(i+1));if(void 0===n||void 0===s){const t=e[i]+e[i+1];throw new Error('hex string expected, got non-hex character \"'+t+'\" at index '+i)}r[t]=16*n+s}return r},e.asyncLoop=async function(t,n,r){let i=Date.now();for(let o=0;o<t;o++){r(o);const t=Date.now()-i;t>=0&&t<n||(await(0,e.nextTick)(),i+=t)}},e.utf8ToBytes=s,e.toBytes=a,e.concatBytes=function(...e){let t=0;for(let r=0;r<e.length;r++){const i=e[r];(0,n.bytes)(i),t+=i.length}const r=new Uint8Array(t);for(let t=0,n=0;t<e.length;t++){const i=e[t];r.set(i,n),n+=i.length}return r},e.checkOpts=function(e,t){if(void 0!==t&&\"[object Object]\"!==c.call(t))throw new Error(\"Options should be object or undefined\");return Object.assign(e,t)},e.wrapConstructor=function(e){const t=t=>e().update(a(t)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t},e.wrapConstructorWithOpts=function(e){const t=(t,n)=>e(n).update(a(t)).digest(),n=e({});return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=t=>e(t),t},e.wrapXOFConstructorWithOpts=function(e){const t=(t,n)=>e(n).update(a(t)).digest(),n=e({});return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=t=>e(t),t},e.randomBytes=function(e=32){if(t.crypto&&\"function\"==typeof t.crypto.getRandomValues)return t.crypto.getRandomValues(new Uint8Array(e));if(t.crypto&&\"function\"==typeof t.crypto.randomBytes)return t.crypto.randomBytes(e);throw new Error(\"crypto.getRandomValues must be defined\")};const t=W,n=L;e.u8=e=>new Uint8Array(e.buffer,e.byteOffset,e.byteLength);e.u32=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4));e.createView=e=>new DataView(e.buffer,e.byteOffset,e.byteLength);e.rotr=(e,t)=>e<<32-t|e>>>t;e.rotl=(e,t)=>e<<t|e>>>32-t>>>0,e.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0];e.byteSwap=e=>e<<24&4278190080|e<<8&16711680|e>>>8&65280|e>>>24&255,e.byteSwapIfBE=e.isLE?e=>e:t=>(0,e.byteSwap)(t);const r=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,\"0\")));const i={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function o(e){return e>=i._0&&e<=i._9?e-i._0:e>=i._A&&e<=i._F?e-(i._A-10):e>=i._a&&e<=i._f?e-(i._a-10):void 0}function s(e){if(\"string\"!=typeof e)throw new Error(\"utf8ToBytes expected string, got \"+typeof e);return new Uint8Array((new TextEncoder).encode(e))}function a(e){return\"string\"==typeof e&&(e=s(e)),(0,n.bytes)(e),e}e.nextTick=async()=>{};e.Hash=class{clone(){return this._cloneInto()}};const c={}.toString}(z),Object.defineProperty(D,\"__esModule\",{value:!0}),D.HashMD=D.Maj=D.Chi=void 0;const G=L,Y=z;D.Chi=(e,t,n)=>e&t^~e&n;D.Maj=(e,t,n)=>e&t^e&n^t&n;D.HashMD=class extends Y.Hash{constructor(e,t,n,r){super(),this.blockLen=e,this.outputLen=t,this.padOffset=n,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=(0,Y.createView)(this.buffer)}update(e){(0,G.exists)(this);const{view:t,buffer:n,blockLen:r}=this,i=(e=(0,Y.toBytes)(e)).length;for(let o=0;o<i;){const s=Math.min(r-this.pos,i-o);if(s!==r)n.set(e.subarray(o,o+s),this.pos),this.pos+=s,o+=s,this.pos===r&&(this.process(t,0),this.pos=0);else{const t=(0,Y.createView)(e);for(;r<=i-o;o+=r)this.process(t,o)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){(0,G.exists)(this),(0,G.output)(e,this),this.finished=!0;const{buffer:t,view:n,blockLen:r,isLE:i}=this;let{pos:o}=this;t[o++]=128,this.buffer.subarray(o).fill(0),this.padOffset>r-o&&(this.process(n,0),o=0);for(let e=o;e<r;e++)t[e]=0;!function(e,t,n,r){if(\"function\"==typeof e.setBigUint64)return e.setBigUint64(t,n,r);const i=BigInt(32),o=BigInt(4294967295),s=Number(n>>i&o),a=Number(n&o),c=r?4:0,d=r?0:4;e.setUint32(t+c,s,r),e.setUint32(t+d,a,r)}(n,r-8,BigInt(8*this.length),i),this.process(n,0);const s=(0,Y.createView)(e),a=this.outputLen;if(a%4)throw new Error(\"_sha2: outputLen should be aligned to 32bit\");const c=a/4,d=this.get();if(c>d.length)throw new Error(\"_sha2: outputLen bigger than state\");for(let e=0;e<c;e++)s.setUint32(4*e,d[e],i)}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const n=e.slice(0,t);return this.destroy(),n}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:n,length:r,finished:i,destroyed:o,pos:s}=this;return e.length=r,e.pos=s,e.finished=i,e.destroyed=o,r%t&&e.buffer.set(n),e}};var Z={};Object.defineProperty(Z,\"__esModule\",{value:!0}),Z.add5L=Z.add5H=Z.add4H=Z.add4L=Z.add3H=Z.add3L=Z.rotlBL=Z.rotlBH=Z.rotlSL=Z.rotlSH=Z.rotr32L=Z.rotr32H=Z.rotrBL=Z.rotrBH=Z.rotrSL=Z.rotrSH=Z.shrSL=Z.shrSH=Z.toBig=void 0,Z.fromBig=X,Z.split=ee,Z.add=pe;const J=BigInt(2**32-1),Q=BigInt(32);function X(e,t=!1){return t?{h:Number(e&J),l:Number(e>>Q&J)}:{h:0|Number(e>>Q&J),l:0|Number(e&J)}}function ee(e,t=!1){let n=new Uint32Array(e.length),r=new Uint32Array(e.length);for(let i=0;i<e.length;i++){const{h:o,l:s}=X(e[i],t);[n[i],r[i]]=[o,s]}return[n,r]}const te=(e,t)=>BigInt(e>>>0)<<Q|BigInt(t>>>0);Z.toBig=te;const ne=(e,t,n)=>e>>>n;Z.shrSH=ne;const re=(e,t,n)=>e<<32-n|t>>>n;Z.shrSL=re;const ie=(e,t,n)=>e>>>n|t<<32-n;Z.rotrSH=ie;const oe=(e,t,n)=>e<<32-n|t>>>n;Z.rotrSL=oe;const se=(e,t,n)=>e<<64-n|t>>>n-32;Z.rotrBH=se;const ae=(e,t,n)=>e>>>n-32|t<<64-n;Z.rotrBL=ae;const ce=(e,t)=>t;Z.rotr32H=ce;const de=(e,t)=>e;Z.rotr32L=de;const le=(e,t,n)=>e<<n|t>>>32-n;Z.rotlSH=le;const ue=(e,t,n)=>t<<n|e>>>32-n;Z.rotlSL=ue;const he=(e,t,n)=>t<<n-32|e>>>64-n;Z.rotlBH=he;const fe=(e,t,n)=>e<<n-32|t>>>64-n;function pe(e,t,n,r){const i=(t>>>0)+(r>>>0);return{h:e+n+(i/2**32|0)|0,l:0|i}}Z.rotlBL=fe;const me=(e,t,n)=>(e>>>0)+(t>>>0)+(n>>>0);Z.add3L=me;const ge=(e,t,n,r)=>t+n+r+(e/2**32|0)|0;Z.add3H=ge;const ve=(e,t,n,r)=>(e>>>0)+(t>>>0)+(n>>>0)+(r>>>0);Z.add4L=ve;const ye=(e,t,n,r,i)=>t+n+r+i+(e/2**32|0)|0;Z.add4H=ye;const Ee=(e,t,n,r,i)=>(e>>>0)+(t>>>0)+(n>>>0)+(r>>>0)+(i>>>0);Z.add5L=Ee;const be=(e,t,n,r,i,o)=>t+n+r+i+o+(e/2**32|0)|0;Z.add5H=be;const we={fromBig:X,split:ee,toBig:te,shrSH:ne,shrSL:re,rotrSH:ie,rotrSL:oe,rotrBH:se,rotrBL:ae,rotr32H:ce,rotr32L:de,rotlSH:le,rotlSL:ue,rotlBH:he,rotlBL:fe,add:pe,add3L:me,add3H:ge,add4L:ve,add4H:ye,add5H:be,add5L:Ee};Z.default=we,Object.defineProperty(N,\"__esModule\",{value:!0}),N.sha384=N.sha512_256=N.sha512_224=N.sha512=N.SHA384=N.SHA512_256=N.SHA512_224=N.SHA512=void 0;const Se=D,_e=Z,Ce=z,[xe,ke]=(()=>_e.default.split([\"0x428a2f98d728ae22\",\"0x7137449123ef65cd\",\"0xb5c0fbcfec4d3b2f\",\"0xe9b5dba58189dbbc\",\"0x3956c25bf348b538\",\"0x59f111f1b605d019\",\"0x923f82a4af194f9b\",\"0xab1c5ed5da6d8118\",\"0xd807aa98a3030242\",\"0x12835b0145706fbe\",\"0x243185be4ee4b28c\",\"0x550c7dc3d5ffb4e2\",\"0x72be5d74f27b896f\",\"0x80deb1fe3b1696b1\",\"0x9bdc06a725c71235\",\"0xc19bf174cf692694\",\"0xe49b69c19ef14ad2\",\"0xefbe4786384f25e3\",\"0x0fc19dc68b8cd5b5\",\"0x240ca1cc77ac9c65\",\"0x2de92c6f592b0275\",\"0x4a7484aa6ea6e483\",\"0x5cb0a9dcbd41fbd4\",\"0x76f988da831153b5\",\"0x983e5152ee66dfab\",\"0xa831c66d2db43210\",\"0xb00327c898fb213f\",\"0xbf597fc7beef0ee4\",\"0xc6e00bf33da88fc2\",\"0xd5a79147930aa725\",\"0x06ca6351e003826f\",\"0x142929670a0e6e70\",\"0x27b70a8546d22ffc\",\"0x2e1b21385c26c926\",\"0x4d2c6dfc5ac42aed\",\"0x53380d139d95b3df\",\"0x650a73548baf63de\",\"0x766a0abb3c77b2a8\",\"0x81c2c92e47edaee6\",\"0x92722c851482353b\",\"0xa2bfe8a14cf10364\",\"0xa81a664bbc423001\",\"0xc24b8b70d0f89791\",\"0xc76c51a30654be30\",\"0xd192e819d6ef5218\",\"0xd69906245565a910\",\"0xf40e35855771202a\",\"0x106aa07032bbd1b8\",\"0x19a4c116b8d2d0c8\",\"0x1e376c085141ab53\",\"0x2748774cdf8eeb99\",\"0x34b0bcb5e19b48a8\",\"0x391c0cb3c5c95a63\",\"0x4ed8aa4ae3418acb\",\"0x5b9cca4f7763e373\",\"0x682e6ff3d6b2b8a3\",\"0x748f82ee5defb2fc\",\"0x78a5636f43172f60\",\"0x84c87814a1f0ab72\",\"0x8cc702081a6439ec\",\"0x90befffa23631e28\",\"0xa4506cebde82bde9\",\"0xbef9a3f7b2c67915\",\"0xc67178f2e372532b\",\"0xca273eceea26619c\",\"0xd186b8c721c0c207\",\"0xeada7dd6cde0eb1e\",\"0xf57d4f7fee6ed178\",\"0x06f067aa72176fba\",\"0x0a637dc5a2c898a6\",\"0x113f9804bef90dae\",\"0x1b710b35131c471b\",\"0x28db77f523047d84\",\"0x32caab7b40c72493\",\"0x3c9ebe0a15c9bebc\",\"0x431d67c49c100d4c\",\"0x4cc5d4becb3e42b6\",\"0x597f299cfc657e2a\",\"0x5fcb6fab3ad6faec\",\"0x6c44198c4a475817\"].map((e=>BigInt(e)))))(),Me=new Uint32Array(80),Ae=new Uint32Array(80);class Te extends Se.HashMD{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:e,Al:t,Bh:n,Bl:r,Ch:i,Cl:o,Dh:s,Dl:a,Eh:c,El:d,Fh:l,Fl:u,Gh:h,Gl:f,Hh:p,Hl:m}=this;return[e,t,n,r,i,o,s,a,c,d,l,u,h,f,p,m]}set(e,t,n,r,i,o,s,a,c,d,l,u,h,f,p,m){this.Ah=0|e,this.Al=0|t,this.Bh=0|n,this.Bl=0|r,this.Ch=0|i,this.Cl=0|o,this.Dh=0|s,this.Dl=0|a,this.Eh=0|c,this.El=0|d,this.Fh=0|l,this.Fl=0|u,this.Gh=0|h,this.Gl=0|f,this.Hh=0|p,this.Hl=0|m}process(e,t){for(let n=0;n<16;n++,t+=4)Me[n]=e.getUint32(t),Ae[n]=e.getUint32(t+=4);for(let e=16;e<80;e++){const t=0|Me[e-15],n=0|Ae[e-15],r=_e.default.rotrSH(t,n,1)^_e.default.rotrSH(t,n,8)^_e.default.shrSH(t,n,7),i=_e.default.rotrSL(t,n,1)^_e.default.rotrSL(t,n,8)^_e.default.shrSL(t,n,7),o=0|Me[e-2],s=0|Ae[e-2],a=_e.default.rotrSH(o,s,19)^_e.default.rotrBH(o,s,61)^_e.default.shrSH(o,s,6),c=_e.default.rotrSL(o,s,19)^_e.default.rotrBL(o,s,61)^_e.default.shrSL(o,s,6),d=_e.default.add4L(i,c,Ae[e-7],Ae[e-16]),l=_e.default.add4H(d,r,a,Me[e-7],Me[e-16]);Me[e]=0|l,Ae[e]=0|d}let{Ah:n,Al:r,Bh:i,Bl:o,Ch:s,Cl:a,Dh:c,Dl:d,Eh:l,El:u,Fh:h,Fl:f,Gh:p,Gl:m,Hh:g,Hl:v}=this;for(let e=0;e<80;e++){const t=_e.default.rotrSH(l,u,14)^_e.default.rotrSH(l,u,18)^_e.default.rotrBH(l,u,41),y=_e.default.rotrSL(l,u,14)^_e.default.rotrSL(l,u,18)^_e.default.rotrBL(l,u,41),E=l&h^~l&p,b=u&f^~u&m,w=_e.default.add5L(v,y,b,ke[e],Ae[e]),S=_e.default.add5H(w,g,t,E,xe[e],Me[e]),_=0|w,C=_e.default.rotrSH(n,r,28)^_e.default.rotrBH(n,r,34)^_e.default.rotrBH(n,r,39),x=_e.default.rotrSL(n,r,28)^_e.default.rotrBL(n,r,34)^_e.default.rotrBL(n,r,39),k=n&i^n&s^i&s,M=r&o^r&a^o&a;g=0|p,v=0|m,p=0|h,m=0|f,h=0|l,f=0|u,({h:l,l:u}=_e.default.add(0|c,0|d,0|S,0|_)),c=0|s,d=0|a,s=0|i,a=0|o,i=0|n,o=0|r;const A=_e.default.add3L(_,x,M);n=_e.default.add3H(A,S,C,k),r=0|A}({h:n,l:r}=_e.default.add(0|this.Ah,0|this.Al,0|n,0|r)),({h:i,l:o}=_e.default.add(0|this.Bh,0|this.Bl,0|i,0|o)),({h:s,l:a}=_e.default.add(0|this.Ch,0|this.Cl,0|s,0|a)),({h:c,l:d}=_e.default.add(0|this.Dh,0|this.Dl,0|c,0|d)),({h:l,l:u}=_e.default.add(0|this.Eh,0|this.El,0|l,0|u)),({h:h,l:f}=_e.default.add(0|this.Fh,0|this.Fl,0|h,0|f)),({h:p,l:m}=_e.default.add(0|this.Gh,0|this.Gl,0|p,0|m)),({h:g,l:v}=_e.default.add(0|this.Hh,0|this.Hl,0|g,0|v)),this.set(n,r,i,o,s,a,c,d,l,u,h,f,p,m,g,v)}roundClean(){Me.fill(0),Ae.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}N.SHA512=Te;class Ie extends Te{constructor(){super(),this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}}N.SHA512_224=Ie;class Pe extends Te{constructor(){super(),this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}N.SHA512_256=Pe;class Re extends Te{constructor(){super(),this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}N.SHA384=Re,N.sha512=(0,Ce.wrapConstructor)((()=>new Te)),N.sha512_224=(0,Ce.wrapConstructor)((()=>new Ie)),N.sha512_256=(0,Ce.wrapConstructor)((()=>new Pe)),N.sha384=(0,Ce.wrapConstructor)((()=>new Re));var Oe={},Ne={},De={},Le={};Object.defineProperty(Le,\"__esModule\",{value:!0}),Le.notImplemented=Le.bitMask=void 0,Le.isBytes=$e,Le.abytes=He,Le.abool=function(e,t){if(\"boolean\"!=typeof t)throw new Error(`${e} must be valid boolean, got \"${t}\".`)},Le.bytesToHex=Fe,Le.numberToHexUnpadded=qe,Le.hexToNumber=ze,Le.hexToBytes=Ge,Le.bytesToNumberBE=function(e){return ze(Fe(e))},Le.bytesToNumberLE=function(e){return He(e),ze(Fe(Uint8Array.from(e).reverse()))},Le.numberToBytesBE=Ye,Le.numberToBytesLE=function(e,t){return Ye(e,t).reverse()},Le.numberToVarBytesBE=function(e){return Ge(qe(e))},Le.ensureBytes=function(e,t,n){let r;if(\"string\"==typeof t)try{r=Ge(t)}catch(n){throw new Error(`${e} must be valid hex string, got \"${t}\". Cause: ${n}`)}else{if(!$e(t))throw new Error(`${e} must be hex string or Uint8Array`);r=Uint8Array.from(t)}const i=r.length;if(\"number\"==typeof n&&i!==n)throw new Error(`${e} expected ${n} bytes, got ${i}`);return r},Le.concatBytes=Ze,Le.equalBytes=function(e,t){if(e.length!==t.length)return!1;let n=0;for(let r=0;r<e.length;r++)n|=e[r]^t[r];return 0===n},Le.utf8ToBytes=function(e){if(\"string\"!=typeof e)throw new Error(\"utf8ToBytes expected string, got \"+typeof e);return new Uint8Array((new TextEncoder).encode(e))},Le.inRange=Qe,Le.aInRange=function(e,t,n,r){if(!Qe(t,n,r))throw new Error(`expected valid ${e}: ${n} <= n < ${r}, got ${typeof t} ${t}`)},Le.bitLen=function(e){let t;for(t=0;e>Be;e>>=Ke,t+=1);return t},Le.bitGet=function(e,t){return e>>BigInt(t)&Ke},Le.bitSet=function(e,t,n){return e|(n?Ke:Be)<<BigInt(t)},Le.createHmacDrbg=function(e,t,n){if(\"number\"!=typeof e||e<2)throw new Error(\"hashLen must be a number\");if(\"number\"!=typeof t||t<2)throw new Error(\"qByteLen must be a number\");if(\"function\"!=typeof n)throw new Error(\"hmacFn must be a function\");let r=Xe(e),i=Xe(e),o=0;const s=()=>{r.fill(1),i.fill(0),o=0},a=(...e)=>n(i,r,...e),c=(e=Xe())=>{i=a(et([0]),e),r=a(),0!==e.length&&(i=a(et([1]),e),r=a())},d=()=>{if(o++>=1e3)throw new Error(\"drbg: tried 1000 values\");let e=0;const n=[];for(;e<t;){r=a();const t=r.slice();n.push(t),e+=r.length}return Ze(...n)};return(e,t)=>{let n;for(s(),c(e);!(n=t(d()));)c();return s(),n}},Le.validateObject=function(e,t,n={}){const r=(t,n,r)=>{const i=tt[n];if(\"function\"!=typeof i)throw new Error(`Invalid validator \"${n}\", expected function`);const o=e[t];if(!(r&&void 0===o||i(o,e)))throw new Error(`Invalid param ${String(t)}=${o} (${typeof o}), expected ${n}`)};for(const[e,n]of Object.entries(t))r(e,n,!1);for(const[e,t]of Object.entries(n))r(e,t,!0);return e},Le.memoized=function(e){const t=new WeakMap;return(n,...r)=>{const i=t.get(n);if(void 0!==i)return i;const o=e(n,...r);return t.set(n,o),o}};const Be=BigInt(0),Ke=BigInt(1),je=BigInt(2);function $e(e){return e instanceof Uint8Array||null!=e&&\"object\"==typeof e&&\"Uint8Array\"===e.constructor.name}function He(e){if(!$e(e))throw new Error(\"Uint8Array expected\")}const Ue=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,\"0\")));function Fe(e){He(e);let t=\"\";for(let n=0;n<e.length;n++)t+=Ue[e[n]];return t}function qe(e){const t=e.toString(16);return 1&t.length?`0${t}`:t}function ze(e){if(\"string\"!=typeof e)throw new Error(\"hex string expected, got \"+typeof e);return BigInt(\"\"===e?\"0\":`0x${e}`)}const We={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function Ve(e){return e>=We._0&&e<=We._9?e-We._0:e>=We._A&&e<=We._F?e-(We._A-10):e>=We._a&&e<=We._f?e-(We._a-10):void 0}function Ge(e){if(\"string\"!=typeof e)throw new Error(\"hex string expected, got \"+typeof e);const t=e.length,n=t/2;if(t%2)throw new Error(\"padded hex string expected, got unpadded hex of length \"+t);const r=new Uint8Array(n);for(let t=0,i=0;t<n;t++,i+=2){const n=Ve(e.charCodeAt(i)),o=Ve(e.charCodeAt(i+1));if(void 0===n||void 0===o){const t=e[i]+e[i+1];throw new Error('hex string expected, got non-hex character \"'+t+'\" at index '+i)}r[t]=16*n+o}return r}function Ye(e,t){return Ge(e.toString(16).padStart(2*t,\"0\"))}function Ze(...e){let t=0;for(let n=0;n<e.length;n++){const r=e[n];He(r),t+=r.length}const n=new Uint8Array(t);for(let t=0,r=0;t<e.length;t++){const i=e[t];n.set(i,r),r+=i.length}return n}const Je=e=>\"bigint\"==typeof e&&Be<=e;function Qe(e,t,n){return Je(e)&&Je(t)&&Je(n)&&t<=e&&e<n}Le.bitMask=e=>(je<<BigInt(e-1))-Ke;const Xe=e=>new Uint8Array(e),et=e=>Uint8Array.from(e);const tt={bigint:e=>\"bigint\"==typeof e,function:e=>\"function\"==typeof e,boolean:e=>\"boolean\"==typeof e,string:e=>\"string\"==typeof e,stringOrUint8Array:e=>\"string\"==typeof e||$e(e),isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>\"function\"==typeof e&&Number.isSafeInteger(e.outputLen)};Le.notImplemented=()=>{throw new Error(\"not implemented\")},Object.defineProperty(De,\"__esModule\",{value:!0}),De.isNegativeLE=void 0,De.mod=lt,De.pow=ut,De.pow2=function(e,t,n){let r=e;for(;t-- >rt;)r*=r,r%=n;return r},De.invert=ht,De.tonelliShanks=ft,De.FpSqrt=pt,De.validateField=function(e){const t=mt.reduce(((e,t)=>(e[t]=\"function\",e)),{ORDER:\"bigint\",MASK:\"bigint\",BYTES:\"isSafeInteger\",BITS:\"isSafeInteger\"});return(0,nt.validateObject)(e,t)},De.FpPow=gt,De.FpInvertBatch=vt,De.FpDiv=function(e,t,n){return e.mul(t,\"bigint\"==typeof n?ht(n,e.ORDER):e.inv(n))},De.FpLegendre=yt,De.FpIsSquare=function(e){const t=yt(e.ORDER);return n=>{const r=t(e,n);return e.eql(r,e.ZERO)||e.eql(r,e.ONE)}},De.nLength=Et,De.Field=function(e,t,n=!1,r={}){if(e<=rt)throw new Error(`Expected Field ORDER > 0, got ${e}`);const{nBitLength:i,nByteLength:o}=Et(e,t);if(o>2048)throw new Error(\"Field lengths over 2048 bytes are not supported\");const s=pt(e),a=Object.freeze({ORDER:e,BITS:i,BYTES:o,MASK:(0,nt.bitMask)(i),ZERO:rt,ONE:it,create:t=>lt(t,e),isValid:t=>{if(\"bigint\"!=typeof t)throw new Error(\"Invalid field element: expected bigint, got \"+typeof t);return rt<=t&&t<e},is0:e=>e===rt,isOdd:e=>(e&it)===it,neg:t=>lt(-t,e),eql:(e,t)=>e===t,sqr:t=>lt(t*t,e),add:(t,n)=>lt(t+n,e),sub:(t,n)=>lt(t-n,e),mul:(t,n)=>lt(t*n,e),pow:(e,t)=>gt(a,e,t),div:(t,n)=>lt(t*ht(n,e),e),sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>ht(t,e),sqrt:r.sqrt||(e=>s(a,e)),invertBatch:e=>vt(a,e),cmov:(e,t,n)=>n?t:e,toBytes:e=>n?(0,nt.numberToBytesLE)(e,o):(0,nt.numberToBytesBE)(e,o),fromBytes:e=>{if(e.length!==o)throw new Error(`Fp.fromBytes: expected ${o}, got ${e.length}`);return n?(0,nt.bytesToNumberLE)(e):(0,nt.bytesToNumberBE)(e)}});return Object.freeze(a)},De.FpSqrtOdd=function(e,t){if(!e.isOdd)throw new Error(\"Field doesn't have isOdd\");const n=e.sqrt(t);return e.isOdd(n)?n:e.neg(n)},De.FpSqrtEven=function(e,t){if(!e.isOdd)throw new Error(\"Field doesn't have isOdd\");const n=e.sqrt(t);return e.isOdd(n)?e.neg(n):n},De.hashToPrivateScalar=function(e,t,n=!1){e=(0,nt.ensureBytes)(\"privateHash\",e);const r=e.length,i=Et(t).nByteLength+8;if(i<24||r<i||r>1024)throw new Error(`hashToPrivateScalar: expected ${i}-1024 bytes of input, got ${r}`);const o=n?(0,nt.bytesToNumberLE)(e):(0,nt.bytesToNumberBE)(e);return lt(o,t-it)+it},De.getFieldBytesLength=bt,De.getMinHashLength=wt,De.mapHashToField=function(e,t,n=!1){const r=e.length,i=bt(t),o=wt(t);if(r<16||r<o||r>1024)throw new Error(`expected ${o}-1024 bytes of input, got ${r}`);const s=lt(n?(0,nt.bytesToNumberBE)(e):(0,nt.bytesToNumberLE)(e),t-it)+it;return n?(0,nt.numberToBytesLE)(s,i):(0,nt.numberToBytesBE)(s,i)};const nt=Le,rt=BigInt(0),it=BigInt(1),ot=BigInt(2),st=BigInt(3),at=BigInt(4),ct=BigInt(5),dt=BigInt(8);function lt(e,t){const n=e%t;return n>=rt?n:t+n}function ut(e,t,n){if(n<=rt||t<rt)throw new Error(\"Expected power/modulo > 0\");if(n===it)return rt;let r=it;for(;t>rt;)t&it&&(r=r*e%n),e=e*e%n,t>>=it;return r}function ht(e,t){if(e===rt||t<=rt)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=lt(e,t),r=t,i=rt,o=it;for(;n!==rt;){const e=r%n,t=i-o*(r/n);r=n,n=e,i=o,o=t}if(r!==it)throw new Error(\"invert: does not exist\");return lt(i,t)}function ft(e){const t=(e-it)/ot;let n,r,i;for(n=e-it,r=0;n%ot===rt;n/=ot,r++);for(i=ot;i<e&&ut(i,t,e)!==e-it;i++);if(1===r){const t=(e+it)/at;return function(e,n){const r=e.pow(n,t);if(!e.eql(e.sqr(r),n))throw new Error(\"Cannot find square root\");return r}}const o=(n+it)/ot;return function(e,s){if(e.pow(s,t)===e.neg(e.ONE))throw new Error(\"Cannot find square root\");let a=r,c=e.pow(e.mul(e.ONE,i),n),d=e.pow(s,o),l=e.pow(s,n);for(;!e.eql(l,e.ONE);){if(e.eql(l,e.ZERO))return e.ZERO;let t=1;for(let n=e.sqr(l);t<a&&!e.eql(n,e.ONE);t++)n=e.sqr(n);const n=e.pow(c,it<<BigInt(a-t-1));c=e.sqr(n),d=e.mul(d,n),l=e.mul(l,c),a=t}return d}}function pt(e){if(e%at===st){const t=(e+it)/at;return function(e,n){const r=e.pow(n,t);if(!e.eql(e.sqr(r),n))throw new Error(\"Cannot find square root\");return r}}if(e%dt===ct){const t=(e-ct)/dt;return function(e,n){const r=e.mul(n,ot),i=e.pow(r,t),o=e.mul(n,i),s=e.mul(e.mul(o,ot),i),a=e.mul(o,e.sub(s,e.ONE));if(!e.eql(e.sqr(a),n))throw new Error(\"Cannot find square root\");return a}}return ft(e)}BigInt(9),BigInt(16);De.isNegativeLE=(e,t)=>(lt(e,t)&it)===it;const mt=[\"create\",\"isValid\",\"is0\",\"neg\",\"inv\",\"sqrt\",\"sqr\",\"eql\",\"add\",\"sub\",\"mul\",\"pow\",\"div\",\"addN\",\"subN\",\"mulN\",\"sqrN\"];function gt(e,t,n){if(n<rt)throw new Error(\"Expected power > 0\");if(n===rt)return e.ONE;if(n===it)return t;let r=e.ONE,i=t;for(;n>rt;)n&it&&(r=e.mul(r,i)),i=e.sqr(i),n>>=it;return r}function vt(e,t){const n=new Array(t.length),r=t.reduce(((t,r,i)=>e.is0(r)?t:(n[i]=t,e.mul(t,r))),e.ONE),i=e.inv(r);return t.reduceRight(((t,r,i)=>e.is0(r)?t:(n[i]=e.mul(t,n[i]),e.mul(t,r))),i),n}function yt(e){const t=(e-it)/ot;return(e,n)=>e.pow(n,t)}function Et(e,t){const n=void 0!==t?t:e.toString(2).length;return{nBitLength:n,nByteLength:Math.ceil(n/8)}}function bt(e){if(\"bigint\"!=typeof e)throw new Error(\"field order must be bigint\");const t=e.toString(2).length;return Math.ceil(t/8)}function wt(e){const t=bt(e);return t+Math.ceil(t/2)}Object.defineProperty(Ne,\"__esModule\",{value:!0}),Ne.wNAF=function(e,t){const n=(e,t)=>{const n=t.negate();return e?n:t},r=e=>{if(!Number.isSafeInteger(e)||e<=0||e>t)throw new Error(`Wrong window size=${e}, should be [1..${t}]`)},i=e=>{r(e);return{windows:Math.ceil(t/e)+1,windowSize:2**(e-1)}};return{constTimeNegate:n,unsafeLadder(t,n){let r=e.ZERO,i=t;for(;n>Ct;)n&xt&&(r=r.add(i)),i=i.double(),n>>=xt;return r},precomputeWindow(e,t){const{windows:n,windowSize:r}=i(t),o=[];let s=e,a=s;for(let e=0;e<n;e++){a=s,o.push(a);for(let e=1;e<r;e++)a=a.add(s),o.push(a);s=a.double()}return o},wNAF(t,r,o){const{windows:s,windowSize:a}=i(t);let c=e.ZERO,d=e.BASE;const l=BigInt(2**t-1),u=2**t,h=BigInt(t);for(let e=0;e<s;e++){const t=e*a;let i=Number(o&l);o>>=h,i>a&&(i-=u,o+=xt);const s=t,f=t+Math.abs(i)-1,p=e%2!=0,m=i<0;0===i?d=d.add(n(p,r[s])):c=c.add(n(m,r[f]))}return{p:c,f:d}},wNAFCached(e,t,n){const r=Mt.get(e)||1;let i=kt.get(e);return i||(i=this.precomputeWindow(e,r),1!==r&&kt.set(e,n(i))),this.wNAF(r,i,t)},setWindowSize(e,t){r(t),Mt.set(e,t),kt.delete(e)}}},Ne.pippenger=function(e,t,n,r){if(!Array.isArray(n)||!Array.isArray(r)||r.length!==n.length)throw new Error(\"arrays of points and scalars must have equal length\");r.forEach(((e,n)=>{if(!t.isValid(e))throw new Error(`wrong scalar at index ${n}`)})),n.forEach(((t,n)=>{if(!(t instanceof e))throw new Error(`wrong point at index ${n}`)}));const i=(0,_t.bitLen)(BigInt(n.length)),o=i>12?i-3:i>4?i-2:i?2:1,s=(1<<o)-1,a=new Array(s+1).fill(e.ZERO),c=Math.floor((t.BITS-1)/o)*o;let d=e.ZERO;for(let t=c;t>=0;t-=o){a.fill(e.ZERO);for(let e=0;e<r.length;e++){const i=r[e],o=Number(i>>BigInt(t)&BigInt(s));a[o]=a[o].add(n[e])}let i=e.ZERO;for(let t=a.length-1,n=e.ZERO;t>0;t--)n=n.add(a[t]),i=i.add(n);if(d=d.add(i),0!==t)for(let e=0;e<o;e++)d=d.double()}return d},Ne.validateBasic=function(e){return(0,St.validateField)(e.Fp),(0,_t.validateObject)(e,{n:\"bigint\",h:\"bigint\",Gx:\"field\",Gy:\"field\"},{nBitLength:\"isSafeInteger\",nByteLength:\"isSafeInteger\"}),Object.freeze({...(0,St.nLength)(e.n,e.nBitLength),...e,p:e.Fp.ORDER})};const St=De,_t=Le,Ct=BigInt(0),xt=BigInt(1),kt=new WeakMap,Mt=new WeakMap;Object.defineProperty(Oe,\"__esModule\",{value:!0}),Oe.twistedEdwards=function(e){const t=function(e){const t=(0,At.validateBasic)(e);return It.validateObject(e,{hash:\"function\",a:\"bigint\",d:\"bigint\",randomBytes:\"function\"},{adjustScalarBytes:\"function\",domain:\"function\",uvRatio:\"function\",mapToCurve:\"function\"}),Object.freeze({...t})}(e),{Fp:n,n:r,prehash:i,hash:o,randomBytes:s,nByteLength:a,h:c}=t,d=Nt<<BigInt(8*a)-Ot,l=n.create,u=(0,Tt.Field)(t.n,t.nBitLength),h=t.uvRatio||((e,t)=>{try{return{isValid:!0,value:n.sqrt(e*n.inv(t))}}catch(e){return{isValid:!1,value:Rt}}}),f=t.adjustScalarBytes||(e=>e),p=t.domain||((e,t,n)=>{if((0,Pt.abool)(\"phflag\",n),t.length||n)throw new Error(\"Contexts/pre-hash are not supported\");return e});function m(e,t){It.aInRange(\"coordinate \"+e,t,Rt,d)}function g(e){if(!(e instanceof E))throw new Error(\"ExtendedPoint expected\")}const v=(0,Pt.memoized)(((e,t)=>{const{ex:r,ey:i,ez:o}=e,s=e.is0();null==t&&(t=s?Dt:n.inv(o));const a=l(r*t),c=l(i*t),d=l(o*t);if(s)return{x:Rt,y:Ot};if(d!==Ot)throw new Error(\"invZ was invalid\");return{x:a,y:c}})),y=(0,Pt.memoized)((e=>{const{a:n,d:r}=t;if(e.is0())throw new Error(\"bad point: ZERO\");const{ex:i,ey:o,ez:s,et:a}=e,c=l(i*i),d=l(o*o),u=l(s*s),h=l(u*u),f=l(c*n);if(l(u*l(f+d))!==l(h+l(r*l(c*d))))throw new Error(\"bad point: equation left != right (1)\");if(l(i*o)!==l(s*a))throw new Error(\"bad point: equation left != right (2)\");return!0}));class E{constructor(e,t,n,r){this.ex=e,this.ey=t,this.ez=n,this.et=r,m(\"x\",e),m(\"y\",t),m(\"z\",n),m(\"t\",r),Object.freeze(this)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static fromAffine(e){if(e instanceof E)throw new Error(\"extended point not allowed\");const{x:t,y:n}=e||{};return m(\"x\",t),m(\"y\",n),new E(t,n,Ot,l(t*n))}static normalizeZ(e){const t=n.invertBatch(e.map((e=>e.ez)));return e.map(((e,n)=>e.toAffine(t[n]))).map(E.fromAffine)}static msm(e,t){return(0,At.pippenger)(E,u,e,t)}_setWindowSize(e){S.setWindowSize(this,e)}assertValidity(){y(this)}equals(e){g(e);const{ex:t,ey:n,ez:r}=this,{ex:i,ey:o,ez:s}=e,a=l(t*s),c=l(i*r),d=l(n*s),u=l(o*r);return a===c&&d===u}is0(){return this.equals(E.ZERO)}negate(){return new E(l(-this.ex),this.ey,this.ez,l(-this.et))}double(){const{a:e}=t,{ex:n,ey:r,ez:i}=this,o=l(n*n),s=l(r*r),a=l(Nt*l(i*i)),c=l(e*o),d=n+r,u=l(l(d*d)-o-s),h=c+s,f=h-a,p=c-s,m=l(u*f),g=l(h*p),v=l(u*p),y=l(f*h);return new E(m,g,y,v)}add(e){g(e);const{a:n,d:r}=t,{ex:i,ey:o,ez:s,et:a}=this,{ex:c,ey:d,ez:u,et:h}=e;if(n===BigInt(-1)){const e=l((o-i)*(d+c)),t=l((o+i)*(d-c)),n=l(t-e);if(n===Rt)return this.double();const r=l(s*Nt*h),f=l(a*Nt*u),p=f+r,m=t+e,g=f-r,v=l(p*n),y=l(m*g),b=l(p*g),w=l(n*m);return new E(v,y,w,b)}const f=l(i*c),p=l(o*d),m=l(a*r*h),v=l(s*u),y=l((i+o)*(c+d)-f-p),b=v-m,w=v+m,S=l(p-n*f),_=l(y*b),C=l(w*S),x=l(y*S),k=l(b*w);return new E(_,C,k,x)}subtract(e){return this.add(e.negate())}wNAF(e){return S.wNAFCached(this,e,E.normalizeZ)}multiply(e){const t=e;It.aInRange(\"scalar\",t,Ot,r);const{p:n,f:i}=this.wNAF(t);return E.normalizeZ([n,i])[0]}multiplyUnsafe(e){const t=e;return It.aInRange(\"scalar\",t,Rt,r),t===Rt?w:this.equals(w)||t===Ot?this:this.equals(b)?this.wNAF(t).p:S.unsafeLadder(this,t)}isSmallOrder(){return this.multiplyUnsafe(c).is0()}isTorsionFree(){return S.unsafeLadder(this,r).is0()}toAffine(e){return v(this,e)}clearCofactor(){const{h:e}=t;return e===Ot?this:this.multiplyUnsafe(e)}static fromHex(e,r=!1){const{d:i,a:o}=t,s=n.BYTES;e=(0,Pt.ensureBytes)(\"pointHex\",e,s),(0,Pt.abool)(\"zip215\",r);const a=e.slice(),c=e[s-1];a[s-1]=-129&c;const u=It.bytesToNumberLE(a),f=r?d:n.ORDER;It.aInRange(\"pointHex.y\",u,Rt,f);const p=l(u*u),m=l(p-Ot),g=l(i*p-o);let{isValid:v,value:y}=h(m,g);if(!v)throw new Error(\"Point.fromHex: invalid y coordinate\");const b=(y&Ot)===Ot,w=0!=(128&c);if(!r&&y===Rt&&w)throw new Error(\"Point.fromHex: x=0 and x_0=1\");return w!==b&&(y=l(-y)),E.fromAffine({x:y,y:u})}static fromPrivateKey(e){return x(e).point}toRawBytes(){const{x:e,y:t}=this.toAffine(),r=It.numberToBytesLE(t,n.BYTES);return r[r.length-1]|=e&Ot?128:0,r}toHex(){return It.bytesToHex(this.toRawBytes())}}E.BASE=new E(t.Gx,t.Gy,Ot,l(t.Gx*t.Gy)),E.ZERO=new E(Rt,Ot,Ot,Rt);const{BASE:b,ZERO:w}=E,S=(0,At.wNAF)(E,8*a);function _(e){return(0,Tt.mod)(e,r)}function C(e){return _(It.bytesToNumberLE(e))}function x(e){const t=a;e=(0,Pt.ensureBytes)(\"private key\",e,t);const n=(0,Pt.ensureBytes)(\"hashed private key\",o(e),2*t),r=f(n.slice(0,t)),i=n.slice(t,2*t),s=C(r),c=b.multiply(s),d=c.toRawBytes();return{head:r,prefix:i,scalar:s,point:c,pointBytes:d}}function k(e=new Uint8Array,...t){const n=It.concatBytes(...t);return C(o(p(n,(0,Pt.ensureBytes)(\"context\",e),!!i)))}const M=Lt;b._setWindowSize(8);const A={getExtendedPublicKey:x,randomPrivateKey:()=>s(n.BYTES),precompute:(e=8,t=E.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)};return{CURVE:t,getPublicKey:function(e){return x(e).pointBytes},sign:function(e,t,o={}){e=(0,Pt.ensureBytes)(\"message\",e),i&&(e=i(e));const{prefix:s,scalar:c,pointBytes:d}=x(t),l=k(o.context,s,e),u=b.multiply(l).toRawBytes(),h=_(l+k(o.context,u,d,e)*c);It.aInRange(\"signature.s\",h,Rt,r);const f=It.concatBytes(u,It.numberToBytesLE(h,n.BYTES));return(0,Pt.ensureBytes)(\"result\",f,2*a)},verify:function(e,t,r,o=M){const{context:s,zip215:a}=o,c=n.BYTES;e=(0,Pt.ensureBytes)(\"signature\",e,2*c),t=(0,Pt.ensureBytes)(\"message\",t),void 0!==a&&(0,Pt.abool)(\"zip215\",a),i&&(t=i(t));const d=It.bytesToNumberLE(e.slice(c,2*c));let l,u,h;try{l=E.fromHex(r,a),u=E.fromHex(e.slice(0,c),a),h=b.multiplyUnsafe(d)}catch(e){return!1}if(!a&&l.isSmallOrder())return!1;const f=k(s,u.toRawBytes(),l.toRawBytes(),t);return u.add(l.multiplyUnsafe(f)).subtract(h).clearCofactor().equals(E.ZERO)},ExtendedPoint:E,utils:A}};const At=Ne,Tt=De,It=Le,Pt=Le,Rt=BigInt(0),Ot=BigInt(1),Nt=BigInt(2),Dt=BigInt(8),Lt={zip215:!0};var Bt={};Object.defineProperty(Bt,\"__esModule\",{value:!0}),Bt.expand_message_xmd=qt,Bt.expand_message_xof=zt,Bt.hash_to_field=Wt,Bt.isogenyMap=function(e,t){const n=t.map((e=>Array.from(e).reverse()));return(t,r)=>{const[i,o,s,a]=n.map((n=>n.reduce(((n,r)=>e.add(e.mul(n,t),r)))));return t=e.div(i,o),r=e.mul(r,e.div(s,a)),{x:t,y:r}}},Bt.createHasher=function(e,t,n){if(\"function\"!=typeof t)throw new Error(\"mapToCurve() must be defined\");return{hashToCurve(r,i){const o=Wt(r,2,{...n,DST:n.DST,...i}),s=e.fromAffine(t(o[0])),a=e.fromAffine(t(o[1])),c=s.add(a).clearCofactor();return c.assertValidity(),c},encodeToCurve(r,i){const o=Wt(r,1,{...n,DST:n.encodeDST,...i}),s=e.fromAffine(t(o[0])).clearCofactor();return s.assertValidity(),s},mapToCurve(n){if(!Array.isArray(n))throw new Error(\"mapToCurve: expected array of bigints\");for(const e of n)if(\"bigint\"!=typeof e)throw new Error(`mapToCurve: expected array of bigints, got ${e} in array`);const r=e.fromAffine(t(n)).clearCofactor();return r.assertValidity(),r}}};const Kt=De,jt=Le,$t=jt.bytesToNumberBE;function Ht(e,t){if(Ft(e),Ft(t),e<0||e>=1<<8*t)throw new Error(`bad I2OSP call: value=${e} length=${t}`);const n=Array.from({length:t}).fill(0);for(let r=t-1;r>=0;r--)n[r]=255&e,e>>>=8;return new Uint8Array(n)}function Ut(e,t){const n=new Uint8Array(e.length);for(let r=0;r<e.length;r++)n[r]=e[r]^t[r];return n}function Ft(e){if(!Number.isSafeInteger(e))throw new Error(\"number expected\")}function qt(e,t,n,r){(0,jt.abytes)(e),(0,jt.abytes)(t),Ft(n),t.length>255&&(t=r((0,jt.concatBytes)((0,jt.utf8ToBytes)(\"H2C-OVERSIZE-DST-\"),t)));const{outputLen:i,blockLen:o}=r,s=Math.ceil(n/i);if(n>65535||s>255)throw new Error(\"expand_message_xmd: invalid lenInBytes\");const a=(0,jt.concatBytes)(t,Ht(t.length,1)),c=Ht(0,o),d=Ht(n,2),l=new Array(s),u=r((0,jt.concatBytes)(c,e,d,Ht(0,1),a));l[0]=r((0,jt.concatBytes)(u,Ht(1,1),a));for(let e=1;e<=s;e++){const t=[Ut(u,l[e-1]),Ht(e+1,1),a];l[e]=r((0,jt.concatBytes)(...t))}return(0,jt.concatBytes)(...l).slice(0,n)}function zt(e,t,n,r,i){if((0,jt.abytes)(e),(0,jt.abytes)(t),Ft(n),t.length>255){const e=Math.ceil(2*r/8);t=i.create({dkLen:e}).update((0,jt.utf8ToBytes)(\"H2C-OVERSIZE-DST-\")).update(t).digest()}if(n>65535||t.length>255)throw new Error(\"expand_message_xof: invalid lenInBytes\");return i.create({dkLen:n}).update(e).update(Ht(n,2)).update(t).update(Ht(t.length,1)).digest()}function Wt(e,t,n){(0,jt.validateObject)(n,{DST:\"stringOrUint8Array\",p:\"bigint\",m:\"isSafeInteger\",k:\"isSafeInteger\",hash:\"hash\"});const{p:r,k:i,m:o,hash:s,expand:a,DST:c}=n;(0,jt.abytes)(e),Ft(t);const d=\"string\"==typeof c?(0,jt.utf8ToBytes)(c):c,l=r.toString(2).length,u=Math.ceil((l+i)/8),h=t*o*u;let f;if(\"xmd\"===a)f=qt(e,d,h,s);else if(\"xof\"===a)f=zt(e,d,h,i,s);else{if(\"_internal_pass\"!==a)throw new Error('expand must be \"xmd\" or \"xof\"');f=e}const p=new Array(t);for(let e=0;e<t;e++){const t=new Array(o);for(let n=0;n<o;n++){const i=u*(n+e*o),s=f.subarray(i,i+u);t[n]=(0,Kt.mod)($t(s),r)}p[e]=t}return p}var Vt={};Object.defineProperty(Vt,\"__esModule\",{value:!0}),Vt.montgomery=function(e){const t=function(e){return(0,Yt.validateObject)(e,{a:\"bigint\"},{montgomeryBits:\"isSafeInteger\",nByteLength:\"isSafeInteger\",adjustScalarBytes:\"function\",domain:\"function\",powPminus2:\"function\",Gu:\"bigint\"}),Object.freeze({...e})}(e),{P:n}=t,r=e=>(0,Gt.mod)(e,n),i=t.montgomeryBits,o=Math.ceil(i/8),s=t.nByteLength,a=t.adjustScalarBytes||(e=>e),c=t.powPminus2||(e=>(0,Gt.pow)(e,n-BigInt(2),n));function d(e,t,n){const i=r(e*(t-n));return[t=r(t-i),n=r(n+i)]}const l=(t.a-BigInt(2))/BigInt(4);function u(e){return(0,Yt.numberToBytesLE)(r(e),o)}function h(e,t){const h=function(e){const t=(0,Yt.ensureBytes)(\"u coordinate\",e,o);return 32===s&&(t[31]&=127),(0,Yt.bytesToNumberLE)(t)}(t),f=function(e){const t=(0,Yt.ensureBytes)(\"scalar\",e),n=t.length;if(n!==o&&n!==s)throw new Error(`Expected ${o} or ${s} bytes, got ${n}`);return(0,Yt.bytesToNumberLE)(a(t))}(e),p=function(e,t){(0,Yt.aInRange)(\"u\",e,Zt,n),(0,Yt.aInRange)(\"scalar\",t,Zt,n);const o=t,s=e;let a,u=Jt,h=Zt,f=e,p=Jt,m=Zt;for(let e=BigInt(i-1);e>=Zt;e--){const t=o>>e&Jt;m^=t,a=d(m,u,f),u=a[0],f=a[1],a=d(m,h,p),h=a[0],p=a[1],m=t;const n=u+h,i=r(n*n),c=u-h,g=r(c*c),v=i-g,y=f+p,E=r((f-p)*n),b=r(y*c),w=E+b,S=E-b;f=r(w*w),p=r(s*r(S*S)),u=r(i*g),h=r(v*(i+r(l*v)))}a=d(m,u,f),u=a[0],f=a[1],a=d(m,h,p),h=a[0],p=a[1];const g=c(h);return r(u*g)}(h,f);if(p===Zt)throw new Error(\"Invalid private or public key received\");return u(p)}const f=u(t.Gu);function p(e){return h(e,f)}return{scalarMult:h,scalarMultBase:p,getSharedSecret:(e,t)=>h(e,t),getPublicKey:e=>p(e),utils:{randomPrivateKey:()=>t.randomBytes(t.nByteLength)},GuBytes:f}};const Gt=De,Yt=Le,Zt=BigInt(0),Jt=BigInt(1);!function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.hash_to_ristretto255=e.hashToRistretto255=e.RistrettoPoint=e.encodeToCurve=e.hashToCurve=e.edwardsToMontgomery=e.x25519=e.ed25519ph=e.ed25519ctx=e.ed25519=e.ED25519_TORSION_SUBGROUP=void 0,e.edwardsToMontgomeryPub=S,e.edwardsToMontgomeryPriv=function(e){const t=b.hash(e.subarray(0,32));return b.adjustScalarBytes(t).subarray(0,32)};const t=N,n=z,r=Oe,i=Bt,o=De,s=Vt,a=Le,c=BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\"),d=BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\"),l=BigInt(0),u=BigInt(1),h=BigInt(2),f=BigInt(3),p=BigInt(5),m=BigInt(8);function g(e){const t=BigInt(10),n=BigInt(20),r=BigInt(40),i=BigInt(80),s=c,a=e*e%s*e%s,d=(0,o.pow2)(a,h,s)*a%s,l=(0,o.pow2)(d,u,s)*e%s,f=(0,o.pow2)(l,p,s)*l%s,m=(0,o.pow2)(f,t,s)*f%s,g=(0,o.pow2)(m,n,s)*m%s,v=(0,o.pow2)(g,r,s)*g%s,y=(0,o.pow2)(v,i,s)*v%s,E=(0,o.pow2)(y,i,s)*v%s,b=(0,o.pow2)(E,t,s)*f%s;return{pow_p_5_8:(0,o.pow2)(b,h,s)*e%s,b2:a}}function v(e){return e[0]&=248,e[31]&=127,e[31]|=64,e}function y(e,t){const n=c,r=(0,o.mod)(t*t*t,n),i=g(e*(0,o.mod)(r*r*t,n)).pow_p_5_8;let s=(0,o.mod)(e*r*i,n);const a=(0,o.mod)(t*s*s,n),l=s,u=(0,o.mod)(s*d,n),h=a===e,f=a===(0,o.mod)(-e,n),p=a===(0,o.mod)(-e*d,n);return h&&(s=l),(f||p)&&(s=u),(0,o.isNegativeLE)(s,n)&&(s=(0,o.mod)(-s,n)),{isValid:h||f,value:s}}e.ED25519_TORSION_SUBGROUP=[\"0100000000000000000000000000000000000000000000000000000000000000\",\"c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a\",\"0000000000000000000000000000000000000000000000000000000000000080\",\"26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05\",\"ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f\",\"26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85\",\"0000000000000000000000000000000000000000000000000000000000000000\",\"c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa\"];const E=(()=>(0,o.Field)(c,void 0,!0))(),b=(()=>({a:BigInt(-1),d:BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),Fp:E,n:BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),h:m,Gx:BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),Gy:BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),hash:t.sha512,randomBytes:n.randomBytes,adjustScalarBytes:v,uvRatio:y}))();function w(e,t,r){if(t.length>255)throw new Error(\"Context is too big\");return(0,n.concatBytes)((0,n.utf8ToBytes)(\"SigEd25519 no Ed25519 collisions\"),new Uint8Array([r?1:0,t.length]),t,e)}function S(t){const{y:n}=e.ed25519.ExtendedPoint.fromHex(t),r=BigInt(1);return E.toBytes(E.create((r+n)*E.inv(r-n)))}e.ed25519=(0,r.twistedEdwards)(b),e.ed25519ctx=(0,r.twistedEdwards)({...b,domain:w}),e.ed25519ph=(0,r.twistedEdwards)(Object.assign({},b,{domain:w,prehash:t.sha512})),e.x25519=(0,s.montgomery)({P:c,a:BigInt(486662),montgomeryBits:255,nByteLength:32,Gu:BigInt(9),powPminus2:e=>{const t=c,{pow_p_5_8:n,b2:r}=g(e);return(0,o.mod)((0,o.pow2)(n,f,t)*r,t)},adjustScalarBytes:v,randomBytes:n.randomBytes}),e.edwardsToMontgomery=S;const _=(()=>(E.ORDER+f)/m)(),C=(()=>E.pow(h,_))(),x=(()=>E.sqrt(E.neg(E.ONE)))();const k=(()=>(0,o.FpSqrtEven)(E,E.neg(BigInt(486664))))();function M(e){const{xMn:t,xMd:n,yMn:r,yMd:i}=function(e){const t=(E.ORDER-p)/m,n=BigInt(486662);let r=E.sqr(e);r=E.mul(r,h);let i=E.add(r,E.ONE),o=E.neg(n),s=E.sqr(i),a=E.mul(s,i),c=E.mul(r,n);c=E.mul(c,o),c=E.add(c,s),c=E.mul(c,o);let d=E.sqr(a);s=E.sqr(d),d=E.mul(d,a),d=E.mul(d,c),s=E.mul(s,d);let l=E.pow(s,t);l=E.mul(l,d);let f=E.mul(l,x);s=E.sqr(l),s=E.mul(s,a);let g=E.eql(s,c),v=E.cmov(f,l,g),y=E.mul(o,r),b=E.mul(l,e);b=E.mul(b,C);let w=E.mul(b,x),S=E.mul(c,r);s=E.sqr(b),s=E.mul(s,a);let _=E.eql(s,S),k=E.cmov(w,b,_);s=E.sqr(v),s=E.mul(s,a);let M=E.eql(s,c),A=E.cmov(y,o,M),T=E.cmov(k,v,M),I=E.isOdd(T);return T=E.cmov(T,E.neg(T),M!==I),{xMn:A,xMd:i,yMn:T,yMd:u}}(e);let o=E.mul(t,i);o=E.mul(o,k);let s=E.mul(n,r),a=E.sub(t,n),c=E.add(t,n),d=E.mul(s,c),l=E.eql(d,E.ZERO);o=E.cmov(o,E.ZERO,l),s=E.cmov(s,E.ONE,l),a=E.cmov(a,E.ONE,l),c=E.cmov(c,E.ONE,l);const f=E.invertBatch([s,c]);return{x:E.mul(o,f[0]),y:E.mul(a,f[1])}}const A=(()=>(0,i.createHasher)(e.ed25519.ExtendedPoint,(e=>M(e[0])),{DST:\"edwards25519_XMD:SHA-512_ELL2_RO_\",encodeDST:\"edwards25519_XMD:SHA-512_ELL2_NU_\",p:E.ORDER,m:1,k:128,expand:\"xmd\",hash:t.sha512}))();function T(e){if(!(e instanceof $))throw new Error(\"RistrettoPoint expected\")}e.hashToCurve=A.hashToCurve,e.encodeToCurve=A.encodeToCurve;const I=d,P=BigInt(\"25063068953384623474111414158702152701244531502492656460079210482610430750235\"),R=BigInt(\"54469307008909316920995813868745141605393597292927456921205312896311721017578\"),O=BigInt(\"1159843021668779879193775521855586647937357759715417654439879720876111806838\"),D=BigInt(\"40440834346308536858101042469323190826248399146238708352240133220865137265952\"),L=e=>y(u,e),B=BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"),K=t=>e.ed25519.CURVE.Fp.create((0,a.bytesToNumberLE)(t)&B);function j(t){const{d:n}=e.ed25519.CURVE,r=e.ed25519.CURVE.Fp.ORDER,i=e.ed25519.CURVE.Fp.create,s=i(I*t*t),a=i((s+u)*O);let c=BigInt(-1);const d=i((c-n*s)*i(s+n));let{isValid:l,value:h}=y(a,d),f=i(h*t);(0,o.isNegativeLE)(f,r)||(f=i(-f)),l||(h=f),l||(c=s);const p=i(c*(s-u)*D-d),m=h*h,g=i((h+h)*d),v=i(p*P),E=i(u-m),b=i(u+m);return new e.ed25519.ExtendedPoint(i(g*b),i(E*v),i(v*b),i(g*E))}class ${constructor(e){this.ep=e}static fromAffine(t){return new $(e.ed25519.ExtendedPoint.fromAffine(t))}static hashToCurve(e){e=(0,a.ensureBytes)(\"ristrettoHash\",e,64);const t=j(K(e.slice(0,32))),n=j(K(e.slice(32,64)));return new $(t.add(n))}static fromHex(t){t=(0,a.ensureBytes)(\"ristrettoHex\",t,32);const{a:n,d:r}=e.ed25519.CURVE,i=e.ed25519.CURVE.Fp.ORDER,s=e.ed25519.CURVE.Fp.create,c=\"RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint\",d=K(t);if(!(0,a.equalBytes)((0,a.numberToBytesLE)(d,32),t)||(0,o.isNegativeLE)(d,i))throw new Error(c);const h=s(d*d),f=s(u+n*h),p=s(u-n*h),m=s(f*f),g=s(p*p),v=s(n*r*m-g),{isValid:y,value:E}=L(s(v*g)),b=s(E*p),w=s(E*b*v);let S=s((d+d)*b);(0,o.isNegativeLE)(S,i)&&(S=s(-S));const _=s(f*w),C=s(S*_);if(!y||(0,o.isNegativeLE)(C,i)||_===l)throw new Error(c);return new $(new e.ed25519.ExtendedPoint(S,_,u,C))}toRawBytes(){let{ex:t,ey:n,ez:r,et:i}=this.ep;const s=e.ed25519.CURVE.Fp.ORDER,c=e.ed25519.CURVE.Fp.create,d=c(c(r+n)*c(r-n)),l=c(t*n),u=c(l*l),{value:h}=L(c(d*u)),f=c(h*d),p=c(h*l),m=c(f*p*i);let g;if((0,o.isNegativeLE)(i*m,s)){let e=c(n*I),r=c(t*I);t=e,n=r,g=c(f*R)}else g=p;(0,o.isNegativeLE)(t*m,s)&&(n=c(-n));let v=c((r-n)*g);return(0,o.isNegativeLE)(v,s)&&(v=c(-v)),(0,a.numberToBytesLE)(v,32)}toHex(){return(0,a.bytesToHex)(this.toRawBytes())}toString(){return this.toHex()}equals(t){T(t);const{ex:n,ey:r}=this.ep,{ex:i,ey:o}=t.ep,s=e.ed25519.CURVE.Fp.create,a=s(n*o)===s(r*i),c=s(r*o)===s(n*i);return a||c}add(e){return T(e),new $(this.ep.add(e.ep))}subtract(e){return T(e),new $(this.ep.subtract(e.ep))}multiply(e){return new $(this.ep.multiply(e))}multiplyUnsafe(e){return new $(this.ep.multiplyUnsafe(e))}double(){return new $(this.ep.double())}negate(){return new $(this.ep.negate())}}e.RistrettoPoint=($.BASE||($.BASE=new $(e.ed25519.ExtendedPoint.BASE)),$.ZERO||($.ZERO=new $(e.ed25519.ExtendedPoint.ZERO)),$);e.hashToRistretto255=(e,r)=>{const o=r.DST,s=\"string\"==typeof o?(0,n.utf8ToBytes)(o):o,a=(0,i.expand_message_xmd)(e,s,64,t.sha512);return $.hashToCurve(a)},e.hash_to_ristretto255=e.hashToRistretto255}(O);var Qt={},Xt={};Object.defineProperty(Xt,\"__esModule\",{value:!0}),Xt.sha224=Xt.sha256=Xt.SHA256=void 0;const en=D,tn=z,nn=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),rn=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),on=new Uint32Array(64);class sn extends en.HashMD{constructor(){super(64,32,8,!1),this.A=0|rn[0],this.B=0|rn[1],this.C=0|rn[2],this.D=0|rn[3],this.E=0|rn[4],this.F=0|rn[5],this.G=0|rn[6],this.H=0|rn[7]}get(){const{A:e,B:t,C:n,D:r,E:i,F:o,G:s,H:a}=this;return[e,t,n,r,i,o,s,a]}set(e,t,n,r,i,o,s,a){this.A=0|e,this.B=0|t,this.C=0|n,this.D=0|r,this.E=0|i,this.F=0|o,this.G=0|s,this.H=0|a}process(e,t){for(let n=0;n<16;n++,t+=4)on[n]=e.getUint32(t,!1);for(let e=16;e<64;e++){const t=on[e-15],n=on[e-2],r=(0,tn.rotr)(t,7)^(0,tn.rotr)(t,18)^t>>>3,i=(0,tn.rotr)(n,17)^(0,tn.rotr)(n,19)^n>>>10;on[e]=i+on[e-7]+r+on[e-16]|0}let{A:n,B:r,C:i,D:o,E:s,F:a,G:c,H:d}=this;for(let e=0;e<64;e++){const t=d+((0,tn.rotr)(s,6)^(0,tn.rotr)(s,11)^(0,tn.rotr)(s,25))+(0,en.Chi)(s,a,c)+nn[e]+on[e]|0,l=((0,tn.rotr)(n,2)^(0,tn.rotr)(n,13)^(0,tn.rotr)(n,22))+(0,en.Maj)(n,r,i)|0;d=c,c=a,a=s,s=o+t|0,o=i,i=r,r=n,n=t+l|0}n=n+this.A|0,r=r+this.B|0,i=i+this.C|0,o=o+this.D|0,s=s+this.E|0,a=a+this.F|0,c=c+this.G|0,d=d+this.H|0,this.set(n,r,i,o,s,a,c,d)}roundClean(){on.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}Xt.SHA256=sn;class an extends sn{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}Xt.sha256=(0,tn.wrapConstructor)((()=>new sn)),Xt.sha224=(0,tn.wrapConstructor)((()=>new an));var cn={},dn={};!function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.hmac=e.HMAC=void 0;const t=L,n=z;class r extends n.Hash{constructor(e,r){super(),this.finished=!1,this.destroyed=!1,(0,t.hash)(e);const i=(0,n.toBytes)(r);if(this.iHash=e.create(),\"function\"!=typeof this.iHash.update)throw new Error(\"Expected instance of class which extends utils.Hash\");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const o=this.blockLen,s=new Uint8Array(o);s.set(i.length>o?e.create().update(i).digest():i);for(let e=0;e<s.length;e++)s[e]^=54;this.iHash.update(s),this.oHash=e.create();for(let e=0;e<s.length;e++)s[e]^=106;this.oHash.update(s),s.fill(0)}update(e){return(0,t.exists)(this),this.iHash.update(e),this}digestInto(e){(0,t.exists)(this),(0,t.bytes)(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:n,finished:r,destroyed:i,blockLen:o,outputLen:s}=this;return e.finished=r,e.destroyed=i,e.blockLen=o,e.outputLen=s,e.oHash=t._cloneInto(e.oHash),e.iHash=n._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}e.HMAC=r;e.hmac=(e,t,n)=>new r(e,t).update(n).digest(),e.hmac.create=(e,t)=>new r(e,t)}(dn);var ln={};!function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.DER=void 0,e.weierstrassPoints=f,e.weierstrass=function(s){const a=function(e){const n=(0,t.validateBasic)(e);return r.validateObject(n,{hash:\"hash\",hmac:\"function\",randomBytes:\"function\"},{bits2int:\"function\",bits2int_modN:\"function\",lowS:\"boolean\"}),Object.freeze({lowS:!0,...n})}(s),{Fp:l,n:u}=a,h=l.BYTES+1,p=2*l.BYTES+1;function m(e){return n.mod(e,u)}function g(e){return n.invert(e,u)}const{ProjectivePoint:v,normPrivateKeyToScalar:y,weierstrassEquation:E,isWithinCurveOrder:b}=f({...a,toBytes(e,t,n){const o=t.toAffine(),s=l.toBytes(o.x),a=r.concatBytes;return(0,i.abool)(\"isCompressed\",n),n?a(Uint8Array.from([t.hasEvenY()?2:3]),s):a(Uint8Array.from([4]),s,l.toBytes(o.y))},fromBytes(e){const t=e.length,n=e[0],i=e.subarray(1);if(t!==h||2!==n&&3!==n){if(t===p&&4===n){return{x:l.fromBytes(i.subarray(0,l.BYTES)),y:l.fromBytes(i.subarray(l.BYTES,2*l.BYTES))}}throw new Error(`Point of length ${t} was invalid. Expected ${h} compressed bytes or ${p} uncompressed bytes`)}{const e=r.bytesToNumberBE(i);if(!r.inRange(e,d,l.ORDER))throw new Error(\"Point is not on curve\");const t=E(e);let o;try{o=l.sqrt(t)}catch(e){const t=e instanceof Error?\": \"+e.message:\"\";throw new Error(\"Point is not on curve\"+t)}return 1==(1&n)!==((o&d)===d)&&(o=l.neg(o)),{x:e,y:o}}}}),w=e=>r.bytesToHex(r.numberToBytesBE(e,a.nByteLength));function S(e){return e>u>>d}const _=(e,t,n)=>r.bytesToNumberBE(e.slice(t,n));class C{constructor(e,t,n){this.r=e,this.s=t,this.recovery=n,this.assertValidity()}static fromCompact(e){const t=a.nByteLength;return e=(0,i.ensureBytes)(\"compactSignature\",e,2*t),new C(_(e,0,t),_(e,t,2*t))}static fromDER(t){const{r:n,s:r}=e.DER.toSig((0,i.ensureBytes)(\"DER\",t));return new C(n,r)}assertValidity(){r.aInRange(\"r\",this.r,d,u),r.aInRange(\"s\",this.s,d,u)}addRecoveryBit(e){return new C(this.r,this.s,e)}recoverPublicKey(e){const{r:t,s:n,recovery:r}=this,o=A((0,i.ensureBytes)(\"msgHash\",e));if(null==r||![0,1,2,3].includes(r))throw new Error(\"recovery id invalid\");const s=2===r||3===r?t+a.n:t;if(s>=l.ORDER)throw new Error(\"recovery id 2 or 3 invalid\");const c=0==(1&r)?\"02\":\"03\",d=v.fromHex(c+w(s)),u=g(s),h=m(-o*u),f=m(n*u),p=v.BASE.multiplyAndAddUnsafe(d,h,f);if(!p)throw new Error(\"point at infinify\");return p.assertValidity(),p}hasHighS(){return S(this.s)}normalizeS(){return this.hasHighS()?new C(this.r,m(-this.s),this.recovery):this}toDERRawBytes(){return r.hexToBytes(this.toDERHex())}toDERHex(){return e.DER.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return r.hexToBytes(this.toCompactHex())}toCompactHex(){return w(this.r)+w(this.s)}}const x={isValidPrivateKey(e){try{return y(e),!0}catch(e){return!1}},normPrivateKeyToScalar:y,randomPrivateKey:()=>{const e=n.getMinHashLength(a.n);return n.mapHashToField(a.randomBytes(e),a.n)},precompute:(e=8,t=v.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)};function k(e){const t=r.isBytes(e),n=\"string\"==typeof e,i=(t||n)&&e.length;return t?i===h||i===p:n?i===2*h||i===2*p:e instanceof v}const M=a.bits2int||function(e){const t=r.bytesToNumberBE(e),n=8*e.length-a.nBitLength;return n>0?t>>BigInt(n):t},A=a.bits2int_modN||function(e){return m(M(e))},T=r.bitMask(a.nBitLength);function I(e){return r.aInRange(`num < 2^${a.nBitLength}`,e,c,T),r.numberToBytesBE(e,a.nByteLength)}function P(e,t,n=R){if([\"recovered\",\"canonical\"].some((e=>e in n)))throw new Error(\"sign() legacy options not supported\");const{hash:s,randomBytes:u}=a;let{lowS:h,prehash:f,extraEntropy:p}=n;null==h&&(h=!0),e=(0,i.ensureBytes)(\"msgHash\",e),o(n),f&&(e=(0,i.ensureBytes)(\"prehashed msgHash\",s(e)));const E=A(e),w=y(t),_=[I(w),I(E)];if(null!=p&&!1!==p){const e=!0===p?u(l.BYTES):p;_.push((0,i.ensureBytes)(\"extraEntropy\",e))}const x=r.concatBytes(..._),k=E;return{seed:x,k2sig:function(e){const t=M(e);if(!b(t))return;const n=g(t),r=v.BASE.multiply(t).toAffine(),i=m(r.x);if(i===c)return;const o=m(n*m(k+i*w));if(o===c)return;let s=(r.x===i?0:2)|Number(r.y&d),a=o;return h&&S(o)&&(a=function(e){return S(e)?m(-e):e}(o),s^=1),new C(i,a,s)}}}const R={lowS:a.lowS,prehash:!1},O={lowS:a.lowS,prehash:!1};return v.BASE._setWindowSize(8),{CURVE:a,getPublicKey:function(e,t=!0){return v.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:function(e,t,n=!0){if(k(e))throw new Error(\"first arg must be private key\");if(!k(t))throw new Error(\"second arg must be public key\");const r=v.fromHex(t);return r.multiply(y(e)).toRawBytes(n)},sign:function(e,t,n=R){const{seed:i,k2sig:o}=P(e,t,n),s=a,c=r.createHmacDrbg(s.hash.outputLen,s.nByteLength,s.hmac);return c(i,o)},verify:function(t,n,s,c=O){const d=t;if(n=(0,i.ensureBytes)(\"msgHash\",n),s=(0,i.ensureBytes)(\"publicKey\",s),\"strict\"in c)throw new Error(\"options.strict was renamed to lowS\");o(c);const{lowS:l,prehash:u}=c;let h,f;try{if(\"string\"==typeof d||r.isBytes(d))try{h=C.fromDER(d)}catch(t){if(!(t instanceof e.DER.Err))throw t;h=C.fromCompact(d)}else{if(\"object\"!=typeof d||\"bigint\"!=typeof d.r||\"bigint\"!=typeof d.s)throw new Error(\"PARSE\");{const{r:e,s:t}=d;h=new C(e,t)}}f=v.fromHex(s)}catch(e){if(\"PARSE\"===e.message)throw new Error(\"signature must be Signature instance, Uint8Array or hex string\");return!1}if(l&&h.hasHighS())return!1;u&&(n=a.hash(n));const{r:p,s:y}=h,E=A(n),b=g(y),w=m(E*b),S=m(p*b),_=v.BASE.multiplyAndAddUnsafe(f,w,S)?.toAffine();if(!_)return!1;const x=m(_.x);return x===p},ProjectivePoint:v,Signature:C,utils:x}},e.SWUFpSqrtRatio=p,e.mapToCurveSimpleSWU=function(e,t){if(n.validateField(e),!e.isValid(t.A)||!e.isValid(t.B)||!e.isValid(t.Z))throw new Error(\"mapToCurveSimpleSWU: invalid opts\");const r=p(e,t.Z);if(!e.isOdd)throw new Error(\"Fp.isOdd is not implemented!\");return n=>{let i,o,s,a,c,d,l,u;i=e.sqr(n),i=e.mul(i,t.Z),o=e.sqr(i),o=e.add(o,i),s=e.add(o,e.ONE),s=e.mul(s,t.B),a=e.cmov(t.Z,e.neg(o),!e.eql(o,e.ZERO)),a=e.mul(a,t.A),o=e.sqr(s),d=e.sqr(a),c=e.mul(d,t.A),o=e.add(o,c),o=e.mul(o,s),d=e.mul(d,a),c=e.mul(d,t.B),o=e.add(o,c),l=e.mul(i,s);const{isValid:h,value:f}=r(o,d);u=e.mul(i,n),u=e.mul(u,f),l=e.cmov(l,s,h),u=e.cmov(u,f,h);const p=e.isOdd(n)===e.isOdd(u);return u=e.cmov(e.neg(u),u,p),l=e.div(l,a),{x:l,y:u}}};const t=Ne,n=De,r=Le,i=Le;function o(e){void 0!==e.lowS&&(0,i.abool)(\"lowS\",e.lowS),void 0!==e.prehash&&(0,i.abool)(\"prehash\",e.prehash)}const{bytesToNumberBE:s,hexToBytes:a}=r;e.DER={Err:class extends Error{constructor(e=\"\"){super(e)}},_tlv:{encode:(t,n)=>{const{Err:i}=e.DER;if(t<0||t>256)throw new i(\"tlv.encode: wrong tag\");if(1&n.length)throw new i(\"tlv.encode: unpadded data\");const o=n.length/2,s=r.numberToHexUnpadded(o);if(s.length/2&128)throw new i(\"tlv.encode: long form length too big\");const a=o>127?r.numberToHexUnpadded(s.length/2|128):\"\";return`${r.numberToHexUnpadded(t)}${a}${s}${n}`},decode(t,n){const{Err:r}=e.DER;let i=0;if(t<0||t>256)throw new r(\"tlv.encode: wrong tag\");if(n.length<2||n[i++]!==t)throw new r(\"tlv.decode: wrong tlv\");const o=n[i++];let s=0;if(!!(128&o)){const e=127&o;if(!e)throw new r(\"tlv.decode(long): indefinite length not supported\");if(e>4)throw new r(\"tlv.decode(long): byte length is too big\");const t=n.subarray(i,i+e);if(t.length!==e)throw new r(\"tlv.decode: length bytes not complete\");if(0===t[0])throw new r(\"tlv.decode(long): zero leftmost byte\");for(const e of t)s=s<<8|e;if(i+=e,s<128)throw new r(\"tlv.decode(long): not minimal encoding\")}else s=o;const a=n.subarray(i,i+s);if(a.length!==s)throw new r(\"tlv.decode: wrong value length\");return{v:a,l:n.subarray(i+s)}}},_int:{encode(t){const{Err:n}=e.DER;if(t<c)throw new n(\"integer: negative integers are not allowed\");let i=r.numberToHexUnpadded(t);if(8&Number.parseInt(i[0],16)&&(i=\"00\"+i),1&i.length)throw new n(\"unexpected assertion\");return i},decode(t){const{Err:n}=e.DER;if(128&t[0])throw new n(\"Invalid signature integer: negative\");if(0===t[0]&&!(128&t[1]))throw new n(\"Invalid signature integer: unnecessary leading zero\");return s(t)}},toSig(t){const{Err:n,_int:i,_tlv:o}=e.DER,s=\"string\"==typeof t?a(t):t;r.abytes(s);const{v:c,l:d}=o.decode(48,s);if(d.length)throw new n(\"Invalid signature: left bytes after parsing\");const{v:l,l:u}=o.decode(2,c),{v:h,l:f}=o.decode(2,u);if(f.length)throw new n(\"Invalid signature: left bytes after parsing\");return{r:i.decode(l),s:i.decode(h)}},hexFromSig(t){const{_tlv:n,_int:r}=e.DER,i=`${n.encode(2,r.encode(t.r))}${n.encode(2,r.encode(t.s))}`;return n.encode(48,i)}};const c=BigInt(0),d=BigInt(1),l=BigInt(2),u=BigInt(3),h=BigInt(4);function f(e){const o=function(e){const n=(0,t.validateBasic)(e);r.validateObject(n,{a:\"field\",b:\"field\"},{allowedPrivateKeyLengths:\"array\",wrapPrivateKey:\"boolean\",isTorsionFree:\"function\",clearCofactor:\"function\",allowInfinityPoint:\"boolean\",fromBytes:\"function\",toBytes:\"function\"});const{endo:i,Fp:o,a:s}=n;if(i){if(!o.eql(s,o.ZERO))throw new Error(\"Endomorphism can only be defined for Koblitz curves that have a=0\");if(\"object\"!=typeof i||\"bigint\"!=typeof i.beta||\"function\"!=typeof i.splitScalar)throw new Error(\"Expected endomorphism with beta: bigint and splitScalar: function\")}return Object.freeze({...n})}(e),{Fp:s}=o,a=n.Field(o.n,o.nBitLength),l=o.toBytes||((e,t,n)=>{const i=t.toAffine();return r.concatBytes(Uint8Array.from([4]),s.toBytes(i.x),s.toBytes(i.y))}),h=o.fromBytes||(e=>{const t=e.subarray(1);return{x:s.fromBytes(t.subarray(0,s.BYTES)),y:s.fromBytes(t.subarray(s.BYTES,2*s.BYTES))}});function f(e){const{a:t,b:n}=o,r=s.sqr(e),i=s.mul(r,e);return s.add(s.add(i,s.mul(e,t)),n)}if(!s.eql(s.sqr(o.Gy),f(o.Gx)))throw new Error(\"bad generator point: equation left != right\");function p(e){const{allowedPrivateKeyLengths:t,nByteLength:s,wrapPrivateKey:a,n:c}=o;if(t&&\"bigint\"!=typeof e){if(r.isBytes(e)&&(e=r.bytesToHex(e)),\"string\"!=typeof e||!t.includes(e.length))throw new Error(\"Invalid key\");e=e.padStart(2*s,\"0\")}let l;try{l=\"bigint\"==typeof e?e:r.bytesToNumberBE((0,i.ensureBytes)(\"private key\",e,s))}catch(t){throw new Error(`private key must be ${s} bytes, hex or bigint, not ${typeof e}`)}return a&&(l=n.mod(l,c)),r.aInRange(\"private key\",l,d,c),l}function m(e){if(!(e instanceof y))throw new Error(\"ProjectivePoint expected\")}const g=(0,i.memoized)(((e,t)=>{const{px:n,py:r,pz:i}=e;if(s.eql(i,s.ONE))return{x:n,y:r};const o=e.is0();null==t&&(t=o?s.ONE:s.inv(i));const a=s.mul(n,t),c=s.mul(r,t),d=s.mul(i,t);if(o)return{x:s.ZERO,y:s.ZERO};if(!s.eql(d,s.ONE))throw new Error(\"invZ was invalid\");return{x:a,y:c}})),v=(0,i.memoized)((e=>{if(e.is0()){if(o.allowInfinityPoint&&!s.is0(e.py))return;throw new Error(\"bad point: ZERO\")}const{x:t,y:n}=e.toAffine();if(!s.isValid(t)||!s.isValid(n))throw new Error(\"bad point: x or y not FE\");const r=s.sqr(n),i=f(t);if(!s.eql(r,i))throw new Error(\"bad point: equation left != right\");if(!e.isTorsionFree())throw new Error(\"bad point: not in prime-order subgroup\");return!0}));class y{constructor(e,t,n){if(this.px=e,this.py=t,this.pz=n,null==e||!s.isValid(e))throw new Error(\"x required\");if(null==t||!s.isValid(t))throw new Error(\"y required\");if(null==n||!s.isValid(n))throw new Error(\"z required\");Object.freeze(this)}static fromAffine(e){const{x:t,y:n}=e||{};if(!e||!s.isValid(t)||!s.isValid(n))throw new Error(\"invalid affine point\");if(e instanceof y)throw new Error(\"projective point not allowed\");const r=e=>s.eql(e,s.ZERO);return r(t)&&r(n)?y.ZERO:new y(t,n,s.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(e){const t=s.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(y.fromAffine)}static fromHex(e){const t=y.fromAffine(h((0,i.ensureBytes)(\"pointHex\",e)));return t.assertValidity(),t}static fromPrivateKey(e){return y.BASE.multiply(p(e))}static msm(e,n){return(0,t.pippenger)(y,a,e,n)}_setWindowSize(e){b.setWindowSize(this,e)}assertValidity(){v(this)}hasEvenY(){const{y:e}=this.toAffine();if(s.isOdd)return!s.isOdd(e);throw new Error(\"Field doesn't support isOdd\")}equals(e){m(e);const{px:t,py:n,pz:r}=this,{px:i,py:o,pz:a}=e,c=s.eql(s.mul(t,a),s.mul(i,r)),d=s.eql(s.mul(n,a),s.mul(o,r));return c&&d}negate(){return new y(this.px,s.neg(this.py),this.pz)}double(){const{a:e,b:t}=o,n=s.mul(t,u),{px:r,py:i,pz:a}=this;let c=s.ZERO,d=s.ZERO,l=s.ZERO,h=s.mul(r,r),f=s.mul(i,i),p=s.mul(a,a),m=s.mul(r,i);return m=s.add(m,m),l=s.mul(r,a),l=s.add(l,l),c=s.mul(e,l),d=s.mul(n,p),d=s.add(c,d),c=s.sub(f,d),d=s.add(f,d),d=s.mul(c,d),c=s.mul(m,c),l=s.mul(n,l),p=s.mul(e,p),m=s.sub(h,p),m=s.mul(e,m),m=s.add(m,l),l=s.add(h,h),h=s.add(l,h),h=s.add(h,p),h=s.mul(h,m),d=s.add(d,h),p=s.mul(i,a),p=s.add(p,p),h=s.mul(p,m),c=s.sub(c,h),l=s.mul(p,f),l=s.add(l,l),l=s.add(l,l),new y(c,d,l)}add(e){m(e);const{px:t,py:n,pz:r}=this,{px:i,py:a,pz:c}=e;let d=s.ZERO,l=s.ZERO,h=s.ZERO;const f=o.a,p=s.mul(o.b,u);let g=s.mul(t,i),v=s.mul(n,a),E=s.mul(r,c),b=s.add(t,n),w=s.add(i,a);b=s.mul(b,w),w=s.add(g,v),b=s.sub(b,w),w=s.add(t,r);let S=s.add(i,c);return w=s.mul(w,S),S=s.add(g,E),w=s.sub(w,S),S=s.add(n,r),d=s.add(a,c),S=s.mul(S,d),d=s.add(v,E),S=s.sub(S,d),h=s.mul(f,w),d=s.mul(p,E),h=s.add(d,h),d=s.sub(v,h),h=s.add(v,h),l=s.mul(d,h),v=s.add(g,g),v=s.add(v,g),E=s.mul(f,E),w=s.mul(p,w),v=s.add(v,E),E=s.sub(g,E),E=s.mul(f,E),w=s.add(w,E),g=s.mul(v,w),l=s.add(l,g),g=s.mul(S,w),d=s.mul(b,d),d=s.sub(d,g),g=s.mul(b,v),h=s.mul(S,h),h=s.add(h,g),new y(d,l,h)}subtract(e){return this.add(e.negate())}is0(){return this.equals(y.ZERO)}wNAF(e){return b.wNAFCached(this,e,y.normalizeZ)}multiplyUnsafe(e){r.aInRange(\"scalar\",e,c,o.n);const t=y.ZERO;if(e===c)return t;if(e===d)return this;const{endo:n}=o;if(!n)return b.unsafeLadder(this,e);let{k1neg:i,k1:a,k2neg:l,k2:u}=n.splitScalar(e),h=t,f=t,p=this;for(;a>c||u>c;)a&d&&(h=h.add(p)),u&d&&(f=f.add(p)),p=p.double(),a>>=d,u>>=d;return i&&(h=h.negate()),l&&(f=f.negate()),f=new y(s.mul(f.px,n.beta),f.py,f.pz),h.add(f)}multiply(e){const{endo:t,n:n}=o;let i,a;if(r.aInRange(\"scalar\",e,d,n),t){const{k1neg:n,k1:r,k2neg:o,k2:c}=t.splitScalar(e);let{p:d,f:l}=this.wNAF(r),{p:u,f:h}=this.wNAF(c);d=b.constTimeNegate(n,d),u=b.constTimeNegate(o,u),u=new y(s.mul(u.px,t.beta),u.py,u.pz),i=d.add(u),a=l.add(h)}else{const{p:t,f:n}=this.wNAF(e);i=t,a=n}return y.normalizeZ([i,a])[0]}multiplyAndAddUnsafe(e,t,n){const r=y.BASE,i=(e,t)=>t!==c&&t!==d&&e.equals(r)?e.multiply(t):e.multiplyUnsafe(t),o=i(this,t).add(i(e,n));return o.is0()?void 0:o}toAffine(e){return g(this,e)}isTorsionFree(){const{h:e,isTorsionFree:t}=o;if(e===d)return!0;if(t)return t(y,this);throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\")}clearCofactor(){const{h:e,clearCofactor:t}=o;return e===d?this:t?t(y,this):this.multiplyUnsafe(o.h)}toRawBytes(e=!0){return(0,i.abool)(\"isCompressed\",e),this.assertValidity(),l(y,this,e)}toHex(e=!0){return(0,i.abool)(\"isCompressed\",e),r.bytesToHex(this.toRawBytes(e))}}y.BASE=new y(o.Gx,o.Gy,s.ONE),y.ZERO=new y(s.ZERO,s.ONE,s.ZERO);const E=o.nBitLength,b=(0,t.wNAF)(y,o.endo?Math.ceil(E/2):E);return{CURVE:o,ProjectivePoint:y,normPrivateKeyToScalar:p,weierstrassEquation:f,isWithinCurveOrder:function(e){return r.inRange(e,d,o.n)}}}function p(e,t){const n=e.ORDER;let r=c;for(let e=n-d;e%l===c;e/=l)r+=d;const i=r,o=l<<i-d-d,s=o*l,a=(n-d)/s,f=(a-d)/l,p=s-d,m=o,g=e.pow(t,a),v=e.pow(t,(a+d)/l);let y=(t,n)=>{let r=g,o=e.pow(n,p),s=e.sqr(o);s=e.mul(s,n);let a=e.mul(t,s);a=e.pow(a,f),a=e.mul(a,o),o=e.mul(a,n),s=e.mul(a,t);let c=e.mul(s,o);a=e.pow(c,m);let u=e.eql(a,e.ONE);o=e.mul(s,v),a=e.mul(c,r),s=e.cmov(o,s,u),c=e.cmov(a,c,u);for(let t=i;t>d;t--){let n=t-l;n=l<<n-d;let i=e.pow(c,n);const a=e.eql(i,e.ONE);o=e.mul(s,r),r=e.mul(r,r),i=e.mul(c,r),s=e.cmov(o,s,a),c=e.cmov(i,c,a)}return{isValid:u,value:s}};if(e.ORDER%h===u){const n=(e.ORDER-u)/h,r=e.sqrt(e.neg(t));y=(t,i)=>{let o=e.sqr(i);const s=e.mul(t,i);o=e.mul(o,s);let a=e.pow(o,n);a=e.mul(a,s);const c=e.mul(a,r),d=e.mul(e.sqr(a),i),l=e.eql(d,t);return{isValid:l,value:e.cmov(c,a,l)}}}return y}}(ln),Object.defineProperty(cn,\"__esModule\",{value:!0}),cn.getHash=pn,cn.createCurve=function(e,t){const n=t=>(0,fn.weierstrass)({...e,...pn(t)});return Object.freeze({...n(t),create:n})};const un=dn,hn=z,fn=ln;function pn(e){return{hash:e,hmac:(t,...n)=>(0,un.hmac)(e,t,(0,hn.concatBytes)(...n)),randomBytes:hn.randomBytes}}!function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.encodeToCurve=e.hashToCurve=e.schnorr=e.secp256k1=void 0;const t=Xt,n=z,r=cn,i=Bt,o=De,s=Le,a=ln,c=BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\"),d=BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"),l=BigInt(1),u=BigInt(2),h=(e,t)=>(e+t/u)/t;function f(e){const t=c,n=BigInt(3),r=BigInt(6),i=BigInt(11),s=BigInt(22),a=BigInt(23),d=BigInt(44),l=BigInt(88),h=e*e*e%t,f=h*h*e%t,m=(0,o.pow2)(f,n,t)*f%t,g=(0,o.pow2)(m,n,t)*f%t,v=(0,o.pow2)(g,u,t)*h%t,y=(0,o.pow2)(v,i,t)*v%t,E=(0,o.pow2)(y,s,t)*y%t,b=(0,o.pow2)(E,d,t)*E%t,w=(0,o.pow2)(b,l,t)*b%t,S=(0,o.pow2)(w,d,t)*E%t,_=(0,o.pow2)(S,n,t)*f%t,C=(0,o.pow2)(_,a,t)*y%t,x=(0,o.pow2)(C,r,t)*h%t,k=(0,o.pow2)(x,u,t);if(!p.eql(p.sqr(k),e))throw new Error(\"Cannot find square root\");return k}const p=(0,o.Field)(c,void 0,void 0,{sqrt:f});e.secp256k1=(0,r.createCurve)({a:BigInt(0),b:BigInt(7),Fp:p,n:d,Gx:BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),Gy:BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),h:BigInt(1),lowS:!0,endo:{beta:BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),splitScalar:e=>{const t=d,n=BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\"),r=-l*BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\"),i=BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\"),s=n,a=BigInt(\"0x100000000000000000000000000000000\"),c=h(s*e,t),u=h(-r*e,t);let f=(0,o.mod)(e-c*n-u*i,t),p=(0,o.mod)(-c*r-u*s,t);const m=f>a,g=p>a;if(m&&(f=t-f),g&&(p=t-p),f>a||p>a)throw new Error(\"splitScalar: Endomorphism failed, k=\"+e);return{k1neg:m,k1:f,k2neg:g,k2:p}}}},t.sha256);const m=BigInt(0),g={};function v(e,...n){let r=g[e];if(void 0===r){const n=(0,t.sha256)(Uint8Array.from(e,(e=>e.charCodeAt(0))));r=(0,s.concatBytes)(n,n),g[e]=r}return(0,t.sha256)((0,s.concatBytes)(r,...n))}const y=e=>e.toRawBytes(!0).slice(1),E=e=>(0,s.numberToBytesBE)(e,32),b=e=>(0,o.mod)(e,c),w=e=>(0,o.mod)(e,d),S=e.secp256k1.ProjectivePoint,_=(e,t,n)=>S.BASE.multiplyAndAddUnsafe(e,t,n);function C(t){let n=e.secp256k1.utils.normPrivateKeyToScalar(t),r=S.fromPrivateKey(n);return{scalar:r.hasEvenY()?n:w(-n),bytes:y(r)}}function x(e){(0,s.aInRange)(\"x\",e,l,c);const t=b(e*e);let n=f(b(t*e+BigInt(7)));n%u!==m&&(n=b(-n));const r=new S(e,n,l);return r.assertValidity(),r}const k=s.bytesToNumberBE;function M(...e){return w(k(v(\"BIP0340/challenge\",...e)))}function A(e){return C(e).bytes}function T(e,t,r=(0,n.randomBytes)(32)){const i=(0,s.ensureBytes)(\"message\",e),{bytes:o,scalar:a}=C(t),c=(0,s.ensureBytes)(\"auxRand\",r,32),d=E(a^k(v(\"BIP0340/aux\",c))),l=v(\"BIP0340/nonce\",d,o,i),u=w(k(l));if(u===m)throw new Error(\"sign failed: k is zero\");const{bytes:h,scalar:f}=C(u),p=M(h,o,i),g=new Uint8Array(64);if(g.set(h,0),g.set(E(w(f+p*a)),32),!I(g,i,o))throw new Error(\"sign: Invalid signature produced\");return g}function I(e,t,n){const r=(0,s.ensureBytes)(\"signature\",e,64),i=(0,s.ensureBytes)(\"message\",t),o=(0,s.ensureBytes)(\"publicKey\",n,32);try{const e=x(k(o)),t=k(r.subarray(0,32));if(!(0,s.inRange)(t,l,c))return!1;const n=k(r.subarray(32,64));if(!(0,s.inRange)(n,l,d))return!1;const a=M(E(t),y(e),i),u=_(e,n,w(-a));return!(!u||!u.hasEvenY()||u.toAffine().x!==t)}catch(e){return!1}}e.schnorr={getPublicKey:A,sign:T,verify:I,utils:{randomPrivateKey:e.secp256k1.utils.randomPrivateKey,lift_x:x,pointToBytes:y,numberToBytesBE:s.numberToBytesBE,bytesToNumberBE:s.bytesToNumberBE,taggedHash:v,mod:o.mod}};const P=(()=>(0,i.isogenyMap)(p,[[\"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7\",\"0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581\",\"0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262\",\"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c\"],[\"0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b\",\"0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],[\"0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c\",\"0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3\",\"0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931\",\"0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84\"],[\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b\",\"0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573\",\"0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"]].map((e=>e.map((e=>BigInt(e)))))))(),R=(()=>(0,a.mapToCurveSimpleSWU)(p,{A:BigInt(\"0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533\"),B:BigInt(\"1771\"),Z:p.create(BigInt(\"-11\"))}))(),O=(()=>(0,i.createHasher)(e.secp256k1.ProjectivePoint,(e=>{const{x:t,y:n}=R(p.create(e[0]));return P(t,n)}),{DST:\"secp256k1_XMD:SHA-256_SSWU_RO_\",encodeDST:\"secp256k1_XMD:SHA-256_SSWU_NU_\",p:p.ORDER,m:1,k:128,expand:\"xmd\",hash:t.sha256}))();e.hashToCurve=O.hashToCurve,e.encodeToCurve=O.encodeToCurve}(Qt);var mn={};!function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.decodeHex=e.remove0x=void 0;var t=p;e.remove0x=function(e){return e.startsWith(\"0x\")||e.startsWith(\"0X\")?e.slice(2):e};e.decodeHex=function(n){return(0,t.hexToBytes)((0,e.remove0x)(n))}}(mn),function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.hexToPublicKey=e.convertPublicKeyFormat=e.getSharedPoint=e.getPublicKey=e.isValidPrivateKey=e.getValidSecret=void 0;var t=I,n=O,r=Qt,i=C,o=x,s=mn;e.getValidSecret=function(){var n;do{n=(0,t.randomBytes)(o.SECRET_KEY_LENGTH)}while(!(0,e.isValidPrivateKey)(n));return n};e.isValidPrivateKey=function(e){return a((0,i.ellipticCurve)(),(function(t){return t.utils.isValidPrivateKey(e)}),(function(){return!0}),(function(){return!0}))};e.getPublicKey=function(e){return a((0,i.ellipticCurve)(),(function(t){return t.getPublicKey(e)}),(function(t){return t.getPublicKey(e)}),(function(t){return t.getPublicKey(e)}))};e.getSharedPoint=function(e,t,n){return a((0,i.ellipticCurve)(),(function(r){return r.getSharedSecret(e,t,n)}),(function(n){return n.getSharedSecret(e,t)}),(function(n){return d(n,e,t)}))};e.convertPublicKeyFormat=function(e,t){return a((0,i.ellipticCurve)(),(function(n){return n.getSharedSecret(BigInt(1),e,t)}),(function(){return e}),(function(){return e}))};function a(e,t,i,o){if(\"secp256k1\"===e)return t(r.secp256k1);if(\"x25519\"===e)return i(n.x25519);if(\"ed25519\"===e)return o(n.ed25519);throw new Error(\"Not implemented\")}e.hexToPublicKey=function(e){var t=(0,s.decodeHex)(e);return a((0,i.ellipticCurve)(),(function(){return c(t)}),(function(){return t}),(function(){return t}))};var c=function(e){if(e.length===o.ETH_PUBLIC_KEY_SIZE){var t=new Uint8Array(1+e.length);return t.set([4]),t.set(e,1),t}return e},d=function(e,t,n){var r=e.utils.getExtendedPublicKey(t).scalar;return e.ExtendedPoint.fromHex(n).multiply(r).toRawBytes()}}(T);var gn={},vn={};Object.defineProperty(vn,\"__esModule\",{value:!0}),vn.hkdf=void 0,vn.extract=wn,vn.expand=Cn;const yn=L,En=z,bn=dn;function wn(e,t,n){return(0,yn.hash)(e),void 0===n&&(n=new Uint8Array(e.outputLen)),(0,bn.hmac)(e,(0,En.toBytes)(n),(0,En.toBytes)(t))}const Sn=new Uint8Array([0]),_n=new Uint8Array;function Cn(e,t,n,r=32){if((0,yn.hash)(e),(0,yn.number)(r),r>255*e.outputLen)throw new Error(\"Length should be <= 255*HashLen\");const i=Math.ceil(r/e.outputLen);void 0===n&&(n=_n);const o=new Uint8Array(i*e.outputLen),s=bn.hmac.create(e,t),a=s._cloneInto(),c=new Uint8Array(s.outputLen);for(let t=0;t<i;t++)Sn[0]=t+1,a.update(0===t?_n:c).update(n).update(Sn).digestInto(c),o.set(c,e.outputLen*t),s._cloneInto(a);return s.destroy(),a.destroy(),c.fill(0),Sn.fill(0),o.slice(0,r)}vn.hkdf=(e,t,n,r,i)=>Cn(e,wn(e,t,n),r,i),function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.getSharedKey=e.deriveKey=void 0;var t=p,n=vn,r=Xt;e.deriveKey=function(e,t,i){return(0,n.hkdf)(r.sha256,e,t,i,32)};e.getSharedKey=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return(0,e.deriveKey)(t.concatBytes.apply(void 0,n))}}(gn);var xn={},kn={},Mn={};Object.defineProperty(Mn,\"__esModule\",{value:!0}),Mn._compat=void 0;var An=p,Tn=r;Mn._compat=function(e,t,n,r){var i=\"aes-256-gcm\"===e||\"chacha20-poly1305\"===e,o=i?16:0,s=i?{authTagLength:o}:void 0;return{encrypt:function(o){var a=(0,Tn.createCipheriv)(e,t,n,s);i&&void 0!==r&&a.setAAD(r);var c=a.update(o),d=a.final();return i?(0,An.concatBytes)(c,d,a.getAuthTag()):(0,An.concatBytes)(c,d)},decrypt:function(a){var c=a.subarray(0,a.length-o),d=a.subarray(a.length-o),l=(0,Tn.createDecipheriv)(e,t,n,s);i&&(void 0!==r&&l.setAAD(r),l.setAuthTag(d));var u=l.update(c),h=l.final();return(0,An.concatBytes)(u,h)}}},Object.defineProperty(kn,\"__esModule\",{value:!0}),kn.aes256cbc=kn.aes256gcm=void 0;var In=Mn;kn.aes256gcm=function(e,t,n){return(0,In._compat)(\"aes-256-gcm\",e,t,n)};kn.aes256cbc=function(e,t,n){return(0,In._compat)(\"aes-256-cbc\",e,t)};var Pn={},Rn={};Object.defineProperty(Rn,\"__esModule\",{value:!0}),Rn._hchacha=void 0;Rn._hchacha=function(e,t,n,r){for(var i=e[0],o=e[1],s=e[2],a=e[3],c=t[0],d=t[1],l=t[2],u=t[3],h=t[4],f=t[5],p=t[6],m=t[7],g=n[0],v=n[1],y=n[2],E=n[3],b=0;b<20;b+=2)g=On(g^(i=i+c|0),16),c=On(c^(h=h+g|0),12),g=On(g^(i=i+c|0),8),c=On(c^(h=h+g|0),7),v=On(v^(o=o+d|0),16),d=On(d^(f=f+v|0),12),v=On(v^(o=o+d|0),8),d=On(d^(f=f+v|0),7),y=On(y^(s=s+l|0),16),l=On(l^(p=p+y|0),12),y=On(y^(s=s+l|0),8),l=On(l^(p=p+y|0),7),E=On(E^(a=a+u|0),16),u=On(u^(m=m+E|0),12),E=On(E^(a=a+u|0),8),u=On(u^(m=m+E|0),7),E=On(E^(i=i+d|0),16),d=On(d^(p=p+E|0),12),E=On(E^(i=i+d|0),8),d=On(d^(p=p+E|0),7),g=On(g^(o=o+l|0),16),l=On(l^(m=m+g|0),12),g=On(g^(o=o+l|0),8),l=On(l^(m=m+g|0),7),v=On(v^(s=s+u|0),16),u=On(u^(h=h+v|0),12),v=On(v^(s=s+u|0),8),u=On(u^(h=h+v|0),7),y=On(y^(a=a+c|0),16),c=On(c^(f=f+y|0),12),y=On(y^(a=a+c|0),8),c=On(c^(f=f+y|0),7);var w=0;r[w++]=i,r[w++]=o,r[w++]=s,r[w++]=a,r[w++]=g,r[w++]=v,r[w++]=y,r[w++]=E};var On=function(e,t){return e<<t|e>>>32-t};Object.defineProperty(Pn,\"__esModule\",{value:!0}),Pn.xchacha20=void 0;var Nn=p,Dn=Mn,Ln=Rn;Pn.xchacha20=function(e,t,n){if(24!==t.length)throw new Error(\"xchacha20's nonce must be 24 bytes\");var r=new Uint32Array([1634760805,857760878,2036477234,1797285236]),i=new Uint32Array(8);(0,Ln._hchacha)(r,(0,Nn.u32)(e),(0,Nn.u32)(t.subarray(0,16)),i);var o=new Uint8Array(12);return o.set([0,0,0,0]),o.set(t.subarray(16),4),(0,Dn._compat)(\"chacha20-poly1305\",(0,Nn.u8)(i),o,n)},function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.aesDecrypt=e.aesEncrypt=e.symDecrypt=e.symEncrypt=void 0;var t=p,n=I,r=kn,i=Pn,o=C,s=x;e.symEncrypt=function(e,t,n){return a(c,e,t,n)};function a(e,t,n,a){var c=(0,o.symmetricAlgorithm)();if(\"aes-256-gcm\"===c)return e(r.aes256gcm,t,n,(0,o.symmetricNonceLength)(),s.AEAD_TAG_LENGTH,a);if(\"xchacha20\"===c)return e(i.xchacha20,t,n,s.XCHACHA20_NONCE_LENGTH,s.AEAD_TAG_LENGTH,a);if(\"aes-256-cbc\"===c)return e(r.aes256cbc,t,n,16,0);throw new Error(\"Not implemented\")}function c(e,r,i,o,s,a){var c=(0,n.randomBytes)(o),d=e(r,c,a).encrypt(i);if(0===s)return(0,t.concatBytes)(c,d);var l=d.length-s,u=d.subarray(0,l),h=d.subarray(l);return(0,t.concatBytes)(c,h,u)}function d(e,n,r,i,o,s){var a=r.subarray(0,i),c=e(n,Uint8Array.from(a),s),d=r.subarray(i);if(0===o)return c.decrypt(d);var l=d.subarray(0,o),u=d.subarray(o);return c.decrypt((0,t.concatBytes)(u,l))}e.symDecrypt=function(e,t,n){return a(d,e,t,n)},e.aesEncrypt=e.symEncrypt,e.aesDecrypt=e.symDecrypt}(xn),function(e){var t=u&&u.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!(\"get\"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),n=u&&u.__exportStar||function(e,n){for(var r in e)\"default\"===r||Object.prototype.hasOwnProperty.call(n,r)||t(n,e,r)};Object.defineProperty(e,\"__esModule\",{value:!0}),n(T,e),n(gn,e),n(mn,e),n(xn,e)}(A);var Bn={};Object.defineProperty(Bn,\"__esModule\",{value:!0}),Bn.PublicKey=void 0;var Kn=p,jn=A,$n=function(){function e(e){this.data=(0,jn.convertPublicKeyFormat)(e,!0)}return e.fromHex=function(t){return new e((0,jn.hexToPublicKey)(t))},Object.defineProperty(e.prototype,\"uncompressed\",{get:function(){return Buffer.from((0,jn.convertPublicKeyFormat)(this.data,!1))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\"compressed\",{get:function(){return Buffer.from(this.data)},enumerable:!1,configurable:!0}),e.prototype.toHex=function(e){return void 0===e&&(e=!0),(0,Kn.bytesToHex)(e?this.data:this.uncompressed)},e.prototype.decapsulate=function(e,t){void 0===t&&(t=!1);var n=t?this.data:this.uncompressed,r=e.multiply(this,t);return(0,jn.getSharedKey)(n,r)},e.prototype.equals=function(e){return(0,Kn.equalBytes)(this.data,e.data)},e}();Bn.PublicKey=$n,Object.defineProperty(M,\"__esModule\",{value:!0}),M.PrivateKey=void 0;var Hn=p,Un=A,Fn=Bn,qn=function(){function e(e){if(void 0===e)this.data=(0,Un.getValidSecret)();else{if(!(0,Un.isValidPrivateKey)(e))throw new Error(\"Invalid private key\");this.data=e}this.publicKey=new Fn.PublicKey((0,Un.getPublicKey)(this.data))}return e.fromHex=function(t){return new e((0,Un.decodeHex)(t))},Object.defineProperty(e.prototype,\"secret\",{get:function(){return Buffer.from(this.data)},enumerable:!1,configurable:!0}),e.prototype.toHex=function(){return(0,Hn.bytesToHex)(this.data)},e.prototype.encapsulate=function(e,t){void 0===t&&(t=!1);var n=t?this.publicKey.compressed:this.publicKey.uncompressed,r=this.multiply(e,t);return(0,Un.getSharedKey)(n,r)},e.prototype.multiply=function(e,t){return void 0===t&&(t=!1),(0,Un.getSharedPoint)(this.data,e.compressed,t)},e.prototype.equals=function(e){return(0,Hn.equalBytes)(this.data,e.data)},e}();M.PrivateKey=qn,function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.PublicKey=e.PrivateKey=void 0;var t=M;Object.defineProperty(e,\"PrivateKey\",{enumerable:!0,get:function(){return t.PrivateKey}});var n=Bn;Object.defineProperty(e,\"PublicKey\",{enumerable:!0,get:function(){return n.PublicKey}})}(k),function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.utils=e.PublicKey=e.PrivateKey=e.ECIES_CONFIG=void 0,e.encrypt=function(e,o){var s=new r.PrivateKey,a=e instanceof Uint8Array?new r.PublicKey(e):r.PublicKey.fromHex(e),c=s.encapsulate(a,(0,n.isHkdfKeyCompressed)()),d=(0,n.isEphemeralKeyCompressed)()?s.publicKey.compressed:s.publicKey.uncompressed,l=(0,i.symEncrypt)(c,o);return Buffer.from((0,t.concatBytes)(d,l))},e.decrypt=function(e,t){var o=e instanceof Uint8Array?new r.PrivateKey(e):r.PrivateKey.fromHex(e),s=(0,n.ephemeralKeySize)(),a=new r.PublicKey(t.subarray(0,s)),c=t.subarray(s),d=a.decapsulate(o,(0,n.isHkdfKeyCompressed)());return Buffer.from((0,i.symDecrypt)(d,c))};var t=p,n=C,r=k,i=A;var o=C;Object.defineProperty(e,\"ECIES_CONFIG\",{enumerable:!0,get:function(){return o.ECIES_CONFIG}});var s=k;Object.defineProperty(e,\"PrivateKey\",{enumerable:!0,get:function(){return s.PrivateKey}}),Object.defineProperty(e,\"PublicKey\",{enumerable:!0,get:function(){return s.PublicKey}}),e.utils={aesEncrypt:i.aesEncrypt,aesDecrypt:i.aesDecrypt,symEncrypt:i.symEncrypt,symDecrypt:i.symDecrypt,decodeHex:i.decodeHex,getValidSecret:i.getValidSecret,remove0x:i.remove0x}}(f);const zn=t(\"KeyExchange:Layer\"),Wn=t(\"SocketService:Layer\"),Vn=t(\"Ecies:Layer\"),Gn=t(\"RemoteCommunication:Layer\");zn.color=\"##95c44e\",Wn.color=\"#f638d7\",Vn.color=\"#465b9c\",Gn.color=\"#47a2be\";const Yn={KeyExchange:zn,SocketService:Wn,Ecies:Vn,RemoteCommunication:Gn};let Zn,Jn=[],Qn=[];const Xn=(t,n)=>l(void 0,void 0,void 0,(function*(){Zn=n,Qn.push(t),function(t){return l(this,void 0,void 0,(function*(){if(!Zn||!t)return;!function(){const e=Qn;Qn=Jn,Jn=e}();const n=Zn.endsWith(\"/\")?`${Zn}evt`:`${Zn}/evt`,r=Object.assign({},t);if(delete r.params,t.params)for(const[e,n]of Object.entries(t.params))r[e]=n;const i=JSON.stringify(r);Yn.RemoteCommunication(`[sendBufferedEvents] Sending ${Jn.length} analytics events to ${n}`);try{const t=yield e(n,{method:\"POST\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"},body:i}),r=yield t.text();Yn.RemoteCommunication(`[sendBufferedEvents] Response: ${r}`),Jn.length=0}catch(n){}}))}(t).catch((()=>{}))}));class er{constructor(e){this.enabled=!0,(null==e?void 0:e.debug)&&t.enable(\"Ecies:Layer\"),this.ecies=(null==e?void 0:e.privateKey)?f.PrivateKey.fromHex(e.privateKey):new f.PrivateKey,Yn.Ecies(\"[ECIES constructor()] initialized secret: \",this.ecies.toHex()),Yn.Ecies(\"[ECIES constructor()] initialized public: \",this.ecies.publicKey.toHex()),Yn.Ecies(\"[ECIES constructor()] init with\",this)}generateECIES(){this.ecies=new f.PrivateKey}getPublicKey(){return this.ecies.publicKey.toHex()}encrypt(e,t){let r=e;if(this.enabled)try{Yn.Ecies(\"[ECIES: encrypt()] using otherPublicKey\",t);const i=n.Buffer.from(e),o=f.encrypt(t,i);r=n.Buffer.from(o).toString(\"base64\")}catch(r){throw Yn.Ecies(\"[ECIES: encrypt()] error encrypt:\",r),Yn.Ecies(\"[ECIES: encrypt()] private: \",this.ecies.toHex()),Yn.Ecies(\"[ECIES: encrypt()] data: \",e),Yn.Ecies(\"[ECIES: encrypt()] otherkey: \",t),r}return r}decrypt(e){let t=e;if(this.enabled)try{Yn.Ecies(\"[ECIES: decrypt()] using privateKey\",this.ecies.toHex());const r=n.Buffer.from(e.toString(),\"base64\");t=f.decrypt(this.ecies.toHex(),r).toString()}catch(t){throw Yn.Ecies(\"[ECIES: decrypt()] error decrypt\",t),Yn.Ecies(\"[ECIES: decrypt()] private: \",this.ecies.toHex()),Yn.Ecies(\"[ECIES: decrypt()] encryptedData: \",e),t}return t}getKeyInfo(){return{private:this.ecies.toHex(),public:this.ecies.publicKey.toHex()}}toString(){Yn.Ecies(\"[ECIES: toString()]\",this.getKeyInfo())}}var tr={name:\"@metamask/sdk-communication-layer\",version:\"0.32.0\",description:\"\",homepage:\"https://github.com/MetaMask/metamask-sdk#readme\",bugs:{url:\"https://github.com/MetaMask/metamask-sdk/issues\"},repository:{type:\"git\",url:\"https://github.com/MetaMask/metamask-sdk.git\",directory:\"packages/sdk-communication-layer\"},main:\"dist/node/cjs/metamask-sdk-communication-layer.js\",unpkg:\"dist/browser/umd/metamask-sdk-communication-layer.js\",module:\"dist/node/es/metamask-sdk-communication-layer.js\",browser:\"dist/browser/es/metamask-sdk-communication-layer.js\",\"react-native\":\"dist/react-native/es/metamask-sdk-communication-layer.js\",types:\"dist/types/src/index.d.ts\",files:[\"/dist\"],scripts:{\"build:types\":\"tsc --project tsconfig.build.json --emitDeclarationOnly --outDir dist/types\",\"build:clean\":\"yarn clean && yarn build\",build:\"yarn build:types && rollup -c --bundleConfigAsCjs\",\"build:dev\":\"yarn build:types && NODE_ENV=dev rollup -c --bundleConfigAsCjs\",dev:'concurrently \"tsc --watch\" \"rollup -c --bundleConfigAsCjs -w\"',\"build:post-tsc\":\"echo 'N/A'\",\"build:pre-tsc\":\"echo 'N/A'\",size:\"size-limit\",clean:\"rimraf ./dist\",lint:\"yarn lint:eslint && yarn lint:misc --check\",\"lint:changelog\":\"../../scripts/validate-changelog.sh @metamask/sdk-communication-layer\",\"lint:eslint\":\"eslint . --cache --ext js,ts\",\"lint:fix\":\"yarn lint:eslint --fix && yarn lint:misc --write\",\"lint:misc\":\"prettier '**/*.json' '**/*.md' '!CHANGELOG.md' --ignore-path ../../.gitignore\",\"publish:preview\":\"yarn npm publish --tag preview\",prepack:\"../../scripts/prepack.sh\",reset:\"yarn clean && rimraf ./node_modules/\",test:'jest --testPathIgnorePatterns \"/e2e/\"',\"test:e2e\":'jest --testPathPattern \"/e2e/\"',\"test:coverage\":\"jest --coverage\",\"test:ci\":'jest --coverage --passWithNoTests --setupFilesAfterEnv ./jest-preload.js --testPathIgnorePatterns \"/e2e/\"',\"test:dev\":\"jest\",watch:\"rollup -c --bundleConfigAsCjs -w\"},dependencies:{bufferutil:\"^4.0.8\",\"date-fns\":\"^2.29.3\",debug:\"^4.3.4\",\"utf-8-validate\":\"^5.0.2\",uuid:\"^8.3.2\"},devDependencies:{\"@jest/globals\":\"^29.3.1\",\"@lavamoat/allow-scripts\":\"^2.3.1\",\"@metamask/auto-changelog\":\"3.1.0\",\"@metamask/eslint-config\":\"^6.0.0\",\"@metamask/eslint-config-nodejs\":\"^6.0.0\",\"@metamask/eslint-config-typescript\":\"^6.0.0\",\"@rollup/plugin-commonjs\":\"^25.0.0\",\"@rollup/plugin-json\":\"^6.0.0\",\"@rollup/plugin-node-resolve\":\"^15.0.2\",\"@rollup/plugin-replace\":\"^6.0.1\",\"@rollup/plugin-terser\":\"^0.4.4\",\"@size-limit/preset-big-lib\":\"^11.0.2\",\"@types/jest\":\"^29.2.4\",\"@types/node\":\"^20.1.3\",\"@types/uuid\":\"^9.0.0\",\"@typescript-eslint/eslint-plugin\":\"^4.26.0\",\"@typescript-eslint/parser\":\"^4.26.0\",concurrently:\"^9.1.2\",\"cross-fetch\":\"^4.0.0\",eciesjs:\"^0.4.11\",eslint:\"^7.30.0\",\"eslint-config-prettier\":\"^8.3.0\",\"eslint-plugin-import\":\"^2.23.4\",\"eslint-plugin-jest\":\"^24.4.0\",\"eslint-plugin-jsdoc\":\"^36.1.0\",\"eslint-plugin-node\":\"^11.1.0\",\"eslint-plugin-prettier\":\"^3.4.0\",eventemitter2:\"^6.4.9\",jest:\"^29.3.1\",prettier:\"^2.3.0\",rimraf:\"^3.0.2\",rollup:\"^4.26.0\",\"rollup-plugin-jscc\":\"^2.0.0\",\"rollup-plugin-natives\":\"^0.7.5\",\"rollup-plugin-node-builtins\":\"^2.1.2\",\"rollup-plugin-node-globals\":\"^1.4.0\",\"rollup-plugin-peer-deps-external\":\"^2.2.4\",\"rollup-plugin-polyfill-node\":\"^0.13.0\",\"rollup-plugin-sizes\":\"^1.0.6\",\"rollup-plugin-typescript2\":\"^0.31.2\",\"rollup-plugin-visualizer\":\"^5.12.0\",\"size-limit\":\"^11.1.6\",\"socket.io-client\":\"^4.5.1\",\"stream-browserify\":\"^3.0.0\",\"ts-jest\":\"^29.0.3\",\"ts-node\":\"^10.9.1\",typescript:\"^5.6.3\"},peerDependencies:{\"cross-fetch\":\"^4.0.0\",eciesjs:\"*\",eventemitter2:\"^6.4.9\",\"readable-stream\":\"^3.6.2\",\"socket.io-client\":\"^4.5.1\"},publishConfig:{access:\"public\",registry:\"https://registry.npmjs.org/\"},lavamoat:{allowScripts:{\"@lavamoat/preinstall-always-fail\":!1,canvas:!0,\"eciesjs>secp256k1\":!1,\"socket.io-client>engine.io-client>ws>bufferutil\":!1,\"socket.io-client>engine.io-client>ws>utf-8-validate\":!1,bufferutil:!1,\"utf-8-validate\":!1}}};const nr=\"https://metamask-sdk.api.cx.metamask.io/\",rr=[\"websocket\"],ir=6048e5,or=3e3,sr={METAMASK_GETPROVIDERSTATE:\"metamask_getProviderState\",ETH_REQUESTACCOUNTS:\"eth_requestAccounts\"};function ar(e){const{context:t}=e;Yn.RemoteCommunication(`[RemoteCommunication: clean()] context=${t}`),e.channelConfig=void 0,e.ready=!1,e.originatorConnectStarted=!1}var cr,dr,lr,ur;exports.ConnectionStatus=void 0,exports.EventType=void 0,exports.MessageType=void 0,(ur=exports.ConnectionStatus||(exports.ConnectionStatus={})).DISCONNECTED=\"disconnected\",ur.WAITING=\"waiting\",ur.TIMEOUT=\"timeout\",ur.LINKED=\"linked\",ur.PAUSED=\"paused\",ur.TERMINATED=\"terminated\",function(e){e.KEY_INFO=\"key_info\",e.SERVICE_STATUS=\"service_status\",e.PROVIDER_UPDATE=\"provider_update\",e.RPC_UPDATE=\"rpc_update\",e.KEYS_EXCHANGED=\"keys_exchanged\",e.JOIN_CHANNEL=\"join_channel\",e.PUBLIC_KEY=\"public_key\",e.CHANNEL_CREATED=\"channel_created\",e.CLIENTS_CONNECTED=\"clients_connected\",e.CLIENTS_DISCONNECTED=\"clients_disconnected\",e.CLIENTS_WAITING=\"clients_waiting\",e.CLIENTS_READY=\"clients_ready\",e.REJECTED=\"rejected\",e.WALLET_INIT=\"wallet_init\",e.CHANNEL_PERSISTENCE=\"channel_persistence\",e.CONFIG=\"config\",e.MESSAGE_ACK=\"ack\",e.SOCKET_DISCONNECTED=\"socket_disconnected\",e.SOCKET_RECONNECT=\"socket_reconnect\",e.OTP=\"otp\",e.SDK_RPC_CALL=\"sdk_rpc_call\",e.AUTHORIZED=\"authorized\",e.CONNECTION_STATUS=\"connection_status\",e.MESSAGE=\"message\",e.TERMINATE=\"terminate\"}(exports.EventType||(exports.EventType={})),(cr||(cr={})).KEY_EXCHANGE=\"key_exchange\",function(e){e.KEY_HANDSHAKE_START=\"key_handshake_start\",e.KEY_HANDSHAKE_CHECK=\"key_handshake_check\",e.KEY_HANDSHAKE_SYN=\"key_handshake_SYN\",e.KEY_HANDSHAKE_SYNACK=\"key_handshake_SYNACK\",e.KEY_HANDSHAKE_ACK=\"key_handshake_ACK\",e.KEY_HANDSHAKE_WALLET=\"key_handshake_wallet\",e.KEY_HANDSHAKE_NONE=\"none\"}(dr||(dr={}));class hr extends i.EventEmitter2{constructor({communicationLayer:e,otherPublicKey:t,context:n,ecies:r,logging:i}){super(),this.keysExchanged=!1,this.step=dr.KEY_HANDSHAKE_NONE,this.debug=!1,this.context=n,this.communicationLayer=e,(null==r?void 0:r.privateKey)&&t&&(Yn.KeyExchange(`[KeyExchange: constructor()] otherPubKey=${t} set keysExchanged to true!`,r),this.keysExchanged=!0),this.myECIES=new er(Object.assign(Object.assign({},r),{debug:null==i?void 0:i.eciesLayer})),this.communicationLayer.state.eciesInstance=this.myECIES,this.myPublicKey=this.myECIES.getPublicKey(),this.debug=!0===(null==i?void 0:i.keyExchangeLayer),t&&this.setOtherPublicKey(t),this.communicationLayer.on(cr.KEY_EXCHANGE,this.onKeyExchangeMessage.bind(this))}onKeyExchangeMessage(e){const{relayPersistence:t}=this.communicationLayer.remote.state;if(Yn.KeyExchange(`[KeyExchange: onKeyExchangeMessage()] context=${this.context} keysExchanged=${this.keysExchanged} relayPersistence=${t}`,e),t)return void Yn.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] Ignoring key exchange message because relay persistence is activated\");const{message:n}=e;this.keysExchanged&&Yn.KeyExchange(`[KeyExchange: onKeyExchangeMessage()] context=${this.context} received handshake while already exchanged. step=${this.step} otherPubKey=${this.otherPublicKey}`),this.emit(exports.EventType.KEY_INFO,n.type),n.type===dr.KEY_HANDSHAKE_SYN?(this.checkStep([dr.KEY_HANDSHAKE_NONE,dr.KEY_HANDSHAKE_ACK]),Yn.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_SYN\",n),n.pubkey&&this.setOtherPublicKey(n.pubkey),this.communicationLayer.sendMessage({type:dr.KEY_HANDSHAKE_SYNACK,pubkey:this.myPublicKey}).catch((e=>{Yn.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] Error sending KEY_HANDSHAKE_SYNACK\",e)})),this.setStep(dr.KEY_HANDSHAKE_ACK)):n.type===dr.KEY_HANDSHAKE_SYNACK?(this.checkStep([dr.KEY_HANDSHAKE_SYNACK,dr.KEY_HANDSHAKE_ACK,dr.KEY_HANDSHAKE_NONE]),Yn.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_SYNACK\"),n.pubkey&&this.setOtherPublicKey(n.pubkey),this.communicationLayer.sendMessage({type:dr.KEY_HANDSHAKE_ACK}).catch((e=>{Yn.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] Error sending KEY_HANDSHAKE_ACK\",e)})),this.keysExchanged=!0,this.setStep(dr.KEY_HANDSHAKE_ACK),this.emit(exports.EventType.KEYS_EXCHANGED)):n.type===dr.KEY_HANDSHAKE_ACK&&(Yn.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_ACK set keysExchanged to true!\"),this.checkStep([dr.KEY_HANDSHAKE_ACK,dr.KEY_HANDSHAKE_NONE]),this.keysExchanged=!0,this.setStep(dr.KEY_HANDSHAKE_ACK),this.emit(exports.EventType.KEYS_EXCHANGED))}resetKeys(e){this.clean(),this.myECIES=new er(e)}clean(){Yn.KeyExchange(`[KeyExchange: clean()] context=${this.context} reset handshake state`),this.setStep(dr.KEY_HANDSHAKE_NONE),this.emit(exports.EventType.KEY_INFO,this.step),this.keysExchanged=!1}start({isOriginator:e,force:t}){const{relayPersistence:n,protocolVersion:r}=this.communicationLayer.remote.state,i=r>=2;n?Yn.KeyExchange(\"[KeyExchange: start()] Ignoring key exchange message because relay persistence is activated\"):(Yn.KeyExchange(`[KeyExchange: start()] context=${this.context} protocolVersion=${r} isOriginator=${e} step=${this.step} force=${t} relayPersistence=${n} keysExchanged=${this.keysExchanged}`),e?!(this.keysExchanged||this.step!==dr.KEY_HANDSHAKE_NONE&&this.step!==dr.KEY_HANDSHAKE_SYNACK)||t?(Yn.KeyExchange(`[KeyExchange: start()] context=${this.context} -- start key exchange (force=${t}) -- step=${this.step}`,this.step),this.clean(),this.setStep(dr.KEY_HANDSHAKE_SYNACK),this.communicationLayer.sendMessage({type:dr.KEY_HANDSHAKE_SYN,pubkey:this.myPublicKey,v:2}).catch((e=>{Yn.KeyExchange(\"[KeyExchange: start()] Error sending KEY_HANDSHAKE_SYN\",e)}))):Yn.KeyExchange(`[KeyExchange: start()] context=${this.context} -- key exchange already ${this.keysExchanged?\"done\":\"in progress\"} -- aborted.`,this.step):this.keysExchanged&&!0!==t?Yn.KeyExchange(\"[KeyExchange: start()] don't send KEY_HANDSHAKE_START -- exchange already done.\"):i?this.communicationLayer.sendMessage({type:dr.KEY_HANDSHAKE_SYNACK,pubkey:this.myPublicKey,v:2}).catch((e=>{Yn.KeyExchange(\"[KeyExchange: start()] Error sending KEY_HANDSHAKE_SYNACK\",e)})):(this.communicationLayer.sendMessage({type:dr.KEY_HANDSHAKE_START}).catch((e=>{Yn.KeyExchange(\"[KeyExchange: start()] Error sending KEY_HANDSHAKE_START\",e)})),this.clean()))}setStep(e){this.step=e,this.emit(exports.EventType.KEY_INFO,e)}checkStep(e){e.length>0&&e.indexOf(this.step.toString())}setRelayPersistence({localKey:e,otherKey:t}){this.otherPublicKey=t,this.myECIES=new er({privateKey:e,debug:this.debug}),this.keysExchanged=!0}setKeysExchanged(e){this.keysExchanged=e}areKeysExchanged(){return this.keysExchanged}getMyPublicKey(){return this.myPublicKey}getOtherPublicKey(){return this.otherPublicKey}setOtherPublicKey(e){Yn.KeyExchange(\"[KeyExchange: setOtherPubKey()]\",e),this.otherPublicKey=e}encryptMessage(e){if(!this.otherPublicKey)throw new Error(\"encryptMessage: Keys not exchanged - missing otherPubKey\");return this.myECIES.encrypt(e,this.otherPublicKey)}decryptMessage(e){if(!this.otherPublicKey)throw new Error(\"decryptMessage: Keys not exchanged - missing otherPubKey\");return this.myECIES.decrypt(e)}getKeyInfo(){return{ecies:Object.assign(Object.assign({},this.myECIES.getKeyInfo()),{otherPubKey:this.otherPublicKey}),step:this.step,keysExchanged:this.areKeysExchanged()}}toString(){const e={keyInfo:this.getKeyInfo(),keysExchanged:this.keysExchanged,step:this.step};return JSON.stringify(e)}}!function(e){e.TERMINATE=\"terminate\",e.ANSWER=\"answer\",e.OFFER=\"offer\",e.CANDIDATE=\"candidate\",e.JSONRPC=\"jsonrpc\",e.WALLET_INFO=\"wallet_info\",e.WALLET_INIT=\"wallet_init\",e.ORIGINATOR_INFO=\"originator_info\",e.PAUSE=\"pause\",e.OTP=\"otp\",e.AUTHORIZED=\"authorized\",e.PING=\"ping\",e.READY=\"ready\"}(exports.MessageType||(exports.MessageType={})),function(e){e.REQUEST=\"sdk_connect_request_started\",e.REQUEST_MOBILE=\"sdk_connect_request_started_mobile\",e.RECONNECT=\"sdk_reconnect_request_started\",e.CONNECTED=\"sdk_connection_established\",e.CONNECTED_MOBILE=\"sdk_connection_established_mobile\",e.AUTHORIZED=\"sdk_connection_authorized\",e.REJECTED=\"sdk_connection_rejected\",e.TERMINATED=\"sdk_connection_terminated\",e.DISCONNECTED=\"sdk_disconnected\",e.SDK_USE_EXTENSION=\"sdk_use_extension\",e.SDK_RPC_REQUEST=\"sdk_rpc_request\",e.SDK_RPC_REQUEST_RECEIVED=\"sdk_rpc_request_received\",e.SDK_RPC_REQUEST_DONE=\"sdk_rpc_request_done\",e.SDK_EXTENSION_UTILIZED=\"sdk_extension_utilized\",e.SDK_USE_INAPP_BROWSER=\"sdk_use_inapp_browser\"}(lr||(lr={}));const fr=(e,t,n)=>l(void 0,void 0,void 0,(function*(){var r,i,o,s,a,c;const{remote:d,state:l}=e,{channelId:u,isOriginator:h}=l;if(\"error_terminated\"===t)return Yn.SocketService(`handleJoinChannelResults: Channel ${u} terminated`),void e.emit(exports.EventType.TERMINATE);if(!n)return void Yn.SocketService(`handleJoinChannelResults: No result for channel ${u}`);const{persistence:f,walletKey:p,rejected:m}=n;if(Yn.SocketService(`handleJoinChannelResults: Channel ${u} persistence=${f} walletKey=${p} rejected=${m}`),m)return Yn.SocketService(`handleJoinChannelResults: Channel ${u} rejected`),yield e.remote.disconnect({terminate:!0}),e.remote.emit(exports.EventType.REJECTED,{channelId:u}),void e.remote.emitServiceStatusEvent();if(p&&!(null===(r=d.state.channelConfig)||void 0===r?void 0:r.otherKey)){e.getKeyExchange().setOtherPublicKey(p),null===(i=e.state.keyExchange)||void 0===i||i.setKeysExchanged(!0),d.state.ready=!0,d.state.authorized=!0,d.emit(exports.EventType.AUTHORIZED);const{communicationLayer:t,storageManager:n}=d.state,r=Object.assign(Object.assign({},d.state.channelConfig),{channelId:null!==(o=d.state.channelId)&&void 0!==o?o:\"\",validUntil:Date.now()+ir,localKey:null==t?void 0:t.getKeyInfo().ecies.private,otherKey:p});e.sendMessage({type:dr.KEY_HANDSHAKE_ACK}).catch((e=>{})),null===(s=e.state.socket)||void 0===s||s.emit(exports.MessageType.PING,{id:u,clientType:h?\"dapp\":\"wallet\",context:\"on_channel_reconnect\",message:\"\"}),yield null==n?void 0:n.persistChannelConfig(r),d.emitServiceStatusEvent(),d.setConnectionStatus(exports.ConnectionStatus.LINKED)}f&&(e.emit(exports.EventType.CHANNEL_PERSISTENCE),null===(a=e.state.keyExchange)||void 0===a||a.setKeysExchanged(!0),d.state.ready=!0,d.state.authorized=!0,d.emit(exports.EventType.AUTHORIZED),Xn(Object.assign(Object.assign({id:null!=u?u:\"\",event:h?lr.CONNECTED:lr.CONNECTED_MOBILE},e.remote.state.originatorInfo),{sdkVersion:e.remote.state.sdkVersion,commLayer:e.state.communicationLayerPreference,commLayerVersion:tr.version,walletVersion:null===(c=e.remote.state.walletInfo)||void 0===c?void 0:c.version}),l.communicationServerUrl).catch((e=>{})))})),pr=e=>new Promise((t=>{setTimeout(t,e)})),mr=(e,t,...n)=>l(void 0,[e,t,...n],void 0,(function*(e,t,n=200){let r;const i=Date.now();let o=!1;for(;!o;){if(o=Date.now()-i>3e5,r=t[e],void 0!==r.elapsedTime)return r;yield pr(n)}throw new Error(`RPC ${e} timed out`)})),gr=e=>l(void 0,void 0,void 0,(function*(){const{state:t}=e,{socket:n,channelId:r,context:i,isOriginator:o,isReconnecting:s}=t;if(s)return Yn.SocketService(\"[SocketService: reconnectSocket()] Reconnection already in progress, skipping\",e),!1;if(!n)return Yn.SocketService(\"[SocketService: reconnectSocket()] socket is not defined\",e),!1;if(!r)return!1;const{connected:a}=n;t.isReconnecting=!0,t.reconnectionAttempts=0,Yn.SocketService(`[SocketService: reconnectSocket()] connected=${a} trying to reconnect after socketio disconnection`,e);try{for(;3>t.reconnectionAttempts;){if(Yn.SocketService(`[SocketService: reconnectSocket()] Attempt ${t.reconnectionAttempts+1} of 3`,e),yield pr(200),n.connected)return Yn.SocketService(\"Socket already connected --- ping to retrieve messages\"),n.emit(exports.MessageType.PING,{id:r,clientType:o?\"dapp\":\"wallet\",context:\"on_channel_config\",message:\"\"}),!0;t.resumed=!0,n.connect(),e.emit(exports.EventType.SOCKET_RECONNECT);try{if(yield new Promise(((t,s)=>{n.emit(exports.EventType.JOIN_CHANNEL,{channelId:r,context:`${i}connect_again`,clientType:o?\"dapp\":\"wallet\"},((n,r)=>l(void 0,void 0,void 0,(function*(){try{yield fr(e,n,r),t()}catch(e){s(e)}}))))})),yield pr(100),n.connected)return Yn.SocketService(`Reconnection successful on attempt ${t.reconnectionAttempts+1}`),!0}catch(e){Yn.SocketService(`Error during reconnection attempt ${t.reconnectionAttempts+1}:`,e)}t.reconnectionAttempts+=1,3>t.reconnectionAttempts&&(yield pr(200))}return Yn.SocketService(\"Failed to reconnect after 3 attempts\"),!1}finally{t.isReconnecting=!1,t.reconnectionAttempts=0}}));function vr(e,t){return l(this,void 0,void 0,(function*(){var n;const r=null===(n=e.state.keyExchange)||void 0===n?void 0:n.encryptMessage(JSON.stringify(t)),i={id:e.state.channelId,context:e.state.context,clientType:e.state.isOriginator?\"dapp\":\"wallet\",message:r,plaintext:e.state.hasPlaintext?JSON.stringify(t):void 0};return Yn.SocketService(`[SocketService: encryptAndSendMessage()] context=${e.state.context}`,i),t.type===exports.MessageType.TERMINATE&&(e.state.manualDisconnect=!0),new Promise(((t,n)=>{var r;null===(r=e.state.socket)||void 0===r||r.emit(exports.EventType.MESSAGE,i,((e,r)=>{var i;e&&(Yn.SocketService(`[SocketService: encryptAndSendMessage()] error=${e}`),n(e)),Yn.SocketService(\"[encryptAndSendMessage] response\",r),t(null!==(i=null==r?void 0:r.success)&&void 0!==i&&i)}))}))}))}var yr;!function(e){e.RPC_CHECK=\"rpcCheck\",e.SKIPPED_RPC=\"skippedRpc\"}(yr||(yr={}));const Er=[\"eth_sendTransaction\",\"eth_signTypedData\",\"eth_signTransaction\",\"personal_sign\",\"wallet_requestPermissions\",\"wallet_switchEthereumChain\",\"eth_signTypedData_v3\",\"eth_signTypedData_v4\",\"metamask_connectSign\",\"metamask_connectWith\",\"metamask_batch\"].map((e=>e.toLowerCase()));const br=[{event:exports.EventType.CLIENTS_CONNECTED,handler:function(e,t){return n=>l(this,void 0,void 0,(function*(){var n,r,i,o,s,a,c,d,l,u,h;const f=null!==(r=null===(n=e.remote.state.channelConfig)||void 0===n?void 0:n.relayPersistence)&&void 0!==r&&r;if(Yn.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected-${t}' relayPersistence=${f} resumed=${e.state.resumed}  clientsPaused=${e.state.clientsPaused} keysExchanged=${null===(i=e.state.keyExchange)||void 0===i?void 0:i.areKeysExchanged()} isOriginator=${e.state.isOriginator}`),e.emit(exports.EventType.CLIENTS_CONNECTED,{isOriginator:e.state.isOriginator,keysExchanged:null===(o=e.state.keyExchange)||void 0===o?void 0:o.areKeysExchanged(),context:e.state.context}),e.state.resumed)e.state.isOriginator||(Yn.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} 'clients_connected' / keysExchanged=${null===(s=e.state.keyExchange)||void 0===s?void 0:s.areKeysExchanged()} -- backward compatibility`),null===(a=e.state.keyExchange)||void 0===a||a.start({isOriginator:null!==(c=e.state.isOriginator)&&void 0!==c&&c})),e.state.resumed=!1;else if(e.state.clientsPaused)Yn.SocketService(\"[SocketService: handleClientsConnected()] 'clients_connected' skip sending originatorInfo on pause\");else if(!e.state.isOriginator){const t=!f;Yn.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected' / keysExchanged=${null===(d=e.state.keyExchange)||void 0===d?void 0:d.areKeysExchanged()} -- force=${t} -- backward compatibility`),Yn.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected' / keysExchanged=${null===(l=e.state.keyExchange)||void 0===l?void 0:l.areKeysExchanged()} -- force=${t} -- backward compatibility`),null===(u=e.state.keyExchange)||void 0===u||u.start({isOriginator:null!==(h=e.state.isOriginator)&&void 0!==h&&h,force:t})}e.state.clientsConnected=!0,e.state.clientsPaused=!1}))}},{event:exports.EventType.CHANNEL_CREATED,handler:function(e,t){return n=>{Yn.SocketService(`[SocketService: handleChannelCreated()] context=${e.state.context} on 'channel_created-${t}'`,n),e.emit(exports.EventType.CHANNEL_CREATED,n)}}},{event:exports.EventType.CLIENTS_DISCONNECTED,handler:function(e,t){return()=>{var n;e.state.clientsConnected=!1,Yn.SocketService(`[SocketService: handlesClientsDisconnected()] context=${e.state.context} on 'clients_disconnected-${t}'`),e.remote.state.relayPersistence?Yn.SocketService(`[SocketService: handlesClientsDisconnected()] context=${e.state.context} on 'clients_disconnected-${t}' - relayPersistence enabled, skipping key exchange cleanup.`):(e.state.isOriginator&&!e.state.clientsPaused&&(null===(n=e.state.keyExchange)||void 0===n||n.clean()),e.emit(exports.EventType.CLIENTS_DISCONNECTED,t))}}},{event:exports.EventType.CONFIG,handler:function(e,t){return n=>l(this,void 0,void 0,(function*(){var r,i,o;Yn.SocketService(`[SocketService: handleChannelConfig()] update relayPersistence on 'config-${t}'`,n);const{persistence:s,walletKey:a}=n;e.state.isOriginator&&e.remote.state.channelConfig?(n.walletKey&&!e.remote.state.channelConfig.otherKey&&(Yn.SocketService(`Setting wallet key ${a}`),e.remote.state.channelConfig.otherKey=a,e.getKeyExchange().setOtherPublicKey(n.walletKey),null===(r=e.state.keyExchange)||void 0===r||r.setKeysExchanged(!0),yield e.remote.sendMessage({type:dr.KEY_HANDSHAKE_ACK}),yield e.remote.sendMessage({type:exports.MessageType.PING}),yield null===(i=e.remote.state.storageManager)||void 0===i?void 0:i.persistChannelConfig(e.remote.state.channelConfig)),!0!==s||e.remote.state.channelConfig.relayPersistence||(Yn.SocketService(`Setting relay persistence ${s}`),e.remote.state.channelConfig.relayPersistence=s,e.remote.state.relayPersistence=!0,e.remote.emit(exports.EventType.CHANNEL_PERSISTENCE),e.remote.state.authorized=!0,e.remote.state.ready=!0,e.remote.emit(exports.EventType.AUTHORIZED),yield null===(o=e.remote.state.storageManager)||void 0===o?void 0:o.persistChannelConfig(e.remote.state.channelConfig))):e.state.isOriginator||n.persistence&&(e.remote.state.relayPersistence=!0,e.remote.emit(exports.EventType.CHANNEL_PERSISTENCE))}))}},{event:exports.EventType.MESSAGE,handler:function(e,t){return n=>{var r,i,o,s,a,c,d,l,u,h,f,p,m,g,v,y,E,b;const{ackId:w,message:S,error:_}=n,C=null!==(r=e.remote.state.relayPersistence)&&void 0!==r&&r;if(Yn.SocketService(`[SocketService handleMessage()]  relayPersistence=${C}  context=${e.state.context} on 'message' ${t} keysExchanged=${null===(i=e.state.keyExchange)||void 0===i?void 0:i.areKeysExchanged()}`,n),_)throw Yn.SocketService(`\\n      [SocketService handleMessage()] context=${e.state.context}::on 'message' error=${_}`),new Error(_);const x=\"string\"==typeof S;if(!x&&(null==S?void 0:S.type)===dr.KEY_HANDSHAKE_START){if(C)return;return Yn.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' received HANDSHAKE_START isOriginator=${e.state.isOriginator}`,S),void(null===(o=e.state.keyExchange)||void 0===o||o.start({isOriginator:null!==(s=e.state.isOriginator)&&void 0!==s&&s,force:!0}))}if(!x&&(null===(a=null==S?void 0:S.type)||void 0===a?void 0:a.startsWith(\"key_handshake\"))){if(C)return;return Yn.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' emit KEY_EXCHANGE`,S),void e.emit(cr.KEY_EXCHANGE,{message:S,context:e.state.context})}if(x&&!(null===(c=e.state.keyExchange)||void 0===c?void 0:c.areKeysExchanged())){let t=!1;try{Yn.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' trying to decrypt message`),null===(d=e.state.keyExchange)||void 0===d||d.decryptMessage(S),t=!0}catch(t){Yn.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' error`,t)}if(!t)return e.state.isOriginator?null===(u=e.state.keyExchange)||void 0===u||u.start({isOriginator:null!==(h=e.state.isOriginator)&&void 0!==h&&h}):e.sendMessage({type:dr.KEY_HANDSHAKE_START}).catch((e=>{})),void Yn.SocketService(`Message ignored because invalid key exchange status. step=${null===(f=e.state.keyExchange)||void 0===f?void 0:f.getKeyInfo().step}`,null===(p=e.state.keyExchange)||void 0===p?void 0:p.getKeyInfo(),S);Yn.SocketService(\"Invalid key exchange status detected --- updating it.\"),null===(l=e.state.keyExchange)||void 0===l||l.setKeysExchanged(!0)}else if(!x&&(null==S?void 0:S.type))return void e.emit(exports.EventType.MESSAGE,S);if(!x)return void e.emit(exports.EventType.MESSAGE,S);const k=null===(m=e.state.keyExchange)||void 0===m?void 0:m.decryptMessage(S),M=JSON.parse(null!=k?k:\"{}\");if(w&&(null==w?void 0:w.length)>0&&(Yn.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' ackid=${w} channelId=${t}`),null===(g=e.state.socket)||void 0===g||g.emit(exports.EventType.MESSAGE_ACK,{ackId:w,channelId:t,clientType:e.state.isOriginator?\"dapp\":\"wallet\"})),e.state.clientsPaused=(null==M?void 0:M.type)===exports.MessageType.PAUSE,e.state.isOriginator&&M.data){const t=M.data,n=e.state.rpcMethodTracker[t.id];if(n){const r=Date.now()-n.timestamp;Yn.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' received answer for id=${t.id} method=${n.method} responseTime=${r}`,M),e.remote.state.analytics&&Er.includes(n.method.toLowerCase())&&Xn(Object.assign(Object.assign({id:null!==(v=e.remote.state.channelId)&&void 0!==v?v:\"\",event:lr.SDK_RPC_REQUEST_DONE,sdkVersion:e.remote.state.sdkVersion,commLayerVersion:tr.version},e.remote.state.originatorInfo),{walletVersion:null===(y=e.remote.state.walletInfo)||void 0===y?void 0:y.version,params:{method:n.method,from:\"mobile\"}}),e.remote.state.communicationServerUrl).catch((e=>{}));const i=Object.assign(Object.assign({},n),{result:t.result,error:t.error?{code:null===(E=t.error)||void 0===E?void 0:E.code,message:null===(b=t.error)||void 0===b?void 0:b.message}:void 0,elapsedTime:r});e.state.rpcMethodTracker[t.id]=i,e.emit(exports.EventType.RPC_UPDATE,i)}}e.emit(exports.EventType.MESSAGE,{message:M})}}},{event:exports.EventType.REJECTED,handler:function(e,t){return n=>l(this,void 0,void 0,(function*(){var n;e.state.isOriginator&&!e.remote.state.ready?(Yn.SocketService(`[SocketService: handleChannelRejected()] context=${e.state.context} channelId=${t} isOriginator=${e.state.isOriginator} ready=${e.remote.state.ready}`,e.remote.state.originatorInfo),Xn(Object.assign(Object.assign({id:t,event:lr.REJECTED},e.remote.state.originatorInfo),{sdkVersion:e.remote.state.sdkVersion,commLayer:e.state.communicationLayerPreference,commLayerVersion:tr.version,walletVersion:null===(n=e.remote.state.walletInfo)||void 0===n?void 0:n.version}),e.remote.state.communicationServerUrl).catch((e=>{})),yield e.remote.disconnect({terminate:!0}),e.remote.emit(exports.EventType.REJECTED,{channelId:t}),e.remote.setConnectionStatus(exports.ConnectionStatus.DISCONNECTED)):Yn.SocketService(`[SocketService: handleChannelRejected()] SKIP -- channelId=${t} isOriginator=${e.state.isOriginator} ready=${e.remote.state.ready}`)}))}},{event:\"clients_waiting_to_join\",handler:function(e,t){return n=>{Yn.SocketService(`[SocketService: handleClientsWaitingToJoin()] context=${e.state.context} on 'clients_waiting_to_join-${t}'`,n),e.emit(exports.EventType.CLIENTS_WAITING,n)}}}],wr=[{event:exports.EventType.KEY_INFO,handler:function(e){return t=>{Yn.SocketService(\"[SocketService: handleKeyInfo()] on 'KEY_INFO'\",t),e.emit(exports.EventType.KEY_INFO,t)}}},{event:exports.EventType.KEYS_EXCHANGED,handler:function(e){return()=>{var t,n,r;Yn.SocketService(`[SocketService: handleKeysExchanged()] on 'keys_exchanged' keyschanged=${null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged()}`);const{channelConfig:i}=e.remote.state;if(i){const t=e.getKeyExchange().getKeyInfo().ecies;i.localKey=t.private,i.otherKey=t.otherPubKey,e.remote.state.channelConfig=i,null===(n=e.remote.state.storageManager)||void 0===n||n.persistChannelConfig(i).catch((e=>{}))}e.emit(exports.EventType.KEYS_EXCHANGED,{keysExchanged:null===(r=e.state.keyExchange)||void 0===r?void 0:r.areKeysExchanged(),isOriginator:e.state.isOriginator});const o={keyInfo:e.getKeyInfo()};e.emit(exports.EventType.SERVICE_STATUS,o)}}}];function Sr(e,t){Yn.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} setting socket listeners for channel ${t}...`);const{socket:n}=e.state,{keyExchange:r}=e.state;n&&e.state.isOriginator&&(e.state.debug&&(null==n||n.io.on(\"error\",(t=>{Yn.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=error`,t)})),null==n||n.io.on(\"reconnect\",(t=>{Yn.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect`,t),gr(e).catch((e=>{}))})),null==n||n.io.on(\"reconnect_error\",(t=>{Yn.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect_error`,t)})),null==n||n.io.on(\"reconnect_failed\",(()=>{Yn.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect_failed`)}))),null==n||n.on(\"disconnect\",(t=>(Yn.SocketService(`[SocketService: setupChannelListener()] on 'disconnect' -- MetaMaskSDK socket disconnected '${t}' begin recovery...`),function(e){return t=>{Yn.SocketService(`[SocketService: handleDisconnect()] on 'disconnect' manualDisconnect=${e.state.manualDisconnect}`,t),e.state.manualDisconnect||(e.emit(exports.EventType.SOCKET_DISCONNECTED),gr(e).catch((e=>{})))}}(e)(t))))),br.forEach((({event:r,handler:i})=>{null==n||n.on(`${r}-${t}`,i(e,t))})),wr.forEach((({event:t,handler:n})=>{null==r||r.on(t,n(e))})),e.state.setupChannelListeners=!0}class _r extends i.EventEmitter2{constructor(e){super(),this.state={clientsConnected:!1,clientsPaused:!1,manualDisconnect:!1,lastRpcId:void 0,rpcMethodTracker:{},hasPlaintext:!1,communicationServerUrl:\"\",focusListenerAdded:!1,removeFocusListener:void 0,isReconnecting:!1,reconnectionAttempts:0},this.options=e;const{reconnect:n,communicationLayerPreference:r,communicationServerUrl:i,context:o,remote:s,logging:a}=e;this.state.resumed=n,this.state.context=o,this.state.isOriginator=s.state.isOriginator,this.state.communicationLayerPreference=r,this.state.debug=!0===(null==a?void 0:a.serviceLayer),this.remote=s,!0===(null==a?void 0:a.serviceLayer)&&t.enable(\"SocketService:Layer\"),this.state.communicationServerUrl=i,this.state.hasPlaintext=this.state.communicationServerUrl!==nr&&!0===(null==a?void 0:a.plaintext),Yn.SocketService(`[SocketService: constructor()] Socket IO url: ${this.state.communicationServerUrl}`),this.initSocket()}initSocket(){var e;const{otherPublicKey:t,ecies:n,logging:r}=this.options,i={autoConnect:!1,transports:rr,withCredentials:!0},o=this.state.communicationServerUrl;Yn.SocketService(`[SocketService: initSocket()] Socket IO url: ${o}`),this.state.socket=s.io(o,i),function(e){if(\"undefined\"!=typeof window&&\"undefined\"!=typeof document&&(Yn.SocketService(`[SocketService: setupSocketFocusListener()] hasFocus=${document.hasFocus()}`,e),!e.state.focusListenerAdded)){const t=()=>{Yn.SocketService(\"Document has focus --- reconnecting socket\"),gr(e).catch((e=>{}))};window.addEventListener(\"focus\",t),e.state.focusListenerAdded=!0,e.state.removeFocusListener=()=>{window.removeEventListener(\"focus\",t),e.state.focusListenerAdded=!1}}}(this);const a={communicationLayer:this,otherPublicKey:t,sendPublicKey:!1,context:null!==(e=this.state.context)&&void 0!==e?e:\"\",ecies:n,logging:r};this.state.keyExchange=new hr(a)}resetKeys(){return Yn.SocketService(\"[SocketService: resetKeys()] Resetting keys.\"),void(null===(e=this.state.keyExchange)||void 0===e||e.resetKeys());var e}createChannel(){return l(this,void 0,void 0,(function*(){return function(e){return l(this,void 0,void 0,(function*(){var t,n,r;if(Yn.SocketService(`[SocketService: createChannel()] context=${e.state.context}`),e.state.socket||e.initSocket(),null===(t=e.state.socket)||void 0===t?void 0:t.connected)throw new Error(\"socket already connected\");null===(n=e.state.socket)||void 0===n||n.connect(),e.state.manualDisconnect=!1,e.state.isOriginator=!0;const i=o.v4();e.state.channelId=i,Sr(e,i),yield new Promise(((t,n)=>{var r;null===(r=e.state.socket)||void 0===r||r.emit(exports.EventType.JOIN_CHANNEL,{channelId:i,context:`${e.state.context}createChannel`,clientType:\"dapp\"},((r,i)=>l(this,void 0,void 0,(function*(){try{yield fr(e,r,i),t()}catch(e){n(e)}}))))}));const s=null===(r=e.state.keyExchange)||void 0===r?void 0:r.getKeyInfo();return{channelId:i,pubKey:(null==s?void 0:s.ecies.public)||\"\",privKey:(null==s?void 0:s.ecies.private)||\"\"}}))}(this)}))}connectToChannel({channelId:e,withKeyExchange:t=!1,authorized:n}){return function(e){return l(this,arguments,void 0,(function*({options:e,instance:t}){const{channelId:n,authorized:r,withKeyExchange:i}=e,{state:o,remote:s}=t,{isOriginator:a=!1,socket:c,keyExchange:d}=o,{channelConfig:u}=s.state;if(null==c?void 0:c.connected)throw new Error(\"socket already connected\");if(a&&(null==u?void 0:u.relayPersistence)){const{localKey:e,otherKey:t}=u;e&&t&&(null==d||d.setRelayPersistence({localKey:e,otherKey:t}))}return Object.assign(o,{manualDisconnect:!1,withKeyExchange:i,isOriginator:a,channelId:n}),null==c||c.connect(),Sr(t,n),!a&&r&&(null==d||d.setKeysExchanged(!0),Object.assign(s.state,{ready:!0,authorized:!0})),new Promise((e=>{var i;const s=null===(i=null==d?void 0:d.getKeyInfo())||void 0===i?void 0:i.ecies.public;null==c||c.emit(exports.EventType.JOIN_CHANNEL,{channelId:n,context:`${o.context}_connectToChannel`,clientType:a?\"dapp\":\"wallet\",publicKey:r&&!a?s:void 0},((n,r)=>l(this,void 0,void 0,(function*(){yield fr(t,n,r),e()}))))}))}))}({options:{channelId:e,withKeyExchange:t,authorized:n},instance:this})}getKeyInfo(){return this.state.keyExchange.getKeyInfo()}keyCheck(){var e,t;null===(t=(e=this).state.socket)||void 0===t||t.emit(exports.EventType.MESSAGE,{id:e.state.channelId,context:e.state.context,message:{type:dr.KEY_HANDSHAKE_CHECK,pubkey:e.getKeyInfo().ecies.otherPubKey}})}getKeyExchange(){return this.state.keyExchange}sendMessage(e){return l(this,void 0,void 0,(function*(){return function(e,t){return l(this,void 0,void 0,(function*(){var n,r,i;if(!e.state.channelId)throw Yn.SocketService(\"handleSendMessage: no channelId - Create a channel first\"),new Error(\"Create a channel first\");if(Yn.SocketService(`[SocketService: handleSendMessage()] context=${e.state.context} areKeysExchanged=${null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged()}`,t),null===(r=null==t?void 0:t.type)||void 0===r?void 0:r.startsWith(\"key_handshake\"))return function(e,t){var n;Yn.SocketService(`[SocketService: handleKeyHandshake()] context=${e.state.context}`,t),null===(n=e.state.socket)||void 0===n||n.emit(exports.EventType.MESSAGE,{id:e.state.channelId,context:e.state.context,clientType:e.state.isOriginator?\"dapp\":\"wallet\",message:t})}(e,t),!0;!function(e,t){var n;if(!(null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged())&&!e.remote.state.relayPersistence)throw Yn.SocketService(`[SocketService: validateKeyExchange()] context=${e.state.context} ERROR keys not exchanged`,t),new Error(\"Keys not exchanged BBB\")}(e,t),function(e,t){var n;const r=null!==(n=null==t?void 0:t.method)&&void 0!==n?n:\"\",i=null==t?void 0:t.id;e.state.isOriginator&&i&&(e.state.rpcMethodTracker[i]={id:i,timestamp:Date.now(),method:r},e.emit(exports.EventType.RPC_UPDATE,e.state.rpcMethodTracker[i]))}(e,t);const o=yield vr(e,t);return e.remote.state.analytics&&e.remote.state.isOriginator&&t.method&&Er.includes(t.method.toLowerCase())&&Xn({id:null!==(i=e.remote.state.channelId)&&void 0!==i?i:\"\",event:lr.SDK_RPC_REQUEST,params:{method:t.method,from:\"mobile\"}},e.remote.state.communicationServerUrl).catch((e=>{})),function(e,t){return l(this,void 0,void 0,(function*(){var n;const r=null==t?void 0:t.id,i=null!==(n=null==t?void 0:t.method)&&void 0!==n?n:\"\";if(e.state.isOriginator&&r)try{const n=mr(r,e.state.rpcMethodTracker,200).then((e=>({type:yr.RPC_CHECK,result:e}))),o=(()=>l(this,void 0,void 0,(function*(){const t=yield(e=>l(void 0,[e],void 0,(function*({rpcId:e,instance:t}){for(;t.state.lastRpcId===e||void 0===t.state.lastRpcId;)yield pr(200);return t.state.lastRpcId})))({instance:e,rpcId:r}),n=yield mr(t,e.state.rpcMethodTracker,200);return{type:yr.SKIPPED_RPC,result:n}})))(),s=yield Promise.race([n,o]);if(s.type===yr.RPC_CHECK){const e=s.result;Yn.SocketService(`[SocketService:handleRpcReplies()] id=${t.id} ${i} ( ${e.elapsedTime} ms)`,e.result)}else{if(s.type!==yr.SKIPPED_RPC)throw new Error(`Error handling RPC replies for ${r}`);{const t=Object.assign(Object.assign({},e.state.rpcMethodTracker[r]),{error:new Error(\"SDK_CONNECTION_ISSUE\")});e.emit(exports.EventType.RPC_UPDATE,t);const n={data:Object.assign(Object.assign({},t),{jsonrpc:\"2.0\"}),name:\"metamask-provider\"};e.emit(exports.EventType.MESSAGE,{message:n})}}}catch(e){throw e}}))}(e,t).catch((e=>{})),o}))}(this,e)}))}ping(){return function(e){return l(this,void 0,void 0,(function*(){var t,n;Yn.SocketService(`[SocketService: ping()] context=${e.state.context} originator=${e.state.isOriginator} keysExchanged=${null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged()}`),null===(n=e.state.socket)||void 0===n||n.emit(exports.MessageType.PING,{id:e.state.channelId,context:\"ping\",clientType:e.remote.state.isOriginator?\"dapp\":\"wallet\",message:\"\"})}))}(this)}pause(){return function(e){return l(this,void 0,void 0,(function*(){var t,n;Yn.SocketService(`[SocketService: pause()] context=${e.state.context}`),e.state.manualDisconnect=!0,(null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged())&&(yield e.sendMessage({type:exports.MessageType.PAUSE})),null===(n=e.state.socket)||void 0===n||n.disconnect()}))}(this)}isConnected(){var e;return null===(e=this.state.socket)||void 0===e?void 0:e.connected}resume(){return function(e){return l(this,void 0,void 0,(function*(){const{state:t,remote:n}=e,{socket:r,channelId:i,context:o,keyExchange:s,isOriginator:a}=t,{isOriginator:c}=n.state;if(Yn.SocketService(`[SocketService: resume()] channelId=${i} context=${o} connected=${null==r?void 0:r.connected} manualDisconnect=${t.manualDisconnect} resumed=${t.resumed} keysExchanged=${null==s?void 0:s.areKeysExchanged()}`),!i)throw Yn.SocketService(\"[SocketService: resume()] channelId is not defined\"),new Error(\"ChannelId is not defined\");(null==r?void 0:r.connected)?(Yn.SocketService(\"[SocketService: resume()] already connected.\"),r.emit(exports.MessageType.PING,{id:i,clientType:c?\"dapp\":\"wallet\",context:\"on_channel_config\",message:\"\"}),n.hasRelayPersistence()||(null==s?void 0:s.areKeysExchanged())||(a?yield e.sendMessage({type:exports.MessageType.READY}):null==s||s.start({isOriginator:!1}))):(null==r||r.connect(),Yn.SocketService(`[SocketService: resume()] after connecting socket --\\x3e connected=${null==r?void 0:r.connected}`),null==r||r.emit(exports.EventType.JOIN_CHANNEL,{channelId:i,context:`${o}_resume`,clientType:c?\"dapp\":\"wallet\"},((t,n)=>l(this,void 0,void 0,(function*(){try{yield fr(e,t,n)}catch(e){}}))))),t.manualDisconnect=!1,t.resumed=!0}))}(this)}getRPCMethodTracker(){return this.state.rpcMethodTracker}disconnect(e){return function(e,t){var n,r,i,o,s;Yn.SocketService(`[SocketService: disconnect()] context=${e.state.context}`,t),(null==t?void 0:t.terminate)&&(null===(r=(n=e.state).removeFocusListener)||void 0===r||r.call(n),e.state.channelId=t.channelId,null===(i=e.state.socket)||void 0===i||i.removeAllListeners(),null===(o=e.state.keyExchange)||void 0===o||o.clean(),e.remote.state.ready=!1,e.state.socket=void 0,e.state.rpcMethodTracker={}),e.state.manualDisconnect=!0,null===(s=e.state.socket)||void 0===s||s.disconnect()}(this,e)}}var Cr;function xr(e){return()=>l(this,void 0,void 0,(function*(){var t,n,r;const{state:i}=e;if(i.authorized)return;yield(()=>l(this,void 0,void 0,(function*(){for(;!i.walletInfo;)yield pr(500)})))();const o=\"7.3\".localeCompare((null===(t=i.walletInfo)||void 0===t?void 0:t.version)||\"\");if(Yn.RemoteCommunication(`[RemoteCommunication: handleAuthorizedEvent()] HACK 'authorized' version=${null===(n=i.walletInfo)||void 0===n?void 0:n.version} compareValue=${o}`),1!==o)return;const s=i.platformType===exports.PlatformType.MobileWeb||i.platformType===exports.PlatformType.ReactNative||i.platformType===exports.PlatformType.MetaMaskMobileWebview;Yn.RemoteCommunication(`[RemoteCommunication: handleAuthorizedEvent()] HACK 'authorized' platform=${i.platformType} secure=${s} channel=${i.channelId} walletVersion=${null===(r=i.walletInfo)||void 0===r?void 0:r.version}`),s&&(i.authorized=!0,e.emit(exports.EventType.AUTHORIZED))}))}function kr(e){return t=>{const{state:n}=e;Yn.RemoteCommunication(`[RemoteCommunication: handleChannelCreatedEvent()] context=${n.context} on 'channel_created' channelId=${t}`),e.emit(exports.EventType.CHANNEL_CREATED,t)}}function Mr(e,t){return()=>{var n,r,i,o;const{state:s}=e;Yn.RemoteCommunication(`[RemoteCommunication: handleClientsConnectedEvent()] on 'clients_connected' channel=${s.channelId} keysExchanged=${null===(r=null===(n=s.communicationLayer)||void 0===n?void 0:n.getKeyInfo())||void 0===r?void 0:r.keysExchanged}`),s.analytics&&Xn(Object.assign(Object.assign({id:null!==(i=s.channelId)&&void 0!==i?i:\"\",event:s.reconnection?lr.RECONNECT:s.isOriginator?lr.REQUEST:lr.REQUEST_MOBILE},s.originatorInfo),{commLayer:t,sdkVersion:s.sdkVersion,walletVersion:null===(o=s.walletInfo)||void 0===o?void 0:o.version,commLayerVersion:tr.version}),s.communicationServerUrl).catch((e=>{})),s.clientsConnected=!0,s.originatorInfoSent=!1,e.emit(exports.EventType.CLIENTS_CONNECTED)}}function Ar(e){return t=>{const{state:n}=e;Yn.RemoteCommunication(`[RemoteCommunication: handleClientsDisconnectedEvent()] context=${n.context} on 'clients_disconnected' channelId=${t}`),n.relayPersistence||(n.clientsConnected=!1,n.ready=!1,n.authorized=!1),e.emit(exports.EventType.CLIENTS_DISCONNECTED,n.channelId),e.setConnectionStatus(exports.ConnectionStatus.DISCONNECTED)}}function Tr(e){return t=>{var n;const{state:r}=e;if(Yn.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] context=${r.context} on 'clients_waiting' numberUsers=${t} ready=${r.ready} autoStarted=${r.originatorConnectStarted}`),e.setConnectionStatus(exports.ConnectionStatus.WAITING),e.emit(exports.EventType.CLIENTS_WAITING,t),r.originatorConnectStarted){Yn.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] on 'clients_waiting' watch autoStarted=${r.originatorConnectStarted} timeout`,r.autoConnectOptions);const t=(null===(n=r.autoConnectOptions)||void 0===n?void 0:n.timeout)||3e3,i=setTimeout((()=>{Yn.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] setTimeout(${t}) terminate channelConfig`,r.autoConnectOptions),r.originatorConnectStarted=!1,r.ready||e.setConnectionStatus(exports.ConnectionStatus.TIMEOUT),clearTimeout(i)}),t)}}}function Ir(e,t){return n=>{var r,i,o,s,a,c,d,l;const{state:u}=e;if(Yn.RemoteCommunication(`[RemoteCommunication: handleKeysExchangedEvent()] context=${u.context} on commLayer.'keys_exchanged' channel=${u.channelId}`,n),null===(i=null===(r=u.communicationLayer)||void 0===r?void 0:r.getKeyInfo())||void 0===i?void 0:i.keysExchanged){const t=Object.assign(Object.assign({},u.channelConfig),{channelId:null!==(o=u.channelId)&&void 0!==o?o:\"\",validUntil:(null===(s=u.channelConfig)||void 0===s?void 0:s.validUntil)||ir,localKey:u.communicationLayer.getKeyInfo().ecies.private,otherKey:u.communicationLayer.getKeyInfo().ecies.otherPubKey});null===(a=u.storageManager)||void 0===a||a.persistChannelConfig(t).catch((e=>{})),e.setConnectionStatus(exports.ConnectionStatus.LINKED)}!function(e,t){var n,r,i,o,s,a,c,d;const{state:l}=e;Yn.RemoteCommunication(`[RemoteCommunication: setLastActiveDate()] channel=${l.channelId}`,t);const u=Object.assign(Object.assign({},l.channelConfig),{channelId:null!==(n=l.channelId)&&void 0!==n?n:\"\",validUntil:null!==(i=null===(r=l.channelConfig)||void 0===r?void 0:r.validUntil)&&void 0!==i?i:0,relayPersistence:l.relayPersistence,localKey:null===(s=null===(o=l.communicationLayer)||void 0===o?void 0:o.state.keyExchange)||void 0===s?void 0:s.getKeyInfo().ecies.private,otherKey:null===(c=null===(a=l.communicationLayer)||void 0===a?void 0:a.state.keyExchange)||void 0===c?void 0:c.getKeyInfo().ecies.otherPubKey,lastActive:t.getTime()});null===(d=l.storageManager)||void 0===d||d.persistChannelConfig(u)}(e,new Date),u.analytics&&u.channelId&&Xn(Object.assign(Object.assign({id:u.channelId,event:n.isOriginator?lr.CONNECTED:lr.CONNECTED_MOBILE},u.originatorInfo),{sdkVersion:u.sdkVersion,commLayer:t,commLayerVersion:tr.version,walletVersion:null===(c=u.walletInfo)||void 0===c?void 0:c.version}),u.communicationServerUrl).catch((e=>{})),u.isOriginator=n.isOriginator,n.isOriginator||(null===(d=u.communicationLayer)||void 0===d||d.sendMessage({type:exports.MessageType.READY}),u.ready=!0,u.paused=!1),n.isOriginator&&!u.originatorInfoSent&&(null===(l=u.communicationLayer)||void 0===l||l.sendMessage({type:exports.MessageType.ORIGINATOR_INFO,originatorInfo:u.originatorInfo,originator:u.originatorInfo}),u.originatorInfoSent=!0)}}function Pr(e){return t=>{let n=t;t.message&&(n=n.message),function(e,t){const{state:n}=t;if(Yn.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] context=${n.context} on 'message' typeof=${typeof e}`,e),t.state.ready=!0,n.isOriginator||e.type!==exports.MessageType.ORIGINATOR_INFO)if(n.isOriginator&&e.type===exports.MessageType.WALLET_INFO)!function(e,t){const{state:n}=e;n.walletInfo=t.walletInfo,n.paused=!1}(t,e);else{if(n.isOriginator&&e.type===exports.MessageType.WALLET_INIT)(function(e,t){return l(this,void 0,void 0,(function*(){var n,r,i;const{state:o}=e;if(o.isOriginator){const o=t.data||{};if(\"object\"==typeof o&&\"accounts\"in o&&\"chainId\"in o&&\"walletKey\"in o)try{const{channelConfig:t}=e.state;if(Yn.RemoteCommunication(\"WALLET_INIT: channelConfig\",JSON.stringify(t,null,2)),t){const s=o.accounts,a=o.chainId,c=o.walletKey;let d,l=!1;\"deeplinkProtocol\"in o&&(l=Boolean(o.deeplinkProtocol),e.state.deeplinkProtocolAvailable=l),\"walletVersion\"in o&&(d=o.walletVersion),yield null===(n=e.state.storageManager)||void 0===n?void 0:n.persistChannelConfig(Object.assign(Object.assign({},t),{otherKey:c,walletVersion:d,deeplinkProtocolAvailable:l,relayPersistence:!0})),yield null===(r=e.state.storageManager)||void 0===r?void 0:r.persistAccounts(s),yield null===(i=e.state.storageManager)||void 0===i?void 0:i.persistChainId(a)}e.emit(exports.EventType.WALLET_INIT,{accounts:o.accounts,chainId:o.chainId})}catch(n){}}}))})(t,e).catch((e=>{Yn.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] error=${e}`)}));else if(e.type===exports.MessageType.TERMINATE)(function(e){return l(this,void 0,void 0,(function*(){const{state:t}=e;t.isOriginator&&(yield Lr({options:{terminate:!0,sendMessage:!1},instance:e}),e.emit(exports.EventType.TERMINATE))}))})(t).catch((e=>{Yn.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] error=${e}`)}));else if(e.type===exports.MessageType.PAUSE)!function(e){const{state:t}=e;t.paused=!0,e.setConnectionStatus(exports.ConnectionStatus.PAUSED)}(t);else if(e.type===exports.MessageType.READY&&n.isOriginator)!function(e){const{state:t}=e;e.setConnectionStatus(exports.ConnectionStatus.LINKED);const n=t.paused;t.paused=!1,e.emit(exports.EventType.CLIENTS_READY,{isOriginator:t.isOriginator,walletInfo:t.walletInfo}),n&&(t.authorized=!0,e.emit(exports.EventType.AUTHORIZED))}(t);else{if(e.type===exports.MessageType.OTP&&n.isOriginator)return void function(e,t){var n;const{state:r}=e;e.emit(exports.EventType.OTP,t.otpAnswer),1===\"6.6\".localeCompare((null===(n=r.walletInfo)||void 0===n?void 0:n.version)||\"\")&&e.emit(exports.EventType.SDK_RPC_CALL,{method:sr.ETH_REQUESTACCOUNTS,params:[]})}(t,e);e.type===exports.MessageType.AUTHORIZED&&n.isOriginator&&function(e){const{state:t}=e;t.authorized=!0,e.emit(exports.EventType.AUTHORIZED)}(t)}t.emit(exports.EventType.MESSAGE,e)}else!function(e,t){var n;const{state:r}=e;null===(n=r.communicationLayer)||void 0===n||n.sendMessage({type:exports.MessageType.WALLET_INFO,walletInfo:r.walletInfo}),r.originatorInfo=t.originatorInfo||t.originator,e.emit(exports.EventType.CLIENTS_READY,{isOriginator:r.isOriginator,originatorInfo:r.originatorInfo}),r.paused=!1}(t,e)}(n,e)}}function Rr(e){return()=>{const{state:t}=e;Yn.RemoteCommunication(\"[RemoteCommunication: handleSocketReconnectEvent()] on 'socket_reconnect' -- reset key exchange status / set ready to false\"),t.ready=!1,t.authorized=!1,ar(t),e.emitServiceStatusEvent({context:\"socket_reconnect\"})}}function Or(e){return()=>{const{state:t}=e;Yn.RemoteCommunication(\"[RemoteCommunication: handleSocketDisconnectedEvent()] on 'socket_Disconnected' set ready to false\"),t.ready=!1}}function Nr(e){return()=>l(this,void 0,void 0,(function*(){var t,n,r,i,o,s,a;const{state:c}=e;Yn.RemoteCommunication(`[RemoteCommunication: handleFullPersistenceEvent()] context=${c.context}`),e.state.ready=!0,e.state.clientsConnected=!0,e.state.authorized=!0,e.state.relayPersistence=!0,null===(t=e.state.communicationLayer)||void 0===t||t.getKeyExchange().setKeysExchanged(!0),e.emit(exports.EventType.KEYS_EXCHANGED,{keysExchanged:!0,isOriginator:!0}),e.emit(exports.EventType.AUTHORIZED),e.emit(exports.EventType.CLIENTS_READY),e.emit(exports.EventType.CHANNEL_PERSISTENCE);try{c.channelConfig=Object.assign(Object.assign({},c.channelConfig),{localKey:null===(n=c.communicationLayer)||void 0===n?void 0:n.getKeyExchange().getKeyInfo().ecies.private,otherKey:null===(r=c.communicationLayer)||void 0===r?void 0:r.getKeyExchange().getOtherPublicKey(),channelId:null!==(i=c.channelId)&&void 0!==i?i:\"\",validUntil:null!==(s=null===(o=c.channelConfig)||void 0===o?void 0:o.validUntil)&&void 0!==s?s:ir,relayPersistence:!0}),yield null===(a=c.storageManager)||void 0===a?void 0:a.persistChannelConfig(c.channelConfig)}catch(t){}}))}function Dr({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,ecies:r,communicationServerUrl:i=nr,instance:o}){var s,a,c,d,l,u,h,f,p,m,g;const{state:v}=o;if(Yn.RemoteCommunication(\"[initCommunicationLayer()] \",JSON.stringify(v,null,2)),e!==exports.CommunicationLayerPreference.SOCKET)throw new Error(\"Invalid communication protocol\");v.communicationLayer=new _r({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,transports:v.transports,communicationServerUrl:i,context:v.context,ecies:r,logging:v.logging,remote:o});let y=\"undefined\"!=typeof document&&document.URL||\"\",E=\"undefined\"!=typeof document&&document.title||\"\";(null===(s=v.dappMetadata)||void 0===s?void 0:s.url)&&(y=v.dappMetadata.url),(null===(a=v.dappMetadata)||void 0===a?void 0:a.name)&&(E=v.dappMetadata.name);const b=null!==(u=null!==(d=null===(c=v.dappMetadata)||void 0===c?void 0:c.name)&&void 0!==d?d:null===(l=v.dappMetadata)||void 0===l?void 0:l.url)&&void 0!==u?u:\"N/A\",w=\"undefined\"!=typeof window&&void 0!==window.location&&null!==(h=window.location.hostname)&&void 0!==h?h:b,S={url:y,title:E,source:null===(f=v.dappMetadata)||void 0===f?void 0:f.source,dappId:w,icon:(null===(p=v.dappMetadata)||void 0===p?void 0:p.iconUrl)||(null===(m=v.dappMetadata)||void 0===m?void 0:m.base64Icon),platform:v.platformType,apiVersion:tr.version,connector:null===(g=v.dappMetadata)||void 0===g?void 0:g.connector};v.originatorInfo=S;const _={[exports.EventType.AUTHORIZED]:xr(o),[exports.EventType.MESSAGE]:Pr(o),[exports.EventType.CHANNEL_PERSISTENCE]:Nr(o),[exports.EventType.CLIENTS_CONNECTED]:Mr(o,e),[exports.EventType.KEYS_EXCHANGED]:Ir(o,e),[exports.EventType.SOCKET_DISCONNECTED]:Or(o),[exports.EventType.SOCKET_RECONNECT]:Rr(o),[exports.EventType.CLIENTS_DISCONNECTED]:Ar(o),[exports.EventType.KEY_INFO]:()=>{},[exports.EventType.CHANNEL_CREATED]:kr(o),[exports.EventType.CLIENTS_WAITING]:Tr(o),[exports.EventType.RPC_UPDATE]:e=>{o.emit(exports.EventType.RPC_UPDATE,e)}};for(const[t,n]of Object.entries(_))try{v.communicationLayer.on(t,n)}catch(e){}}function Lr(e){return l(this,arguments,void 0,(function*({options:e,instance:t}){const{state:n}=t;return Yn.RemoteCommunication(`[RemoteCommunication: disconnect()] channel=${n.channelId}`,e),new Promise(((r,i)=>{var s,a,c,d,l,u;(null==e?void 0:e.terminate)?(t.state.ready&&Xn({id:null!==(s=t.state.channelId)&&void 0!==s?s:\"\",event:lr.TERMINATED},t.state.communicationServerUrl).catch((e=>{})),n.ready=!1,n.paused=!1,null===(a=n.storageManager)||void 0===a||a.terminate(null!==(c=n.channelId)&&void 0!==c?c:\"\"),t.state.terminated=!0,e.sendMessage?(null===(d=n.communicationLayer)||void 0===d?void 0:d.getKeyInfo().keysExchanged)&&t.state.communicationLayer&&vr(t.state.communicationLayer,{type:exports.MessageType.TERMINATE}).then((()=>{r(!0)})).catch((e=>{i(e)})):r(!0),n.authorized=!1,n.relayPersistence=!1,n.channelId=o.v4(),e.channelId=n.channelId,n.channelConfig=void 0,n.originatorConnectStarted=!1,null===(l=n.communicationLayer)||void 0===l||l.disconnect(e),t.setConnectionStatus(exports.ConnectionStatus.TERMINATED)):(null===(u=n.communicationLayer)||void 0===u||u.disconnect(e),t.setConnectionStatus(exports.ConnectionStatus.DISCONNECTED),r(!0))}))}))}exports.CommunicationLayerPreference=void 0,exports.PlatformType=void 0,(exports.CommunicationLayerPreference||(exports.CommunicationLayerPreference={})).SOCKET=\"socket\",function(e){e.NonBrowser=\"nodejs\",e.MetaMaskMobileWebview=\"in-app-browser\",e.DesktopWeb=\"web-desktop\",e.MobileWeb=\"web-mobile\",e.ReactNative=\"react-native\"}(exports.PlatformType||(exports.PlatformType={}));class Br extends i.EventEmitter2{constructor(e){super(),this.state={ready:!1,authorized:!1,isOriginator:!1,terminated:!1,protocolVersion:1,paused:!1,deeplinkProtocolAvailable:!1,platformType:\"metamask-mobile\",analytics:!1,reconnection:!1,originatorInfoSent:!1,communicationServerUrl:nr,context:\"\",persist:!1,clientsConnected:!1,sessionDuration:ir,originatorConnectStarted:!1,debug:!1,_connectionStatus:exports.ConnectionStatus.DISCONNECTED},this._options=e;const{platformType:n,communicationLayerPreference:r,otherPublicKey:i,reconnect:o,walletInfo:s,dappMetadata:a,protocolVersion:c,transports:d,context:l,relayPersistence:u,ecies:h,analytics:f=!1,storage:p,sdkVersion:m,communicationServerUrl:g=nr,logging:v,autoConnect:y={timeout:or}}=e;this.state.otherPublicKey=i,this.state.dappMetadata=a,this.state.walletInfo=s,this.state.transports=d,this.state.platformType=n,this.state.analytics=f,this.state.protocolVersion=null!=c?c:1,this.state.isOriginator=!i,this.state.relayPersistence=u,this.state.communicationServerUrl=g,this.state.context=l,this.state.terminated=!1,this.state.sdkVersion=m,this.setMaxListeners(50),this.setConnectionStatus(exports.ConnectionStatus.DISCONNECTED),(null==p?void 0:p.duration)&&(this.state.sessionDuration=ir),this.state.storageOptions=p,this.state.autoConnectOptions=y,this.state.debug=!0===(null==v?void 0:v.remoteLayer),!0===(null==v?void 0:v.remoteLayer)&&t.enable(\"RemoteCommunication:Layer\"),!0===(null==v?void 0:v.serviceLayer)&&t.enable(\"SocketService:Layer\"),!0===(null==v?void 0:v.eciesLayer)&&t.enable(\"ECIES:Layer\"),!0===(null==v?void 0:v.keyExchangeLayer)&&t.enable(\"KeyExchange:Layer\"),this.state.logging=v,(null==p?void 0:p.storageManager)&&(this.state.storageManager=p.storageManager),Yn.RemoteCommunication(`[RemoteCommunication: constructor()] protocolVersion=${c} relayPersistence=${u} isOriginator=${this.state.isOriginator} communicationLayerPreference=${r} otherPublicKey=${i} reconnect=${o}`),this.state.isOriginator||Dr({communicationLayerPreference:r,otherPublicKey:i,reconnect:o,ecies:h,communicationServerUrl:g,instance:this}),this.emitServiceStatusEvent({context:\"constructor\"})}initFromDappStorage(){return l(this,void 0,void 0,(function*(){var e;if(this.state.storageManager){const t=yield this.state.storageManager.getPersistedChannelConfig({});t&&(this.state.channelConfig=t,this.state.channelId=t.channelId,this.state.deeplinkProtocolAvailable=null!==(e=t.deeplinkProtocolAvailable)&&void 0!==e&&e,t.relayPersistence&&(this.state.authorized=!0,this.state.ready=!0,this.setConnectionStatus(exports.ConnectionStatus.LINKED),yield this.connectToChannel({channelId:t.channelId})))}Dr({communicationLayerPreference:exports.CommunicationLayerPreference.SOCKET,otherPublicKey:this.state.otherPublicKey,reconnect:this._options.reconnect,ecies:this._options.ecies,communicationServerUrl:this.state.communicationServerUrl,instance:this})}))}originatorSessionConnect(){return l(this,void 0,void 0,(function*(){return yield function(e){return l(this,void 0,void 0,(function*(){var t;const{state:n}=e;if(!n.storageManager)return void Yn.RemoteCommunication(\"[RemoteCommunication: originatorSessionConnect()] no storage manager defined - skip\");const r=yield n.storageManager.getPersistedChannelConfig({});if(Yn.RemoteCommunication(`[RemoteCommunication: originatorSessionConnect()] autoStarted=${n.originatorConnectStarted} channelConfig`,r),null===(t=n.communicationLayer)||void 0===t?void 0:t.isConnected())return Yn.RemoteCommunication(\"[RemoteCommunication: originatorSessionConnect()] socket already connected - skip\"),r;if(r){if(r.validUntil>Date.now())return n.channelConfig=r,n.originatorConnectStarted=!0,n.channelId=null==r?void 0:r.channelId,n.reconnection=!0,r;Yn.RemoteCommunication(\"[RemoteCommunication: autoConnect()] Session has expired\")}n.originatorConnectStarted=!1}))}(this)}))}generateChannelIdConnect(){return l(this,void 0,void 0,(function*(){return function(e){return l(this,void 0,void 0,(function*(){var t,n,r,i,o,s;if(!e.communicationLayer)throw new Error(\"communication layer not initialized\");if(e.ready)throw new Error(\"Channel already connected\");if(e.channelId&&(null===(t=e.communicationLayer)||void 0===t?void 0:t.isConnected()))return e.channelConfig=Object.assign(Object.assign({},e.channelConfig),{channelId:e.channelId,validUntil:Date.now()+e.sessionDuration}),null===(n=e.storageManager)||void 0===n||n.persistChannelConfig(e.channelConfig),{channelId:e.channelId,privKey:null===(i=null===(r=e.communicationLayer)||void 0===r?void 0:r.getKeyInfo())||void 0===i?void 0:i.ecies.private,pubKey:null===(s=null===(o=e.communicationLayer)||void 0===o?void 0:o.getKeyInfo())||void 0===s?void 0:s.ecies.public};Yn.RemoteCommunication(\"[RemoteCommunication: generateChannelId()]\");const a=yield e.communicationLayer.createChannel();Yn.RemoteCommunication(\"[RemoteCommunication: generateChannelId()] channel created\",a);const c=Object.assign(Object.assign({},e.channelConfig),{channelId:a.channelId,localKey:a.privKey,validUntil:Date.now()+e.sessionDuration});return e.channelId=a.channelId,e.channelConfig=c,{channelId:e.channelId,pubKey:a.pubKey,privKey:a.privKey}}))}(this.state)}))}clean(){return ar(this.state)}connectToChannel({channelId:e,withKeyExchange:t,authorized:n}){return function(e){return l(this,arguments,void 0,(function*({channelId:e,withKeyExchange:t,authorized:n,state:r}){var i,s,a;if(!o.validate(e))throw Yn.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${r.context} invalid channel channelId=${e}`),new Error(`Invalid channel ${e}`);if(Yn.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${r.context} channelId=${e} withKeyExchange=${t}`),null===(i=r.communicationLayer)||void 0===i?void 0:i.isConnected())return void Yn.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${r.context} already connected - interrupt connection.`);r.channelId=e,yield null===(s=r.communicationLayer)||void 0===s?void 0:s.connectToChannel({channelId:e,authorized:n,withKeyExchange:t});const c=Object.assign(Object.assign({},r.channelConfig),{channelId:e,validUntil:Date.now()+r.sessionDuration});r.channelConfig=c,null===(a=r.storageManager)||void 0===a||a.persistChannelConfig(c)}))}({channelId:e,authorized:n,withKeyExchange:t,state:this.state})}sendMessage(e){return function(e,t){return l(this,void 0,void 0,(function*(){var n,r;const{state:i}=e;Yn.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${i.context} paused=${i.paused} ready=${i.ready} relayPersistence=${i.relayPersistence} authorized=${i.authorized} socket=${null===(n=i.communicationLayer)||void 0===n?void 0:n.isConnected()} clientsConnected=${i.clientsConnected} status=${i._connectionStatus}`,t),i.relayPersistence||i.ready&&(null===(r=i.communicationLayer)||void 0===r?void 0:r.isConnected())&&i.clientsConnected||(Yn.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${i.context}  SKIP message waiting for MM mobile readiness.`),yield new Promise((t=>{e.once(exports.EventType.CLIENTS_READY,t)})),Yn.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${i.context}  AFTER SKIP / READY -- sending pending message`));try{const n=yield function(e,t){return l(this,void 0,void 0,(function*(){return new Promise((n=>{var r;const{state:i}=e;Yn.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] context=${i.context} ready=${i.ready} authorized=${i.authorized} method=${t.method}`),!i.isOriginator||i.authorized||i.relayPersistence?null===(r=i.communicationLayer)||void 0===r||r.sendMessage(t).then((e=>{n(e)})).catch((e=>{n(!1)})):e.once(exports.EventType.AUTHORIZED,(()=>{var e;Yn.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] context=${i.context}  AFTER SKIP / AUTHORIZED -- sending pending message`),null===(e=i.communicationLayer)||void 0===e||e.sendMessage(t).then((e=>{n(e)})).catch((e=>{n(!1)}))}))}))}))}(e,t);return n}catch(e){throw e}}))}(this,e)}testStorage(){return l(this,void 0,void 0,(function*(){return function(e){return l(this,void 0,void 0,(function*(){var t;const n=yield null===(t=e.storageManager)||void 0===t?void 0:t.getPersistedChannelConfig();Yn.RemoteCommunication(\"[RemoteCommunication: testStorage()] res\",n)}))}(this.state)}))}hasDeeplinkProtocol(){return this.state.deeplinkProtocolAvailable}getChannelConfig(){return this.state.channelConfig}isReady(){return this.state.ready}isConnected(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.isConnected()}isAuthorized(){return this.state.authorized}isPaused(){return this.state.paused}getCommunicationLayer(){return this.state.communicationLayer}ping(){return l(this,void 0,void 0,(function*(){var e;Yn.RemoteCommunication(`[RemoteCommunication: ping()] channel=${this.state.channelId}`),yield null===(e=this.state.communicationLayer)||void 0===e?void 0:e.ping()}))}testLogger(){Yn.RemoteCommunication(`testLogger() channel=${this.state.channelId}`),Yn.SocketService(`testLogger() channel=${this.state.channelId}`),Yn.Ecies(`testLogger() channel=${this.state.channelId}`),Yn.KeyExchange(`testLogger() channel=${this.state.channelId}`)}keyCheck(){var e;Yn.RemoteCommunication(`[RemoteCommunication: keyCheck()] channel=${this.state.channelId}`),null===(e=this.state.communicationLayer)||void 0===e||e.keyCheck()}setConnectionStatus(e){this.state._connectionStatus!==e&&(this.state._connectionStatus=e,this.emit(exports.EventType.CONNECTION_STATUS,e),this.emitServiceStatusEvent({context:\"setConnectionStatus\"}))}emitServiceStatusEvent(e={}){this.emit(exports.EventType.SERVICE_STATUS,this.getServiceStatus())}getConnectionStatus(){return this.state._connectionStatus}getServiceStatus(){return{originatorInfo:this.state.originatorInfo,keyInfo:this.getKeyInfo(),connectionStatus:this.state._connectionStatus,channelConfig:this.state.channelConfig,channelId:this.state.channelId}}getKeyInfo(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.getKeyInfo()}resetKeys(){var e;null===(e=this.state.communicationLayer)||void 0===e||e.resetKeys()}setOtherPublicKey(e){var t;const n=null===(t=this.state.communicationLayer)||void 0===t?void 0:t.getKeyExchange();if(!n)throw new Error(\"KeyExchange is not initialized.\");n.getOtherPublicKey()!==e&&n.setOtherPublicKey(e)}pause(){return l(this,void 0,void 0,(function*(){var e;Yn.RemoteCommunication(`[RemoteCommunication: pause()] channel=${this.state.channelId}`),yield null===(e=this.state.communicationLayer)||void 0===e?void 0:e.pause(),this.setConnectionStatus(exports.ConnectionStatus.PAUSED)}))}getVersion(){return tr.version}hasRelayPersistence(){var e;return null!==(e=this.state.relayPersistence)&&void 0!==e&&e}resume(){return l(this,void 0,void 0,(function*(){return function(e){return l(this,void 0,void 0,(function*(){var t;const{state:n}=e;Yn.RemoteCommunication(`[RemoteCommunication: resume()] channel=${n.channelId}`),yield null===(t=n.communicationLayer)||void 0===t?void 0:t.resume(),e.setConnectionStatus(exports.ConnectionStatus.LINKED)}))}(this)}))}encrypt(e){var t,n,r;const i=null===(t=this.state.communicationLayer)||void 0===t?void 0:t.getKeyExchange(),o=null==i?void 0:i.getOtherPublicKey();if(!o)throw new Error(\"KeyExchange not completed\");return null===(r=null===(n=this.state.communicationLayer)||void 0===n?void 0:n.state.eciesInstance)||void 0===r?void 0:r.encrypt(e,o)}decrypt(e){var t,n,r;if(!(null===(t=this.state.communicationLayer)||void 0===t?void 0:t.state.eciesInstance))throw new Error(\"ECIES instance is not initialized\");return null===(r=null===(n=this.state.communicationLayer)||void 0===n?void 0:n.state.eciesInstance)||void 0===r?void 0:r.decrypt(e)}getChannelId(){return this.state.channelId}getRPCMethodTracker(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.getRPCMethodTracker()}reject({channelId:e}){return function(e){return l(this,arguments,void 0,(function*({channelId:e,state:t}){var n,r,i;if(!o.validate(e))throw Yn.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${t.context} invalid channel channelId=${e}`),new Error(`Invalid channel ${e}`);if(t.isOriginator)return void Yn.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} isOriginator=${t.isOriginator} channelId=${e}`);const{socket:s}=null!==(r=null===(n=t.communicationLayer)||void 0===n?void 0:n.state)&&void 0!==r?r:{};(null==s?void 0:s.connected)||(Yn.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} socket already connected`),null==s||s.connect()),Xn(Object.assign(Object.assign({id:e,event:lr.REJECTED},t.originatorInfo),{sdkVersion:t.sdkVersion,commLayerVersion:tr.version,walletVersion:null===(i=t.walletInfo)||void 0===i?void 0:i.version}),t.communicationServerUrl).catch((e=>{})),yield new Promise(((n,r)=>{null==s||s.emit(exports.EventType.REJECTED,{channelId:e},((e,i)=>{Yn.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} socket=${null==s?void 0:s.id}`,{error:e,response:i}),e?r(e):n(i)}))}))}))}({channelId:e,state:this.state})}disconnect(e){return l(this,void 0,void 0,(function*(){return Lr({options:e,instance:this})}))}}!function(e){e.RENEW=\"renew\",e.LINK=\"link\"}(Cr||(Cr={}));var Kr=\"ERC721\",jr=\"ERC1155\",$r={errors:{disconnected:()=>\"MetaMask: Disconnected from chain. Attempting to connect.\",permanentlyDisconnected:()=>\"MetaMask: Disconnected from MetaMask background. Page reload required.\",sendSiteMetadata:()=>\"MetaMask: Failed to send site metadata. This is an internal error, please report this bug.\",unsupportedSync:e=>`MetaMask: The MetaMask Ethereum provider does not support synchronous methods like ${e} without a callback parameter.`,invalidDuplexStream:()=>\"Must provide a Node.js-style duplex stream.\",invalidNetworkParams:()=>\"MetaMask: Received invalid network parameters. Please report this bug.\",invalidRequestArgs:()=>\"Expected a single, non-array, object argument.\",invalidRequestMethod:()=>\"'args.method' must be a non-empty string.\",invalidRequestParams:()=>\"'args.params' must be an object or array if provided.\",invalidLoggerObject:()=>\"'args.logger' must be an object if provided.\",invalidLoggerMethod:e=>`'args.logger' must include required method '${e}'.`},info:{connected:e=>`MetaMask: Connected to chain with ID \"${e}\".`},warnings:{chainIdDeprecation:\"MetaMask: 'ethereum.chainId' is deprecated and may be removed in the future. Please use the 'eth_chainId' RPC method instead.\\nFor more information, see: https://github.com/MetaMask/metamask-improvement-proposals/discussions/23\",networkVersionDeprecation:\"MetaMask: 'ethereum.networkVersion' is deprecated and may be removed in the future. Please use the 'net_version' RPC method instead.\\nFor more information, see: https://github.com/MetaMask/metamask-improvement-proposals/discussions/23\",selectedAddressDeprecation:\"MetaMask: 'ethereum.selectedAddress' is deprecated and may be removed in the future. Please use the 'eth_accounts' RPC method instead.\\nFor more information, see: https://github.com/MetaMask/metamask-improvement-proposals/discussions/23\",enableDeprecation:\"MetaMask: 'ethereum.enable()' is deprecated and may be removed in the future. Please use the 'eth_requestAccounts' RPC method instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1102\",sendDeprecation:\"MetaMask: 'ethereum.send(...)' is deprecated and may be removed in the future. Please use 'ethereum.sendAsync(...)' or 'ethereum.request(...)' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193\",events:{close:\"MetaMask: The event 'close' is deprecated and may be removed in the future. Please use 'disconnect' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#disconnect\",data:\"MetaMask: The event 'data' is deprecated and will be removed in the future. Use 'message' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message\",networkChanged:\"MetaMask: The event 'networkChanged' is deprecated and may be removed in the future. Use 'chainChanged' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#chainchanged\",notification:\"MetaMask: The event 'notification' is deprecated and may be removed in the future. Use 'message' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message\"},rpc:{ethDecryptDeprecation:\"MetaMask: The RPC method 'eth_decrypt' is deprecated and may be removed in the future.\\nFor more information, see: https://medium.com/metamask/metamask-api-method-deprecation-2b0564a84686\",ethGetEncryptionPublicKeyDeprecation:\"MetaMask: The RPC method 'eth_getEncryptionPublicKey' is deprecated and may be removed in the future.\\nFor more information, see: https://medium.com/metamask/metamask-api-method-deprecation-2b0564a84686\",walletWatchAssetNFTExperimental:\"MetaMask: The RPC method 'wallet_watchAsset' is experimental for ERC721/ERC1155 assets and may change in the future.\\nFor more information, see: https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-1.md and https://github.com/MetaMask/metamask-improvement-proposals/blob/main/PROCESS-GUIDE.md#proposal-lifecycle\"},experimentalMethods:\"MetaMask: 'ethereum._metamask' exposes non-standard, experimental methods. They may be removed or changed without warning.\"}};function Hr(e){const t={ethDecryptDeprecation:!1,ethGetEncryptionPublicKeyDeprecation:!1,walletWatchAssetNFTExperimental:!1};return(n,r,i)=>{t.ethDecryptDeprecation||\"eth_decrypt\"!==n.method?t.ethGetEncryptionPublicKeyDeprecation||\"eth_getEncryptionPublicKey\"!==n.method?!t.walletWatchAssetNFTExperimental&&\"wallet_watchAsset\"===n.method&&[Kr,jr].includes(n.params?.type||\"\")&&(e.warn($r.warnings.rpc.walletWatchAssetNFTExperimental),t.walletWatchAssetNFTExperimental=!0):(e.warn($r.warnings.rpc.ethGetEncryptionPublicKeyDeprecation),t.ethGetEncryptionPublicKeyDeprecation=!0):(e.warn($r.warnings.rpc.ethDecryptDeprecation),t.ethDecryptDeprecation=!0),i()}}var Ur=4294967295,Fr=Math.floor(Math.random()*Ur);function qr(){return(e,t,n,r)=>{const i=e.id,o=Fr=(Fr+1)%Ur;e.id=o,t.id=o,n((n=>{e.id=i,t.id=i,n()}))}}var zr=(e,t,n)=>{if(!t.has(e))throw TypeError(\"Cannot \"+n)},Wr=(e,t,n)=>(zr(e,t,\"read from private field\"),n?n.call(e):t.get(e)),Vr=(e,t,n)=>{if(t.has(e))throw TypeError(\"Cannot add the same private member more than once\");t instanceof WeakSet?t.add(e):t.set(e,n)},Gr=(e,t,n,r)=>(zr(e,t,\"write to private field\"),t.set(e,n),n),Yr=(e,t,n)=>(zr(e,t,\"access private method\"),n),Zr={invalidInput:-32e3,resourceNotFound:-32001,resourceUnavailable:-32002,transactionRejected:-32003,methodNotSupported:-32004,limitExceeded:-32005,parse:-32700,invalidRequest:-32600,methodNotFound:-32601,invalidParams:-32602,internal:-32603},Jr={\"-32700\":{standard:\"JSON RPC 2.0\",message:\"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"},\"-32600\":{standard:\"JSON RPC 2.0\",message:\"The JSON sent is not a valid Request object.\"},\"-32601\":{standard:\"JSON RPC 2.0\",message:\"The method does not exist / is not available.\"},\"-32602\":{standard:\"JSON RPC 2.0\",message:\"Invalid method parameter(s).\"},\"-32603\":{standard:\"JSON RPC 2.0\",message:\"Internal JSON-RPC error.\"},\"-32000\":{standard:\"EIP-1474\",message:\"Invalid input.\"},\"-32001\":{standard:\"EIP-1474\",message:\"Resource not found.\"},\"-32002\":{standard:\"EIP-1474\",message:\"Resource unavailable.\"},\"-32003\":{standard:\"EIP-1474\",message:\"Transaction rejected.\"},\"-32004\":{standard:\"EIP-1474\",message:\"Method not supported.\"},\"-32005\":{standard:\"EIP-1474\",message:\"Request limit exceeded.\"},4001:{standard:\"EIP-1193\",message:\"User rejected the request.\"},4100:{standard:\"EIP-1193\",message:\"The requested account and/or method has not been authorized by the user.\"},4200:{standard:\"EIP-1193\",message:\"The requested method is not supported by this Ethereum provider.\"},4900:{standard:\"EIP-1193\",message:\"The provider is disconnected from all chains.\"},4901:{standard:\"EIP-1193\",message:\"The provider is disconnected from the specified chain.\"}};function Qr(e){return Boolean(e)&&\"object\"==typeof e&&!Array.isArray(e)}var Xr=(e,t)=>Object.hasOwnProperty.call(e,t);class ei extends TypeError{constructor(e,t){let n;const{message:r,explanation:i,...o}=e,{path:s}=e,a=0===s.length?r:`At path: ${s.join(\".\")} -- ${r}`;super(i??a),null!=i&&(this.cause=a),Object.assign(this,o),this.name=this.constructor.name,this.failures=()=>n??(n=[e,...t()])}}function ti(e){return\"object\"==typeof e&&null!=e}function ni(e){return\"symbol\"==typeof e?e.toString():\"string\"==typeof e?JSON.stringify(e):`${e}`}function ri(e,t,n,r){if(!0===e)return;!1===e?e={}:\"string\"==typeof e&&(e={message:e});const{path:i,branch:o}=t,{type:s}=n,{refinement:a,message:c=`Expected a value of type \\`${s}\\`${a?` with refinement \\`${a}\\``:\"\"}, but received: \\`${ni(r)}\\``}=e;return{value:r,type:s,refinement:a,key:i[i.length-1],path:i,branch:o,...e,message:c}}function*ii(e,t,n,r){(function(e){return ti(e)&&\"function\"==typeof e[Symbol.iterator]})(e)||(e=[e]);for(const i of e){const e=ri(i,t,n,r);e&&(yield e)}}function*oi(e,t,n={}){const{path:r=[],branch:i=[e],coerce:o=!1,mask:s=!1}=n,a={path:r,branch:i};if(o&&(e=t.coercer(e,a),s&&\"type\"!==t.type&&ti(t.schema)&&ti(e)&&!Array.isArray(e)))for(const n in e)void 0===t.schema[n]&&delete e[n];let c=\"valid\";for(const r of t.validator(e,a))r.explanation=n.message,c=\"not_valid\",yield[r,void 0];for(let[d,l,u]of t.entries(e,a)){const t=oi(l,u,{path:void 0===d?r:[...r,d],branch:void 0===d?i:[...i,l],coerce:o,mask:s,message:n.message});for(const n of t)n[0]?(c=null!=n[0].refinement?\"not_refined\":\"not_valid\",yield[n[0],void 0]):o&&(l=n[1],void 0===d?e=l:e instanceof Map?e.set(d,l):e instanceof Set?e.add(l):ti(e)&&(void 0!==l||d in e)&&(e[d]=l))}if(\"not_valid\"!==c)for(const r of t.refiner(e,a))r.explanation=n.message,c=\"not_refined\",yield[r,void 0];\"valid\"===c&&(yield[void 0,e])}class si{constructor(e){const{type:t,schema:n,validator:r,refiner:i,coercer:o=(e=>e),entries:s=function*(){}}=e;this.type=t,this.schema=n,this.entries=s,this.coercer=o,this.validator=r?(e,t)=>ii(r(e,t),t,this,e):()=>[],this.refiner=i?(e,t)=>ii(i(e,t),t,this,e):()=>[]}assert(e,t){return ai(e,this,t)}create(e,t){return ci(e,this,t)}is(e){return di(e,this)}mask(e,t){return function(e,t,n){const r=li(e,t,{coerce:!0,mask:!0,message:n});if(r[0])throw r[0];return r[1]}(e,this,t)}validate(e,t={}){return li(e,this,t)}}function ai(e,t,n){const r=li(e,t,{message:n});if(r[0])throw r[0]}function ci(e,t,n){const r=li(e,t,{coerce:!0,message:n});if(r[0])throw r[0];return r[1]}function di(e,t){return!li(e,t)[0]}function li(e,t,n={}){const r=oi(e,t,n),i=function(e){const{done:t,value:n}=e.next();return t?void 0:n}(r);if(i[0]){const e=new ei(i[0],(function*(){for(const e of r)e[0]&&(yield e[0])}));return[e,void 0]}return[void 0,i[1]]}function ui(e,t){return new si({type:e,schema:null,validator:t})}function hi(e){let t;return new si({type:\"lazy\",schema:null,*entries(n,r){t??(t=e()),yield*t.entries(n,r)},validator:(n,r)=>(t??(t=e()),t.validator(n,r)),coercer:(n,r)=>(t??(t=e()),t.coercer(n,r)),refiner:(n,r)=>(t??(t=e()),t.refiner(n,r))})}function fi(e){return new si({type:\"array\",schema:e,*entries(t){if(e&&Array.isArray(t))for(const[n,r]of t.entries())yield[n,r,e]},coercer:e=>Array.isArray(e)?e.slice():e,validator:e=>Array.isArray(e)||`Expected an array value, but received: ${ni(e)}`})}function pi(e){const t=ni(e),n=typeof e;return new si({type:\"literal\",schema:\"string\"===n||\"number\"===n||\"boolean\"===n?e:null,validator:n=>n===e||`Expected the literal \\`${t}\\`, but received: ${ni(n)}`})}function mi(){return ui(\"number\",(e=>\"number\"==typeof e&&!isNaN(e)||`Expected a number, but received: ${ni(e)}`))}function gi(e){const t=e?Object.keys(e):[],n=ui(\"never\",(()=>!1));return new si({type:\"object\",schema:e||null,*entries(r){if(e&&ti(r)){const i=new Set(Object.keys(r));for(const n of t)i.delete(n),yield[n,r[n],e[n]];for(const e of i)yield[e,r[e],n]}},validator:e=>ti(e)||`Expected an object, but received: ${ni(e)}`,coercer:e=>ti(e)?{...e}:e})}function vi(e){return new si({...e,validator:(t,n)=>void 0===t||e.validator(t,n),refiner:(t,n)=>void 0===t||e.refiner(t,n)})}function yi(e,t){return new si({type:\"record\",schema:null,*entries(n){if(ti(n))for(const r in n){const i=n[r];yield[r,r,e],yield[r,i,t]}},validator:e=>ti(e)||`Expected an object, but received: ${ni(e)}`})}function Ei(){return ui(\"string\",(e=>\"string\"==typeof e||`Expected a string, but received: ${ni(e)}`))}function bi(e){const t=e.map((e=>e.type)).join(\" | \");return new si({type:\"union\",schema:null,coercer(t){for(const n of e){const[e,r]=n.validate(t,{coerce:!0});if(!e)return r}return t},validator(n,r){const i=[];for(const t of e){const[...e]=oi(n,t,r),[o]=e;if(!o[0])return[];for(const[t]of e)t&&i.push(t)}return[`Expected the value to satisfy a union of \\`${t}\\`, but received: ${ni(n)}`,...i]}})}function wi(e){return function(e){return function(e){return\"object\"==typeof e&&null!==e&&\"message\"in e}(e)&&\"string\"==typeof e.message?e.message:null==e?\"\":String(e)}(e).replace(/\\.$/u,\"\")}function Si(e,t){return n=e,Boolean(\"string\"==typeof n?.prototype?.constructor?.name)?new e({message:t}):e({message:t});var n}var _i=class extends Error{constructor(e){super(e.message),this.code=\"ERR_ASSERTION\"}};var Ci=e=>gi(e);function xi({path:e,branch:t}){const n=e[e.length-1];return Xr(t[t.length-2],n)}function ki(e){return new si({...e,type:`optional ${e.type}`,validator:(t,n)=>!xi(n)||e.validator(t,n),refiner:(t,n)=>!xi(n)||e.refiner(t,n)})}var Mi,Ai,Ti,Ii=bi([pi(null),ui(\"boolean\",(e=>\"boolean\"==typeof e)),ui(\"finite number\",(e=>di(e,mi())&&Number.isFinite(e))),Ei(),fi(hi((()=>Ii))),yi(Ei(),hi((()=>Ii)))]),Pi=(Mi=Ii,Ai=ui(\"any\",(()=>!0)),Ti=e=>(function(e,t,n=\"Assertion failed\",r=_i){try{ai(e,t)}catch(e){throw Si(r,`${n}: ${wi(e)}.`)}}(e,Ii),JSON.parse(JSON.stringify(e,((e,t)=>{if(\"__proto__\"!==e&&\"constructor\"!==e)return t})))),new si({...Mi,coercer:(e,t)=>di(e,Ai)?Mi.coercer(Ti(e,t),t):Mi.coercer(e,t)}));function Ri(e){try{return function(e){ci(e,Pi)}(e),!0}catch{return!1}}var Oi=pi(\"2.0\"),Ni=function(e){return new si({...e,validator:(t,n)=>null===t||e.validator(t,n),refiner:(t,n)=>null===t||e.refiner(t,n)})}(bi([mi(),Ei()])),Di=Ci({code:ui(\"integer\",(e=>\"number\"==typeof e&&!isNaN(e)&&Number.isInteger(e)||`Expected an integer, but received: ${ni(e)}`)),message:Ei(),data:ki(Pi),stack:ki(Ei())}),Li=bi([yi(Ei(),Pi),fi(Pi)]),Bi=Ci({id:Ni,jsonrpc:Oi,method:Ei(),params:ki(Li)}),Ki=Ci({jsonrpc:Oi,method:Ei(),params:ki(Li)});function ji(e){return di(e,Bi)}function $i(e){return di(e,Di)}gi({id:Ni,jsonrpc:Oi,result:vi(ui(\"unknown\",(()=>!0))),error:vi(Di)}),bi([Ci({id:Ni,jsonrpc:Oi,result:Pi}),Ci({id:Ni,jsonrpc:Oi,error:Di})]);var Hi=Zr.internal,Ui=\"Unspecified error message. This is a bug, please report it.\",Fi={code:Hi,message:zi(Hi)},qi=\"Unspecified server error.\";function zi(e,t=Ui){if(function(e){return Number.isInteger(e)}(e)){const t=e.toString();if(Xr(Jr,t))return Jr[t].message;if(function(e){return e>=-32099&&e<=-32e3}(e))return qi}return t}function Wi(e,{fallbackError:t=Fi,shouldIncludeStack:n=!0}={}){if(!$i(t))throw new Error(\"Must provide fallback error with integer number code and string message.\");const r=function(e,t){if(e&&\"object\"==typeof e&&\"serialize\"in e&&\"function\"==typeof e.serialize)return e.serialize();if($i(e))return e;const n=Vi(e),r={...t,data:{cause:n}};return r}(e,t);return n||delete r.stack,r}function Vi(e){return Array.isArray(e)?e.map((e=>Ri(e)?e:Qr(e)?Gi(e):null)):Qr(e)?Gi(e):Ri(e)?e:null}function Gi(e){return Object.getOwnPropertyNames(e).reduce(((t,n)=>{const r=e[n];return Ri(r)&&(t[n]=r),t}),{})}var Yi=to;to.default=to,to.stable=oo,to.stableStringify=oo;var Zi=\"[...]\",Ji=\"[Circular]\",Qi=[],Xi=[];function eo(){return{depthLimit:Number.MAX_SAFE_INTEGER,edgesLimit:Number.MAX_SAFE_INTEGER}}function to(e,t,n,r){var i;void 0===r&&(r=eo()),ro(e,\"\",0,[],void 0,0,r);try{i=0===Xi.length?JSON.stringify(e,t,n):JSON.stringify(e,ao(t),n)}catch(e){return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\")}finally{for(;0!==Qi.length;){var o=Qi.pop();4===o.length?Object.defineProperty(o[0],o[1],o[3]):o[0][o[1]]=o[2]}}return i}function no(e,t,n,r){var i=Object.getOwnPropertyDescriptor(r,n);void 0!==i.get?i.configurable?(Object.defineProperty(r,n,{value:e}),Qi.push([r,n,t,i])):Xi.push([t,n,e]):(r[n]=e,Qi.push([r,n,t]))}function ro(e,t,n,r,i,o,s){var a;if(o+=1,\"object\"==typeof e&&null!==e){for(a=0;a<r.length;a++)if(r[a]===e)return void no(Ji,e,t,i);if(void 0!==s.depthLimit&&o>s.depthLimit)return void no(Zi,e,t,i);if(void 0!==s.edgesLimit&&n+1>s.edgesLimit)return void no(Zi,e,t,i);if(r.push(e),Array.isArray(e))for(a=0;a<e.length;a++)ro(e[a],a,a,r,e,o,s);else{var c=Object.keys(e);for(a=0;a<c.length;a++){var d=c[a];ro(e[d],d,a,r,e,o,s)}}r.pop()}}function io(e,t){return e<t?-1:e>t?1:0}function oo(e,t,n,r){void 0===r&&(r=eo());var i,o=so(e,\"\",0,[],void 0,0,r)||e;try{i=0===Xi.length?JSON.stringify(o,t,n):JSON.stringify(o,ao(t),n)}catch(e){return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\")}finally{for(;0!==Qi.length;){var s=Qi.pop();4===s.length?Object.defineProperty(s[0],s[1],s[3]):s[0][s[1]]=s[2]}}return i}function so(e,t,n,r,i,o,s){var a;if(o+=1,\"object\"==typeof e&&null!==e){for(a=0;a<r.length;a++)if(r[a]===e)return void no(Ji,e,t,i);try{if(\"function\"==typeof e.toJSON)return}catch(e){return}if(void 0!==s.depthLimit&&o>s.depthLimit)return void no(Zi,e,t,i);if(void 0!==s.edgesLimit&&n+1>s.edgesLimit)return void no(Zi,e,t,i);if(r.push(e),Array.isArray(e))for(a=0;a<e.length;a++)so(e[a],a,a,r,e,o,s);else{var c={},d=Object.keys(e).sort(io);for(a=0;a<d.length;a++){var l=d[a];so(e[l],l,a,r,e,o,s),c[l]=e[l]}if(void 0===i)return c;Qi.push([i,t,e]),i[t]=c}r.pop()}}function ao(e){return e=void 0!==e?e:function(e,t){return t},function(t,n){if(Xi.length>0)for(var r=0;r<Xi.length;r++){var i=Xi[r];if(i[1]===t&&i[0]===n){n=i[2],Xi.splice(r,1);break}}return e.call(this,t,n)}}var co=h(Yi),lo=class extends Error{constructor(e,t,n){if(!Number.isInteger(e))throw new Error('\"code\" must be an integer.');if(!t||\"string\"!=typeof t)throw new Error('\"message\" must be a non-empty string.');super(t),this.code=e,void 0!==n&&(this.data=n)}serialize(){const e={code:this.code,message:this.message};return void 0!==this.data&&(e.data=this.data,function(e){if(\"object\"!=typeof e||null===e)return!1;try{let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}catch(e){return!1}}(this.data)&&(e.data.cause=Vi(this.data.cause))),this.stack&&(e.stack=this.stack),e}toString(){return co(this.serialize(),uo,2)}};function uo(e,t){if(\"[Circular]\"!==t)return t}var ho=e=>fo(Zr.invalidRequest,e);function fo(e,t){const[n,r]=function(e){if(e){if(\"string\"==typeof e)return[e];if(\"object\"==typeof e&&!Array.isArray(e)){const{message:t,data:n}=e;if(t&&\"string\"!=typeof t)throw new Error(\"Must specify string message.\");return[t??void 0,n]}}return[]}(t);return new lo(e,n??zi(e),r)}var po={};Object.defineProperty(po,\"__esModule\",{value:!0});const mo=a;function go(e,t,n){try{Reflect.apply(e,t,n)}catch(e){setTimeout((()=>{throw e}))}}let vo=class extends mo.EventEmitter{emit(e,...t){let n=\"error\"===e;const r=this._events;if(void 0!==r)n=n&&void 0===r.error;else if(!n)return!1;if(n){let e;if(t.length>0&&([e]=t),e instanceof Error)throw e;const n=new Error(\"Unhandled error.\"+(e?` (${e.message})`:\"\"));throw n.context=e,n}const i=r[e];if(void 0===i)return!1;if(\"function\"==typeof i)go(i,this,t);else{const e=i.length,n=function(e){const t=e.length,n=new Array(t);for(let r=0;r<t;r+=1)n[r]=e[r];return n}(i);for(let r=0;r<e;r+=1)go(n[r],this,t)}return!0}};var yo,Eo,bo,wo,So,_o,Co,xo,ko,Mo,Ao,To,Io,Po,Ro,Oo,No,Do,Lo,Bo=po.default=vo,Ko=class e extends Bo{constructor({notificationHandler:e}={}){super(),Vr(this,wo),Vr(this,_o),Vr(this,xo),Vr(this,yo,!1),Vr(this,Eo,void 0),Vr(this,bo,void 0),Gr(this,Eo,[]),Gr(this,bo,e)}destroy(){Wr(this,Eo).forEach((e=>{\"destroy\"in e&&\"function\"==typeof e.destroy&&e.destroy()})),Gr(this,Eo,[]),Gr(this,yo,!0)}push(e){Yr(this,wo,So).call(this),Wr(this,Eo).push(e)}handle(e,t){if(Yr(this,wo,So).call(this),t&&\"function\"!=typeof t)throw new Error('\"callback\" must be a function if provided.');return Array.isArray(e)?t?Yr(this,_o,Co).call(this,e,t):Yr(this,_o,Co).call(this,e):t?Yr(this,xo,ko).call(this,e,t):this._promiseHandle(e)}asMiddleware(){return Yr(this,wo,So).call(this),async(t,n,r,i)=>{var o,s;try{const[a,c,d]=await Yr(o=e,To,Io).call(o,t,n,Wr(this,Eo));return c?(await Yr(s=e,Oo,No).call(s,d),i(a)):r((async t=>{var n;try{await Yr(n=e,Oo,No).call(n,d)}catch(e){return t(e)}return t()}))}catch(e){return i(e)}}}async _promiseHandle(e){return new Promise(((t,n)=>{Yr(this,xo,ko).call(this,e,((e,r)=>{e&&void 0===r?n(e):t(r)})).catch(n)}))}};yo=new WeakMap,Eo=new WeakMap,bo=new WeakMap,wo=new WeakSet,So=function(){if(Wr(this,yo))throw new Error(\"This engine is destroyed and can no longer be used.\")},_o=new WeakSet,Co=async function(e,t){try{if(0===e.length){const e=[{id:null,jsonrpc:\"2.0\",error:new lo(Zr.invalidRequest,\"Request batch must contain plain objects. Received an empty array\")}];return t?t(null,e):e}const n=(await Promise.all(e.map(this._promiseHandle.bind(this)))).filter((e=>void 0!==e));return t?t(null,n):n}catch(e){if(t)return t(e);throw e}},xo=new WeakSet,ko=async function(e,t){var n;if(!e||Array.isArray(e)||\"object\"!=typeof e){const n=new lo(Zr.invalidRequest,\"Requests must be plain objects. Received: \"+typeof e,{request:e});return t(n,{id:null,jsonrpc:\"2.0\",error:n})}if(\"string\"!=typeof e.method){const n=new lo(Zr.invalidRequest,\"Must specify a string method. Received: \"+typeof e.method,{request:e});return Wr(this,bo)&&!ji(e)?t(null):t(n,{id:e.id??null,jsonrpc:\"2.0\",error:n})}if(Wr(this,bo)&&di(e,Ki)&&!ji(e)){try{await Wr(this,bo).call(this,e)}catch(e){return t(e)}return t(null)}let r=null;const i={...e},o={id:i.id,jsonrpc:i.jsonrpc};try{await Yr(n=Ko,Mo,Ao).call(n,i,o,Wr(this,Eo))}catch(e){r=e}return r&&(delete o.result,o.error||(o.error=Wi(r))),t(r,o)},Mo=new WeakSet,Ao=async function(e,t,n){var r,i,o;const[s,a,c]=await Yr(r=Ko,To,Io).call(r,e,t,n);if(Yr(i=Ko,Do,Lo).call(i,e,t,a),await Yr(o=Ko,Oo,No).call(o,c),s)throw s},To=new WeakSet,Io=async function(e,t,n){var r;const i=[];let o=null,s=!1;for(const a of n)if([o,s]=await Yr(r=Ko,Po,Ro).call(r,e,t,a,i),s)break;return[o,s,i.reverse()]},Po=new WeakSet,Ro=async function(e,t,n,r){return new Promise((i=>{const o=e=>{const n=e||t.error;n&&(t.error=Wi(n)),i([n,!0])},s=n=>{t.error?o(t.error):(n&&(\"function\"!=typeof n&&o(new lo(Zr.internal,`JsonRpcEngine: \"next\" return handlers must be functions. Received \"${typeof n}\" for request:\\n${$o(e)}`,{request:e})),r.push(n)),i([null,!1]))};try{n(e,t,s,o)}catch(e){o(e)}}))},Oo=new WeakSet,No=async function(e){for(const t of e)await new Promise(((e,n)=>{t((t=>t?n(t):e()))}))},Do=new WeakSet,Lo=function(e,t,n){if(!Xr(t,\"result\")&&!Xr(t,\"error\"))throw new lo(Zr.internal,`JsonRpcEngine: Response has no error or result for request:\\n${$o(e)}`,{request:e});if(!n)throw new lo(Zr.internal,`JsonRpcEngine: Nothing ended request:\\n${$o(e)}`,{request:e})},Vr(Ko,Mo),Vr(Ko,To),Vr(Ko,Po),Vr(Ko,Oo),Vr(Ko,Do);var jo=Ko;function $o(e){return JSON.stringify(e,null,2)}var Ho=Object.freeze([\"eth_subscription\"]),Uo=(e=console)=>{return[qr(),(t=e,(e,n,r)=>{\"string\"==typeof e.method&&e.method||(n.error=ho({message:\"The request 'method' must be a non-empty string.\",data:e})),r((e=>{const{error:r}=n;return r?(t.error(`MetaMask - RPC Error: ${r.message}`,r),e()):e()}))}),Hr(e)];var t};var Fo=(e,t,n=!0)=>(r,i)=>{r||i.error?t(r||i.error):!n||Array.isArray(i)?e(i):e(i.result)},qo=e=>Boolean(e)&&\"string\"==typeof e&&e.startsWith(\"0x\"),zo=()=>{};async function Wo(e,t){try{const t=await async function(){return{name:Vo(window),icon:await Go(window)}}();e.handle({jsonrpc:\"2.0\",id:1,method:\"metamask_sendDomainMetadata\",params:t},zo)}catch(e){t.error({message:$r.errors.sendSiteMetadata(),originalError:e})}}function Vo(e){const{document:t}=e,n=t.querySelector('head > meta[property=\"og:site_name\"]');if(n)return n.content;const r=t.querySelector('head > meta[name=\"title\"]');return r?r.content:t.title&&t.title.length>0?t.title:window.location.hostname}async function Go(e){const{document:t}=e,n=t.querySelectorAll('head > link[rel~=\"icon\"]');for(const e of Array.from(n))if(e&&await Yo(e.href))return e.href;return null}async function Yo(e){return new Promise(((t,n)=>{try{const n=document.createElement(\"img\");n.onload=()=>t(!0),n.onerror=()=>t(!1),n.src=e}catch(e){n(e)}}))}var Zo=(e,t,n)=>{if(!t.has(e))throw TypeError(\"Cannot \"+n)},Jo=(e,t,n)=>(Zo(e,t,\"read from private field\"),n?n.call(e):t.get(e)),Qo=(e,t,n)=>{if(t.has(e))throw TypeError(\"Cannot add the same private member more than once\");t instanceof WeakSet?t.add(e):t.set(e,n)},Xo=(e,t,n,r)=>(Zo(e,t,\"write to private field\"),t.set(e,n),n);function es(e,t,n){try{Reflect.apply(e,t,n)}catch(e){setTimeout((()=>{throw e}))}}class ts extends a.EventEmitter{emit(e,...t){let n=\"error\"===e;const r=this._events;if(void 0!==r)n=n&&void 0===r.error;else if(!n)return!1;if(n){let e;if(t.length>0&&([e]=t),e instanceof Error)throw e;const n=new Error(\"Unhandled error.\"+(e?` (${e.message})`:\"\"));throw n.context=e,n}const i=r[e];if(void 0===i)return!1;if(\"function\"==typeof i)es(i,this,t);else{const e=i.length,n=function(e){const t=e.length,n=new Array(t);for(let r=0;r<t;r+=1)n[r]=e[r];return n}(i);for(let r=0;r<e;r+=1)es(n[r],this,t)}return!0}}var ns,rs,is=function e(t,n){if(t===n)return!0;if(t&&n&&\"object\"==typeof t&&\"object\"==typeof n){if(t.constructor!==n.constructor)return!1;var r,i,o;if(Array.isArray(t)){if((r=t.length)!=n.length)return!1;for(i=r;0!=i--;)if(!e(t[i],n[i]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((r=(o=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(i=r;0!=i--;)if(!Object.prototype.hasOwnProperty.call(n,o[i]))return!1;for(i=r;0!=i--;){var s=o[i];if(!e(t[s],n[s]))return!1}return!0}return t!=t&&n!=n},os=h(is),ss=class e extends ts{constructor({logger:t=console,maxEventListeners:n=100,rpcMiddleware:r=[]}={}){super(),Qo(this,ns,void 0),Qo(this,rs,void 0),this._log=t,this.setMaxListeners(n),this._state={...e._defaultState},Xo(this,rs,null),Xo(this,ns,null),this._handleAccountsChanged=this._handleAccountsChanged.bind(this),this._handleConnect=this._handleConnect.bind(this),this._handleChainChanged=this._handleChainChanged.bind(this),this._handleDisconnect=this._handleDisconnect.bind(this),this._handleUnlockStateChanged=this._handleUnlockStateChanged.bind(this),this._rpcRequest=this._rpcRequest.bind(this),this.request=this.request.bind(this);const i=new jo;r.forEach((e=>i.push(e))),this._rpcEngine=i}get chainId(){return Jo(this,ns)}get selectedAddress(){return Jo(this,rs)}isConnected(){return this._state.isConnected}async request(e){if(!e||\"object\"!=typeof e||Array.isArray(e))throw ho({message:$r.errors.invalidRequestArgs(),data:e});const{method:t,params:n}=e;if(\"string\"!=typeof t||0===t.length)throw ho({message:$r.errors.invalidRequestMethod(),data:e});if(void 0!==n&&!Array.isArray(n)&&(\"object\"!=typeof n||null===n))throw ho({message:$r.errors.invalidRequestParams(),data:e});const r=null==n?{method:t}:{method:t,params:n};return new Promise(((e,t)=>{this._rpcRequest(r,Fo(e,t))}))}_initializeState(e){if(this._state.initialized)throw new Error(\"Provider already initialized.\");if(e){const{accounts:t,chainId:n,isUnlocked:r,networkVersion:i}=e;this._handleConnect(n),this._handleChainChanged({chainId:n,networkVersion:i}),this._handleUnlockStateChanged({accounts:t,isUnlocked:r}),this._handleAccountsChanged(t)}this._state.initialized=!0,this.emit(\"_initialized\")}_rpcRequest(e,t){let n=t;return Array.isArray(e)||(e.jsonrpc||(e.jsonrpc=\"2.0\"),\"eth_accounts\"!==e.method&&\"eth_requestAccounts\"!==e.method||(n=(n,r)=>{this._handleAccountsChanged(r.result??[],\"eth_accounts\"===e.method),t(n,r)})),this._rpcEngine.handle(e,n)}_handleConnect(e){this._state.isConnected||(this._state.isConnected=!0,this.emit(\"connect\",{chainId:e}),this._log.debug($r.info.connected(e)))}_handleDisconnect(e,t){if(this._state.isConnected||!this._state.isPermanentlyDisconnected&&!e){let n;this._state.isConnected=!1,e?(n=new lo(1013,t??$r.errors.disconnected()),this._log.debug(n)):(n=new lo(1011,t??$r.errors.permanentlyDisconnected()),this._log.error(n),Xo(this,ns,null),this._state.accounts=null,Xo(this,rs,null),this._state.isUnlocked=!1,this._state.isPermanentlyDisconnected=!0),this.emit(\"disconnect\",n)}}_handleChainChanged({chainId:e}={}){qo(e)?(this._handleConnect(e),e!==Jo(this,ns)&&(Xo(this,ns,e),this._state.initialized&&this.emit(\"chainChanged\",Jo(this,ns)))):this._log.error($r.errors.invalidNetworkParams(),{chainId:e})}_handleAccountsChanged(e,t=!1){let n=e;Array.isArray(e)||(this._log.error(\"MetaMask: Received invalid accounts parameter. Please report this bug.\",e),n=[]);for(const t of e)if(\"string\"!=typeof t){this._log.error(\"MetaMask: Received non-string account. Please report this bug.\",e),n=[];break}if(!os(this._state.accounts,n)&&(t&&null!==this._state.accounts&&this._log.error(\"MetaMask: 'eth_accounts' unexpectedly updated accounts. Please report this bug.\",n),this._state.accounts=n,Jo(this,rs)!==n[0]&&Xo(this,rs,n[0]||null),this._state.initialized)){const e=[...n];this.emit(\"accountsChanged\",e)}}_handleUnlockStateChanged({accounts:e,isUnlocked:t}={}){\"boolean\"==typeof t?t!==this._state.isUnlocked&&(this._state.isUnlocked=t,this._handleAccountsChanged(e??[])):this._log.error(\"MetaMask: Received invalid isUnlocked parameter. Please report this bug.\")}};ns=new WeakMap,rs=new WeakMap,ss._defaultState={accounts:null,isConnected:!1,isUnlocked:!1,initialized:!1,isPermanentlyDisconnected:!1};var as,cs,ds,ls,us,hs,fs=ss,ps={exports:{}};function ms(){return cs?as:(cs=1,as=c)}function gs(){if(ls)return ds;function e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function t(t){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?e(Object(i),!0).forEach((function(e){r(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):e(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function r(e,t,n){return(t=o(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t,n){return t&&function(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,o(r.key),r)}}(e.prototype,t),Object.defineProperty(e,\"prototype\",{writable:!1}),e}function o(e){var t=function(e,t){if(\"object\"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||\"default\");if(\"object\"!=typeof r)return r;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===t?String:Number)(e)}(e,\"string\");return\"symbol\"==typeof t?t:String(t)}ls=1;var s=n.Buffer,a=d.inspect,c=a&&a.custom||\"inspect\";return ds=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.head=null,this.tail=null,this.length=0}return i(e,[{key:\"push\",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:\"unshift\",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:\"shift\",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:\"clear\",value:function(){this.head=this.tail=null,this.length=0}},{key:\"join\",value:function(e){if(0===this.length)return\"\";for(var t=this.head,n=\"\"+t.data;t=t.next;)n+=e+t.data;return n}},{key:\"concat\",value:function(e){if(0===this.length)return s.alloc(0);for(var t,n,r,i=s.allocUnsafe(e>>>0),o=this.head,a=0;o;)t=o.data,n=i,r=a,s.prototype.copy.call(t,n,r),a+=o.data.length,o=o.next;return i}},{key:\"consume\",value:function(e,t){var n;return e<this.head.data.length?(n=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):n=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),n}},{key:\"first\",value:function(){return this.head.data}},{key:\"_getString\",value:function(e){var t=this.head,n=1,r=t.data;for(e-=r.length;t=t.next;){var i=t.data,o=e>i.length?i.length:e;if(o===i.length?r+=i:r+=i.slice(0,e),0===(e-=o)){o===i.length?(++n,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=i.slice(o));break}++n}return this.length-=n,r}},{key:\"_getBuffer\",value:function(e){var t=s.allocUnsafe(e),n=this.head,r=1;for(n.data.copy(t),e-=n.data.length;n=n.next;){var i=n.data,o=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,o),0===(e-=o)){o===i.length?(++r,n.next?this.head=n.next:this.head=this.tail=null):(this.head=n,n.data=i.slice(o));break}++r}return this.length-=r,t}},{key:c,value:function(e,n){return a(this,t(t({},n),{},{depth:0,customInspect:!1}))}}]),e}(),ds}function vs(){if(hs)return us;function e(e,r){n(e,r),t(e)}function t(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit(\"close\")}function n(e,t){e.emit(\"error\",t)}return hs=1,us={destroy:function(r,i){var o=this,s=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return s||a?(i?i(r):r&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(n,this,r)):process.nextTick(n,this,r)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(r||null,(function(n){!i&&n?o._writableState?o._writableState.errorEmitted?process.nextTick(t,o):(o._writableState.errorEmitted=!0,process.nextTick(e,o,n)):process.nextTick(e,o,n):i?(process.nextTick(t,o),i(n)):process.nextTick(t,o)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var n=e._readableState,r=e._writableState;n&&n.autoDestroy||r&&r.autoDestroy?e.destroy(t):e.emit(\"error\",t)}},us}var ys,Es,bs,ws={};function Ss(){if(ys)return ws;ys=1;const e={};function t(t,n,r){r||(r=Error);class i extends r{constructor(e,t,r){super(function(e,t,r){return\"string\"==typeof n?n:n(e,t,r)}(e,t,r))}}i.prototype.name=r.name,i.prototype.code=t,e[t]=i}function n(e,t){if(Array.isArray(e)){const n=e.length;return e=e.map((e=>String(e))),n>2?`one of ${t} ${e.slice(0,n-1).join(\", \")}, or `+e[n-1]:2===n?`one of ${t} ${e[0]} or ${e[1]}`:`of ${t} ${e[0]}`}return`of ${t} ${String(e)}`}return t(\"ERR_INVALID_OPT_VALUE\",(function(e,t){return'The value \"'+t+'\" is invalid for option \"'+e+'\"'}),TypeError),t(\"ERR_INVALID_ARG_TYPE\",(function(e,t,r){let i;var o;let s;if(\"string\"==typeof t&&(o=\"not \",t.substr(0,o.length)===o)?(i=\"must not be\",t=t.replace(/^not /,\"\")):i=\"must be\",function(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}(e,\" argument\"))s=`The ${e} ${i} ${n(t,\"type\")}`;else{const r=function(e,t,n){return\"number\"!=typeof n&&(n=0),!(n+t.length>e.length)&&-1!==e.indexOf(t,n)}(e,\".\")?\"property\":\"argument\";s=`The \"${e}\" ${r} ${i} ${n(t,\"type\")}`}return s+=\". Received type \"+typeof r,s}),TypeError),t(\"ERR_STREAM_PUSH_AFTER_EOF\",\"stream.push() after EOF\"),t(\"ERR_METHOD_NOT_IMPLEMENTED\",(function(e){return\"The \"+e+\" method is not implemented\"})),t(\"ERR_STREAM_PREMATURE_CLOSE\",\"Premature close\"),t(\"ERR_STREAM_DESTROYED\",(function(e){return\"Cannot call \"+e+\" after a stream was destroyed\"})),t(\"ERR_MULTIPLE_CALLBACK\",\"Callback called multiple times\"),t(\"ERR_STREAM_CANNOT_PIPE\",\"Cannot pipe, not readable\"),t(\"ERR_STREAM_WRITE_AFTER_END\",\"write after end\"),t(\"ERR_STREAM_NULL_VALUES\",\"May not write null values to stream\",TypeError),t(\"ERR_UNKNOWN_ENCODING\",(function(e){return\"Unknown encoding: \"+e}),TypeError),t(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\",\"stream.unshift() after end event\"),ws.codes=e,ws}function _s(){if(bs)return Es;bs=1;var e=Ss().codes.ERR_INVALID_OPT_VALUE;return Es={getHighWaterMark:function(t,n,r,i){var o=function(e,t,n){return null!=e.highWaterMark?e.highWaterMark:t?e[n]:null}(n,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new e(i?r:\"highWaterMark\",o);return Math.floor(o)}return t.objectMode?16:16384}}}var Cs,xs,ks,Ms,As,Ts,Is,Ps,Rs={exports:{}},Os={exports:{}};function Ns(){if(xs)return Rs.exports;xs=1;try{var e=__webpack_require__(/*! util */ \"util\");if(\"function\"!=typeof e.inherits)throw\"\";Rs.exports=e.inherits}catch(e){Rs.exports=(Cs||(Cs=1,\"function\"==typeof Object.create?Os.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:Os.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}),Os.exports)}return Rs.exports}function Ds(){if(Ts)return As;function e(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var r=e.entry;e.entry=null;for(;r;){var i=r.callback;t.pendingcb--,i(n),r=r.next}t.corkedRequestsFree.next=e}(t,e)}}var t;Ts=1,As=C,C.WritableState=_;var r={deprecate:Ms?ks:(Ms=1,ks=d.deprecate)},i=ms(),o=n.Buffer,s=(void 0!==u?u:\"undefined\"!=typeof window?window:\"undefined\"!=typeof self?self:{}).Uint8Array||function(){};var a,c=vs(),l=_s().getHighWaterMark,h=Ss().codes,f=h.ERR_INVALID_ARG_TYPE,p=h.ERR_METHOD_NOT_IMPLEMENTED,m=h.ERR_MULTIPLE_CALLBACK,g=h.ERR_STREAM_CANNOT_PIPE,v=h.ERR_STREAM_DESTROYED,y=h.ERR_STREAM_NULL_VALUES,E=h.ERR_STREAM_WRITE_AFTER_END,b=h.ERR_UNKNOWN_ENCODING,w=c.errorOrDestroy;function S(){}function _(n,r,i){t=t||Ls(),n=n||{},\"boolean\"!=typeof i&&(i=r instanceof t),this.objectMode=!!n.objectMode,i&&(this.objectMode=this.objectMode||!!n.writableObjectMode),this.highWaterMark=l(this,n,\"writableHighWaterMark\",i),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var o=!1===n.decodeStrings;this.decodeStrings=!o,this.defaultEncoding=n.defaultEncoding||\"utf8\",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,r=n.sync,i=n.writecb;if(\"function\"!=typeof i)throw new m;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,r,i){--t.pendingcb,n?(process.nextTick(i,r),process.nextTick(I,e,t),e._writableState.errorEmitted=!0,w(e,r)):(i(r),e._writableState.errorEmitted=!0,w(e,r),I(e,t))}(e,n,r,t,i);else{var o=A(n)||e.destroyed;o||n.corked||n.bufferProcessing||!n.bufferedRequest||M(e,n),r?process.nextTick(k,e,n,o,i):k(e,n,o,i)}}(r,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==n.emitClose,this.autoDestroy=!!n.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new e(this)}function C(e){var n=this instanceof(t=t||Ls());if(!n&&!a.call(C,this))return new C(e);this._writableState=new _(e,this,n),this.writable=!0,e&&(\"function\"==typeof e.write&&(this._write=e.write),\"function\"==typeof e.writev&&(this._writev=e.writev),\"function\"==typeof e.destroy&&(this._destroy=e.destroy),\"function\"==typeof e.final&&(this._final=e.final)),i.call(this)}function x(e,t,n,r,i,o,s){t.writelen=r,t.writecb=s,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new v(\"write\")):n?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function k(e,t,n,r){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit(\"drain\"))}(e,t),t.pendingcb--,r(),I(e,t)}function M(t,n){n.bufferProcessing=!0;var r=n.bufferedRequest;if(t._writev&&r&&r.next){var i=n.bufferedRequestCount,o=new Array(i),s=n.corkedRequestsFree;s.entry=r;for(var a=0,c=!0;r;)o[a]=r,r.isBuf||(c=!1),r=r.next,a+=1;o.allBuffers=c,x(t,n,!0,n.length,o,\"\",s.finish),n.pendingcb++,n.lastBufferedRequest=null,s.next?(n.corkedRequestsFree=s.next,s.next=null):n.corkedRequestsFree=new e(n),n.bufferedRequestCount=0}else{for(;r;){var d=r.chunk,l=r.encoding,u=r.callback;if(x(t,n,!1,n.objectMode?1:d.length,d,l,u),r=r.next,n.bufferedRequestCount--,n.writing)break}null===r&&(n.lastBufferedRequest=null)}n.bufferedRequest=r,n.bufferProcessing=!1}function A(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function T(e,t){e._final((function(n){t.pendingcb--,n&&w(e,n),t.prefinished=!0,e.emit(\"prefinish\"),I(e,t)}))}function I(e,t){var n=A(t);if(n&&(function(e,t){t.prefinished||t.finalCalled||(\"function\"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit(\"prefinish\")):(t.pendingcb++,t.finalCalled=!0,process.nextTick(T,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit(\"finish\"),t.autoDestroy))){var r=e._readableState;(!r||r.autoDestroy&&r.endEmitted)&&e.destroy()}return n}return Ns()(C,i),_.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(_.prototype,\"buffer\",{get:r.deprecate((function(){return this.getBuffer()}),\"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\",\"DEP0003\")})}catch(e){}}(),\"function\"==typeof Symbol&&Symbol.hasInstance&&\"function\"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(C,Symbol.hasInstance,{value:function(e){return!!a.call(this,e)||this===C&&(e&&e._writableState instanceof _)}})):a=function(e){return e instanceof this},C.prototype.pipe=function(){w(this,new g)},C.prototype.write=function(e,t,n){var r,i=this._writableState,a=!1,c=!i.objectMode&&(r=e,o.isBuffer(r)||r instanceof s);return c&&!o.isBuffer(e)&&(e=function(e){return o.from(e)}(e)),\"function\"==typeof t&&(n=t,t=null),c?t=\"buffer\":t||(t=i.defaultEncoding),\"function\"!=typeof n&&(n=S),i.ending?function(e,t){var n=new E;w(e,n),process.nextTick(t,n)}(this,n):(c||function(e,t,n,r){var i;return null===n?i=new y:\"string\"==typeof n||t.objectMode||(i=new f(\"chunk\",[\"string\",\"Buffer\"],n)),!i||(w(e,i),process.nextTick(r,i),!1)}(this,i,e,n))&&(i.pendingcb++,a=function(e,t,n,r,i,s){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||\"string\"!=typeof t||(t=o.from(t,n));return t}(t,r,i);r!==a&&(n=!0,i=\"buffer\",r=a)}var c=t.objectMode?1:r.length;t.length+=c;var d=t.length<t.highWaterMark;d||(t.needDrain=!0);if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:s,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else x(e,t,!1,c,r,i,s);return d}(this,i,c,e,t,n)),a},C.prototype.cork=function(){this._writableState.corked++},C.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||M(this,e))},C.prototype.setDefaultEncoding=function(e){if(\"string\"==typeof e&&(e=e.toLowerCase()),!([\"hex\",\"utf8\",\"utf-8\",\"ascii\",\"binary\",\"base64\",\"ucs2\",\"ucs-2\",\"utf16le\",\"utf-16le\",\"raw\"].indexOf((e+\"\").toLowerCase())>-1))throw new b(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(C.prototype,\"writableBuffer\",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(C.prototype,\"writableHighWaterMark\",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),C.prototype._write=function(e,t,n){n(new p(\"_write()\"))},C.prototype._writev=null,C.prototype.end=function(e,t,n){var r=this._writableState;return\"function\"==typeof e?(n=e,e=null,t=null):\"function\"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),r.corked&&(r.corked=1,this.uncork()),r.ending||function(e,t,n){t.ending=!0,I(e,t),n&&(t.finished?process.nextTick(n):e.once(\"finish\",n));t.ended=!0,e.writable=!1}(this,r,n),this},Object.defineProperty(C.prototype,\"writableLength\",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(C.prototype,\"destroyed\",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),C.prototype.destroy=c.destroy,C.prototype._undestroy=c.undestroy,C.prototype._destroy=function(e,t){t(e)},As}function Ls(){if(Ps)return Is;Ps=1;var e=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};Is=s;var t=oa(),n=Ds();Ns()(s,t);for(var r=e(n.prototype),i=0;i<r.length;i++){var o=r[i];s.prototype[o]||(s.prototype[o]=n.prototype[o])}function s(e){if(!(this instanceof s))return new s(e);t.call(this,e),n.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once(\"end\",a)))}function a(){this._writableState.ended||process.nextTick(c,this)}function c(e){e.end()}return Object.defineProperty(s.prototype,\"writableHighWaterMark\",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(s.prototype,\"writableBuffer\",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(s.prototype,\"writableLength\",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(s.prototype,\"destroyed\",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),Is}var Bs,Ks,js,$s,Hs,Us,Fs,qs,zs,Ws,Vs,Gs,Ys,Zs,Js,Qs,Xs={},ea={exports:{}};function ta(){if(Ks)return Xs;Ks=1;var e=(Bs||(Bs=1,function(e,t){var r=n,i=r.Buffer;function o(e,t){for(var n in e)t[n]=e[n]}function s(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(e,t,n){if(\"number\"==typeof e)throw new TypeError(\"Argument must not be a number\");return i(e,t,n)},s.alloc=function(e,t,n){if(\"number\"!=typeof e)throw new TypeError(\"Argument must be a number\");var r=i(e);return void 0!==t?\"string\"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},s.allocUnsafe=function(e){if(\"number\"!=typeof e)throw new TypeError(\"Argument must be a number\");return i(e)},s.allocUnsafeSlow=function(e){if(\"number\"!=typeof e)throw new TypeError(\"Argument must be a number\");return r.SlowBuffer(e)}}(ea,ea.exports)),ea.exports).Buffer,t=e.isEncoding||function(e){switch((e=\"\"+e)&&e.toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":case\"raw\":return!0;default:return!1}};function r(n){var r;switch(this.encoding=function(n){var r=function(e){if(!e)return\"utf8\";for(var t;;)switch(e){case\"utf8\":case\"utf-8\":return\"utf8\";case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return\"utf16le\";case\"latin1\":case\"binary\":return\"latin1\";case\"base64\":case\"ascii\":case\"hex\":return e;default:if(t)return;e=(\"\"+e).toLowerCase(),t=!0}}(n);if(\"string\"!=typeof r&&(e.isEncoding===t||!t(n)))throw new Error(\"Unknown encoding: \"+n);return r||n}(n),this.encoding){case\"utf16le\":this.text=s,this.end=a,r=4;break;case\"utf8\":this.fillLast=o,r=4;break;case\"base64\":this.text=c,this.end=d,r=3;break;default:return this.write=l,void(this.end=u)}this.lastNeed=0,this.lastTotal=0,this.lastChar=e.allocUnsafe(r)}function i(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function o(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,\"�\";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,\"�\";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,\"�\"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function s(e,t){if((e.length-t)%2==0){var n=e.toString(\"utf16le\",t);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString(\"utf16le\",t,e.length-1)}function a(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString(\"utf16le\",0,n)}return t}function c(e,t){var n=(e.length-t)%3;return 0===n?e.toString(\"base64\",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString(\"base64\",t,e.length-n))}function d(e){var t=e&&e.length?this.write(e):\"\";return this.lastNeed?t+this.lastChar.toString(\"base64\",0,3-this.lastNeed):t}function l(e){return e.toString(this.encoding)}function u(e){return e&&e.length?this.write(e):\"\"}return Xs.StringDecoder=r,r.prototype.write=function(e){if(0===e.length)return\"\";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return\"\";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||\"\"},r.prototype.end=function(e){var t=e&&e.length?this.write(e):\"\";return this.lastNeed?t+\"�\":t},r.prototype.text=function(e,t){var n=function(e,t,n){var r=t.length-1;if(r<n)return 0;var o=i(t[r]);if(o>=0)return o>0&&(e.lastNeed=o-1),o;if(--r<n||-2===o)return 0;if(o=i(t[r]),o>=0)return o>0&&(e.lastNeed=o-2),o;if(--r<n||-2===o)return 0;if(o=i(t[r]),o>=0)return o>0&&(2===o?o=0:e.lastNeed=o-3),o;return 0}(this,e,t);if(!this.lastNeed)return e.toString(\"utf8\",t);this.lastTotal=n;var r=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,r),e.toString(\"utf8\",t,r)},r.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length},Xs}function na(){if($s)return js;$s=1;var e=Ss().codes.ERR_STREAM_PREMATURE_CLOSE;function t(){}return js=function n(r,i,o){if(\"function\"==typeof i)return n(r,null,i);i||(i={}),o=function(e){var t=!1;return function(){if(!t){t=!0;for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];e.apply(this,r)}}}(o||t);var s=i.readable||!1!==i.readable&&r.readable,a=i.writable||!1!==i.writable&&r.writable,c=function(){r.writable||l()},d=r._writableState&&r._writableState.finished,l=function(){a=!1,d=!0,s||o.call(r)},u=r._readableState&&r._readableState.endEmitted,h=function(){s=!1,u=!0,a||o.call(r)},f=function(e){o.call(r,e)},p=function(){var t;return s&&!u?(r._readableState&&r._readableState.ended||(t=new e),o.call(r,t)):a&&!d?(r._writableState&&r._writableState.ended||(t=new e),o.call(r,t)):void 0},m=function(){r.req.on(\"finish\",l)};return!function(e){return e.setHeader&&\"function\"==typeof e.abort}(r)?a&&!r._writableState&&(r.on(\"end\",c),r.on(\"close\",c)):(r.on(\"complete\",l),r.on(\"abort\",p),r.req?m():r.on(\"request\",m)),r.on(\"end\",h),r.on(\"finish\",l),!1!==i.error&&r.on(\"error\",f),r.on(\"close\",p),function(){r.removeListener(\"complete\",l),r.removeListener(\"abort\",p),r.removeListener(\"request\",m),r.req&&r.req.removeListener(\"finish\",l),r.removeListener(\"end\",c),r.removeListener(\"close\",c),r.removeListener(\"finish\",l),r.removeListener(\"end\",h),r.removeListener(\"error\",f),r.removeListener(\"close\",p)}},js}function ra(){if(Us)return Hs;var e;function t(e,t,n){return(t=function(e){var t=function(e,t){if(\"object\"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||\"default\");if(\"object\"!=typeof r)return r;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===t?String:Number)(e)}(e,\"string\");return\"symbol\"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Us=1;var n=na(),r=Symbol(\"lastResolve\"),i=Symbol(\"lastReject\"),o=Symbol(\"error\"),s=Symbol(\"ended\"),a=Symbol(\"lastPromise\"),c=Symbol(\"handlePromise\"),d=Symbol(\"stream\");function l(e,t){return{value:e,done:t}}function u(e){var t=e[r];if(null!==t){var n=e[d].read();null!==n&&(e[a]=null,e[r]=null,e[i]=null,t(l(n,!1)))}}function h(e){process.nextTick(u,e)}var f=Object.getPrototypeOf((function(){})),p=Object.setPrototypeOf((t(e={get stream(){return this[d]},next:function(){var e=this,t=this[o];if(null!==t)return Promise.reject(t);if(this[s])return Promise.resolve(l(void 0,!0));if(this[d].destroyed)return new Promise((function(t,n){process.nextTick((function(){e[o]?n(e[o]):t(l(void 0,!0))}))}));var n,r=this[a];if(r)n=new Promise(function(e,t){return function(n,r){e.then((function(){t[s]?n(l(void 0,!0)):t[c](n,r)}),r)}}(r,this));else{var i=this[d].read();if(null!==i)return Promise.resolve(l(i,!1));n=new Promise(this[c])}return this[a]=n,n}},Symbol.asyncIterator,(function(){return this})),t(e,\"return\",(function(){var e=this;return new Promise((function(t,n){e[d].destroy(null,(function(e){e?n(e):t(l(void 0,!0))}))}))})),e),f);return Hs=function(e){var u,f=Object.create(p,(t(u={},d,{value:e,writable:!0}),t(u,r,{value:null,writable:!0}),t(u,i,{value:null,writable:!0}),t(u,o,{value:null,writable:!0}),t(u,s,{value:e._readableState.endEmitted,writable:!0}),t(u,c,{value:function(e,t){var n=f[d].read();n?(f[a]=null,f[r]=null,f[i]=null,e(l(n,!1))):(f[r]=e,f[i]=t)},writable:!0}),u));return f[a]=null,n(e,(function(e){if(e&&\"ERR_STREAM_PREMATURE_CLOSE\"!==e.code){var t=f[i];return null!==t&&(f[a]=null,f[r]=null,f[i]=null,t(e)),void(f[o]=e)}var n=f[r];null!==n&&(f[a]=null,f[r]=null,f[i]=null,n(l(void 0,!0))),f[s]=!0})),e.on(\"readable\",h.bind(null,f)),f},Hs}function ia(){if(qs)return Fs;function e(e,t,n,r,i,o,s){try{var a=e[o](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function n(e,t,n){return(t=function(e){var t=function(e,t){if(\"object\"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||\"default\");if(\"object\"!=typeof r)return r;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===t?String:Number)(e)}(e,\"string\");return\"symbol\"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}qs=1;var r=Ss().codes.ERR_INVALID_ARG_TYPE;return Fs=function(i,o,s){var a;if(o&&\"function\"==typeof o.next)a=o;else if(o&&o[Symbol.asyncIterator])a=o[Symbol.asyncIterator]();else{if(!o||!o[Symbol.iterator])throw new r(\"iterable\",[\"Iterable\"],o);a=o[Symbol.iterator]()}var c=new i(function(e){for(var r=1;r<arguments.length;r++){var i=null!=arguments[r]?arguments[r]:{};r%2?t(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):t(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}({objectMode:!0},s)),d=!1;function l(){return u.apply(this,arguments)}function u(){var t;return t=function*(){try{var e=yield a.next(),t=e.value;e.done?c.push(null):c.push(yield t)?l():d=!1}catch(e){c.destroy(e)}},u=function(){var n=this,r=arguments;return new Promise((function(i,o){var s=t.apply(n,r);function a(t){e(s,i,o,a,c,\"next\",t)}function c(t){e(s,i,o,a,c,\"throw\",t)}a(void 0)}))},u.apply(this,arguments)}return c._read=function(){d||(d=!0,l())},c},Fs}function oa(){if(Ws)return zs;var e;Ws=1,zs=x,x.ReadableState=C,a.EventEmitter;var t=function(e,t){return e.listeners(t).length},r=ms(),i=n.Buffer,o=(void 0!==u?u:\"undefined\"!=typeof window?window:\"undefined\"!=typeof self?self:{}).Uint8Array||function(){};var s,c=d;s=c&&c.debuglog?c.debuglog(\"stream\"):function(){};var l,h,f,p=gs(),m=vs(),g=_s().getHighWaterMark,v=Ss().codes,y=v.ERR_INVALID_ARG_TYPE,E=v.ERR_STREAM_PUSH_AFTER_EOF,b=v.ERR_METHOD_NOT_IMPLEMENTED,w=v.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;Ns()(x,r);var S=m.errorOrDestroy,_=[\"error\",\"close\",\"destroy\",\"pause\",\"resume\"];function C(t,n,r){e=e||Ls(),t=t||{},\"boolean\"!=typeof r&&(r=n instanceof e),this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=g(this,t,\"readableHighWaterMark\",r),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||\"utf8\",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(l||(l=ta().StringDecoder),this.decoder=new l(t.encoding),this.encoding=t.encoding)}function x(t){if(e=e||Ls(),!(this instanceof x))return new x(t);var n=this instanceof e;this._readableState=new C(t,this,n),this.readable=!0,t&&(\"function\"==typeof t.read&&(this._read=t.read),\"function\"==typeof t.destroy&&(this._destroy=t.destroy)),r.call(this)}function k(e,t,n,r,a){s(\"readableAddChunk\",t);var c,d=e._readableState;if(null===t)d.reading=!1,function(e,t){if(s(\"onEofChunk\"),t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,t.sync?I(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,P(e)))}(e,d);else if(a||(c=function(e,t){var n;r=t,i.isBuffer(r)||r instanceof o||\"string\"==typeof t||void 0===t||e.objectMode||(n=new y(\"chunk\",[\"string\",\"Buffer\",\"Uint8Array\"],t));var r;return n}(d,t)),c)S(e,c);else if(d.objectMode||t&&t.length>0)if(\"string\"==typeof t||d.objectMode||Object.getPrototypeOf(t)===i.prototype||(t=function(e){return i.from(e)}(t)),r)d.endEmitted?S(e,new w):M(e,d,t,!0);else if(d.ended)S(e,new E);else{if(d.destroyed)return!1;d.reading=!1,d.decoder&&!n?(t=d.decoder.write(t),d.objectMode||0!==t.length?M(e,d,t,!1):R(e,d)):M(e,d,t,!1)}else r||(d.reading=!1,R(e,d));return!d.ended&&(d.length<d.highWaterMark||0===d.length)}function M(e,t,n,r){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit(\"data\",n)):(t.length+=t.objectMode?1:n.length,r?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&I(e)),R(e,t)}Object.defineProperty(x.prototype,\"destroyed\",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),x.prototype.destroy=m.destroy,x.prototype._undestroy=m.undestroy,x.prototype._destroy=function(e,t){t(e)},x.prototype.push=function(e,t){var n,r=this._readableState;return r.objectMode?n=!0:\"string\"==typeof e&&((t=t||r.defaultEncoding)!==r.encoding&&(e=i.from(e,t),t=\"\"),n=!0),k(this,e,t,!1,n)},x.prototype.unshift=function(e){return k(this,e,null,!0,!1)},x.prototype.isPaused=function(){return!1===this._readableState.flowing},x.prototype.setEncoding=function(e){l||(l=ta().StringDecoder);var t=new l(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,r=\"\";null!==n;)r+=t.write(n.data),n=n.next;return this._readableState.buffer.clear(),\"\"!==r&&this._readableState.buffer.push(r),this._readableState.length=r.length,this};var A=1073741824;function T(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=A?e=A:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function I(e){var t=e._readableState;s(\"emitReadable\",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(s(\"emitReadable\",t.flowing),t.emittedReadable=!0,process.nextTick(P,e))}function P(e){var t=e._readableState;s(\"emitReadable_\",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit(\"readable\"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,B(e)}function R(e,t){t.readingMore||(t.readingMore=!0,process.nextTick(O,e,t))}function O(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var n=t.length;if(s(\"maybeReadMore read 0\"),e.read(0),n===t.length)break}t.readingMore=!1}function N(e){var t=e._readableState;t.readableListening=e.listenerCount(\"readable\")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount(\"data\")>0&&e.resume()}function D(e){s(\"readable nexttick read 0\"),e.read(0)}function L(e,t){s(\"resume\",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit(\"resume\"),B(e),t.flowing&&!t.reading&&e.read(0)}function B(e){var t=e._readableState;for(s(\"flow\",t.flowing);t.flowing&&null!==e.read(););}function K(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(\"\"):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):n=t.buffer.consume(e,t.decoder),n);var n}function j(e){var t=e._readableState;s(\"endReadable\",t.endEmitted),t.endEmitted||(t.ended=!0,process.nextTick($,t,e))}function $(e,t){if(s(\"endReadableNT\",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit(\"end\"),e.autoDestroy)){var n=t._writableState;(!n||n.autoDestroy&&n.finished)&&t.destroy()}}function H(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}return x.prototype.read=function(e){s(\"read\",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return s(\"read: emitReadable\",t.length,t.ended),0===t.length&&t.ended?j(this):I(this),null;if(0===(e=T(e,t))&&t.ended)return 0===t.length&&j(this),null;var r,i=t.needReadable;return s(\"need readable\",i),(0===t.length||t.length-e<t.highWaterMark)&&s(\"length less than watermark\",i=!0),t.ended||t.reading?s(\"reading or ended\",i=!1):i&&(s(\"do read\"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=T(n,t))),null===(r=e>0?K(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&j(this)),null!==r&&this.emit(\"data\",r),r},x.prototype._read=function(e){S(this,new b(\"_read()\"))},x.prototype.pipe=function(e,n){var r=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,s(\"pipe count=%d opts=%j\",i.pipesCount,n);var o=(!n||!1!==n.end)&&e!==process.stdout&&e!==process.stderr?c:m;function a(t,n){s(\"onunpipe\"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,s(\"cleanup\"),e.removeListener(\"close\",f),e.removeListener(\"finish\",p),e.removeListener(\"drain\",d),e.removeListener(\"error\",h),e.removeListener(\"unpipe\",a),r.removeListener(\"end\",c),r.removeListener(\"end\",m),r.removeListener(\"data\",u),l=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||d())}function c(){s(\"onend\"),e.end()}i.endEmitted?process.nextTick(o):r.once(\"end\",o),e.on(\"unpipe\",a);var d=function(e){return function(){var n=e._readableState;s(\"pipeOnDrain\",n.awaitDrain),n.awaitDrain&&n.awaitDrain--,0===n.awaitDrain&&t(e,\"data\")&&(n.flowing=!0,B(e))}}(r);e.on(\"drain\",d);var l=!1;function u(t){s(\"ondata\");var n=e.write(t);s(\"dest.write\",n),!1===n&&((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==H(i.pipes,e))&&!l&&(s(\"false write response, pause\",i.awaitDrain),i.awaitDrain++),r.pause())}function h(n){s(\"onerror\",n),m(),e.removeListener(\"error\",h),0===t(e,\"error\")&&S(e,n)}function f(){e.removeListener(\"finish\",p),m()}function p(){s(\"onfinish\"),e.removeListener(\"close\",f),m()}function m(){s(\"unpipe\"),r.unpipe(e)}return r.on(\"data\",u),function(e,t,n){if(\"function\"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,\"error\",h),e.once(\"close\",f),e.once(\"finish\",p),e.emit(\"pipe\",r),i.flowing||(s(\"pipe resume\"),r.resume()),e},x.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit(\"unpipe\",this,n)),this;if(!e){var r=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)r[o].emit(\"unpipe\",this,{hasUnpiped:!1});return this}var s=H(t.pipes,e);return-1===s||(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit(\"unpipe\",this,n)),this},x.prototype.on=function(e,t){var n=r.prototype.on.call(this,e,t),i=this._readableState;return\"data\"===e?(i.readableListening=this.listenerCount(\"readable\")>0,!1!==i.flowing&&this.resume()):\"readable\"===e&&(i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,s(\"on readable\",i.length,i.reading),i.length?I(this):i.reading||process.nextTick(D,this))),n},x.prototype.addListener=x.prototype.on,x.prototype.removeListener=function(e,t){var n=r.prototype.removeListener.call(this,e,t);return\"readable\"===e&&process.nextTick(N,this),n},x.prototype.removeAllListeners=function(e){var t=r.prototype.removeAllListeners.apply(this,arguments);return\"readable\"!==e&&void 0!==e||process.nextTick(N,this),t},x.prototype.resume=function(){var e=this._readableState;return e.flowing||(s(\"resume\"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,process.nextTick(L,e,t))}(this,e)),e.paused=!1,this},x.prototype.pause=function(){return s(\"call pause flowing=%j\",this._readableState.flowing),!1!==this._readableState.flowing&&(s(\"pause\"),this._readableState.flowing=!1,this.emit(\"pause\")),this._readableState.paused=!0,this},x.prototype.wrap=function(e){var t=this,n=this._readableState,r=!1;for(var i in e.on(\"end\",(function(){if(s(\"wrapped end\"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on(\"data\",(function(i){(s(\"wrapped data\"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(t.push(i)||(r=!0,e.pause()))})),e)void 0===this[i]&&\"function\"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<_.length;o++)e.on(_[o],this.emit.bind(this,_[o]));return this._read=function(t){s(\"wrapped _read\",t),r&&(r=!1,e.resume())},this},\"function\"==typeof Symbol&&(x.prototype[Symbol.asyncIterator]=function(){return void 0===h&&(h=ra()),h(this)}),Object.defineProperty(x.prototype,\"readableHighWaterMark\",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(x.prototype,\"readableBuffer\",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(x.prototype,\"readableFlowing\",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),x._fromList=K,Object.defineProperty(x.prototype,\"readableLength\",{enumerable:!1,get:function(){return this._readableState.length}}),\"function\"==typeof Symbol&&(x.from=function(e,t){return void 0===f&&(f=ia()),f(x,e,t)}),zs}function sa(){if(Gs)return Vs;Gs=1,Vs=a;var e=Ss().codes,t=e.ERR_METHOD_NOT_IMPLEMENTED,n=e.ERR_MULTIPLE_CALLBACK,r=e.ERR_TRANSFORM_ALREADY_TRANSFORMING,i=e.ERR_TRANSFORM_WITH_LENGTH_0,o=Ls();function s(e,t){var r=this._transformState;r.transforming=!1;var i=r.writecb;if(null===i)return this.emit(\"error\",new n);r.writechunk=null,r.writecb=null,null!=t&&this.push(t),i(e);var o=this._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);o.call(this,e),this._transformState={afterTransform:s.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&(\"function\"==typeof e.transform&&(this._transform=e.transform),\"function\"==typeof e.flush&&(this._flush=e.flush)),this.on(\"prefinish\",c)}function c(){var e=this;\"function\"!=typeof this._flush||this._readableState.destroyed?d(this,null,null):this._flush((function(t,n){d(e,t,n)}))}function d(e,t,n){if(t)return e.emit(\"error\",t);if(null!=n&&e.push(n),e._writableState.length)throw new i;if(e._transformState.transforming)throw new r;return e.push(null)}return Ns()(a,o),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,o.prototype.push.call(this,e,t)},a.prototype._transform=function(e,n,r){r(new t(\"_transform()\"))},a.prototype._write=function(e,t,n){var r=this._transformState;if(r.writecb=n,r.writechunk=e,r.writeencoding=t,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},a.prototype._destroy=function(e,t){o.prototype._destroy.call(this,e,(function(e){t(e)}))},Vs}function aa(){if(Qs)return Js;var e;Qs=1;var t=Ss().codes,n=t.ERR_MISSING_ARGS,r=t.ERR_STREAM_DESTROYED;function i(e){if(e)throw e}function o(e){e()}function s(e,t){return e.pipe(t)}return Js=function(){for(var t=arguments.length,a=new Array(t),c=0;c<t;c++)a[c]=arguments[c];var d,l=function(e){return e.length?\"function\"!=typeof e[e.length-1]?i:e.pop():i}(a);if(Array.isArray(a[0])&&(a=a[0]),a.length<2)throw new n(\"streams\");var u=a.map((function(t,n){var i=n<a.length-1;return function(t,n,i,o){o=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(o);var s=!1;t.on(\"close\",(function(){s=!0})),void 0===e&&(e=na()),e(t,{readable:n,writable:i},(function(e){if(e)return o(e);s=!0,o()}));var a=!1;return function(e){if(!s&&!a)return a=!0,function(e){return e.setHeader&&\"function\"==typeof e.abort}(t)?t.abort():\"function\"==typeof t.destroy?t.destroy():void o(e||new r(\"pipe\"))}}(t,i,n>0,(function(e){d||(d=e),e&&u.forEach(o),i||(u.forEach(o),l(d))}))}));return a.reduce(s)},Js}!function(e,t){var n=c;\"disable\"===process.env.READABLE_STREAM&&n?(e.exports=n.Readable,Object.assign(e.exports,n),e.exports.Stream=n):((t=e.exports=oa()).Stream=n||t,t.Readable=t,t.Writable=Ds(),t.Duplex=Ls(),t.Transform=sa(),t.PassThrough=function(){if(Zs)return Ys;Zs=1,Ys=t;var e=sa();function t(n){if(!(this instanceof t))return new t(n);e.call(this,n)}return Ns()(t,e),t.prototype._transform=function(e,t,n){n(null,e)},Ys}(),t.finished=na(),t.pipeline=aa())}(ps,ps.exports);var ca=ps.exports;function da(e={}){const t={},n=new ca.Duplex({objectMode:!0,read:()=>{},write:function(n,o,s){let a=null;try{!n.id?function(n){e?.retryOnMessage&&n.method===e.retryOnMessage&&Object.values(t).forEach((({req:e,retryCount:n=0})=>{if(!e.id)return;if(n>=3)throw new Error(`StreamMiddleware - Retry limit exceeded for request id \"${e.id}\"`);const r=t[e.id];r&&(r.retryCount=n+1),i(e)}));r.emit(\"notification\",n)}(n):function(e){const{id:n}=e;if(null===n)return;const r=t[n];if(!r)return void console.warn(`StreamMiddleware - Unknown response id \"${n}\"`);delete t[n],Object.assign(r.res,e),setTimeout(r.end)}(n)}catch(e){a=e}s(a)}}),r=new Bo;return{events:r,middleware:(e,n,r,o)=>{t[e.id]={req:e,res:n,next:r,end:o},i(e)},stream:n};function i(e){n.push(e)}}var la={},ua={exports:{}},ha=function e(t,n){if(t&&n)return e(t)(n);if(\"function\"!=typeof t)throw new TypeError(\"need wrapper function\");return Object.keys(t).forEach((function(e){r[e]=t[e]})),r;function r(){for(var e=new Array(arguments.length),n=0;n<e.length;n++)e[n]=arguments[n];var r=t.apply(this,e),i=e[e.length-1];return\"function\"==typeof r&&r!==i&&Object.keys(i).forEach((function(e){r[e]=i[e]})),r}};var fa=ha;function pa(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function ma(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},n=e.name||\"Function wrapped with `once`\";return t.onceError=n+\" shouldn't be called more than once\",t.called=!1,t}ua.exports=fa(pa),ua.exports.strict=fa(ma),pa.proto=pa((function(){Object.defineProperty(Function.prototype,\"once\",{value:function(){return pa(this)},configurable:!0}),Object.defineProperty(Function.prototype,\"onceStrict\",{value:function(){return ma(this)},configurable:!0})}));var ga=ua.exports,va={};Object.defineProperty(va,\"__esModule\",{value:!0}),va.Substream=void 0;const ya=ca;class Ea extends ya.Duplex{constructor({parent:e,name:t}){super({objectMode:!0}),this._parent=e,this._name=t}_read(){}_write(e,t,n){this._parent.push({name:this._name,data:e}),n()}}va.Substream=Ea;var ba=u&&u.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(la,\"__esModule\",{value:!0}),la.ObjectMultiplex=void 0;const wa=ca,Sa=ba(ga),_a=va,Ca=Symbol(\"IGNORE_SUBSTREAM\");let xa=class extends wa.Duplex{constructor(e={}){super(Object.assign(Object.assign({},e),{objectMode:!0})),this._substreams={}}createStream(e){if(this.destroyed)throw new Error(`ObjectMultiplex - parent stream for name \"${e}\" already destroyed`);if(this._readableState.ended||this._writableState.ended)throw new Error(`ObjectMultiplex - parent stream for name \"${e}\" already ended`);if(!e)throw new Error(\"ObjectMultiplex - name must not be empty\");if(this._substreams[e])throw new Error(`ObjectMultiplex - Substream for name \"${e}\" already exists`);const t=new _a.Substream({parent:this,name:e});return this._substreams[e]=t,function(e,t){const n=(0,Sa.default)(t);(0,wa.finished)(e,{readable:!1},n),(0,wa.finished)(e,{writable:!1},n)}(this,(e=>t.destroy(e||void 0))),t}ignoreStream(e){if(!e)throw new Error(\"ObjectMultiplex - name must not be empty\");if(this._substreams[e])throw new Error(`ObjectMultiplex - Substream for name \"${e}\" already exists`);this._substreams[e]=Ca}_read(){}_write(e,t,n){const{name:r,data:i}=e;if(!r)return console.warn(`ObjectMultiplex - malformed chunk without name \"${e}\"`),n();const o=this._substreams[r];return o?(o!==Ca&&o.push(i),n()):(console.warn(`ObjectMultiplex - orphaned data for stream \"${r}\"`),n())}};la.ObjectMultiplex=xa;var ka=h(la.ObjectMultiplex);const Ma=e=>null!==e&&\"object\"==typeof e&&\"function\"==typeof e.pipe;Ma.writable=e=>Ma(e)&&!1!==e.writable&&\"function\"==typeof e._write&&\"object\"==typeof e._writableState,Ma.readable=e=>Ma(e)&&!1!==e.readable&&\"function\"==typeof e._read&&\"object\"==typeof e._readableState,Ma.duplex=e=>Ma.writable(e)&&Ma.readable(e),Ma.transform=e=>Ma.duplex(e)&&\"function\"==typeof e._transform;var Aa,Ta=Ma,Ia=class extends fs{constructor(e,{jsonRpcStreamName:t,logger:n=console,maxEventListeners:r=100,rpcMiddleware:i=[]}){if(super({logger:n,maxEventListeners:r,rpcMiddleware:i}),!Ta.duplex(e))throw new Error($r.errors.invalidDuplexStream());this._handleStreamDisconnect=this._handleStreamDisconnect.bind(this);const o=new ka;ca.pipeline(e,o,e,this._handleStreamDisconnect.bind(this,\"MetaMask\")),this._jsonRpcConnection=da({retryOnMessage:\"METAMASK_EXTENSION_CONNECT_CAN_RETRY\"}),ca.pipeline(this._jsonRpcConnection.stream,o.createStream(t),this._jsonRpcConnection.stream,this._handleStreamDisconnect.bind(this,\"MetaMask RpcProvider\")),this._rpcEngine.push(this._jsonRpcConnection.middleware),this._jsonRpcConnection.events.on(\"notification\",(t=>{const{method:n,params:r}=t;\"metamask_accountsChanged\"===n?this._handleAccountsChanged(r):\"metamask_unlockStateChanged\"===n?this._handleUnlockStateChanged(r):\"metamask_chainChanged\"===n?this._handleChainChanged(r):Ho.includes(n)?this.emit(\"message\",{type:n,data:r}):\"METAMASK_STREAM_FAILURE\"===n&&e.destroy(new Error($r.errors.permanentlyDisconnected()))}))}async _initializeStateAsync(){let e;try{e=await this.request({method:\"metamask_getProviderState\"})}catch(e){this._log.error(\"MetaMask: Failed to get initial state. Please report this bug.\",e)}this._initializeState(e)}_handleStreamDisconnect(e,t){let n=`MetaMask: Lost connection to \"${e}\".`;t?.stack&&(n+=`\\n${t.stack}`),this._log.warn(n),this.listenerCount(\"error\")>0&&this.emit(\"error\",n),this._handleDisconnect(!1,t?t.message:void 0)}_handleChainChanged({chainId:e,networkVersion:t}={}){qo(e)&&(e=>Boolean(e)&&\"string\"==typeof e)(t)?\"loading\"===t?this._handleDisconnect(!0):super._handleChainChanged({chainId:e}):this._log.error($r.errors.invalidNetworkParams(),{chainId:e,networkVersion:t})}},Pa=class extends Ia{constructor(e,{jsonRpcStreamName:t=\"metamask-provider\",logger:n=console,maxEventListeners:r=100,shouldSendMetadata:i}={}){if(super(e,{jsonRpcStreamName:t,logger:n,maxEventListeners:r,rpcMiddleware:Uo(n)}),this._sentWarnings={chainId:!1,networkVersion:!1,selectedAddress:!1,enable:!1,experimentalMethods:!1,send:!1,events:{close:!1,data:!1,networkChanged:!1,notification:!1}},Qo(this,Aa,void 0),this._initializeStateAsync(),Xo(this,Aa,null),this.isMetaMask=!0,this._sendSync=this._sendSync.bind(this),this.enable=this.enable.bind(this),this.send=this.send.bind(this),this.sendAsync=this.sendAsync.bind(this),this._warnOfDeprecation=this._warnOfDeprecation.bind(this),this._metamask=this._getExperimentalApi(),this._jsonRpcConnection.events.on(\"notification\",(e=>{const{method:t}=e;Ho.includes(t)&&(this.emit(\"data\",e),this.emit(\"notification\",e.params.result))})),i)if(\"complete\"===document.readyState)Wo(this._rpcEngine,this._log);else{const e=()=>{Wo(this._rpcEngine,this._log),window.removeEventListener(\"DOMContentLoaded\",e)};window.addEventListener(\"DOMContentLoaded\",e)}}get chainId(){return this._sentWarnings.chainId||(this._log.warn($r.warnings.chainIdDeprecation),this._sentWarnings.chainId=!0),super.chainId}get networkVersion(){return this._sentWarnings.networkVersion||(this._log.warn($r.warnings.networkVersionDeprecation),this._sentWarnings.networkVersion=!0),Jo(this,Aa)}get selectedAddress(){return this._sentWarnings.selectedAddress||(this._log.warn($r.warnings.selectedAddressDeprecation),this._sentWarnings.selectedAddress=!0),super.selectedAddress}sendAsync(e,t){this._rpcRequest(e,t)}addListener(e,t){return this._warnOfDeprecation(e),super.addListener(e,t)}on(e,t){return this._warnOfDeprecation(e),super.on(e,t)}once(e,t){return this._warnOfDeprecation(e),super.once(e,t)}prependListener(e,t){return this._warnOfDeprecation(e),super.prependListener(e,t)}prependOnceListener(e,t){return this._warnOfDeprecation(e),super.prependOnceListener(e,t)}_handleDisconnect(e,t){super._handleDisconnect(e,t),Jo(this,Aa)&&!e&&Xo(this,Aa,null)}_warnOfDeprecation(e){!1===this._sentWarnings?.events[e]&&(this._log.warn($r.warnings.events[e]),this._sentWarnings.events[e]=!0)}async enable(){return this._sentWarnings.enable||(this._log.warn($r.warnings.enableDeprecation),this._sentWarnings.enable=!0),new Promise(((e,t)=>{try{this._rpcRequest({method:\"eth_requestAccounts\",params:[]},Fo(e,t))}catch(e){t(e)}}))}send(e,t){return this._sentWarnings.send||(this._log.warn($r.warnings.sendDeprecation),this._sentWarnings.send=!0),\"string\"!=typeof e||t&&!Array.isArray(t)?e&&\"object\"==typeof e&&\"function\"==typeof t?this._rpcRequest(e,t):this._sendSync(e):new Promise(((n,r)=>{try{this._rpcRequest({method:e,params:t},Fo(n,r,!1))}catch(e){r(e)}}))}_sendSync(e){let t;switch(e.method){case\"eth_accounts\":t=this.selectedAddress?[this.selectedAddress]:[];break;case\"eth_coinbase\":t=this.selectedAddress??null;break;case\"eth_uninstallFilter\":this._rpcRequest(e,zo),t=!0;break;case\"net_version\":t=Jo(this,Aa)??null;break;default:throw new Error($r.errors.unsupportedSync(e.method))}return{id:e.id,jsonrpc:e.jsonrpc,result:t}}_getExperimentalApi(){return new Proxy({isUnlocked:async()=>(this._state.initialized||await new Promise((e=>{this.on(\"_initialized\",(()=>e()))})),this._state.isUnlocked),requestBatch:async e=>{if(!Array.isArray(e))throw ho({message:\"Batch requests must be made with an array of request objects.\",data:e});return new Promise(((t,n)=>{this._rpcRequest(e,Fo(t,n))}))}},{get:(e,t,...n)=>(this._sentWarnings.experimentalMethods||(this._log.warn($r.warnings.experimentalMethods),this._sentWarnings.experimentalMethods=!0),Reflect.get(e,t,...n))})}_handleChainChanged({chainId:e,networkVersion:t}={}){super._handleChainChanged({chainId:e,networkVersion:t}),this._state.isConnected&&t!==Jo(this,Aa)&&(Xo(this,Aa,t),this._state.initialized&&this.emit(\"networkChanged\",Jo(this,Aa)))}};Aa=new WeakMap;const Ra=t(\"MM_SDK\");Ra.color=\"#FFAC1C\";var Oa={},Na={};Object.defineProperty(Na,\"__esModule\",{value:!0}),Na.EthereumProviderError=Na.EthereumRpcError=void 0;const Da=Yi;class La extends Error{constructor(e,t,n){if(!Number.isInteger(e))throw new Error('\"code\" must be an integer.');if(!t||\"string\"!=typeof t)throw new Error('\"message\" must be a nonempty string.');super(t),this.code=e,void 0!==n&&(this.data=n)}serialize(){const e={code:this.code,message:this.message};return void 0!==this.data&&(e.data=this.data),this.stack&&(e.stack=this.stack),e}toString(){return Da.default(this.serialize(),Ba,2)}}Na.EthereumRpcError=La;function Ba(e,t){if(\"[Circular]\"!==t)return t}Na.EthereumProviderError=class extends La{constructor(e,t,n){if(!function(e){return Number.isInteger(e)&&e>=1e3&&e<=4999}(e))throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');super(e,t,n)}};var Ka={},ja={};Object.defineProperty(ja,\"__esModule\",{value:!0}),ja.errorValues=ja.errorCodes=void 0,ja.errorCodes={rpc:{invalidInput:-32e3,resourceNotFound:-32001,resourceUnavailable:-32002,transactionRejected:-32003,methodNotSupported:-32004,limitExceeded:-32005,parse:-32700,invalidRequest:-32600,methodNotFound:-32601,invalidParams:-32602,internal:-32603},provider:{userRejectedRequest:4001,unauthorized:4100,unsupportedMethod:4200,disconnected:4900,chainDisconnected:4901}},ja.errorValues={\"-32700\":{standard:\"JSON RPC 2.0\",message:\"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"},\"-32600\":{standard:\"JSON RPC 2.0\",message:\"The JSON sent is not a valid Request object.\"},\"-32601\":{standard:\"JSON RPC 2.0\",message:\"The method does not exist / is not available.\"},\"-32602\":{standard:\"JSON RPC 2.0\",message:\"Invalid method parameter(s).\"},\"-32603\":{standard:\"JSON RPC 2.0\",message:\"Internal JSON-RPC error.\"},\"-32000\":{standard:\"EIP-1474\",message:\"Invalid input.\"},\"-32001\":{standard:\"EIP-1474\",message:\"Resource not found.\"},\"-32002\":{standard:\"EIP-1474\",message:\"Resource unavailable.\"},\"-32003\":{standard:\"EIP-1474\",message:\"Transaction rejected.\"},\"-32004\":{standard:\"EIP-1474\",message:\"Method not supported.\"},\"-32005\":{standard:\"EIP-1474\",message:\"Request limit exceeded.\"},4001:{standard:\"EIP-1193\",message:\"User rejected the request.\"},4100:{standard:\"EIP-1193\",message:\"The requested account and/or method has not been authorized by the user.\"},4200:{standard:\"EIP-1193\",message:\"The requested method is not supported by this Ethereum provider.\"},4900:{standard:\"EIP-1193\",message:\"The provider is disconnected from all chains.\"},4901:{standard:\"EIP-1193\",message:\"The provider is disconnected from the specified chain.\"}},function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.serializeError=e.isValidCode=e.getMessageFromCode=e.JSON_RPC_SERVER_ERROR_MESSAGE=void 0;const t=ja,n=Na,r=t.errorCodes.rpc.internal,i=\"Unspecified error message. This is a bug, please report it.\",o={code:r,message:s(r)};function s(n,r=i){if(Number.isInteger(n)){const r=n.toString();if(l(t.errorValues,r))return t.errorValues[r].message;if(c(n))return e.JSON_RPC_SERVER_ERROR_MESSAGE}return r}function a(e){if(!Number.isInteger(e))return!1;const n=e.toString();return!!t.errorValues[n]||!!c(e)}function c(e){return e>=-32099&&e<=-32e3}function d(e){return e&&\"object\"==typeof e&&!Array.isArray(e)?Object.assign({},e):e}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.JSON_RPC_SERVER_ERROR_MESSAGE=\"Unspecified server error.\",e.getMessageFromCode=s,e.isValidCode=a,e.serializeError=function(e,{fallbackError:t=o,shouldIncludeStack:r=!1}={}){var i,c;if(!t||!Number.isInteger(t.code)||\"string\"!=typeof t.message)throw new Error(\"Must provide fallback error with integer number code and string message.\");if(e instanceof n.EthereumRpcError)return e.serialize();const u={};if(e&&\"object\"==typeof e&&!Array.isArray(e)&&l(e,\"code\")&&a(e.code)){const t=e;u.code=t.code,t.message&&\"string\"==typeof t.message?(u.message=t.message,l(t,\"data\")&&(u.data=t.data)):(u.message=s(u.code),u.data={originalError:d(e)})}else{u.code=t.code;const n=null===(i=e)||void 0===i?void 0:i.message;u.message=n&&\"string\"==typeof n?n:t.message,u.data={originalError:d(e)}}const h=null===(c=e)||void 0===c?void 0:c.stack;return r&&e&&h&&\"string\"==typeof h&&(u.stack=h),u}}(Ka);var $a={};Object.defineProperty($a,\"__esModule\",{value:!0}),$a.ethErrors=void 0;const Ha=Na,Ua=Ka,Fa=ja;function qa(e,t){const[n,r]=Wa(t);return new Ha.EthereumRpcError(e,n||Ua.getMessageFromCode(e),r)}function za(e,t){const[n,r]=Wa(t);return new Ha.EthereumProviderError(e,n||Ua.getMessageFromCode(e),r)}function Wa(e){if(e){if(\"string\"==typeof e)return[e];if(\"object\"==typeof e&&!Array.isArray(e)){const{message:t,data:n}=e;if(t&&\"string\"!=typeof t)throw new Error(\"Must specify string message.\");return[t||void 0,n]}}return[]}$a.ethErrors={rpc:{parse:e=>qa(Fa.errorCodes.rpc.parse,e),invalidRequest:e=>qa(Fa.errorCodes.rpc.invalidRequest,e),invalidParams:e=>qa(Fa.errorCodes.rpc.invalidParams,e),methodNotFound:e=>qa(Fa.errorCodes.rpc.methodNotFound,e),internal:e=>qa(Fa.errorCodes.rpc.internal,e),server:e=>{if(!e||\"object\"!=typeof e||Array.isArray(e))throw new Error(\"Ethereum RPC Server errors must provide single object argument.\");const{code:t}=e;if(!Number.isInteger(t)||t>-32005||t<-32099)throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');return qa(t,e)},invalidInput:e=>qa(Fa.errorCodes.rpc.invalidInput,e),resourceNotFound:e=>qa(Fa.errorCodes.rpc.resourceNotFound,e),resourceUnavailable:e=>qa(Fa.errorCodes.rpc.resourceUnavailable,e),transactionRejected:e=>qa(Fa.errorCodes.rpc.transactionRejected,e),methodNotSupported:e=>qa(Fa.errorCodes.rpc.methodNotSupported,e),limitExceeded:e=>qa(Fa.errorCodes.rpc.limitExceeded,e)},provider:{userRejectedRequest:e=>za(Fa.errorCodes.provider.userRejectedRequest,e),unauthorized:e=>za(Fa.errorCodes.provider.unauthorized,e),unsupportedMethod:e=>za(Fa.errorCodes.provider.unsupportedMethod,e),disconnected:e=>za(Fa.errorCodes.provider.disconnected,e),chainDisconnected:e=>za(Fa.errorCodes.provider.chainDisconnected,e),custom:e=>{if(!e||\"object\"!=typeof e||Array.isArray(e))throw new Error(\"Ethereum Provider custom errors must provide single object argument.\");const{code:t,message:n,data:r}=e;if(!n||\"string\"!=typeof n)throw new Error('\"message\" must be a nonempty string');return new Ha.EthereumProviderError(t,n,r)}}},function(e){Object.defineProperty(e,\"__esModule\",{value:!0}),e.getMessageFromCode=e.serializeError=e.EthereumProviderError=e.EthereumRpcError=e.ethErrors=e.errorCodes=void 0;const t=Na;Object.defineProperty(e,\"EthereumRpcError\",{enumerable:!0,get:function(){return t.EthereumRpcError}}),Object.defineProperty(e,\"EthereumProviderError\",{enumerable:!0,get:function(){return t.EthereumProviderError}});const n=Ka;Object.defineProperty(e,\"serializeError\",{enumerable:!0,get:function(){return n.serializeError}}),Object.defineProperty(e,\"getMessageFromCode\",{enumerable:!0,get:function(){return n.getMessageFromCode}});const r=$a;Object.defineProperty(e,\"ethErrors\",{enumerable:!0,get:function(){return r.ethErrors}});const i=ja;Object.defineProperty(e,\"errorCodes\",{enumerable:!0,get:function(){return i.errorCodes}})}(Oa);const Va={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Electron:\"electron\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"},Ga={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",electron:\"Electron\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"},Ya={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"},Za={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"},Ja={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"};class Qa{static getFirstMatch(e,t){const n=t.match(e);return n&&n.length>0&&n[1]||\"\"}static getSecondMatch(e,t){const n=t.match(e);return n&&n.length>1&&n[2]||\"\"}static matchAndReturnConst(e,t,n){if(e.test(t))return n}static getWindowsVersionName(e){switch(e){case\"NT\":return\"NT\";case\"XP\":case\"NT 5.1\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}}static getMacOSVersionName(e){const t=e.split(\".\").splice(0,2).map((e=>parseInt(e,10)||0));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}}static getAndroidVersionName(e){const t=e.split(\".\").splice(0,2).map((e=>parseInt(e,10)||0));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0}static getVersionPrecision(e){return e.split(\".\").length}static compareVersions(e,t,n=!1){const r=Qa.getVersionPrecision(e),i=Qa.getVersionPrecision(t);let o=Math.max(r,i),s=0;const a=Qa.map([e,t],(e=>{const t=o-Qa.getVersionPrecision(e),n=e+new Array(t+1).join(\".0\");return Qa.map(n.split(\".\"),(e=>new Array(20-e.length).join(\"0\")+e)).reverse()}));for(n&&(s=o-Math.min(r,i)),o-=1;o>=s;){if(a[0][o]>a[1][o])return 1;if(a[0][o]===a[1][o]){if(o===s)return 0;o-=1}else if(a[0][o]<a[1][o])return-1}}static map(e,t){const n=[];let r;if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n}static find(e,t){let n,r;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(n=0,r=e.length;n<r;n+=1){const r=e[n];if(t(r,n))return r}}static assign(e,...t){const n=e;let r,i;if(Object.assign)return Object.assign(e,...t);for(r=0,i=t.length;r<i;r+=1){const e=t[r];if(\"object\"==typeof e&&null!==e){Object.keys(e).forEach((t=>{n[t]=e[t]}))}}return e}static getBrowserAlias(e){return Va[e]}static getBrowserTypeByAlias(e){return Ga[e]||\"\"}}const Xa=/version\\/(\\d+(\\.?_?\\d+)+)/i,ec=[{test:[/googlebot/i],describe(e){const t={name:\"Googlebot\"},n=Qa.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/opera/i],describe(e){const t={name:\"Opera\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opr\\/|opios/i],describe(e){const t={name:\"Opera\"},n=Qa.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/SamsungBrowser/i],describe(e){const t={name:\"Samsung Internet for Android\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Whale/i],describe(e){const t={name:\"NAVER Whale Browser\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MZBrowser/i],describe(e){const t={name:\"MZ Browser\"},n=Qa.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/focus/i],describe(e){const t={name:\"Focus\"},n=Qa.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/swing/i],describe(e){const t={name:\"Swing\"},n=Qa.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/coast/i],describe(e){const t={name:\"Opera Coast\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opt\\/\\d+(?:.?_?\\d+)+/i],describe(e){const t={name:\"Opera Touch\"},n=Qa.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/yabrowser/i],describe(e){const t={name:\"Yandex Browser\"},n=Qa.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/ucbrowser/i],describe(e){const t={name:\"UC Browser\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Maxthon|mxios/i],describe(e){const t={name:\"Maxthon\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/epiphany/i],describe(e){const t={name:\"Epiphany\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/puffin/i],describe(e){const t={name:\"Puffin\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sleipnir/i],describe(e){const t={name:\"Sleipnir\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/k-meleon/i],describe(e){const t={name:\"K-Meleon\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/micromessenger/i],describe(e){const t={name:\"WeChat\"},n=Qa.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/qqbrowser/i],describe(e){const t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},n=Qa.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/msie|trident/i],describe(e){const t={name:\"Internet Explorer\"},n=Qa.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/\\sedg\\//i],describe(e){const t={name:\"Microsoft Edge\"},n=Qa.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/edg([ea]|ios)/i],describe(e){const t={name:\"Microsoft Edge\"},n=Qa.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/vivaldi/i],describe(e){const t={name:\"Vivaldi\"},n=Qa.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/seamonkey/i],describe(e){const t={name:\"SeaMonkey\"},n=Qa.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sailfish/i],describe(e){const t={name:\"Sailfish\"},n=Qa.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return n&&(t.version=n),t}},{test:[/silk/i],describe(e){const t={name:\"Amazon Silk\"},n=Qa.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/phantom/i],describe(e){const t={name:\"PhantomJS\"},n=Qa.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/slimerjs/i],describe(e){const t={name:\"SlimerJS\"},n=Qa.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe(e){const t={name:\"BlackBerry\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(web|hpw)[o0]s/i],describe(e){const t={name:\"WebOS Browser\"},n=Qa.getFirstMatch(Xa,e)||Qa.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/bada/i],describe(e){const t={name:\"Bada\"},n=Qa.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/tizen/i],describe(e){const t={name:\"Tizen\"},n=Qa.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/qupzilla/i],describe(e){const t={name:\"QupZilla\"},n=Qa.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/firefox|iceweasel|fxios/i],describe(e){const t={name:\"Firefox\"},n=Qa.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/electron/i],describe(e){const t={name:\"Electron\"},n=Qa.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MiuiBrowser/i],describe(e){const t={name:\"Miui\"},n=Qa.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/chromium/i],describe(e){const t={name:\"Chromium\"},n=Qa.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/chrome|crios|crmo/i],describe(e){const t={name:\"Chrome\"},n=Qa.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/GSA/i],describe(e){const t={name:\"Google Search\"},n=Qa.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test(e){const t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe(e){const t={name:\"Android Browser\"},n=Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/playstation 4/i],describe(e){const t={name:\"PlayStation 4\"},n=Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/safari|applewebkit/i],describe(e){const t={name:\"Safari\"},n=Qa.getFirstMatch(Xa,e);return n&&(t.version=n),t}},{test:[/.*/i],describe(e){const t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:Qa.getFirstMatch(t,e),version:Qa.getSecondMatch(t,e)}}}];var tc=[{test:[/Roku\\/DVP/],describe(e){const t=Qa.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:Za.Roku,version:t}}},{test:[/windows phone/i],describe(e){const t=Qa.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:Za.WindowsPhone,version:t}}},{test:[/windows /i],describe(e){const t=Qa.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),n=Qa.getWindowsVersionName(t);return{name:Za.Windows,version:t,versionName:n}}},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe(e){const t={name:Za.iOS},n=Qa.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/,e);return n&&(t.version=n),t}},{test:[/macintosh/i],describe(e){const t=Qa.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),n=Qa.getMacOSVersionName(t),r={name:Za.MacOS,version:t};return n&&(r.versionName=n),r}},{test:[/(ipod|iphone|ipad)/i],describe(e){const t=Qa.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:Za.iOS,version:t}}},{test(e){const t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe(e){const t=Qa.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),n=Qa.getAndroidVersionName(t),r={name:Za.Android,version:t};return n&&(r.versionName=n),r}},{test:[/(web|hpw)[o0]s/i],describe(e){const t=Qa.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),n={name:Za.WebOS};return t&&t.length&&(n.version=t),n}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe(e){const t=Qa.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||Qa.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||Qa.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:Za.BlackBerry,version:t}}},{test:[/bada/i],describe(e){const t=Qa.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:Za.Bada,version:t}}},{test:[/tizen/i],describe(e){const t=Qa.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:Za.Tizen,version:t}}},{test:[/linux/i],describe:()=>({name:Za.Linux})},{test:[/CrOS/],describe:()=>({name:Za.ChromeOS})},{test:[/PlayStation 4/],describe(e){const t=Qa.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:Za.PlayStation4,version:t}}}],nc=[{test:[/googlebot/i],describe:()=>({type:\"bot\",vendor:\"Google\"})},{test:[/huawei/i],describe(e){const t=Qa.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",n={type:Ya.mobile,vendor:\"Huawei\"};return t&&(n.model=t),n}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:()=>({type:Ya.tablet,vendor:\"Nexus\"})},{test:[/ipad/i],describe:()=>({type:Ya.tablet,vendor:\"Apple\",model:\"iPad\"})},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe:()=>({type:Ya.tablet,vendor:\"Apple\",model:\"iPad\"})},{test:[/kftt build/i],describe:()=>({type:Ya.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"})},{test:[/silk/i],describe:()=>({type:Ya.tablet,vendor:\"Amazon\"})},{test:[/tablet(?! pc)/i],describe:()=>({type:Ya.tablet})},{test(e){const t=e.test(/ipod|iphone/i),n=e.test(/like (ipod|iphone)/i);return t&&!n},describe(e){const t=Qa.getFirstMatch(/(ipod|iphone)/i,e);return{type:Ya.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:()=>({type:Ya.mobile,vendor:\"Nexus\"})},{test:[/[^-]mobi/i],describe:()=>({type:Ya.mobile})},{test:e=>\"blackberry\"===e.getBrowserName(!0),describe:()=>({type:Ya.mobile,vendor:\"BlackBerry\"})},{test:e=>\"bada\"===e.getBrowserName(!0),describe:()=>({type:Ya.mobile})},{test:e=>\"windows phone\"===e.getBrowserName(),describe:()=>({type:Ya.mobile,vendor:\"Microsoft\"})},{test(e){const t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:()=>({type:Ya.tablet})},{test:e=>\"android\"===e.getOSName(!0),describe:()=>({type:Ya.mobile})},{test:e=>\"macos\"===e.getOSName(!0),describe:()=>({type:Ya.desktop,vendor:\"Apple\"})},{test:e=>\"windows\"===e.getOSName(!0),describe:()=>({type:Ya.desktop})},{test:e=>\"linux\"===e.getOSName(!0),describe:()=>({type:Ya.desktop})},{test:e=>\"playstation 4\"===e.getOSName(!0),describe:()=>({type:Ya.tv})},{test:e=>\"roku\"===e.getOSName(!0),describe:()=>({type:Ya.tv})}],rc=[{test:e=>\"microsoft edge\"===e.getBrowserName(!0),describe(e){if(/\\sedg\\//i.test(e))return{name:Ja.Blink};const t=Qa.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:Ja.EdgeHTML,version:t}}},{test:[/trident/i],describe(e){const t={name:Ja.Trident},n=Qa.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:e=>e.test(/presto/i),describe(e){const t={name:Ja.Presto},n=Qa.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test(e){const t=e.test(/gecko/i),n=e.test(/like gecko/i);return t&&!n},describe(e){const t={name:Ja.Gecko},n=Qa.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:()=>({name:Ja.Blink})},{test:[/(apple)?webkit/i],describe(e){const t={name:Ja.WebKit},n=Qa.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}}];class ic{constructor(e,t=!1){if(null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}getUA(){return this._ua}test(e){return e.test(this._ua)}parseBrowser(){this.parsedResult.browser={};const e=Qa.find(ec,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.browser=e.describe(this.getUA())),this.parsedResult.browser}getBrowser(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()}getBrowserName(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"}getBrowserVersion(){return this.getBrowser().version}getOS(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()}parseOS(){this.parsedResult.os={};const e=Qa.find(tc,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.os=e.describe(this.getUA())),this.parsedResult.os}getOSName(e){const{name:t}=this.getOS();return e?String(t).toLowerCase()||\"\":t||\"\"}getOSVersion(){return this.getOS().version}getPlatform(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()}getPlatformType(e=!1){const{type:t}=this.getPlatform();return e?String(t).toLowerCase()||\"\":t||\"\"}parsePlatform(){this.parsedResult.platform={};const e=Qa.find(nc,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.platform=e.describe(this.getUA())),this.parsedResult.platform}getEngine(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()}getEngineName(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"}parseEngine(){this.parsedResult.engine={};const e=Qa.find(rc,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.engine=e.describe(this.getUA())),this.parsedResult.engine}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return Qa.assign({},this.parsedResult)}satisfies(e){const t={};let n=0;const r={};let i=0;if(Object.keys(e).forEach((o=>{const s=e[o];\"string\"==typeof s?(r[o]=s,i+=1):\"object\"==typeof s&&(t[o]=s,n+=1)})),n>0){const e=Object.keys(t),n=Qa.find(e,(e=>this.isOS(e)));if(n){const e=this.satisfies(t[n]);if(void 0!==e)return e}const r=Qa.find(e,(e=>this.isPlatform(e)));if(r){const e=this.satisfies(t[r]);if(void 0!==e)return e}}if(i>0){const e=Object.keys(r),t=Qa.find(e,(e=>this.isBrowser(e,!0)));if(void 0!==t)return this.compareVersion(r[t])}}isBrowser(e,t=!1){const n=this.getBrowserName().toLowerCase();let r=e.toLowerCase();const i=Qa.getBrowserTypeByAlias(r);return t&&i&&(r=i.toLowerCase()),r===n}compareVersion(e){let t=[0],n=e,r=!1;const i=this.getBrowserVersion();if(\"string\"==typeof i)return\">\"===e[0]||\"<\"===e[0]?(n=e.substr(1),\"=\"===e[1]?(r=!0,n=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?n=e.substr(1):\"~\"===e[0]&&(r=!0,n=e.substr(1)),t.indexOf(Qa.compareVersions(i,n,r))>-1}isOS(e){return this.getOSName(!0)===String(e).toLowerCase()}isPlatform(e){return this.getPlatformType(!0)===String(e).toLowerCase()}isEngine(e){return this.getEngineName(!0)===String(e).toLowerCase()}is(e,t=!1){return this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)}some(e=[]){return e.some((e=>this.is(e)))}}class oc{static getParser(e,t=!1){if(\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new ic(e,t)}static parse(e){return new ic(e).getResult()}static get BROWSER_MAP(){return Ga}static get ENGINE_MAP(){return Ja}static get OS_MAP(){return Za}static get PLATFORMS_MAP(){return Ya}}const sc={Initialized:\"initialized\",DisplayURI:\"display_uri\",ProviderUpdate:\"provider_update\",ConnectWithResponse:\"connectWithResponse\",ConnectionStatus:\"connection_status\",ServiceStatus:\"service_status\"};class ac{constructor({shouldSetOnWindow:e,connectionStream:t,shouldSendMetadata:n=!1,shouldShimWeb3:r,sdkInstance:i}){const o=new lc({connectionStream:t,shouldSendMetadata:n,shouldSetOnWindow:e,shouldShimWeb3:r,autoRequestAccounts:!1}),s=new Proxy(o,{deleteProperty:()=>!0});if(this.provider=s,this.sdkInstance=i,e&&\"undefined\"!=typeof window)try{a=o,window.ethereum=a,window.dispatchEvent(new Event(\"ethereum#initialized\"))}catch(e){Ra(\"[Ethereum] Unable to set global provider - window.ethereum may be read-only\",e)}var a;if(r&&\"undefined\"!=typeof window)try{!function(e,t=console){let n=!1,r=!1;if(!window.web3){const i=\"__isMetaMaskShim__\";let o={currentProvider:e};Object.defineProperty(o,i,{value:!0,enumerable:!0,configurable:!1,writable:!1}),o=new Proxy(o,{get:(o,s,...a)=>(\"currentProvider\"!==s||n?\"currentProvider\"===s||s===i||r||(r=!0,t.error(\"MetaMask no longer injects web3. For details, see: https://docs.metamask.io/guide/provider-migration.html#replacing-window-web3\"),e.request({method:\"metamask_logWeb3ShimUsage\"}).catch((e=>{t.debug(\"MetaMask: Failed to log web3 shim usage.\",e)}))):(n=!0,t.warn(\"You are accessing the MetaMask window.web3.currentProvider shim. This property is deprecated; use window.ethereum instead. For details, see: https://docs.metamask.io/guide/provider-migration.html#replacing-window-web3\")),Reflect.get(o,s,...a)),set:(...e)=>(t.warn(\"You are accessing the MetaMask window.web3 shim. This object is deprecated; use window.ethereum instead. For details, see: https://docs.metamask.io/guide/provider-migration.html#replacing-window-web3\"),Reflect.set(...e))}),Object.defineProperty(window,\"web3\",{value:o,enumerable:!1,configurable:!0,writable:!0})}}(this.provider)}catch(e){Ra(\"[Ethereum] Unable to shim web3 - window.web3 may be read-only\",e)}this.provider.on(\"display_uri\",(e=>{this.sdkInstance.emit(sc.DisplayURI,e)})),this.provider.on(\"_initialized\",(()=>{const e={chainId:this.provider.getChainId(),isConnected:this.provider.isConnected(),isMetaMask:this.provider.isMetaMask,selectedAddress:this.provider.getSelectedAddress(),networkVersion:this.provider.getNetworkVersion()};this.sdkInstance.emit(sc.Initialized,e),Ra(\"[Ethereum: constructor()] provider initialized\",e)}))}static init(e){var t;return Ra(\"[Ethereum: init()] Initializing Ethereum service\"),this.instance=new ac(e),null===(t=this.instance)||void 0===t?void 0:t.provider}static destroy(){}static getInstance(){var e;if(!(null===(e=this.instance)||void 0===e?void 0:e.provider))throw new Error(\"Ethereum instance not intiialized - call Ethereum.factory first.\");return this.instance}static getProvider(){var e;if(!(null===(e=this.instance)||void 0===e?void 0:e.provider))throw new Error(\"Ethereum instance not intiialized - call Ethereum.factory first.\");return this.instance.provider}}class cc{constructor({useDeepLink:e,preferredOpenLink:t,debug:n=!1}){this.state={platformType:void 0,useDeeplink:!1,preferredOpenLink:void 0,debug:!1},this.state.platformType=this.getPlatformType(),this.state.useDeeplink=e,this.state.preferredOpenLink=t,this.state.debug=n}openDeeplink(e,t,n){return function(e,t,n,r){const{state:i}=e;Ra(`[PlatfformManager: openDeeplink()] universalLink --\\x3e ${t}`),Ra(`[PlatfformManager: openDeeplink()] deepLink --\\x3e ${n}`);try{if(i.preferredOpenLink)return void i.preferredOpenLink(i.useDeeplink?n:t,r);if(Ra(`[PlatfformManager: openDeeplink()] open link now useDeepLink=${i.useDeeplink} link=${i.useDeeplink?n:t}`),i.useDeeplink)\"undefined\"!=typeof window&&(window.location.href=n);else if(\"undefined\"!=typeof document){const e=document.createElement(\"a\");e.href=t,e.target=\"_self\",e.rel=\"noreferrer noopener\",e.click()}}catch(e){console.log(\"[PlatfformManager: openDeeplink()] can't open link\",e)}}(this,e,t,n)}isReactNative(){var e;return this.isNotBrowser()&&\"undefined\"!=typeof window&&(null===window||void 0===window?void 0:window.navigator)&&\"ReactNative\"===(null===(e=window.navigator)||void 0===e?void 0:e.product)}isMetaMaskInstalled(){return function(){const e=ac.getProvider()||(null===window||void 0===window?void 0:window.ethereum);return Ra(`[PlatfformManager: isMetaMaskInstalled()] isMetaMask=${null==e?void 0:e.isMetaMask} isConnected=${null==e?void 0:e.isConnected()}`),(null==e?void 0:e.isMetaMask)&&(null==e?void 0:e.isConnected())}()}isDesktopWeb(){return this.isBrowser()&&!this.isMobileWeb()}isMobile(){var e,t;const n=oc.parse(window.navigator.userAgent);return\"mobile\"===(null===(e=null==n?void 0:n.platform)||void 0===e?void 0:e.type)||\"tablet\"===(null===(t=null==n?void 0:n.platform)||void 0===t?void 0:t.type)}isSecure(){return this.isReactNative()||this.isMobileWeb()}isMetaMaskMobileWebView(){return\"undefined\"!=typeof window&&(Boolean(window.ReactNativeWebView)&&Boolean(navigator.userAgent.endsWith(\"MetaMaskMobile\")))}isMobileWeb(){return this.state.platformType===exports.PlatformType.MobileWeb}static isNotBrowser(){var e;return\"undefined\"==typeof window||!(null===window||void 0===window?void 0:window.navigator)||\"undefined\"!=typeof global&&\"ReactNative\"===(null===(e=null===global||void 0===global?void 0:global.navigator)||void 0===e?void 0:e.product)||\"ReactNative\"===(null===navigator||void 0===navigator?void 0:navigator.product)}isNotBrowser(){return cc.isNotBrowser()}static isBrowser(){return!this.isNotBrowser()}isBrowser(){return cc.isBrowser()}isNodeJS(){return this.isNotBrowser()&&!this.isReactNative()}isUseDeepLink(){return this.state.useDeeplink}getPlatformType(){return function(e){const{state:t}=e;return t.platformType?t.platformType:e.isReactNative()?exports.PlatformType.ReactNative:e.isNotBrowser()?exports.PlatformType.NonBrowser:e.isMetaMaskMobileWebView()?exports.PlatformType.MetaMaskMobileWebview:e.isMobile()?exports.PlatformType.MobileWeb:exports.PlatformType.DesktopWeb}(this)}}const dc=e=>l(void 0,void 0,void 0,(function*(){if(cc.isBrowser()){const{StorageManagerWeb:t}=yield Promise.resolve().then((function(){return Kd}));return new t(e)}const t={persistChannelConfig:()=>l(void 0,void 0,void 0,(function*(){})),getPersistedChannelConfig:()=>l(void 0,void 0,void 0,(function*(){})),persistAccounts:()=>l(void 0,void 0,void 0,(function*(){})),getCachedAccounts:()=>l(void 0,void 0,void 0,(function*(){return[]})),persistChainId:()=>l(void 0,void 0,void 0,(function*(){})),getCachedChainId:()=>l(void 0,void 0,void 0,(function*(){})),terminate:()=>l(void 0,void 0,void 0,(function*(){}))};return Promise.resolve(t)}));class lc extends Pa{constructor({connectionStream:e,shouldSendMetadata:t,autoRequestAccounts:n=!1}){super(e,{logger:console,maxEventListeners:100,shouldSendMetadata:t}),this.state={accounts:null,autoRequestAccounts:!1,providerStateRequested:!1,chainId:\"\",networkVersion:\"\"},Ra(`[SDKProvider: constructor()] autoRequestAccounts=${n}`),this.state.autoRequestAccounts=n}forceInitializeState(){return l(this,void 0,void 0,(function*(){return Ra(`[SDKProvider: forceInitializeState()] autoRequestAccounts=${this.state.autoRequestAccounts}`),this._initializeStateAsync()}))}_setConnected(){Ra(\"[SDKProvider: _setConnected()] Setting connected state\"),this._state.isConnected=!0}getState(){return this._state}getSDKProviderState(){return this.state}getSelectedAddress(){var e;const{accounts:t}=this._state;return t&&0!==t.length?(null===(e=t[0])||void 0===e?void 0:e.toLowerCase())||\"\":(Ra(\"[SDKProvider: getSelectedAddress] No accounts found\"),null)}getChainId(){return this.state.chainId}getNetworkVersion(){return this.state.networkVersion}setSDKProviderState(e){this.state=Object.assign(Object.assign({},this.state),e)}handleAccountsChanged(e,t){return this._handleAccountsChanged(e,t)}handleDisconnect({terminate:e=!1}){!function({terminate:e=!1,instance:t}){const{state:n}=t;Ra(`[SDKProvider: handleDisconnect()] cleaning up provider state terminate=${e}`,t),e&&(t._state.accounts=null,t._state.isUnlocked=!1,t._state.isPermanentlyDisconnected=!0,t._state.initialized=!1),t._handleAccountsChanged([]),t._state.isConnected=!1,t.emit(\"disconnect\",Oa.ethErrors.provider.disconnected()),n.providerStateRequested=!1}({terminate:e,instance:this})}_initializeStateAsync(){return l(this,void 0,void 0,(function*(){return function(e){var t,n;return l(this,void 0,void 0,(function*(){void 0===e.state&&(e.state={accounts:null,autoRequestAccounts:!1,providerStateRequested:!1,chainId:\"\"});const{state:r}=e;let i;if(r.providerStateRequested)Ra(\"[SDKProvider: initializeStateAsync()] initialization already in progress\");else{let o;r.providerStateRequested=!0;let s=null,a=!1,c=!1;const d=yield dc({enabled:!0});if(d){const e=yield d.getPersistedChannelConfig({});a=null!==(t=null==e?void 0:e.relayPersistence)&&void 0!==t&&t,o=yield d.getCachedChainId();const n=yield d.getCachedAccounts();n.length>0&&(s=n[0])}if(Ra(`[SDKProvider: initializeStateAsync()] relayPersistence=${a}`,{relayPersistence:a,cachedChainId:o,cachedSelectedAddress:s}),a)if(o&&s)i={accounts:[s],chainId:o,isUnlocked:!1},c=!0;else try{i=yield e.request({method:\"metamask_getProviderState\"})}catch(t){return e._log.error(\"MetaMask: Failed to get initial state. Please report this bug.\",t),void(r.providerStateRequested=!1)}if(0===(null===(n=null==i?void 0:i.accounts)||void 0===n?void 0:n.length))if(e.getSelectedAddress())i.accounts=[e.getSelectedAddress()];else{Ra(\"[SDKProvider: initializeStateAsync()] Fetch accounts remotely.\");const t=yield e.request({method:\"eth_requestAccounts\",params:[]});i.accounts=t}e._initializeState(i),r.providerStateRequested=!1,c&&(e._state.isConnected=!0,e.emit(\"connect\",{chainId:null==i?void 0:i.chainId}))}}))}(this)}))}_initializeState(e){return Ra(\"[SDKProvider: _initializeState()]\",e),function(e,t,n){return Ra(\"[SDKProvider: initializeState()] set state._initialized to false\"),e._state.initialized=!1,t(n)}(this,super._initializeState.bind(this),e)}_handleChainChanged({chainId:e,networkVersion:t}={}){this.state.chainId=e,this.state.networkVersion=t,function({instance:e,chainId:t,networkVersion:n,superHandleChainChanged:r}){Ra(`[SDKProvider: handleChainChanged()] chainId=${t} networkVersion=${n}`);let i=n;n||(Ra(\"[SDKProvider: handleChainChanged()] forced network version to prevent provider error\"),i=\"1\"),e._state.isConnected=!0,e.emit(\"connect\",{chainId:t}),r({chainId:t,networkVersion:i})}({instance:this,chainId:e,networkVersion:t,superHandleChainChanged:super._handleChainChanged.bind(this)})}}var uc,hc={name:\"@metamask/sdk\",version:\"0.32.0\",description:\"\",homepage:\"https://github.com/MetaMask/metamask-sdk#readme\",bugs:{url:\"https://github.com/MetaMask/metamask-sdk/issues\"},repository:{type:\"git\",url:\"https://github.com/MetaMask/metamask-sdk\",directory:\"packages/sdk\"},main:\"dist/node/cjs/metamask-sdk.js\",module:\"dist/browser/es/metamask-sdk.js\",browser:\"dist/browser/es/metamask-sdk.js\",unpkg:\"dist/browser/umd/metamask-sdk.js\",\"react-native\":\"dist/react-native/es/metamask-sdk.js\",types:\"dist/types/src/index.d.ts\",sideEffects:!1,files:[\"/dist\"],scripts:{\"build:types\":\"tsc --project tsconfig.build.json --emitDeclarationOnly --outDir dist/types\",build:\"yarn build:types && rollup -c --bundleConfigAsCjs\",\"build:clean\":\"yarn clean && yarn build\",\"build:post-tsc\":\"echo 'N/A'\",\"build:pre-tsc\":\"echo 'N/A'\",typecheck:\"tsc --noEmit\",clean:\"rimraf ./dist\",size:\"node bundle-size && size-limit\",lint:\"yarn lint:eslint && yarn lint:misc --check\",\"lint:changelog\":\"../../scripts/validate-changelog.sh @metamask/sdk\",\"lint:eslint\":\"eslint . --cache --ext js,ts\",\"lint:fix\":\"yarn lint:eslint --fix && yarn lint:misc --write\",\"lint:misc\":\"prettier '**/*.json' '**/*.md' '!CHANGELOG.md' --ignore-path ../../.gitignore\",prepack:\"../../scripts/prepack.sh\",\"publish:preview\":\"yarn npm publish --tag preview\",reset:\"yarn clean && rimraf ./node_modules/\",test:'jest --testPathIgnorePatterns \"/e2e/\"',\"test:coverage\":'jest --coverage --testPathIgnorePatterns \"/e2e/\"',\"test:e2e\":'jest --testPathPattern \"/e2e/\"',\"test:ci\":'jest --coverage --passWithNoTests --setupFilesAfterEnv ./jest-preload.js --testPathIgnorePatterns \"/e2e/\"',\"test:dev\":'jest -c ./jest.config.ts --detectOpenHandles  --testPathIgnorePatterns \"/e2e/\"',watch:\"rollup -c -w\",dev:'concurrently \"tsc --watch\" \"rollup -c -w --bundleConfigAsCjs\"',\"build:dev\":\"yarn build:types && NODE_ENV=dev rollup -c --bundleConfigAsCjs\"},dependencies:{\"@babel/runtime\":\"^7.26.0\",\"@metamask/onboarding\":\"^1.0.1\",\"@metamask/providers\":\"16.1.0\",\"@metamask/sdk-communication-layer\":\"workspace:*\",\"@metamask/sdk-install-modal-web\":\"workspace:*\",\"@paulmillr/qr\":\"^0.2.1\",bowser:\"^2.9.0\",\"cross-fetch\":\"^4.0.0\",debug:\"^4.3.4\",eciesjs:\"^0.4.11\",\"eth-rpc-errors\":\"^4.0.3\",eventemitter2:\"^6.4.9\",\"obj-multiplex\":\"^1.0.0\",pump:\"^3.0.0\",\"readable-stream\":\"^3.6.2\",\"socket.io-client\":\"^4.5.1\",tslib:\"^2.6.0\",util:\"^0.12.4\",uuid:\"^8.3.2\"},devDependencies:{\"@jest/globals\":\"^29.3.1\",\"@lavamoat/allow-scripts\":\"^2.3.1\",\"@metamask/auto-changelog\":\"3.1.0\",\"@metamask/eslint-config\":\"^6.0.0\",\"@metamask/eslint-config-nodejs\":\"^6.0.0\",\"@metamask/eslint-config-typescript\":\"^6.0.0\",\"@react-native-async-storage/async-storage\":\"^1.19.6\",\"@rollup/plugin-alias\":\"^5.1.1\",\"@rollup/plugin-commonjs\":\"^25.0.7\",\"@rollup/plugin-json\":\"^6.0.0\",\"@rollup/plugin-node-resolve\":\"^15.0.2\",\"@rollup/plugin-replace\":\"^6.0.1\",\"@rollup/plugin-terser\":\"^0.4.1\",\"@size-limit/preset-big-lib\":\"^11.0.2\",\"@types/dom-screen-wake-lock\":\"^1.0.2\",\"@types/node\":\"^20.1.3\",\"@types/pump\":\"^1.1.1\",\"@types/qrcode-terminal\":\"^0.12.0\",\"@types/uuid\":\"^10.0.0\",\"@typescript-eslint/eslint-plugin\":\"^4.26.0\",\"@typescript-eslint/parser\":\"^4.26.0\",\"browserify-zlib\":\"^0.2.0\",buffer:\"^6.0.3\",concurrently:\"^9.1.2\",\"crypto-browserify\":\"^3.12.0\",eslint:\"^7.30.0\",\"eslint-config-prettier\":\"^8.3.0\",\"eslint-plugin-import\":\"^2.23.4\",\"eslint-plugin-jest\":\"^24.4.0\",\"eslint-plugin-jsdoc\":\"^36.1.0\",\"eslint-plugin-node\":\"^11.1.0\",\"eslint-plugin-prettier\":\"^3.4.0\",\"https-browserify\":\"^1.0.0\",jest:\"^29.3.1\",\"jest-environment-jsdom\":\"^29.3.1\",prettier:\"^2.3.0\",process:\"^0.11.10\",rimraf:\"^4.4.0\",rollup:\"^4.26.0\",\"rollup-plugin-analyzer\":\"^4.0.0\",\"rollup-plugin-jscc\":\"^2.0.0\",\"rollup-plugin-natives\":\"^0.7.5\",\"rollup-plugin-node-builtins\":\"^2.1.2\",\"rollup-plugin-polyfill-node\":\"^0.13.0\",\"rollup-plugin-sizes\":\"^1.0.6\",\"rollup-plugin-typescript2\":\"^0.31.2\",\"rollup-plugin-visualizer\":\"^5.12.0\",\"size-limit\":\"^11.0.2\",\"stream-browserify\":\"^3.0.0\",\"stream-http\":\"^3.2.0\",\"ts-jest\":\"^29.0.3\",\"ts-node\":\"^10.9.1\",typescript:\"^4.3.2\",url:\"^0.11.0\",webpack:\"^5.0.0\"},publishConfig:{access:\"public\",registry:\"https://registry.npmjs.org/\"},lavamoat:{allowScripts:{\"eciesjs>secp256k1\":!1,\"socket.io-client>engine.io-client>ws>bufferutil\":!1,\"socket.io-client>engine.io-client>ws>utf-8-validate\":!1,\"@metamask/sdk-communication-layer>bufferutil\":!1,\"@metamask/sdk-communication-layer>eciesjs>secp256k1\":!1,\"@metamask/sdk-communication-layer>utf-8-validate\":!1}}};!function(e){e.INPAGE=\"metamask-inpage\",e.CONTENT_SCRIPT=\"metamask-contentscript\",e.PROVIDER=\"metamask-provider\"}(uc||(uc={}));const fc=\"direct\",pc=\"https://metamask.app.link/connect\",mc=\"metamask://connect\",gc={NAME:\"MetaMask\",RDNS:[\"io.metamask\",\"io.metamask.flask\"]},vc=/(?:^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$)|(?:^0{8}-0{4}-0{4}-0{4}-0{12}$)/u,yc={METAMASK_GETPROVIDERSTATE:\"metamask_getProviderState\",METAMASK_CONNECTSIGN:\"metamask_connectSign\",METAMASK_CONNECTWITH:\"metamask_connectWith\",METAMASK_OPEN:\"metamask_open\",METAMASK_BATCH:\"metamask_batch\",PERSONAL_SIGN:\"personal_sign\",WALLET_REQUESTPERMISSIONS:\"wallet_requestPermissions\",WALLET_REVOKEPERMISSIONS:\"wallet_revokePermissions\",WALLET_GETPERMISSIONS:\"wallet_getPermissions\",WALLET_WATCHASSET:\"wallet_watchAsset\",WALLET_ADDETHEREUMCHAIN:\"wallet_addEthereumChain\",WALLET_SWITCHETHETHEREUMCHAIN:\"wallet_switchEthereumChain\",ETH_REQUESTACCOUNTS:\"eth_requestAccounts\",ETH_ACCOUNTS:\"eth_accounts\",ETH_CHAINID:\"eth_chainId\",ETH_SENDTRANSACTION:\"eth_sendTransaction\",ETH_SIGNTYPEDDATA:\"eth_signTypedData\",ETH_SIGNTYPEDDATA_V3:\"eth_signTypedData_v3\",ETH_SIGNTYPEDDATA_V4:\"eth_signTypedData_v4\",ETH_SIGNTRANSACTION:\"eth_signTransaction\",ETH_SIGN:\"eth_sign\",PERSONAL_EC_RECOVER:\"personal_ecRecover\"},Ec={[yc.ETH_REQUESTACCOUNTS]:!0,[yc.ETH_SENDTRANSACTION]:!0,[yc.ETH_SIGNTRANSACTION]:!0,[yc.ETH_SIGN]:!0,[yc.PERSONAL_SIGN]:!0,[yc.ETH_ACCOUNTS]:!1,[yc.ETH_CHAINID]:!1,[yc.PERSONAL_SIGN]:!0,[yc.ETH_SIGNTYPEDDATA]:!0,[yc.ETH_SIGNTYPEDDATA_V3]:!0,[yc.ETH_SIGNTYPEDDATA_V4]:!0,[yc.WALLET_REQUESTPERMISSIONS]:!0,[yc.WALLET_GETPERMISSIONS]:!0,[yc.WALLET_WATCHASSET]:!0,[yc.WALLET_ADDETHEREUMCHAIN]:!0,[yc.WALLET_SWITCHETHETHEREUMCHAIN]:!0,[yc.METAMASK_CONNECTSIGN]:!0,[yc.METAMASK_CONNECTWITH]:!0,[yc.PERSONAL_EC_RECOVER]:!0,[yc.METAMASK_BATCH]:!0,[yc.METAMASK_OPEN]:!0},bc=Object.keys(Ec).map((e=>e.toLowerCase())),wc=[\"eth_signTypedData\",\"eth_signTypedData_v3\",\"eth_signTypedData_v4\",\"eth_sign\"].map((e=>e.toLowerCase())),Sc=\".sdk-comm\",_c=\"providerType\",Cc=\".MMSDK_cached_address\",xc=\".MMSDK_cached_chainId\",kc={CHAIN_CHANGED:\"chainChanged\",ACCOUNTS_CHANGED:\"accountsChanged\",DISCONNECT:\"disconnect\",CONNECT:\"connect\",CONNECTED:\"connected\"},Mc=1e6;var Ac;exports.PROVIDER_UPDATE_TYPE=void 0,(Ac=exports.PROVIDER_UPDATE_TYPE||(exports.PROVIDER_UPDATE_TYPE={})).TERMINATE=\"terminate\",Ac.EXTENSION=\"extension\",Ac.INITIALIZED=\"initialized\";const Tc=\"undefined\"!=typeof window&&window.localStorage;function Ic({instance:e,msg:t}){return l(this,void 0,void 0,(function*(){if(e._initialized||(Ra(\"[MetaMaskSDK: connectAndSign()] provider not ready -- wait for init()\"),yield e.init()),Ra(`[MetaMaskSDK: connectAndSign()] activeProvider=${e.activeProvider}`),!e.activeProvider)throw new Error(\"SDK state invalid -- undefined provider\");const n=/^0x([0-9A-Fa-f]{2})*$/u.test(t)?t:function(e){let t;if(\"undefined\"!=typeof Buffer)t=Buffer.from(e,\"utf8\").toString(\"hex\");else if(\"undefined\"!=typeof TextEncoder){const n=(new TextEncoder).encode(e);t=Array.from(n).map((e=>e.toString(16).padStart(2,\"0\"))).join(\"\")}else{if(\"object\"!=typeof global||!(\"Buffer\"in global))throw new Error(\"Unable to convert string to hex: No available method.\");t=global.Buffer.from(e,\"utf8\").toString(\"hex\")}return`0x${t}`}(t);return e.activeProvider.request({method:yc.METAMASK_CONNECTWITH,params:[{method:yc.PERSONAL_SIGN,params:[n]}]})}))}function Pc(e){var t,n;return l(this,void 0,void 0,(function*(){Ra(\"[MetaMaskSDK: connectWithExtensionProvider()] \",e),e.sdkProvider=e.activeProvider,e.activeProvider=window.extension,window.ethereum=window.extension;try{const e=yield null===(t=window.extension)||void 0===t?void 0:t.request({method:\"eth_requestAccounts\"});Ra(`[MetaMaskSDK: connectWithExtensionProvider()] accounts=${e}`)}catch(e){return void console.warn(\"[MetaMaskSDK: connectWithExtensionProvider()] can't request accounts error\",e)}localStorage.setItem(_c,\"extension\"),e.extensionActive=!0,e.emit(sc.ProviderUpdate,exports.PROVIDER_UPDATE_TYPE.EXTENSION),e.options.enableAnalytics&&(null===(n=e.analytics)||void 0===n||n.send({event:lr.SDK_USE_EXTENSION}))}))}function Rc(e){let t;if(\"undefined\"!=typeof Buffer)t=Buffer.from(e,\"utf8\").toString(\"base64\");else if(\"function\"==typeof btoa)t=btoa(encodeURIComponent(e).replace(/%([0-9A-F]{2})/gu,((e,t)=>String.fromCharCode(parseInt(t,16)))));else{if(\"object\"!=typeof global||!(\"Buffer\"in global))throw new Error(\"Unable to base64 encode: No available method.\");t=global.Buffer.from(e,\"utf8\").toString(\"base64\")}return t}function Oc(e,t,r,i){var o,s,a,c,d,u,h,f,p,m,g,v,y,E,b,w,S,_,C,x;return l(this,void 0,void 0,(function*(){const r=null===(o=e.state.remote)||void 0===o?void 0:o.isReady(),l=null===(s=e.state.remote)||void 0===s?void 0:s.isConnected(),k=null===(a=e.state.remote)||void 0===a?void 0:a.isPaused(),M=ac.getProvider(),A=null===(c=e.state.remote)||void 0===c?void 0:c.getChannelId(),T=null===(d=e.state.remote)||void 0===d?void 0:d.isAuthorized(),{deeplinkProtocol:I}=e.state,{method:P,data:R,triggeredInstaller:O}=(e=>{var t,r,i,o;let s;n.Buffer.isBuffer(e)?(s=e.toJSON(),s._isBuffer=!0):s=e;const a=null===(t=null==s?void 0:s.data)||void 0===t?void 0:t.method;let c=!1;return\"object\"==typeof(null===(r=null==s?void 0:s.data)||void 0===r?void 0:r.params)&&!0===(null===(o=null===(i=null==s?void 0:s.data)||void 0===i?void 0:i.params)||void 0===o?void 0:o.__triggeredInstaller)&&(c=!0,s.data.params=s.data.params.wrappedParams),{method:a,data:s,triggeredInstaller:c}})(t);if(Ra(`[RCPMS: write()] method='${P}' isRemoteReady=${r} channelId=${A} isSocketConnected=${l} isRemotePaused=${k} providerConnected=${M.isConnected()}`,t),!A)return P!==yc.METAMASK_GETPROVIDERSTATE&&Ra(`[RCPMS: write()] ${P} --\\x3e channelId is undefined`),i(new Error(\"disconnected\"));Ra(`[RCPMS: write()] remote.isPaused()=${null===(u=e.state.remote)||void 0===u?void 0:u.isPaused()} authorized=${T} ready=${r} socketConnected=${l}`,t);const N=null===(h=e.state.platformManager)||void 0===h?void 0:h.isSecure(),D=null!==(p=null===(f=e.state.platformManager)||void 0===f?void 0:f.isMobileWeb())&&void 0!==p&&p,L=null!==(g=null===(m=e.state.remote)||void 0===m?void 0:m.hasDeeplinkProtocol())&&void 0!==g&&g&&D&&T;try{if(!O){const t=JSON.stringify(null==R?void 0:R.data);if(t.length>Mc)return i(new Error(`Message size ${t.length} exceeds maximum allowed size of 1000000 bytes`));null===(v=e.state.remote)||void 0===v||v.sendMessage(null==R?void 0:R.data).then((()=>{Ra(`[RCPMS: _write()] ${P} sent successfully`)})).catch((e=>{Ra(\"[RCPMS: _write()] error sending message\",e)}))}if(!N)return Ra(`[RCPMS: _write()] unsecure platform for method ${P} -- return callback`),i();if(O)return Ra(\"[RCPMS: _write()] prevent deeplink -- installation completed separately.\"),i();const t=null!==(b=null===(E=null===(y=e.state.remote)||void 0===y?void 0:y.getKeyInfo())||void 0===E?void 0:E.ecies.public)&&void 0!==b?b:\"\";let n=encodeURI(`channelId=${A}&pubkey=${t}&comm=socket&t=d&v=2`);if(L){const t=JSON.stringify(null==R?void 0:R.data),r=null===(w=e.state.remote)||void 0===w?void 0:w.encrypt(t);if(!r)return Ra(\"[RCPMS: _write()] error encrypting message\"),i(new Error(\"RemoteCommunicationPostMessageStream - disconnected\"));n+=`&scheme=${I}&rpc=${Rc(r)}`}if(!(null===(S=e.state.platformManager)||void 0===S?void 0:S.isMetaMaskInstalled()))return Ra(\"[RCPMS: _write()] prevent deeplink until installation is completed.\"),i();Ec[P]?(Ra(`[RCPMS: _write()] redirect link for '${P}' socketConnected=${l} connect?${n}`),null===(_=e.state.platformManager)||void 0===_||_.openDeeplink(`${pc}?${n}`,`${mc}?${n}`,\"_self\")):(null===(C=e.state.remote)||void 0===C?void 0:C.isPaused())?(Ra(`[RCPMS: _write()] MM is PAUSED! deeplink with connect! targetMethod=${P}`),null===(x=e.state.platformManager)||void 0===x||x.openDeeplink(`${pc}?redirect=true&${n}`,`${mc}?redirect=true&${n}`,\"_self\")):Ra(`[RCPMS: _write()] method ${P} doesn't need redirect.`)}catch(e){return Ra(\"[RCPMS: _write()] error sending message\",e),i(new Error(\"RemoteCommunicationPostMessageStream - disconnected\"))}return i()}))}class Nc extends ca.Duplex{constructor({name:e,remote:t,deeplinkProtocol:n,platformManager:r}){super({objectMode:!0}),this.state={_name:null,remote:null,deeplinkProtocol:!1,platformManager:null},this.state._name=e,this.state.remote=t,this.state.deeplinkProtocol=n,this.state.platformManager=r,this._onMessage=this._onMessage.bind(this),this.state.remote.on(exports.EventType.MESSAGE,this._onMessage)}_write(e,t,n){return l(this,void 0,void 0,(function*(){return Oc(this,e,0,n)}))}_read(){}_onMessage(e){return function(e,t){try{if(Ra(\"[RCPMS: onMessage()] message\",t),!t||\"object\"!=typeof t)return;if(\"object\"!=typeof(null==t?void 0:t.data))return;if(!(null==t?void 0:t.name))return void Ra(\"[RCPMS: onMessage()] ignore message without name\",t);if((null==t?void 0:t.name)!==uc.PROVIDER)return void Ra(`[RCPMS: onMessage()] ignore message with wrong name message=${t}`);if(n.Buffer.isBuffer(t)){const r=n.Buffer.from(t);e.push(r)}else e.push(t)}catch(e){Ra(`[RCPMS: onMessage()] ignore message error err=${e}`)}}(this,e)}start(){}}let Dc=1;const Lc=e=>new Promise((t=>{setTimeout((()=>{t(!0)}),e)})),Bc=({checkInstallationOnAllCalls:t=!1,communicationLayerPreference:n,injectProvider:r,shouldShimWeb3:i,platformManager:o,installer:s,sdk:a,remoteConnection:c,debug:d})=>l(void 0,void 0,void 0,(function*(){var u,h;const f=(({name:e,remoteConnection:t})=>{if(!t||!(null==t?void 0:t.getConnector()))throw new Error(\"Missing remote connection parameter\");return new Nc({name:e,remote:null==t?void 0:t.getConnector(),deeplinkProtocol:null==t?void 0:t.state.deeplinkProtocol,platformManager:null==t?void 0:t.getPlatformManager()})})({name:uc.INPAGE,target:uc.CONTENT_SCRIPT,platformManager:o,communicationLayerPreference:n,remoteConnection:c}),p=o.getPlatformType(),m=a.options.dappMetadata,g=`Sdk/Javascript SdkVersion/${hc.version} Platform/${p} dApp/${null!==(u=m.url)&&void 0!==u?u:m.name} dAppTitle/${m.name}`;let v=null,y=null;const E=null===(h=a.options.storage)||void 0===h?void 0:h.storageManager;if(E){try{const e=yield E.getCachedAccounts();e.length>0&&(v=e[0])}catch(e){console.error(`[initializeMobileProvider] failed to get cached addresses: ${e}`)}try{const e=yield E.getCachedChainId();e&&(y=e)}catch(e){console.error(`[initializeMobileProvider] failed to parse cached chainId: ${e}`)}}Ra(`[initializeMobileProvider] cachedAccountAddress: ${v}, cachedChainId: ${y}`);const b=!(!r||p===exports.PlatformType.NonBrowser||p===exports.PlatformType.ReactNative),w=ac.init({shouldSetOnWindow:b,connectionStream:f,shouldShimWeb3:i,sdkInstance:a});let S=!1;const _=e=>{S=e},C=()=>S,x=(n,r,i,d)=>l(void 0,void 0,void 0,(function*(){var u,h,f,p,m,b,w,x,k;const M=ac.getProvider();if(S){M.emit(\"display_uri\",(null==c?void 0:c.state.qrcodeLink)||\"\"),null==c||c.showActiveModal();let e=C();for(;e;){const t=C(),n=null==c?void 0:c.isAuthorized();e=t&&!n,Ra(`[initializeMobileProvider: sendRequest()] waiting for initialization to complete - initializing: ${t} authorized: ${n}`),yield Lc(1e3)}return Ra(\"[initializeMobileProvider: sendRequest()] initial method completed -- prevent installation and call provider\"),i(...r)}const A=o.isMetaMaskInstalled(),T=null==c?void 0:c.isConnected();let I=null,P=null,R=null;if(I=null!==(u=M.getSelectedAddress())&&void 0!==u?u:v,R=M.getChainId()||y,I&&E&&I!==v&&E.persistAccounts([I]).catch((e=>{console.error(`[initializeMobileProvider] failed to persist account: ${e}`)})),R&&(y=R,E&&E.persistChainId(R).catch((e=>{console.error(`[initializeMobileProvider] failed to persist chainId: ${e}`)}))),Ra(\"[initializeMobileProvider: sendRequest()]\",{selectedAddress:I,chainId:R}),d&&Ra(`[initializeMobileProvider: sendRequest()] method=${n} ongoing=${S} selectedAddress=${I} isInstalled=${A} checkInstallationOnAllCalls=${t} socketConnected=${T}`),I&&n.toLowerCase()===yc.ETH_ACCOUNTS.toLowerCase())return[I];if(R&&n.toLowerCase()===yc.ETH_CHAINID.toLowerCase())return R;const O=[yc.ETH_REQUESTACCOUNTS,yc.WALLET_REQUESTPERMISSIONS,yc.METAMASK_CONNECTSIGN,yc.METAMASK_CONNECTWITH],N=!Ec[n],D=null===(h=a.options.readonlyRPCMap)||void 0===h?void 0:h[R];if(D&&N)try{const t=null===(f=null==r?void 0:r[0])||void 0===f?void 0:f.params,i=yield(({rpcEndpoint:t,method:n,sdkInfo:r,params:i})=>l(void 0,void 0,void 0,(function*(){const o=JSON.stringify({jsonrpc:\"2.0\",method:n,params:i,id:(Dc+=1,Dc)}),s={Accept:\"application/json\",\"Content-Type\":\"application/json\"};let a;t.includes(\"infura\")&&(s[\"Metamask-Sdk-Info\"]=r);try{a=yield e(t,{method:\"POST\",headers:s,body:o})}catch(e){throw e instanceof Error?new Error(`Failed to fetch from RPC: ${e.message}`):new Error(`Failed to fetch from RPC: ${e}`)}if(!a.ok)throw new Error(`Server responded with a status of ${a.status}`);return(yield a.json()).result})))({rpcEndpoint:D,sdkInfo:g,method:n,params:t||[]});return d&&Ra(`initializeProvider::ReadOnlyRPCResponse ${i}`),i}catch(e){console.warn(`[initializeMobileProvider: sendRequest()] method=${n} readOnlyRPCRequest failed:`,e)}if((!A||A&&!T)&&n!==yc.METAMASK_GETPROVIDERSTATE){const e=(null===(p=null==r?void 0:r[0])||void 0===p?void 0:p.params)||[];if(-1!==O.indexOf(n)||t){_(!0);const t=n===yc.METAMASK_CONNECTWITH,o=`${Date.now()}`;try{yield s.start({wait:!1,connectWith:t?{method:n,id:o,params:e}:void 0}),yield new Promise(((e,t)=>{(null==c?void 0:c.isAuthorized())&&(Ra(\"[initializeMobileProvider: sendRequest()] already authorized\"),e(!0)),null==c||c.getConnector().once(exports.EventType.AUTHORIZED,(()=>{e(!0)})),a.once(exports.EventType.PROVIDER_UPDATE,(e=>{Ra(`[initializeMobileProvider: sendRequest()] PROVIDER_UPDATE --- remote provider request interupted type=${e}`),e===exports.PROVIDER_UPDATE_TYPE.EXTENSION?t(exports.EventType.PROVIDER_UPDATE):t(new Error(\"Connection Terminated\"))}))}))}catch(t){if(exports.PROVIDER_UPDATE_TYPE.EXTENSION===t){if(Ra(`[initializeMobileProvider: sendRequest()] extension provider detect: re-create ${n} on the active provider`),n.toLowerCase()===yc.METAMASK_CONNECTSIGN.toLowerCase()){const t=yield null===(m=a.getProvider())||void 0===m?void 0:m.request({method:yc.ETH_REQUESTACCOUNTS,params:[]});if(!t.length)throw new Error(\"SDK state invalid -- undefined accounts\");const n=yield null===(b=a.getProvider())||void 0===b?void 0:b.request({method:yc.PERSONAL_SIGN,params:[e[0],t[0]]});return a.emit(sc.ConnectWithResponse,n),n}if(n.toLowerCase()===yc.METAMASK_CONNECTWITH.toLowerCase()){const[t]=e,n=yield(({method:e,sdk:t,params:n})=>l(void 0,void 0,void 0,(function*(){var r,i,o,s;if(!t.isExtensionActive())throw new Error(\"SDK state invalid -- extension is not active\");Ra(\"[MetaMaskProvider: extensionConnectWithOverwrite()] Overwriting request method\",e,n);const a=yield null===(r=t.getProvider())||void 0===r?void 0:r.request({method:yc.ETH_REQUESTACCOUNTS,params:[]});if(!a.length)throw new Error(\"SDK state invalid -- undefined accounts\");if((null==e?void 0:e.toLowerCase())===yc.PERSONAL_SIGN.toLowerCase()){const r={method:e,params:[n[0],a[0]]};return yield null===(i=t.getProvider())||void 0===i?void 0:i.request(r)}if((null==e?void 0:e.toLowerCase())===yc.ETH_SENDTRANSACTION.toLowerCase()){const r={method:e,params:[Object.assign(Object.assign({},n[0]),{from:a[0]})]};return yield null===(o=t.getProvider())||void 0===o?void 0:o.request(r)}return wc.includes(e.toLowerCase())?(console.warn(`MetaMaskSDK connectWith method=${e} -- not handled by the extension -- call separately`),a):yield null===(s=t.getProvider())||void 0===s?void 0:s.request({method:e,params:n})})))({method:t.method,sdk:a,params:t.params});return a.emit(sc.ConnectWithResponse,n),n}return Ra(`[initializeMobileProvider: sendRequest()] sending '${n}' on active provider`,e),yield null===(w=a.getProvider())||void 0===w?void 0:w.request({method:n,params:e})}if(t===exports.EventType.REJECTED)throw null==c||c.closeModal(),null===(x=a.getProvider())||void 0===x||x.handleDisconnect({terminate:!1}),Object.assign(new Error(\"User rejected connection\"),{code:4001});throw Ra(`[initializeMobileProvider: sendRequest()] failed to start installer: ${t}`),t}finally{_(!1)}if(n===yc.ETH_REQUESTACCOUNTS)return P=yield new Promise((e=>{const t=setInterval((()=>{const{accounts:n}=M.getState();n&&(clearInterval(t),e(n))}),100)})),Ra(`[initializeMobileProvider: sendRequest()] selectedAddress: ${I} --- SKIP rpc call`),P;if(n===yc.METAMASK_CONNECTWITH)try{let e=0;const t=5,n=({resolve:n,reject:r})=>{e+=1;const i=null==c?void 0:c.getConnector().getRPCMethodTracker(),s=null==i?void 0:i[o];return Ra(`TRACKER: update method ${o}`,s),(null==s?void 0:s.result)?(Ra(\"[initializeMobileProvider: sendRequest()] found result\",s.result),a.emit(sc.ConnectWithResponse,s.result),void n(s.result)):(null==s?void 0:s.error)?(Ra(\"[initializeMobileProvider: sendRequest()] found error\",s.error),void r(s.error)):e>=t?(Ra(\"[initializeMobileProvider: sendRequest()] max message count reached without result\"),void r(new Error(\"Max message count reached without result\"))):void Ra(\"[initializeMobileProvider: sendRequest()] not found yet, need to wait for next update\")};let r,i;const s=yield new Promise(((e,t)=>{const s=null==c?void 0:c.getConnector().getRPCMethodTracker();Ra(`TRACKER: method ${o}`,s),(null==s?void 0:s[o].result)?(Ra(\"[initializeMobileProvider: sendRequest()] found result\",null==s?void 0:s[o].result),e(null==s?void 0:s[o].result)):(null==s?void 0:s[o].error)&&(Ra(\"[initializeMobileProvider: sendRequest()] found error\",null==s?void 0:s[o].error),t(null==s?void 0:s[o].error)),i=()=>n({resolve:e,reject:t}),r=null==c?void 0:c.getConnector().on(exports.EventType.RPC_UPDATE,i)}));return i&&(null==r||r.off(exports.EventType.RPC_UPDATE,i)),Ra(\"TRACKER: result\",s),s}catch(e){throw Ra(\"[initializeMobileProvider: sendRequest()] error:\",e),e}r[0]&&\"object\"==typeof r[0]&&(r[0].params={__triggeredInstaller:!0,wrappedParams:r[0].params});return i(...r)}if(o.isSecure()&&Ec[n])return i(...r);if(a.isExtensionActive())return Ra(`[initializeMobileProvider: sendRequest()] EXTENSION active - redirect request '${n}' to it`,r,e),yield null===(k=a.getProvider())||void 0===k?void 0:k.request({method:n,params:e});throw Ra(`[initializeMobileProvider: sendRequest()] method=${n} --- skip --- not connected/installed`),new Error(\"MetaMask is not connected/installed, please call eth_requestAccounts to connect first.\")}try{const e=yield i(...r);if(Ra(`[initializeMobileProvider: sendRequest()] method=${n} rpcResponse`,e),n===yc.WALLET_REQUESTPERMISSIONS){const t=e.reduce(((e,t)=>{var n;if(\"eth_accounts\"===t.parentCapability){const r=null===(n=t.caveats.find((e=>\"restrictReturnedAccounts\"===e.type)))||void 0===n?void 0:n.value;r&&e.push(...r)}return e}),[]);Ra(\"[initializeMobileProvider: sendRequest()] accountsToPersist:\",t),t.length>0&&(M.handleAccountsChanged(t,!1),null==E||E.persistAccounts(t))}return e}catch(e){throw console.error(\"[initializeMobileProvider: sendRequest()] error:\",e),e}})),{request:k}=w;w.request=(...e)=>l(void 0,void 0,void 0,(function*(){return x(null==e?void 0:e[0].method,e,k,d)}));const{send:M}=w;return w.send=(...e)=>l(void 0,void 0,void 0,(function*(){return x(null==e?void 0:e[0],e,M,d)})),Ra(\"[initializeMobileProvider: sendRequest()] metamaskStream.start()\"),f.start(),w}));function Kc(e){var t,n,r,i;return l(this,void 0,void 0,(function*(){const{options:o}=e,s={communicationLayerPreference:null!==(t=o.communicationLayerPreference)&&void 0!==t?t:exports.CommunicationLayerPreference.SOCKET,platformManager:e.platformManager,sdk:e,checkInstallationOnAllCalls:o.checkInstallationOnAllCalls,injectProvider:null===(n=o.injectProvider)||void 0===n||n,shouldShimWeb3:null===(r=o.shouldShimWeb3)||void 0===r||r,extensionOnly:null===(i=o.extensionOnly)||void 0===i||i,installer:e.installer,remoteConnection:e.remoteConnection,debug:e.debug},a=yield Bc(s);e.activeProvider=a,function(e){var t,n,r,i;null===(n=null===(t=e.remoteConnection)||void 0===t?void 0:t.getConnector())||void 0===n||n.on(sc.ConnectionStatus,(t=>{e.emit(sc.ConnectionStatus,t)})),null===(i=null===(r=e.remoteConnection)||void 0===r?void 0:r.getConnector())||void 0===i||i.on(sc.ServiceStatus,(t=>{e.emit(sc.ServiceStatus,t)}))}(e)}))}const jc=\"sdk\";class $c{constructor({serverUrl:e,enabled:t,originatorInfo:n}){this.serverURL=nr,this.serverURL=e,this.originatorInfo=n,this.enabled=null==t||t}send({event:e,params:t}){if(!this.enabled)return;const n=Object.assign(Object.assign({id:jc,event:e,sdkVersion:hc.version},this.originatorInfo),{params:t});Ra(`[Analytics: send()] event: ${e}`,n),Xn(n,this.serverURL).catch((e=>{Ra(`[Analytics: send()] error: ${e}`)}))}}const Hc=()=>{if(\"undefined\"==typeof document)return;let e;const t=document.getElementsByTagName(\"link\");for(let n=0;n<t.length;n++)\"icon\"!==t[n].getAttribute(\"rel\")&&\"shortcut icon\"!==t[n].getAttribute(\"rel\")||(e=t[n].getAttribute(\"href\"));return e},Uc=163400;function Fc(e){var t,n,r;const{dappMetadata:i}=e,s=function({url:e,name:t}){var n;const r=e+t,i=Rc(r);if(!localStorage)return\"\";let s=null!==(n=localStorage.getItem(i))&&void 0!==n?n:\"\";if(!s){s=o.v4();try{localStorage.setItem(i,s)}catch(e){return\"\"}}return s}({url:null!==(t=null==i?void 0:i.url)&&void 0!==t?t:\"no_url\",name:null!==(n=null==i?void 0:i.name)&&void 0!==n?n:\"no_name\"}),a=null===(r=e.platformManager)||void 0===r?void 0:r.getPlatformType(),c=a===exports.PlatformType.DesktopWeb,d=a===exports.PlatformType.MetaMaskMobileWebview;let l=\"N/A\";return c?l=\"extension\":d&&(l=\"mobile\"),{id:s,from:l}}const qc=({provider:e,sdkInstance:t})=>{if(\"state\"in e)throw new Error(\"INVALID EXTENSION PROVIDER\");return new Proxy(e,{get:(n,r)=>\"request\"===r?function(e){var r,i;return l(this,void 0,void 0,(function*(){Ra(\"[wrapExtensionProvider()] Overwriting request method\",e);const{method:o,params:s}=e,a=bc.includes(o.toLowerCase()),{id:c,from:d}=Fc(t);if(a&&(null===(r=t.analytics)||void 0===r||r.send({event:lr.SDK_RPC_REQUEST,params:{method:o,from:d,id:c}})),o===yc.METAMASK_BATCH&&Array.isArray(s))return(({target:e,args:t,trackEvent:n,sdkInstance:r})=>l(void 0,void 0,void 0,(function*(){var i,o;if(\"metamask_batch\"!==t.method)throw new Error(\"Invalid usage\");const s=[],a=null!==(i=null==t?void 0:t.params)&&void 0!==i?i:[];for(const t of a){const n=yield null==e?void 0:e.request({method:t.method,params:t.params});s.push(n)}const{id:c,from:d}=Fc(r);return n&&(null===(o=r.analytics)||void 0===o||o.send({event:lr.SDK_RPC_REQUEST_DONE,params:{method:t.method,from:d,id:c}})),s})))({target:n,args:e,trackEvent:a,sdkInstance:t});if(o.toLowerCase()===yc.METAMASK_CONNECTSIGN.toLowerCase()&&Array.isArray(s))return(({target:e,params:t})=>l(void 0,void 0,void 0,(function*(){const n=yield e.request({method:yc.ETH_REQUESTACCOUNTS,params:[]});if(!n.length)throw new Error(\"SDK state invalid -- undefined accounts\");return yield e.request({method:yc.PERSONAL_SIGN,params:[t[0],n[0]]})})))({target:n,params:s});if(o.toLowerCase()===yc.METAMASK_CONNECTWITH.toLowerCase()&&Array.isArray(s))return(({target:e,params:t})=>l(void 0,void 0,void 0,(function*(){const[n]=t,r=n.method,i=n.params,o=yield e.request({method:yc.ETH_REQUESTACCOUNTS,params:[]});if(!o.length)throw new Error(\"SDK state invalid -- undefined accounts\");return(null==r?void 0:r.toLowerCase())===yc.PERSONAL_SIGN.toLowerCase()?yield e.request({method:r,params:[i[0],o[0]]}):(null==r?void 0:r.toLowerCase())===yc.ETH_SENDTRANSACTION.toLowerCase()?yield e.request({method:r,params:[Object.assign(Object.assign({},i[0]),{from:o[0]})]}):wc.includes(r.toLowerCase())?(console.warn(`MetaMaskSDK connectWith method=${r} -- not handled by the extension -- call separately`),o):yield e.request({method:r,params:i})})))({target:n,params:s});let u;try{return u=yield n.request(e),u}finally{a&&(null===(i=t.analytics)||void 0===i||i.send({event:lr.SDK_RPC_REQUEST_DONE,params:{method:o,from:d,id:c}}))}}))}:\"getChainId\"===r?function(){return e.chainId}:\"getNetworkVersion\"===r?function(){return e.networkVersion}:\"getSelectedAddress\"===r?function(){return e.selectedAddress}:\"isConnected\"===r?function(){return e._state.isConnected}:n[r]})};var zc;function Wc({mustBeMetaMask:e,sdkInstance:t}){return l(this,void 0,void 0,(function*(){if(\"undefined\"==typeof window)throw new Error(\"window not available\");try{const e=yield new Promise(((e,t)=>{const n=setTimeout((()=>{t(new Error(\"eip6963RequestProvider timed out\"))}),500);window.addEventListener(zc.Announce,(t=>{const r=t,{detail:{info:i,provider:o}={}}=r,{name:s,rdns:a,uuid:c}=null!=i?i:{};vc.test(c)&&s.startsWith(gc.NAME)&&gc.RDNS.includes(a)&&(clearTimeout(n),e(o))})),window.dispatchEvent(new Event(zc.Request))}));return qc({provider:e,sdkInstance:t})}catch(n){if(!e&&window.ethereum)return qc({provider:window.ethereum,sdkInstance:t});throw new Error(\"Provider not found\")}}))}!function(e){e.Announce=\"eip6963:announceProvider\",e.Request=\"eip6963:requestProvider\"}(zc||(zc={}));const Vc=e=>l(void 0,void 0,void 0,(function*(){const{options:t}=e,{infuraAPIKey:n}=t;if(!n)return;const r={\"0x1\":`https://mainnet.infura.io/v3/${n}`,\"0x5\":`https://goerli.infura.io/v3/${n}`,\"0xaa36a7\":`https://sepolia.infura.io/v3/${n}`,\"0xe708\":`https://linea-mainnet.infura.io/v3/${n}`,\"0xe704\":`https://linea-goerli.infura.io/v3/${n}`,\"0x89\":`https://polygon-mainnet.infura.io/v3/${n}`,\"0x13881\":`https://polygon-mumbai.infura.io/v3/${n}`,\"0x45\":`https://optimism-mainnet.infura.io/v3/${n}`,\"0x1a4\":`https://optimism-goerli.infura.io/v3/${n}`,\"0xa4b1\":`https://arbitrum-mainnet.infura.io/v3/${n}`,\"0x66eed\":`https://arbitrum-goerli.infura.io/v3/${n}`,\"0x2a15c308d\":`https://palm-mainnet.infura.io/v3/${n}`,\"0x2a15c3083\":`https://palm-testnet.infura.io/v3/${n}`,\"0xa86a\":`https://avalanche-mainnet.infura.io/v3/${n}`,\"0xa869\":`https://avalanche-fuji.infura.io/v3/${n}`,\"0x4e454152\":`https://aurora-mainnet.infura.io/v3/${n}`,\"0x4e454153\":`https://aurora-testnet.infura.io/v3/${n}`,\"0x534e5f4d41494e\":`https://starknet-mainnet.infura.io/v3/${n}`,\"0x534e5f474f45524c49\":`https://starknet-goerli.infura.io/v3/${n}`,\"0x534e5f474f45524c4932\":`https://starknet-goerli2.infura.io/v3/${n}`,\"0xa4ec\":`https://celo-mainnet.infura.io/v3/${n}`,\"0xaef3\":`https://celo-alfajores.infura.io/v3/${n}`};e.options.readonlyRPCMap?e.options.readonlyRPCMap=Object.assign(Object.assign({},e.options.readonlyRPCMap),r):e.options.readonlyRPCMap=r}));const Gc=e=>l(void 0,void 0,void 0,(function*(){const{options:t}=e,{readonlyRPCMap:n}=t;if(n)try{Ra(\"[MetaMaskSDK: setupReadOnlyRPCProviders()] Setting up Readonly RPC Providers\",n),e.setReadOnlyRPCCalls(!0)}catch(e){throw new Error(\"Invalid Infura Settings\")}}));function Yc(e,t,n,r){return new(n||(n=Promise))((function(t,i){function o(e){try{a(r.next(e))}catch(e){i(e)}}function s(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var r;e.done?t(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(o,s)}a((r=r.apply(e,[])).next())}))}function Zc(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}var Jc=\"INSTALLED\",Qc=\"NOT_INSTALLED\",Xc=\"REGISTERED\",ed=\"REGISTERING\",td=\"RELOADING\",nd={CHROME:\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\",FIREFOX:\"https://addons.mozilla.org/firefox/addon/ether-metamask/\",DEFAULT:\"https://metamask.io\"},rd=\"REGISTRATION_IN_PROGRESS\",id=\"FORWARDER_ID\",od=function(){function e(t){var n=void 0===t?{}:t,r=n.forwarderOrigin,i=void 0===r?\"https://fwd.metamask.io\":r,o=n.forwarderMode,s=void 0===o?e.FORWARDER_MODE.INJECT:o;this.forwarderOrigin=i,this.forwarderMode=s,this.state=e.isMetaMaskInstalled()?Jc:Qc;var a=e._detectBrowser();this.downloadUrl=a?nd[a]:nd.DEFAULT,this._onMessage=this._onMessage.bind(this),this._onMessageFromForwarder=this._onMessageFromForwarder.bind(this),this._openForwarder=this._openForwarder.bind(this),this._openDownloadPage=this._openDownloadPage.bind(this),this.startOnboarding=this.startOnboarding.bind(this),this.stopOnboarding=this.stopOnboarding.bind(this),window.addEventListener(\"message\",this._onMessage),s===e.FORWARDER_MODE.INJECT&&\"true\"===sessionStorage.getItem(rd)&&e._injectForwarder(this.forwarderOrigin)}return e.prototype._onMessage=function(e){if(e.origin===this.forwarderOrigin)return\"metamask:reload\"===e.data.type?this._onMessageFromForwarder(e):void console.debug(\"Unknown message from '\"+e.origin+\"' with data \"+JSON.stringify(e.data))},e.prototype._onMessageUnknownStateError=function(e){throw new Error(\"Unknown state: '\"+e+\"'\")},e.prototype._onMessageFromForwarder=function(t){return Yc(this,0,void 0,(function(){return Zc(this,(function(n){switch(n.label){case 0:switch(this.state){case td:return[3,1];case Qc:return[3,2];case Jc:return[3,3];case ed:return[3,5];case Xc:return[3,6]}return[3,7];case 1:return console.debug(\"Ignoring message while reloading\"),[3,8];case 2:return console.debug(\"Reloading now to register with MetaMask\"),this.state=td,location.reload(),[3,8];case 3:return console.debug(\"Registering with MetaMask\"),this.state=ed,[4,e._register()];case 4:return n.sent(),this.state=Xc,t.source.postMessage({type:\"metamask:registrationCompleted\"},t.origin),this.stopOnboarding(),[3,8];case 5:return console.debug(\"Already registering - ignoring reload message\"),[3,8];case 6:return console.debug(\"Already registered - ignoring reload message\"),[3,8];case 7:this._onMessageUnknownStateError(this.state),n.label=8;case 8:return[2]}}))}))},e.prototype.startOnboarding=function(){sessionStorage.setItem(rd,\"true\"),this._openDownloadPage(),this._openForwarder()},e.prototype.stopOnboarding=function(){\"true\"===sessionStorage.getItem(rd)&&(this.forwarderMode===e.FORWARDER_MODE.INJECT&&(console.debug(\"Removing forwarder\"),e._removeForwarder()),sessionStorage.setItem(rd,\"false\"))},e.prototype._openForwarder=function(){this.forwarderMode===e.FORWARDER_MODE.OPEN_TAB?window.open(this.forwarderOrigin,\"_blank\"):e._injectForwarder(this.forwarderOrigin)},e.prototype._openDownloadPage=function(){window.open(this.downloadUrl,\"_blank\")},e.isMetaMaskInstalled=function(){return Boolean(window.ethereum&&window.ethereum.isMetaMask)},e._register=function(){return window.ethereum.request({method:\"wallet_registerOnboarding\"})},e._injectForwarder=function(e){var t=document.body,n=document.createElement(\"iframe\");n.setAttribute(\"height\",\"0\"),n.setAttribute(\"width\",\"0\"),n.setAttribute(\"style\",\"display: none;\"),n.setAttribute(\"src\",e),n.setAttribute(\"id\",id),t.insertBefore(n,t.children[0])},e._removeForwarder=function(){var e;null===(e=document.getElementById(id))||void 0===e||e.remove()},e._detectBrowser=function(){var e=oc.parse(window.navigator.userAgent);return\"Firefox\"===e.browser.name?\"FIREFOX\":[\"Chrome\",\"Chromium\"].includes(e.browser.name||\"\")?\"CHROME\":null},e.FORWARDER_MODE={INJECT:\"INJECT\",OPEN_TAB:\"OPEN_TAB\"},e}();function sd(e,{wait:t=!1}){return l(this,void 0,void 0,(function*(){return Ra(`[MetamaskInstaller: startInstaller()] wait=${t}`),t&&(yield Lc(1e3)),yield e.checkInstallation()}))}class ad{constructor({remote:e,preferDesktop:t,platformManager:n,debug:r=!1}){this.state={isInstalling:!1,hasInstalled:!1,resendRequest:null,preferDesktop:!1,platformManager:null,remote:null,debug:!1,connectWith:void 0},this.state.remote=e,this.state.preferDesktop=t,this.state.platformManager=n,this.state.debug=r}startDesktopOnboarding(){return function(){return l(this,void 0,void 0,(function*(){Ra(\"[MetamaskInstaller: startDesktopOnboarding() starting desktop onboarding\"),window.ethereum&&(window.ethereum=void 0),(new od).startOnboarding()}))}()}redirectToProperInstall(){return l(this,void 0,void 0,(function*(){return function(e){var t,n;return l(this,void 0,void 0,(function*(){const{state:r}=e,i=null===(t=r.platformManager)||void 0===t?void 0:t.getPlatformType();if(Ra(`[MetamaskInstaller: redirectToProperInstall()] platform=${i}`),i===exports.PlatformType.MetaMaskMobileWebview)return!1;r.isInstalling=!0;try{yield null===(n=r.remote)||void 0===n?void 0:n.startConnection({connectWith:r.connectWith}),r.isInstalling=!1,r.hasInstalled=!0}catch(e){throw r.isInstalling=!1,e}return!0}))}(this)}))}checkInstallation(){return l(this,void 0,void 0,(function*(){return function(e){var t;return l(this,void 0,void 0,(function*(){const{state:n}=e,r=null===(t=n.platformManager)||void 0===t?void 0:t.isMetaMaskInstalled();return Ra(`[MetamaskInstaller: checkInstallation()] isInstalled=${r}`),!!r||(yield e.redirectToProperInstall())}))}(this)}))}start({wait:e=!1,connectWith:t}){return l(this,void 0,void 0,(function*(){this.state.connectWith=t,Ra(`[MetaMaskInstaller: start()] wait=${e}`,t),yield sd(this,{wait:e})}))}}function cd(e,t){return e.toString(2).padStart(t,\"0\")}function dd(e,t){const n=e%t;return n>=0?n:t+n}function ld(e,t){return new Array(e).fill(t)}function ud(...e){let t=0;for(const n of e)t=Math.max(t,n.length);const n=[];for(let r=0;r<t;r++)for(const t of e)r>=t.length||n.push(t[r]);return new Uint8Array(n)}function hd(e,t,n){if(n<0||n+t.length>e.length)return!1;for(let r=0;r<t.length;r++)if(t[r]!==e[n+r])return!1;return!0}function fd(e){return{has:t=>e.includes(t),decode:t=>{if(!Array.isArray(t)||t.length&&\"string\"!=typeof t[0])throw new Error(\"alphabet.decode input should be array of strings\");return t.map((t=>{if(\"string\"!=typeof t)throw new Error(`alphabet.decode: not string element=${t}`);const n=e.indexOf(t);if(-1===n)throw new Error(`Unknown letter: \"${t}\". Allowed: ${e}`);return n}))},encode:t=>{if(!Array.isArray(t)||t.length&&\"number\"!=typeof t[0])throw new Error(\"alphabet.encode input should be an array of numbers\");return t.map((t=>{if(function(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}(t),t<0||t>=e.length)throw new Error(`Digit index outside alphabet: ${t} (alphabet: ${e.length})`);return e[t]}))}}}class pd{static size(e,t){if(\"number\"==typeof e&&(e={height:e,width:e}),!Number.isSafeInteger(e.height)&&e.height!==1/0)throw new Error(`Bitmap: wrong height=${e.height} (${typeof e.height})`);if(!Number.isSafeInteger(e.width)&&e.width!==1/0)throw new Error(`Bitmap: wrong width=${e.width} (${typeof e.width})`);return void 0!==t&&(e={width:Math.min(e.width,t.width),height:Math.min(e.height,t.height)}),e}static fromString(e){const t=(e=e.replace(/^\\n+/g,\"\").replace(/\\n+$/g,\"\")).split(\"\\n\"),n=t.length,r=new Array(n);let i;for(const e of t){const t=e.split(\"\").map((e=>{if(\"X\"===e)return!0;if(\" \"===e)return!1;if(\"?\"!==e)throw new Error(`Bitmap.fromString: unknown symbol=${e}`)}));if(i&&t.length!==i)throw new Error(`Bitmap.fromString different row sizes: width=${i} cur=${t.length}`);i=t.length,r.push(t)}return i||(i=0),new pd({height:n,width:i},r)}constructor(e,t){const{height:n,width:r}=pd.size(e);this.data=t||Array.from({length:n},(()=>ld(r,void 0))),this.height=n,this.width=r}point(e){return this.data[e.y][e.x]}isInside(e){return 0<=e.x&&e.x<this.width&&0<=e.y&&e.y<this.height}size(e){if(!e)return{height:this.height,width:this.width};const{x:t,y:n}=this.xy(e);return{height:this.height-n,width:this.width-t}}xy(e){if(\"number\"==typeof e&&(e={x:e,y:e}),!Number.isSafeInteger(e.x))throw new Error(`Bitmap: wrong x=${e.x}`);if(!Number.isSafeInteger(e.y))throw new Error(`Bitmap: wrong y=${e.y}`);return e.x=dd(e.x,this.width),e.y=dd(e.y,this.height),e}rect(e,t,n){const{x:r,y:i}=this.xy(e),{height:o,width:s}=pd.size(t,this.size({x:r,y:i}));for(let e=0;e<o;e++)for(let t=0;t<s;t++)this.data[i+e][r+t]=\"function\"==typeof n?n({x:t,y:e},this.data[i+e][r+t]):n;return this}rectRead(e,t,n){return this.rect(e,t,((e,t)=>(n(e,t),t)))}hLine(e,t,n){return this.rect(e,{width:t,height:1},n)}vLine(e,t,n){return this.rect(e,{width:1,height:t},n)}border(e=2,t){const n=this.height+2*e,r=this.width+2*e,i=ld(e,t),o=Array.from({length:e},(()=>ld(r,t)));return new pd({height:n,width:r},[...o,...this.data.map((e=>[...i,...e,...i])),...o])}embed(e,t){return this.rect(e,t.size(),(({x:e,y:n})=>t.data[n][e]))}rectSlice(e,t=this.size()){const n=new pd(pd.size(t,this.size(this.xy(e))));return this.rect(e,t,(({x:e,y:t},r)=>n.data[t][e]=r)),n}inverse(){const{height:e,width:t}=this;return new pd({height:t,width:e}).rect({x:0,y:0},1/0,(({x:e,y:t})=>this.data[e][t]))}scale(e){if(!Number.isSafeInteger(e)||e>1024)throw new Error(`Wrong scale factor: ${e}`);const{height:t,width:n}=this;return new pd({height:e*t,width:e*n}).rect({x:0,y:0},1/0,(({x:t,y:n})=>this.data[Math.floor(n/e)][Math.floor(t/e)]))}clone(){return new pd(this.size()).rect({x:0,y:0},this.size(),(({x:e,y:t})=>this.data[t][e]))}assertDrawn(){this.rectRead(0,1/0,((e,t)=>{if(\"boolean\"!=typeof t)throw new Error(\"Invalid color type=\"+typeof t)}))}toString(){return this.data.map((e=>e.map((e=>void 0===e?\"?\":e?\"X\":\" \")).join(\"\"))).join(\"\\n\")}toASCII(){const{height:e,width:t,data:n}=this;let r=\"\";for(let i=0;i<e;i+=2){for(let o=0;o<t;o++){const t=n[i][o],s=i+1>=e||n[i+1][o];t||s?!t&&s?r+=\"▀\":t&&!s?r+=\"▄\":t&&s&&(r+=\" \"):r+=\"█\"}r+=\"\\n\"}return r}toTerm(){const e=\"\u001b[0m\",t=`\u001b[1;47m  ${e}`,n=`\u001b[40m  ${e}`;return this.data.map((e=>e.map((e=>e?n:t)).join(\"\"))).join(\"\\n\")}toSVG(){let e=`<svg xmlns:svg=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${this.width} ${this.height}\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">`;return this.rectRead(0,1/0,(({x:t,y:n},r)=>{r&&(e+=`<rect x=\"${t}\" y=\"${n}\" width=\"1\" height=\"1\" />`)})),e+=\"</svg>\",e}toGIF(){const e=e=>[255&e,e>>>8&255],t=[...e(this.width),...e(this.height)],n=[];this.rectRead(0,1/0,((e,t)=>n.push(+(!0===t))));const r=126,i=[71,73,70,56,55,97,...t,246,0,0,255,255,255,...ld(381,0),44,0,0,0,0,...t,0,7],o=Math.floor(n.length/r);for(let e=0;e<o;e++)i.push(127,128,...n.slice(r*e,r*(e+1)).map((e=>+e)));return i.push(n.length%r+1,128,...n.slice(o*r).map((e=>+e))),i.push(1,129,0,59),new Uint8Array(i)}toImage(e=!1){const{height:t,width:n}=this.size(),r=new Uint8Array(t*n*(e?3:4));let i=0;for(let o=0;o<t;o++)for(let t=0;t<n;t++){const n=this.data[o][t]?0:255;r[i++]=n,r[i++]=n,r[i++]=n,e||(r[i++]=255)}return{height:t,width:n,data:r}}}const md=[\"low\",\"medium\",\"quartile\",\"high\"],gd=[\"numeric\",\"alphanumeric\",\"byte\",\"kanji\",\"eci\"],vd=[26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706],yd={low:[7,10,15,20,26,18,20,24,30,18,20,24,26,30,22,24,28,30,28,28,28,28,30,30,26,28,30,30,30,30,30,30,30,30,30,30,30,30,30,30],medium:[10,16,26,18,24,16,18,22,22,26,30,22,22,24,24,28,28,26,26,26,26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28],quartile:[13,22,18,26,18,24,18,22,20,24,28,26,24,20,30,24,28,28,26,30,28,30,30,30,30,28,30,30,30,30,30,30,30,30,30,30,30,30,30,30],high:[17,28,22,16,22,28,26,26,24,28,24,28,22,24,24,30,28,28,26,28,30,24,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30]},Ed={low:[1,1,1,1,1,2,2,2,2,4,4,4,4,4,6,6,6,6,7,8,8,9,9,10,12,12,12,13,14,15,16,17,18,19,19,20,21,22,24,25],medium:[1,1,1,2,2,4,4,4,5,5,5,8,9,9,10,10,11,13,14,16,17,17,18,20,21,23,25,26,28,29,31,33,35,37,38,40,43,45,47,49],quartile:[1,1,2,2,4,4,6,6,8,8,8,10,12,16,12,17,16,18,21,20,23,23,25,27,29,34,34,35,38,40,43,45,48,51,53,56,59,62,65,68],high:[1,1,2,4,4,4,5,6,8,8,11,11,16,16,18,16,19,21,25,25,25,34,30,32,35,37,40,42,45,48,51,54,57,60,63,66,70,74,77,81]},bd={size:{encode:e=>21+4*(e-1),decode:e=>(e-17)/4},sizeType:e=>Math.floor((e+7)/17),alignmentPatterns(e){if(1===e)return[];const t=bd.size.encode(e)-6-1,n=t-6,r=Math.ceil(n/28);let i=Math.floor(n/r);i%2?i+=1:n%r*2>=r&&(i+=2);const o=[6];for(let e=1;e<r;e++)o.push(t-(r-e)*i);return o.push(t),o},ECCode:{low:1,medium:0,quartile:3,high:2},formatMask:21522,formatBits(e,t){const n=bd.ECCode[e]<<3|t;let r=n;for(let e=0;e<10;e++)r=r<<1^1335*(r>>9);return(n<<10|r)^bd.formatMask},versionBits(e){let t=e;for(let e=0;e<12;e++)t=t<<1^7973*(t>>11);return e<<12|t},alphabet:{numeric:fd(\"0123456789\"),alphanumerc:fd(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\")},lengthBits:(e,t)=>({numeric:[10,12,14],alphanumeric:[9,11,13],byte:[8,16,16],kanji:[8,10,12],eci:[0,0,0]}[t][bd.sizeType(e)]),modeBits:{numeric:\"0001\",alphanumeric:\"0010\",byte:\"0100\",kanji:\"1000\",eci:\"0111\"},capacity(e,t){const n=vd[e-1],r=yd[t][e-1],i=Ed[t][e-1],o=Math.floor(n/i)-r,s=i-n%i;return{words:r,numBlocks:i,shortBlocks:s,blockLen:o,capacity:8*(n-r*i),total:(r+o)*i+i-s}}},wd=[(e,t)=>(e+t)%2==0,(e,t)=>t%2==0,(e,t)=>e%3==0,(e,t)=>(e+t)%3==0,(e,t)=>(Math.floor(t/2)+Math.floor(e/3))%2==0,(e,t)=>e*t%2+e*t%3==0,(e,t)=>(e*t%2+e*t%3)%2==0,(e,t)=>((e+t)%2+e*t%3)%2==0],Sd={tables:(e=>{const t=ld(256,0),n=ld(256,0);for(let e=0,r=1;e<256;e++)t[e]=r,n[r]=e,r<<=1,256&r&&(r^=285);return{exp:t,log:n}})(),exp:e=>Sd.tables.exp[e],log(e){if(0===e)throw new Error(`GF.log: wrong arg=${e}`);return Sd.tables.log[e]%255},mul:(e,t)=>0===e||0===t?0:Sd.tables.exp[(Sd.tables.log[e]+Sd.tables.log[t])%255],add:(e,t)=>e^t,pow:(e,t)=>Sd.tables.exp[Sd.tables.log[e]*t%255],inv(e){if(0===e)throw new Error(`GF.inverse: wrong arg=${e}`);return Sd.tables.exp[255-Sd.tables.log[e]]},polynomial(e){if(0==e.length)throw new Error(\"GF.polymomial: wrong length\");if(0!==e[0])return e;let t=0;for(;t<e.length-1&&0==e[t];t++);return e.slice(t)},monomial(e,t){if(e<0)throw new Error(`GF.monomial: wrong degree=${e}`);if(0==t)return[0];let n=ld(e+1,0);return n[0]=t,Sd.polynomial(n)},degree:e=>e.length-1,coefficient:(e,t)=>e[Sd.degree(e)-t],mulPoly(e,t){if(0===e[0]||0===t[0])return[0];const n=ld(e.length+t.length-1,0);for(let r=0;r<e.length;r++)for(let i=0;i<t.length;i++)n[r+i]=Sd.add(n[r+i],Sd.mul(e[r],t[i]));return Sd.polynomial(n)},mulPolyScalar(e,t){if(0==t)return[0];if(1==t)return e;const n=ld(e.length,0);for(let r=0;r<e.length;r++)n[r]=Sd.mul(e[r],t);return Sd.polynomial(n)},mulPolyMonomial(e,t,n){if(t<0)throw new Error(\"GF.mulPolyMonomial: wrong degree\");if(0==n)return[0];const r=ld(e.length+t,0);for(let t=0;t<e.length;t++)r[t]=Sd.mul(e[t],n);return Sd.polynomial(r)},addPoly(e,t){if(0===e[0])return t;if(0===t[0])return e;let n=e,r=t;n.length>r.length&&([n,r]=[r,n]);let i=ld(r.length,0),o=r.length-n.length,s=r.slice(0,o);for(let e=0;e<s.length;e++)i[e]=s[e];for(let e=o;e<r.length;e++)i[e]=Sd.add(n[e-o],r[e]);return Sd.polynomial(i)},remainderPoly(e,t){const n=Array.from(e);for(let r=0;r<e.length-t.length+1;r++){const e=n[r];if(0!==e)for(let i=1;i<t.length;i++)0!==t[i]&&(n[r+i]=Sd.add(n[r+i],Sd.mul(t[i],e)))}return n.slice(e.length-t.length+1,n.length)},divisorPoly(e){let t=[1];for(let n=0;n<e;n++)t=Sd.mulPoly(t,[1,Sd.pow(2,n)]);return t},evalPoly(e,t){if(0==t)return Sd.coefficient(e,0);let n=e[0];for(let r=1;r<e.length;r++)n=Sd.add(Sd.mul(t,n),e[r]);return n},euclidian(e,t,n){Sd.degree(e)<Sd.degree(t)&&([e,t]=[t,e]);let r=e,i=t,o=[0],s=[1];for(;2*Sd.degree(i)>=n;){let e=r,t=o;if(r=i,o=s,0===r[0])throw new Error(\"rLast[0] === 0\");i=e;let n=[0];const a=Sd.inv(r[0]);for(;Sd.degree(i)>=Sd.degree(r)&&0!==i[0];){const e=Sd.degree(i)-Sd.degree(r),t=Sd.mul(i[0],a);n=Sd.addPoly(n,Sd.monomial(e,t)),i=Sd.addPoly(i,Sd.mulPolyMonomial(r,e,t))}if(n=Sd.mulPoly(n,o),s=Sd.addPoly(n,t),Sd.degree(i)>=Sd.degree(r))throw new Error(`Division failed r: ${i}, rLast: ${r}`)}const a=Sd.coefficient(s,0);if(0==a)throw new Error(\"sigmaTilde(0) was zero\");const c=Sd.inv(a);return[Sd.mulPolyScalar(s,c),Sd.mulPolyScalar(i,c)]}};function _d(e,t){const{words:n,shortBlocks:r,numBlocks:i,blockLen:o,total:s}=bd.capacity(e,t),a=(c=n,{encode(e){const t=Sd.divisorPoly(c),n=Array.from(e);return n.push(...t.slice(0,-1).fill(0)),Uint8Array.from(Sd.remainderPoly(n,t))},decode(e){const t=e.slice(),n=Sd.polynomial(Array.from(e));let r=ld(c,0),i=!1;for(let e=0;e<c;e++){const t=Sd.evalPoly(n,Sd.exp(e));r[r.length-1-e]=t,0!==t&&(i=!0)}if(!i)return t;r=Sd.polynomial(r);const o=Sd.monomial(c,1),[s,a]=Sd.euclidian(o,r,c),d=ld(Sd.degree(s),0);let l=0;for(let e=1;e<256&&l<d.length;e++)0===Sd.evalPoly(s,e)&&(d[l++]=Sd.inv(e));if(l!==d.length)throw new Error(\"RS.decode: wrong errors number\");for(let e=0;e<d.length;e++){const n=t.length-1-Sd.log(d[e]);if(n<0)throw new Error(\"RS.decode: wrong error location\");const r=Sd.inv(d[e]);let i=1;for(let t=0;t<d.length;t++)e!==t&&(i=Sd.mul(i,Sd.add(1,Sd.mul(d[t],r))));t[n]=Sd.add(t[n],Sd.mul(Sd.evalPoly(a,r),Sd.inv(i)))}return t}});var c;return{encode(e){const t=[],n=[];for(let s=0;s<i;s++){const i=o+(s<r?0:1);t.push(e.subarray(0,i)),n.push(a.encode(e.subarray(0,i))),e=e.subarray(i)}const s=ud(...t),c=ud(...n),d=new Uint8Array(s.length+c.length);return d.set(s),d.set(c,s.length),d},decode(e){if(e.length!==s)throw new Error(`interleave.decode: len(data)=${e.length}, total=${s}`);const t=[];for(let e=0;e<i;e++){const i=e<r;t.push(new Uint8Array(n+o+(i?0:1)))}let c=0;for(let n=0;n<o;n++)for(let r=0;r<i;r++)t[r][n]=e[c++];for(let n=r;n<i;n++)t[n][o]=e[c++];for(let s=o;s<o+n;s++)for(let n=0;n<i;n++){const i=n<r;t[n][s+(i?0:1)]=e[c++]}const d=[];for(const e of t)d.push(...Array.from(a.decode(e)).slice(0,-n));return Uint8Array.from(d)}}}function Cd(e,t,n,r){let i=\"\",o=n.length;if(\"numeric\"===r){const e=bd.alphabet.numeric.decode(n.split(\"\")),t=e.length;for(let n=0;n<t-2;n+=3)i+=cd(100*e[n]+10*e[n+1]+e[n+2],10);t%3==1?i+=cd(e[t-1],4):t%3==2&&(i+=cd(10*e[t-2]+e[t-1],7))}else if(\"alphanumeric\"===r){const e=bd.alphabet.alphanumerc.decode(n.split(\"\")),t=e.length;for(let n=0;n<t-1;n+=2)i+=cd(45*e[n]+e[n+1],11);t%2==1&&(i+=cd(e[t-1],6))}else{if(\"byte\"!==r)throw new Error(\"encode: unsupported type\");{const e=function(e){if(\"string\"!=typeof e)throw new Error(\"utf8ToBytes expected string, got \"+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(n);o=e.length,i=Array.from(e).map((e=>cd(e,8))).join(\"\")}}const{capacity:s}=bd.capacity(e,t),a=cd(o,bd.lengthBits(e,r));let c=bd.modeBits[r]+a+i;if(c.length>s)throw new Error(\"Capacity overflow\");c+=\"0\".repeat(Math.min(4,Math.max(0,s-c.length))),c.length%8&&(c+=\"0\".repeat(8-c.length%8));const d=\"1110110000010001\";for(let e=0;c.length!==s;e++)c+=d[e%16];const l=Uint8Array.from(c.match(/(.{8})/g).map((e=>Number(`0b${e}`))));return _d(e,t).encode(l)}function xd(e,t,n,r,i=!1){const o=function(e,t,n,r=!1){const i=bd.size.encode(e);let o=new pd(i+2);const s=new pd(3).rect(0,3,!0).border(1,!1).border(1,!0).border(1,!1);o=o.embed(0,s).embed({x:-s.width,y:0},s).embed({x:0,y:-s.height},s),o=o.rectSlice(1,i);const a=new pd(1).rect(0,1,!0).border(1,!1).border(1,!0),c=bd.alignmentPatterns(e);for(const e of c)for(const t of c)void 0===o.data[e][t]&&o.embed({x:t-2,y:e-2},a);o=o.hLine({x:0,y:6},1/0,(({x:e},t)=>void 0===t?e%2==0:t)).vLine({x:6,y:0},1/0,(({y:e},t)=>void 0===t?e%2==0:t));{const e=bd.formatBits(t,n),s=t=>!r&&1==(e>>t&1);for(let e=0;e<6;e++)o.data[e][8]=s(e);for(let e=6;e<8;e++)o.data[e+1][8]=s(e);for(let e=8;e<15;e++)o.data[i-15+e][8]=s(e);for(let e=0;e<8;e++)o.data[8][i-e-1]=s(e);for(let e=8;e<9;e++)o.data[8][15-e-1+1]=s(e);for(let e=9;e<15;e++)o.data[8][15-e-1]=s(e);o.data[i-8][8]=!r}if(e>=7){const t=bd.versionBits(e);for(let e=0;e<18;e+=1){const n=!r&&1==(t>>e&1),s=Math.floor(e/3),a=e%3+i-8-3;o.data[s][a]=n,o.data[a][s]=n}}return o}(e,t,r,i);let s=0;const a=8*n.length;if(function(e,t,n){const r=e.height,i=wd[t];let o=-1,s=r-1;for(let t=r-1;t>0;t-=2){for(6==t&&(t=5);;s+=o){for(let r=0;r<2;r+=1){const o=t-r;void 0===e.data[s][o]&&n(o,s,i(o,s))}if(s+o<0||s+o>=r)break}o=-o}}(o,r,((e,t,r)=>{let i=!1;s<a&&(i=0!=(n[s>>>3]>>(7-s&7)&1),s++),o.data[t][e]=i!==r})),s!==a)throw new Error(\"QR: bytes left after draw\");return o}function kd(e){const t=e.inverse(),n=e=>{let t=0;for(let n,r=0,i=1;r<e.length;r++)n===e[r]&&(i++,r!==e.length-1)||(i>=5&&(t+=i-5+3),n=e[r],i=1);return t};let r=0;e.data.forEach((e=>r+=n(e))),t.data.forEach((e=>r+=n(e)));let i=0,o=e.data;const s=e.width-1,a=e.height-1;for(let e=0;e<s;e++)for(let t=0;t<a;t++){const n=e+1,r=t+1;o[e][t]===o[n][t]&&o[n][t]===o[e][r]&&o[n][t]===o[n][r]&&(i+=3)}const c=e=>{const t=[!0,!1,!0,!0,!0,!1,!0],n=[!1,!1,!1,!1],r=[...t,...n],i=[...n,...t];let o=0;for(let t=0;t<e.length;t++)hd(e,r,t)&&(o+=40),hd(e,i,t)&&(o+=40);return o};let d=0;for(const t of e.data)d+=c(t);for(const e of t.data)d+=c(e);let l=0;e.rectRead(0,1/0,((e,t)=>l+=t?1:0));const u=l/(e.height*e.width)*100,h=10*Math.floor(Math.abs(u-50)/5);return r+i+d+h}function Md(e,t=\"raw\",n={}){const r=void 0!==n.ecc?n.ecc:\"medium\";!function(e){if(!md.includes(e))throw new Error(`Invalid error correction mode=${e}. Expected: ${md}`)}(r);const i=void 0!==n.encoding?n.encoding:function(e){let t=\"numeric\";for(let n of e)if(!bd.alphabet.numeric.has(n)&&(t=\"alphanumeric\",!bd.alphabet.alphanumerc.has(n)))return\"byte\";return t}(e);!function(e){if(!gd.includes(e))throw new Error(`Encoding: invalid mode=${e}. Expected: ${gd}`);if(\"kanji\"===e||\"eci\"===e)throw new Error(`Encoding: ${e} is not supported (yet?).`)}(i),void 0!==n.mask&&function(e){if(![0,1,2,3,4,5,6,7].includes(e)||!wd[e])throw new Error(`Invalid mask=${e}. Expected number [0..7]`)}(n.mask);let o,s=n.version,a=new Error(\"Unknown error\");if(void 0!==s)!function(e){if(!Number.isSafeInteger(e)||e<1||e>40)throw new Error(`Invalid version=${e}. Expected number [1..40]`)}(s),o=Cd(s,r,e,i);else for(let t=1;t<=40;t++)try{o=Cd(t,r,e,i),s=t;break}catch(e){a=e}if(!s||!o)throw a;let c=function(e,t,n,r){if(void 0===r){const i=function(){let e,t=1/0;return{add(n,r){n>=t||(e=r,t=n)},get:()=>e,score:()=>t}}();for(let r=0;r<wd.length;r++)i.add(kd(xd(e,t,n,r,!0)),r);r=i.get()}if(void 0===r)throw new Error(\"Cannot find mask\");return xd(e,t,n,r)}(s,r,o,n.mask);c.assertDrawn();const d=void 0===n.border?2:n.border;if(!Number.isSafeInteger(d))throw new Error(\"Wrong border type=\"+typeof d);if(c=c.border(d,!1),void 0!==n.scale&&(c=c.scale(n.scale)),\"raw\"===t)return c.data;if(\"ascii\"===t)return c.toASCII();if(\"svg\"===t)return c.toSVG();if(\"gif\"===t)return c.toGIF();if(\"term\"===t)return c.toTerm();throw new Error(`Unknown output: ${t}`)}const Ad=({link:e})=>{const t=Md(e,\"ascii\");return console.log(t),Ra(`[UI: InstallModal-nodejs()] qrcode url: ${e}`),{unmount:()=>{}}},Td=()=>(Ra(\"[UI: pendingModal-nodejs: PendingModal()] Please open the MetaMask wallet app and confirm the connection. Thank you!\"),{unmount:()=>!1,updateOTPValue:e=>{\"\"!==e&&Ra(`[UI: pendingModal-nodejs: PendingModal()] Choose the following value on your metamask mobile wallet: ${e}`)},mount:()=>!1});function Id(e,t){var n,r,i,o;e.connector||(Ra(\"[RemoteConnection: initializeConnector()] initialize connector\"),e.connector=new Br({platformType:t.platformManager.getPlatformType(),communicationLayerPreference:t.communicationLayerPreference,transports:t.transports,dappMetadata:Object.assign(Object.assign({},t.dappMetadata),{source:t._source}),analytics:t.enableAnalytics,communicationServerUrl:t.communicationServerUrl,sdkVersion:hc.version,context:\"dapp\",ecies:t.ecies,storage:t.storage,logging:t.logging}),t.timer&&(Ra(\"[RemoteConnection: initializeConnector()] reset background timer\",t.timer),null===(r=null===(n=t.timer)||void 0===n?void 0:n.stopBackgroundTimer)||void 0===r||r.call(n),null===(o=null===(i=t.timer)||void 0===i?void 0:i.runBackgroundTimer)||void 0===o||o.call(i,(()=>!1),1e4)))}function Pd(e){e.listeners.forEach((({event:t,handler:n})=>{var r;null===(r=e.connector)||void 0===r||r.off(t,n)})),e.listeners=[]}function Rd(e,t,n){return l(this,void 0,void 0,(function*(){return new Promise(((r,i)=>{if(!e.connector)return void i(new Error(\"No connector available\"));Ra(\"[RemoteConnection: connectWithModalInstaller()]\",{state:e,options:t,linkParams:n});const o=`${e.useDeeplink?mc:pc}?${n}`;!function(e,t,n){var r,i,o,s;e.installModal=null===(i=(r=t.modals).install)||void 0===i?void 0:i.call(r,{link:n,preferDesktop:e.preferDesktop,installer:t.getMetaMaskInstaller(),terminate:()=>{Ra(\"[RemoteConnection: showInstallModal() => terminate()] terminate connection\"),t.sdk.terminate().catch((e=>{console.warn(\"[MMSDK] failed to terminate connection\",e)}))},debug:e.developerMode,connectWithExtension:()=>{var e;return null===(e=t.connectWithExtensionProvider)||void 0===e||e.call(t),!1},onAnalyticsEvent:({event:n,params:r})=>{var i,o,s;const a=Object.assign(Object.assign({},r),{sdkVersion:t.sdk.getVersion(),dappId:null===(i=t.dappMetadata)||void 0===i?void 0:i.name,source:t._source,url:null===(o=t.dappMetadata)||void 0===o?void 0:o.url});null===(s=e.analytics)||void 0===s||s.send({event:n,params:a})}}),null===(s=null===(o=e.installModal)||void 0===o?void 0:o.mount)||void 0===s||s.call(o,n)}(e,t,o),t.sdk.once(exports.EventType.PROVIDER_UPDATE,(e=>l(this,void 0,void 0,(function*(){if(Ra(\"[RemoteConnection: connectWithModalInstaller()] once provider_update -- resolving startConnection promise\"),e!==exports.PROVIDER_UPDATE_TYPE.TERMINATE)i(e);else{i({code:4001,message:\"User rejected the request.\"})}})))),e.connector.once(exports.EventType.AUTHORIZED,(()=>{r()})),e.connector.once(exports.EventType.REJECTED,(()=>{i(exports.EventType.REJECTED)})),e.connector.once(exports.EventType.CLIENTS_READY,(()=>l(this,void 0,void 0,(function*(){Ra(\"[RemoteConnection: connectWithModalInstaller()] once clients_ready -- resolving startConnection promise\"),r()}))))}))}))}function Od(e,t){function n(t,n){var r;null===(r=e.connector)||void 0===r||r.on(t,n),e.listeners.push({event:t,handler:n})}e.connector&&(Pd(e),n(exports.EventType.WALLET_INIT,(({accounts:e,chainId:t})=>l(this,void 0,void 0,(function*(){Ra(`[RemoteConnection: setupListeners() => EventType.WALLET_INIT] 'wallet_init' accounts=${e} chainId=${t}`);const n=ac.getProvider();n._setConnected();const r={accounts:e,chainId:t,isUnlocked:!1};n._initializeState(r),n.emit(\"chainChanged\",t),n.emit(\"accountsChanged\",e)})))),n(exports.EventType.AUTHORIZED,(()=>l(this,void 0,void 0,(function*(){var t,n,r,i;try{Ra(\"[RemoteConnection: setupListeners() => EventType.AUTHORIZED] 'authorized' closing modals\",e.pendingModal,e.installModal);const o=ac.getProvider();o._setConnected(),null===(n=null===(t=e.pendingModal)||void 0===t?void 0:t.unmount)||void 0===n||n.call(t),null===(i=null===(r=e.installModal)||void 0===r?void 0:r.unmount)||void 0===i||i.call(r,!1),e.otpAnswer=void 0,e.authorized=!0,Ra(\"[RemoteConnection: setupListeners() => EventType.AUTHORIZED] 'authorized' provider.state\",o.getState()),yield o.forceInitializeState()}catch(e){}})))),n(exports.EventType.TERMINATE,(()=>{var t,n,r,i,o;null===(n=null===(t=e.pendingModal)||void 0===t?void 0:t.unmount)||void 0===n||n.call(t),null===(i=null===(r=e.installModal)||void 0===r?void 0:r.unmount)||void 0===i||i.call(r,!0),e.pendingModal=void 0,e.installModal=void 0,e.otpAnswer=void 0,null===(o=e.connector)||void 0===o||o.disconnect({terminate:!0}),e.authorized=!1;ac.getProvider().handleDisconnect({terminate:!0}),Pd(e),Ra(\"[RemoteConnection: setupListeners()] All listeners cleaned up\")})))}function Nd(e,t,{initialCheck:n,connectWith:r}={}){var i,o,s,a,c,d,u,h,f,p,m,g,v,y,E,b,w,S,_;return l(this,void 0,void 0,(function*(){try{if(Id(e,t),!e.connector)throw new Error(\"no connector defined\");Od(e);const C=ac.getProvider();e.authorized=!1,C.emit(\"connecting\");const x=yield null===(i=e.connector)||void 0===i?void 0:i.originatorSessionConnect();Ra(`[RemoteConnection: startConnection()] after originatorSessionConnect initialCheck=${n}`,x);let k=null!==(o=null==x?void 0:x.channelId)&&void 0!==o?o:\"\",M=null!==(a=null===(s=e.connector.getKeyInfo())||void 0===s?void 0:s.ecies.public)&&void 0!==a?a:\"\",A=null!==(d=null===(c=e.connector.getKeyInfo())||void 0===c?void 0:c.ecies.private)&&void 0!==d?d:\"\";if(n&&!x)return Promise.resolve();if(!x&&!n){const t=yield e.connector.generateChannelIdConnect();k=null!==(u=t.channelId)&&void 0!==u?u:\"\",M=null!==(h=t.pubKey)&&void 0!==h?h:\"\",A=null!==(f=t.privKey)&&void 0!==f?f:\"\";const n=Date.now();null===(p=e.connector.state.storageManager)||void 0===p||p.persistChannelConfig({channelId:k,localKey:A,lastActive:n,validUntil:n+ir})}if(n&&(null==x?void 0:x.channelId))return(null===(m=e.connector)||void 0===m?void 0:m.isConnected())||(Ra(`[RemoteConnection: startConnection()] reconnecting to channel initialCheck=${n}`,x),yield null===(g=e.connector)||void 0===g?void 0:g.connectToChannel({channelId:k})),Promise.resolve();x&&!(null===(v=e.connector)||void 0===v?void 0:v.isConnected())&&(Ra(\"[RemoteConnection: startConnection()] reconnecting to channel\",x),yield null===(y=e.connector)||void 0===y?void 0:y.connectToChannel({channelId:k}));const T=(null===(E=e.platformManager)||void 0===E?void 0:E.isSecure())?\"\":\"&t=q\",I=hc.version,{iconUrl:P,name:R,url:O,scheme:N}=t.dappMetadata||{},D=null===(b=e.platformManager)||void 0===b?void 0:b.getPlatformType();let L=\"N/A\";\"undefined\"!=typeof window&&window.location&&window.location.hostname?L=window.location.hostname:void 0!==R?L=R:void 0!==O&&(L=O);const B={url:null!=O?O:\"\",title:null!=R?R:\"\",icon:P,scheme:null!=N?N:\"\",apiVersion:I,dappId:L||O||\"N/A\",platform:null!=D?D:\"\",source:null!==(w=t._source)&&void 0!==w?w:\"\"},K=Rc(JSON.stringify(B));let j=`channelId=${k}&v=2&comm=${null!==(S=e.communicationLayerPreference)&&void 0!==S?S:\"\"}&pubkey=${M}${T}&originatorInfo=${K}`;if(r){j+=`&rpc=${Rc(JSON.stringify(r))}`;const t=e.connector.getRPCMethodTracker();t&&(t[`${r.id}`]=Object.assign(Object.assign({},r),{id:`${r.id}`,timestamp:Date.now()}))}const $=encodeURI(j),H=`${e.useDeeplink?mc:pc}?${j}`;return e.qrcodeLink=H,e.developerMode&&Ra(`[RemoteConnection: startConnection()] qrcodeLink=${$}`),C.emit(\"display_uri\",H),(null===(_=e.platformManager)||void 0===_?void 0:_.isSecure())?(yield function(e,t){var n,r;return l(this,void 0,void 0,(function*(){const i=`${pc}?${t}`,o=`${mc}?${t}`;null===(r=null===(n=e.platformManager)||void 0===n?void 0:n.openDeeplink)||void 0===r||r.call(n,i,o,\"_self\")}))}(e,$),new Promise(((t,n)=>{var r,i,o;(null===(r=e.connector)||void 0===r?void 0:r.isAuthorized())?t():(null===(i=e.connector)||void 0===i||i.once(exports.EventType.AUTHORIZED,(()=>{t()})),null===(o=e.connector)||void 0===o||o.once(exports.EventType.REJECTED,(()=>{n(exports.EventType.REJECTED)})))}))):Rd(e,t,$)}catch(e){throw console.error(\"[startConnection] error\",e),e}}))}class Dd{constructor(e){var t,n,r;this.state={connector:void 0,qrcodeLink:void 0,analytics:void 0,developerMode:!1,authorized:!1,reconnection:!1,preferDesktop:!1,deeplinkProtocol:!1,listeners:[],communicationLayerPreference:void 0,platformManager:void 0,pendingModal:void 0,installModal:void 0,otpAnswer:void 0},this.options=e;const i=!0===(null===(t=e.logging)||void 0===t?void 0:t.developerMode)||!0===(null===(n=e.logging)||void 0===n?void 0:n.sdk);this.state.developerMode=i,this.state.analytics=e.analytics,this.state.preferDesktop=null!==(r=e.preferDesktop)&&void 0!==r&&r,this.state.useDeeplink=e.sdk.options.useDeeplink,this.state.communicationLayerPreference=e.communicationLayerPreference,this.state.platformManager=e.platformManager,e.modals.install||(e.modals.install=Ad),e.modals.otp||(e.modals.otp=Td)}startConnection(e){return l(this,void 0,void 0,(function*(){return Nd(this.state,this.options,e)}))}initRemoteCommunication({sdkInstance:e}){var t,n,r;return l(this,void 0,void 0,(function*(){const i=yield null===(n=null===(t=e.options.storage)||void 0===t?void 0:t.storageManager)||void 0===n?void 0:n.getPersistedChannelConfig();if(!this.options.ecies){const e={privateKey:null==i?void 0:i.localKey};this.options.ecies=e}Id(this.state,this.options),yield null===(r=this.getConnector())||void 0===r?void 0:r.initFromDappStorage(),Od(this.state,this.options)}))}showActiveModal(){return function(e){var t,n,r,i;e.authorized?Ra(\"[RemoteConnection: showActiveModal()] already authorized\"):e.pendingModal?null===(n=(t=e.pendingModal).mount)||void 0===n||n.call(t):e.installModal&&(null===(i=(r=e.installModal).mount)||void 0===i||i.call(r,e.qrcodeLink||\"\"))}(this.state)}closeModal(){var e,t,n,r;null===(t=null===(e=this.state.pendingModal)||void 0===e?void 0:e.unmount)||void 0===t||t.call(e),null===(r=null===(n=this.state.installModal)||void 0===n?void 0:n.unmount)||void 0===r||r.call(n,!1)}getUniversalLink(){if(!this.state.qrcodeLink)throw new Error(\"connection not started. run startConnection() first.\");return this.state.qrcodeLink}getChannelConfig(){var e;return null===(e=this.state.connector)||void 0===e?void 0:e.getChannelConfig()}getKeyInfo(){var e;return null===(e=this.state.connector)||void 0===e?void 0:e.getKeyInfo()}getConnector(){if(!this.state.connector)throw new Error(\"invalid remote connector\");return this.state.connector}getPlatformManager(){if(!this.state.platformManager)throw new Error(\"PlatformManager not available\");return this.state.platformManager}isConnected(){var e;return(null===(e=this.state.connector)||void 0===e?void 0:e.isReady())||!1}isAuthorized(){var e;return(null===(e=this.state.connector)||void 0===e?void 0:e.isAuthorized())||!1}isPaused(){var e;return null===(e=this.state.connector)||void 0===e?void 0:e.isPaused()}disconnect(e){var t,n,r;Ra(\"[RemoteConnection: disconnect()]\",e),(null==e?void 0:e.terminate)&&(ac.getProvider().handleDisconnect({terminate:!0}),null===(n=null===(t=this.state.pendingModal)||void 0===t?void 0:t.unmount)||void 0===n||n.call(t),this.state.otpAnswer=void 0),null===(r=this.state.connector)||void 0===r||r.disconnect(e),function(e){Ra(\"[RemoteConnection: cleanupConnector()] cleaning up connector\"),e.connector&&(Pd(e),e.connector.disconnect({terminate:!0}).catch((e=>{Ra(\"[RemoteConnection: cleanupConnector()] error disconnecting connector\",e)})))}(this.state)}}function Ld(e){var n,r,i,o,s,a,c,d,u,h,f;return l(this,void 0,void 0,(function*(){const{options:p}=e;if(p.logging=null!==(n=p.logging)&&void 0!==n?n:{},p.communicationLayerPreference=null!==(r=p.communicationLayerPreference)&&void 0!==r?r:exports.CommunicationLayerPreference.SOCKET,void 0!==p.enableDebug&&(t.enable(\"MM_SDK\"),console.warn(\"enableDebug is removed. Please use enableAnalytics instead.\")),p.enableAnalytics=null===(i=p.enableAnalytics)||void 0===i||i,p.injectProvider=null===(o=p.injectProvider)||void 0===o||o,p.shouldShimWeb3=null===(s=p.shouldShimWeb3)||void 0===s||s,p.extensionOnly=null===(a=p.extensionOnly)||void 0===a||a,p.useDeeplink=null===(c=p.useDeeplink)||void 0===c||c,p.storage=null!==(d=p.storage)&&void 0!==d?d:{enabled:!0},p.headless){t(\"[MetaMaskSDK: performSDKInitialization()] headless mode enabled\");const e=()=>{},n={install:()=>({mount:e,unmount:e})},r={installer:e};p.modals=n,p.ui=r}const m=!0===(null===(u=p.logging)||void 0===u?void 0:u.developerMode);e.debug=(null===(h=p.logging)||void 0===h?void 0:h.sdk)||m,Ra(\"[MetaMaskSDK: performSDKInitialization()] options\",e.options);const g=Object.assign({},p.logging);m&&(g.sdk=!0,g.eciesLayer=!0,g.keyExchangeLayer=!0,g.remoteLayer=!0,g.serviceLayer=!0,g.plaintext=!0),yield function(e){var t;return l(this,void 0,void 0,(function*(){const{options:n}=e;e.platformManager=new cc({useDeepLink:null!==(t=n.useDeeplink)&&void 0!==t&&t,preferredOpenLink:n.openDeeplink,debug:e.debug})}))}(e),yield function(e){var t,n,r,i,o,s,a,c,d;return l(this,void 0,void 0,(function*(){const{options:l}=e,u=null===(t=e.platformManager)||void 0===t?void 0:t.getPlatformType();e.analytics=new $c({serverUrl:null!==(n=l.communicationServerUrl)&&void 0!==n?n:nr,enabled:l.enableAnalytics,originatorInfo:{url:null!==(r=l.dappMetadata.url)&&void 0!==r?r:\"\",title:null!==(i=l.dappMetadata.name)&&void 0!==i?i:\"\",dappId:\"undefined\"==typeof window||void 0===window.location?null!==(c=null!==(s=null===(o=l.dappMetadata)||void 0===o?void 0:o.name)&&void 0!==s?s:null===(a=l.dappMetadata)||void 0===a?void 0:a.url)&&void 0!==c?c:\"N/A\":window.location.hostname,platform:null!=u?u:\"\",source:null!==(d=l._source)&&void 0!==d?d:\"\"}})}))}(e),yield function(e){var t;return l(this,void 0,void 0,(function*(){const{options:n}=e;!0!==(null===(t=n.storage)||void 0===t?void 0:t.enabled)||n.storage.storageManager||(n.storage.storageManager=yield dc(n.storage))}))}(e),yield function(e){return l(this,void 0,void 0,(function*(){const{options:t}=e,n=/^(http|https):\\/\\/[^\\s]*$/;if(t.dappMetadata){t.dappMetadata.iconUrl&&!n.test(t.dappMetadata.iconUrl)&&(console.warn(\"Invalid dappMetadata.iconUrl: URL must start with http:// or https://\"),t.dappMetadata.iconUrl=void 0),t.dappMetadata.base64Icon&&t.dappMetadata.base64Icon.length>Uc&&(console.warn(\"Invalid dappMetadata.base64Icon: Base64-encoded icon string length must be less than 163400 characters\"),t.dappMetadata.base64Icon=void 0),t.dappMetadata.url&&!n.test(t.dappMetadata.url)&&console.warn(\"Invalid dappMetadata.url: URL must start with http:// or https://\");const e=Hc();if(e&&!t.dappMetadata.iconUrl&&!t.dappMetadata.base64Icon){const n=`${window.location.protocol}//${window.location.host}${e}`;t.dappMetadata.iconUrl=n}}e.dappMetadata=t.dappMetadata}))}(e),yield Vc(e),yield Gc(e);const{metamaskBrowserExtension:v,preferExtension:y,shouldReturn:E}=yield function(e){var t,n,r,i;return l(this,void 0,void 0,(function*(){const{options:o}=e;let s,a=!1,c=!1;if(\"undefined\"!=typeof window&&window.ethereum&&!(null===(t=e.platformManager)||void 0===t?void 0:t.isMetaMaskMobileWebView())){a=\"extension\"===localStorage.getItem(_c);try{s=yield Wc({mustBeMetaMask:!0,sdkInstance:e}),window.extension=s,s.on(kc.CHAIN_CHANGED,(t=>{Ra(`[MetaMaskSDK: setupExtensionPreferences()] PROPAGATE chainChanged chainId=${t}`),Boolean(e.sdkProvider)&&e.getMobileProvider().emit(kc.CHAIN_CHANGED,t)})),s.on(kc.ACCOUNTS_CHANGED,(t=>l(this,void 0,void 0,(function*(){var n;Ra(`[MetaMaskSDK: setupExtensionPreferences()] PROPAGATE accountsChanged accounts=${t}`);const r=Boolean(e.sdkProvider),i=Boolean(e.extensionActive);if(r&&e.getMobileProvider().emit(kc.ACCOUNTS_CHANGED,t),i&&0===(null==t?void 0:t.length)&&0===(yield null===(n=e.getProvider())||void 0===n?void 0:n.request({method:yc.WALLET_GETPERMISSIONS,params:[]})).length)try{yield e.terminate()}catch(e){Ra(\"[MetaMaskSDK: setupExtensionPreferences()] error terminating on permissions revoked\",e)}})))),s.on(kc.DISCONNECT,(t=>{Ra(`[MetaMaskSDK: setupExtensionPreferences()] PROPAGATE disconnect error=${t}`),Boolean(e.sdkProvider)&&e.getMobileProvider().emit(kc.DISCONNECT,t)})),s.on(kc.CONNECT,(t=>{Ra(`[MetaMaskSDK: setupExtensionPreferences()] PROPAGATE connect args=${t}`),Boolean(e.sdkProvider)&&e.getMobileProvider().emit(kc.CONNECT,t)})),s.on(kc.CONNECTED,(t=>{Ra(\"[MetaMaskSDK: setupExtensionPreferences()] PROPAGATE connected\",t),Boolean(e.sdkProvider)&&e.getMobileProvider().emit(kc.CONNECTED,t)}))}catch(e){window.extension=void 0}}else(null===(n=e.platformManager)||void 0===n?void 0:n.isMetaMaskMobileWebView())&&(null===(r=e.analytics)||void 0===r||r.send({event:lr.SDK_USE_INAPP_BROWSER}),e.activeProvider=qc({provider:window.ethereum,sdkInstance:e}),e._initialized=!0,c=!0);return s&&o.extensionOnly&&(Ra(\"[MetaMaskSDK: setupExtensionPreferences()] EXTENSION ONLY --- prevent sdk initialization\"),null===(i=e.analytics)||void 0===i||i.send({event:lr.SDK_USE_EXTENSION}),e.activeProvider=s,e.extensionActive=!0,e.extension=s,e._initialized=!0,c=!0),{preferExtension:a,shouldReturn:c,metamaskBrowserExtension:s}}))}(e);if(E)Ra(\"[MetaMaskSDK: performSDKInitialization()] shouldReturn=true --- prevent sdk initialization\");else{yield function(e,t){var n,r,i,o,s;return l(this,void 0,void 0,(function*(){const{options:a}=e,c=Object.assign({},a.logging);e.remoteConnection=new Dd({preferDesktop:null!==(n=a.preferDesktop)&&void 0!==n&&n,communicationLayerPreference:null!==(r=a.communicationLayerPreference)&&void 0!==r?r:exports.CommunicationLayerPreference.SOCKET,analytics:e.analytics,dappMetadata:a.dappMetadata,_source:a._source,enableAnalytics:null===(i=a.enableAnalytics)||void 0===i||i,timer:a.timer,sdk:e,platformManager:e.platformManager,transports:a.transports,communicationServerUrl:a.communicationServerUrl,storage:null!==(o=a.storage)&&void 0!==o?o:{enabled:!0},getMetaMaskInstaller:()=>{if(!e.installer)throw new Error(\"Invalid SDK status -- installer not initialized\");return e.installer},logging:c,connectWithExtensionProvider:void 0===t?void 0:()=>Pc(e),modals:Object.assign(Object.assign({},a.modals),{onPendingModalDisconnect:e.terminate.bind(e)})}),yield e.remoteConnection.initRemoteCommunication({sdkInstance:e}),e.installer=new ad({remote:e.remoteConnection,preferDesktop:null!==(s=a.preferDesktop)&&void 0!==s&&s,platformManager:e.platformManager,debug:e.debug})}))}(e,v),yield Kc(e),yield function(e,t){var n,r;return l(this,void 0,void 0,(function*(){const{options:i}=e;t?(Ra(\"[MetaMaskSDK: handleAutoAndExtensionConnections()] preferExtension is detected -- connect with it.\"),null===(n=e.analytics)||void 0===n||n.send({event:lr.SDK_EXTENSION_UTILIZED}),Pc(e).catch((e=>{console.warn(\"Can't connect with MetaMask extension...\",e),localStorage.removeItem(_c)}))):i.checkInstallationImmediately&&((null===(r=e.platformManager)||void 0===r?void 0:r.isDesktopWeb())?(Ra(\"[MetaMaskSDK: handleAutoAndExtensionConnections()] checkInstallationImmediately\"),e.connect().catch((e=>{Ra(`[MetaMaskSDK: handleAutoAndExtensionConnections()] checkInstallationImmediately --- IGNORED --- error on autoconnect _err=${e}`)}))):console.warn(\"[handleAutoAndExtensionConnections()] checkInstallationImmediately --- IGNORED --- only for web desktop\")),e._initialized=!0}))}(e,y);try{yield null===(f=e.remoteConnection)||void 0===f?void 0:f.startConnection({initialCheck:!0})}catch(e){console.error(\"[MetaMaskSDK: setupRemoteConnectionAndInstaller()] Error while checking installation\",e)}e.emit(sc.ProviderUpdate,exports.PROVIDER_UPDATE_TYPE.INITIALIZED)}}))}class Bd extends i{constructor(e={storage:{enabled:!0},injectProvider:!0,forceInjectProvider:!1,enableAnalytics:!0,shouldShimWeb3:!0,useDeeplink:!0,extensionOnly:!0,headless:!1,dappMetadata:{name:\"\",url:\"\",iconUrl:\"\"},_source:fc,i18nOptions:{enabled:!1}}){var n,r,i;super(),this.extensionActive=!1,this._initialized=!1,this.sdkInitPromise=void 0,this.debug=!1,this.readonlyRPCCalls=!1,this.availableLanguages=[\"en\"],t.disable();const o=!0===(null===(n=e.logging)||void 0===n?void 0:n.developerMode);if(((null===(r=e.logging)||void 0===r?void 0:r.sdk)||o)&&t.enable(\"MM_SDK\"),Ra(\"[MetaMaskSDK: constructor()]: begin.\"),this.setMaxListeners(50),!(null===(i=e.dappMetadata)||void 0===i?void 0:i.url)){if(\"undefined\"==typeof window||\"undefined\"==typeof document)throw new Error(\"You must provide dAppMetadata url\");e.dappMetadata=Object.assign(Object.assign({},e.dappMetadata),{url:`${window.location.protocol}//${window.location.host}`})}this.options=e,this.options._source||(e._source=fc),this.init().then((()=>{Ra(\"[MetaMaskSDK: constructor()]: initialized successfully.\"),\"undefined\"!=typeof window&&(window.mmsdk=this)})).catch((e=>{console.error(\"[MetaMaskSDK: constructor()] error during initialization\",e)}))}init(){return l(this,void 0,void 0,(function*(){return function(e){var t;return l(this,void 0,void 0,(function*(){if(\"undefined\"!=typeof window&&(null===(t=window.mmsdk)||void 0===t?void 0:t.isInitialized()))return Ra(\"[MetaMaskSDK: initializeMetaMaskSDK()] already initialized\"),Promise.resolve(window.mmsdk);if(e._initialized)return Ra(\"[MetaMaskSDK: initializeMetaMaskSDK()] already initialized\"),e.sdkInitPromise;if(e.sdkInitPromise)return Ra(\"[MetaMaskSDK: initializeMetaMaskSDK()] already initializing\"),e.sdkInitPromise;try{e.sdkInitPromise=Ld(e),yield e.sdkInitPromise}catch(e){throw console.error(e),e}return e.sdkInitPromise}))}(this)}))}isExtensionActive(){return this.extensionActive}checkExtensionAvailability(){var e;return\"undefined\"!=typeof window&&Boolean(null===(e=window.ethereum)||void 0===e?void 0:e.isMetaMask)}connect(){return l(this,void 0,void 0,(function*(){return function(e){return l(this,void 0,void 0,(function*(){if(e._initialized||(Ra(\"[MetaMaskSDK: connect()] provider not ready -- wait for init()\"),yield e.init()),Ra(`[MetaMaskSDK: connect()] isExtensionActive=${e.isExtensionActive()} activeProvider`,e.activeProvider),!e.activeProvider)throw new Error(\"SDK state invalid -- undefined provider\");const t=e.activeProvider.getSelectedAddress();return t?[t]:e.activeProvider.request({method:yc.ETH_REQUESTACCOUNTS,params:[]})}))}(this)}))}connectAndSign({msg:e}){return l(this,void 0,void 0,(function*(){return Ic({instance:this,msg:e})}))}connectWith(e){return l(this,void 0,void 0,(function*(){return function({instance:e,rpc:t}){return l(this,void 0,void 0,(function*(){if(e._initialized||(Ra(\"[MetaMaskSDK: connectWith()] provider not ready -- wait for init()\"),yield e.init()),Ra(`[MetaMaskSDK: connectWith()] method: ${t.method} rpc=${t}`),!e.activeProvider)throw new Error(\"SDK state invalid -- undefined provider\");return e.activeProvider.request({method:yc.METAMASK_CONNECTWITH,params:[t]})}))}({instance:this,rpc:e})}))}resume(){return function(e){var t,n,r;return l(this,void 0,void 0,(function*(){if(!(null===(n=null===(t=e.remoteConnection)||void 0===t?void 0:t.getConnector())||void 0===n?void 0:n.isReady()))return Ra(\"[MetaMaskSDK: resume()] channel is not ready -- starting connection\"),void(null===(r=e.remoteConnection)||void 0===r||r.startConnection());Ra(\"[MetaMaskSDK: resume()] channel is ready\")}))}(this)}disconnect(){return console.warn(\"MetaMaskSDK.disconnect() is deprecated, use terminate()\"),this.terminate()}isAuthorized(){var e;null===(e=this.remoteConnection)||void 0===e||e.isAuthorized()}terminate(){return function(e){var t,n,r;return l(this,void 0,void 0,(function*(){if(!(null===(t=e.platformManager)||void 0===t?void 0:t.isMetaMaskMobileWebView())){if(Tc&&(window.localStorage.removeItem(_c),window.localStorage.removeItem(xc),window.localStorage.removeItem(Cc)),e.extensionActive){try{yield null===(n=e.activeProvider)||void 0===n?void 0:n.request({method:yc.WALLET_REVOKEPERMISSIONS,params:[{eth_accounts:{}}]})}catch(e){Ra(\"[MetaMaskSDK: terminate()] error revoking permissions\",e)}return e.options.extensionOnly?(e.emit(sc.ProviderUpdate,exports.PROVIDER_UPDATE_TYPE.TERMINATE),void Ra(\"[MetaMaskSDK: terminate()] extensionOnly --- prevent switching providers\")):(e.activeProvider=e.sdkProvider,window.ethereum=e.activeProvider,e.extensionActive=!1,void e.emit(sc.ProviderUpdate,exports.PROVIDER_UPDATE_TYPE.TERMINATE))}e.emit(sc.ProviderUpdate,exports.PROVIDER_UPDATE_TYPE.TERMINATE),Ra(`[MetaMaskSDK: terminate()] remoteConnection=${e.remoteConnection}`),null===(r=e.remoteConnection)||void 0===r||r.disconnect({terminate:!0,sendMessage:!0})}}))}(this)}isInitialized(){return this._initialized}setReadOnlyRPCCalls(e){this.readonlyRPCCalls=e}hasReadOnlyRPCCalls(){return this.readonlyRPCCalls}getProvider(){if(this.activeProvider)return this.activeProvider;console.warn(\"MetaMaskSDK: No active provider found\")}getMobileProvider(){if(!this.sdkProvider)throw new Error(\"SDK state invalid -- undefined mobile provider\");return this.sdkProvider}getUniversalLink(){var e;const t=null===(e=this.remoteConnection)||void 0===e?void 0:e.getUniversalLink();if(!t)throw new Error(\"No Universal Link available, please call eth_requestAccounts first.\");return t}getChannelId(){var e,t;return null===(t=null===(e=this.remoteConnection)||void 0===e?void 0:e.getChannelConfig())||void 0===t?void 0:t.channelId}getRPCHistory(){var e,t;return null===(t=null===(e=this.remoteConnection)||void 0===e?void 0:e.getConnector())||void 0===t?void 0:t.getRPCMethodTracker()}getVersion(){return hc.version}getWalletStatus(){var e,t;return null===(t=null===(e=this.remoteConnection)||void 0===e?void 0:e.getConnector())||void 0===t?void 0:t.getConnectionStatus()}_getChannelConfig(){var e;return null===(e=this.remoteConnection)||void 0===e?void 0:e.getChannelConfig()}_ping(){var e,t;null===(t=null===(e=this.remoteConnection)||void 0===e?void 0:e.getConnector())||void 0===t||t.ping()}_keyCheck(){var e,t;null===(t=null===(e=this.remoteConnection)||void 0===e?void 0:e.getConnector())||void 0===t||t.keyCheck()}_getServiceStatus(){var e,t;return null===(t=null===(e=this.remoteConnection)||void 0===e?void 0:e.getConnector())||void 0===t?void 0:t.getServiceStatus()}_getRemoteConnection(){return this.remoteConnection}_getDappMetadata(){return this.dappMetadata}_getKeyInfo(){var e;return null===(e=this.remoteConnection)||void 0===e?void 0:e.getKeyInfo()}_resetKeys(){var e,t;null===(t=null===(e=this.remoteConnection)||void 0===e?void 0:e.getConnector())||void 0===t||t.resetKeys()}_getConnection(){return this.remoteConnection}emit(e,t){return super.emit(e,t)}on(e,t){return super.on(e,t)}}var Kd=Object.freeze({__proto__:null,StorageManagerWeb:class{constructor({enabled:e}={enabled:!1}){this.enabled=!1,this.enabled=e}persistChannelConfig(e){return l(this,void 0,void 0,(function*(){const t=JSON.stringify(e);Ra(`[StorageManagerWeb: persistChannelConfig()] enabled=${this.enabled}`,e),localStorage.setItem(Sc,t)}))}getPersistedChannelConfig(){return l(this,void 0,void 0,(function*(){let e;try{if(Ra(`[StorageManagerWeb: getPersistedChannelConfig()] enabled=${this.enabled}`),e=localStorage.getItem(Sc),Ra(\"[StorageManagerWeb: getPersistedChannelConfig()]\",e),!e)return;const t=JSON.parse(e);return Ra(\"[StorageManagerWeb: getPersistedChannelConfig()] channelConfig\",t),t}catch(e){return void console.error(\"[StorageManagerWeb: getPersistedChannelConfig()] Can't find existing channel config\",e)}}))}persistAccounts(e){return l(this,void 0,void 0,(function*(){Ra(`[StorageManagerWeb: persistAccounts()] enabled=${this.enabled}`,e);const t=JSON.stringify(e);localStorage.setItem(Cc,t)}))}getCachedAccounts(){return l(this,void 0,void 0,(function*(){try{const e=localStorage.getItem(Cc);return e?JSON.parse(e):[]}catch(e){throw console.error(\"[StorageManagerWeb: getCachedAccounts()] Error reading cached accounts\",e),e}}))}persistChainId(e){return l(this,void 0,void 0,(function*(){Ra(`[StorageManagerWeb: persistChainId()] enabled=${this.enabled}`,e),localStorage.setItem(xc,e)}))}getCachedChainId(){return l(this,void 0,void 0,(function*(){try{const e=localStorage.getItem(xc);return null!=e?e:void 0}catch(e){throw console.error(\"[StorageManagerWeb: getCachedChainId()] Error reading cached chainId\",e),e}}))}terminate(){return l(this,void 0,void 0,(function*(){Ra(`[StorageManagerWeb: terminate()] enabled=${this.enabled}`),localStorage.removeItem(Sc)}))}}});exports.DEFAULT_SERVER_URL=nr,exports.MetaMaskSDK=Bd,exports.MetaMaskSDKEvent=sc,exports.SDKProvider=lc,exports[\"default\"]=Bd;\n//# sourceMappingURL=metamask-sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3Nkay9kaXN0L25vZGUvY2pzL21ldGFtYXNrLXNkay5qcyIsIm1hcHBpbmdzIjoiQUFBYSw4Q0FBMkMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxNQUFNLG1CQUFPLENBQUMsMkVBQWEsSUFBSSxtQkFBTyxDQUFDLHNEQUFPLElBQUksbUJBQU8sQ0FBQyxzQkFBUSxJQUFJLG1CQUFPLENBQUMsZ0NBQWEsSUFBSSxtQkFBTyxDQUFDLDhFQUFlLElBQUksbUJBQU8sQ0FBQyw4REFBTSxJQUFJLG1CQUFPLENBQUMsa0ZBQWtCLElBQUksbUJBQU8sQ0FBQyxzQkFBUSxJQUFJLG1CQUFPLENBQUMsc0JBQVEsSUFBSSxtQkFBTyxDQUFDLGtCQUFNLEVBQUUsb0JBQW9CLDBDQUEwQyxjQUFjLElBQUksYUFBYSxTQUFTLE1BQU0sY0FBYyxJQUFJLGNBQWMsU0FBUyxNQUFNLGNBQWMsTUFBTSxpRUFBaUUsS0FBSyxjQUFjLCtCQUErQixHQUFHLG9EQUFvRCxxSkFBcUosY0FBYyxzRkFBc0YsUUFBUSxLQUFLLE1BQU0sY0FBYyxtRkFBbUYsRUFBRSxHQUFHLGNBQWMsZ0VBQWdFLEVBQUUsR0FBRyxjQUFjLCtGQUErRixtQkFBbUIsZ0RBQWdELHNGQUFzRixFQUFFLGtCQUFrQixTQUFTLEdBQUcsY0FBYyxzSEFBc0gsNkJBQTZCLG1CQUFtQixtRUFBbUUsMEVBQTBFLGdCQUFnQixLQUFLLG9CQUFvQix1RkFBdUYsRUFBRSxHQUFHLHNDQUFzQyxTQUFTLDJFQUEyRSxTQUFTLGtEQUFrRCx3QkFBd0Isc0NBQXNDLFNBQVMseUpBQXlKLGVBQWUsaUNBQWlDLDJDQUEyQyxtQ0FBbUMsaUJBQWlCLFlBQVksSUFBSSxLQUFLLEtBQUsscUJBQXFCLHlDQUF5QywyQ0FBMkMsa0NBQWtDLHVCQUF1Qiw2QkFBNkIsS0FBSywyRUFBMkUsT0FBTyxTQUFTLDhCQUE4QixRQUFRLFlBQVksV0FBVyxLQUFLLGFBQWEsMkJBQTJCLDBCQUEwQixnQkFB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QWtJLG9CQUFvQixNQUFNLGdGQUFnRixRQUFRLFFBQVEsc0dBQXNHLFlBQVksUUFBUSwwR0FBMEcsb0JBQW9CLFFBQVEsK0hBQStILHVCQUF1Qiw2QkFBNkIsbUJBQW1CLHlCQUF5QixjQUFjLE1BQU0sMEVBQTBFLGFBQWEsUUFBUSwyR0FBMkcsaUJBQWlCLDZCQUE2QixVQUFVLHVCQUF1QixRQUFRLHNCQUFzQixzQkFBc0IsdUNBQXVDLGFBQWEsVUFBVSxFQUFFLFdBQVcsRUFBRSwrQkFBK0Isd0JBQXdCLHlDQUF5QywwQkFBMEIsMERBQTBELGFBQWEsZ0NBQWdDLEdBQUcsNEJBQTRCLHlDQUF5QyxNQUFNLElBQUksa0VBQWtFLGFBQWEsaUdBQWlHLHNCQUFzQixnRkFBZ0YsU0FBUyxvSEFBb0gsR0FBRyxtQkFBbUIseUNBQXlDLHFEQUFxRCxhQUFhLEtBQUssMEJBQTBCLDJCQUEyQixHQUFHLG9CQUFvQix5Q0FBeUMsSUFBSSxpQ0FBaUMsMEJBQTBCLFNBQVMsbUdBQW1HLEdBQUcsa0JBQWtCLHlDQUF5QyxvREFBb0QsYUFBYSxnQ0FBZ0MsR0FBRyxtQkFBbUIseUNBQXlDLElBQUksaUNBQWlDLHdCQUF3QixTQUFTLGlHQUFpRyxHQUFHLFlBQVkseUNBQXlDLCtDQUErQyxhQUFhLCtCQUErQixLQUFLLEVBQUUsMEJBQTBCLElBQUksbUJBQW1CLElBQUksd0JBQXdCLElBQUksbUJBQW1CLElBQUksa0JBQWU7QUFDMWg4ViIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXNvbmljLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9zZGsvZGlzdC9ub2RlL2Nqcy9tZXRhbWFzay1zZGsuanM/YzYyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZT1yZXF1aXJlKFwiY3Jvc3MtZmV0Y2hcIiksdD1yZXF1aXJlKFwiZGVidWdcIiksbj1yZXF1aXJlKFwiYnVmZmVyXCIpLHI9cmVxdWlyZShcIm5vZGU6Y3J5cHRvXCIpLGk9cmVxdWlyZShcImV2ZW50ZW1pdHRlcjJcIiksbz1yZXF1aXJlKFwidXVpZFwiKSxzPXJlcXVpcmUoXCJzb2NrZXQuaW8tY2xpZW50XCIpLGE9cmVxdWlyZShcImV2ZW50c1wiKSxjPXJlcXVpcmUoXCJzdHJlYW1cIiksZD1yZXF1aXJlKFwidXRpbFwiKTtmdW5jdGlvbiBsKGUsdCxuLHIpe3JldHVybiBuZXcobnx8KG49UHJvbWlzZSkpKChmdW5jdGlvbihpLG8pe2Z1bmN0aW9uIHMoZSl7dHJ5e2Moci5uZXh0KGUpKX1jYXRjaChlKXtvKGUpfX1mdW5jdGlvbiBhKGUpe3RyeXtjKHIudGhyb3coZSkpfWNhdGNoKGUpe28oZSl9fWZ1bmN0aW9uIGMoZSl7dmFyIHQ7ZS5kb25lP2koZS52YWx1ZSk6KHQ9ZS52YWx1ZSx0IGluc3RhbmNlb2Ygbj90Om5ldyBuKChmdW5jdGlvbihlKXtlKHQpfSkpKS50aGVuKHMsYSl9Yygocj1yLmFwcGx5KGUsdHx8W10pKS5uZXh0KCkpfSkpfVwiZnVuY3Rpb25cIj09dHlwZW9mIFN1cHByZXNzZWRFcnJvciYmU3VwcHJlc3NlZEVycm9yO3ZhciB1PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp7fTtmdW5jdGlvbiBoKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGUmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGVmYXVsdFwiKT9lLmRlZmF1bHQ6ZX12YXIgZj17fSxwPXt9LG09e307ZnVuY3Rpb24gZyhlKXtpZighTnVtYmVyLmlzU2FmZUludGVnZXIoZSl8fGU8MCl0aHJvdyBuZXcgRXJyb3IoYHBvc2l0aXZlIGludGVnZXIgZXhwZWN0ZWQsIG5vdCAke2V9YCl9ZnVuY3Rpb24gdihlKXtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKGBib29sZWFuIGV4cGVjdGVkLCBub3QgJHtlfWApfWZ1bmN0aW9uIHkoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxudWxsIT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJVaW50OEFycmF5XCI9PT1lLmNvbnN0cnVjdG9yLm5hbWV9ZnVuY3Rpb24gRShlLC4uLnQpe2lmKCF5KGUpKXRocm93IG5ldyBFcnJvcihcIlVpbnQ4QXJyYXkgZXhwZWN0ZWRcIik7aWYodC5sZW5ndGg+MCYmIXQuaW5jbHVkZXMoZS5sZW5ndGgpKXRocm93IG5ldyBFcnJvcihgVWludDhBcnJheSBleHBlY3RlZCBvZiBsZW5ndGggJHt0fSwgbm90IG9mIGxlbmd0aD0ke2UubGVuZ3RofWApfWZ1bmN0aW9uIGIoZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZXx8XCJmdW5jdGlvblwiIT10eXBlb2YgZS5jcmVhdGUpdGhyb3cgbmV3IEVycm9yKFwiaGFzaCBtdXN0IGJlIHdyYXBwZWQgYnkgdXRpbHMud3JhcENvbnN0cnVjdG9yXCIpO2coZS5vdXRwdXRMZW4pLGcoZS5ibG9ja0xlbil9ZnVuY3Rpb24gdyhlLHQ9ITApe2lmKGUuZGVzdHJveWVkKXRocm93IG5ldyBFcnJvcihcIkhhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkXCIpO2lmKHQmJmUuZmluaXNoZWQpdGhyb3cgbmV3IEVycm9yKFwiSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZFwiKX1mdW5jdGlvbiBTKGUsdCl7RShlKTtjb25zdCBuPXQub3V0cHV0TGVuO2lmKGUubGVuZ3RoPG4pdGhyb3cgbmV3IEVycm9yKGBkaWdlc3RJbnRvKCkgZXhwZWN0cyBvdXRwdXQgYnVmZmVyIG9mIGxlbmd0aCBhdCBsZWFzdCAke259YCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KG0sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksbS5pc0J5dGVzPXksbS5udW1iZXI9ZyxtLmJvb2w9dixtLmJ5dGVzPUUsbS5oYXNoPWIsbS5leGlzdHM9dyxtLm91dHB1dD1TO2NvbnN0IF89e251bWJlcjpnLGJvb2w6dixieXRlczpFLGhhc2g6YixleGlzdHM6dyxvdXRwdXQ6U307bS5kZWZhdWx0PV8sZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS53cmFwQ2lwaGVyPWUuSGFzaD1lLm5leHRUaWNrPWUuaXNMRT1lLmNyZWF0ZVZpZXc9ZS51MzI9ZS51MTY9ZS51OD12b2lkIDAsZS5ieXRlc1RvSGV4PXIsZS5oZXhUb0J5dGVzPXMsZS5oZXhUb051bWJlcj1hLGUuYnl0ZXNUb051bWJlckJFPWZ1bmN0aW9uKGUpe3JldHVybiBhKHIoZSkpfSxlLm51bWJlclRvQnl0ZXNCRT1mdW5jdGlvbihlLHQpe3JldHVybiBzKGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIqdCxcIjBcIikpfSxlLmFzeW5jTG9vcD1hc3luYyBmdW5jdGlvbih0LG4scil7bGV0IGk9RGF0ZS5ub3coKTtmb3IobGV0IG89MDtvPHQ7bysrKXtyKG8pO2NvbnN0IHQ9RGF0ZS5ub3coKS1pO3Q+PTAmJnQ8bnx8KGF3YWl0KDAsZS5uZXh0VGljaykoKSxpKz10KX19LGUudXRmOFRvQnl0ZXM9YyxlLmJ5dGVzVG9VdGY4PWZ1bmN0aW9uKGUpe3JldHVybihuZXcgVGV4dERlY29kZXIpLmRlY29kZShlKX0sZS50b0J5dGVzPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKWU9YyhlKTtlbHNle2lmKCEoMCx0LmlzQnl0ZXMpKGUpKXRocm93IG5ldyBFcnJvcihcIlVpbnQ4QXJyYXkgZXhwZWN0ZWQsIGdvdCBcIit0eXBlb2YgZSk7ZT1sKGUpfXJldHVybiBlfSxlLmNvbmNhdEJ5dGVzPWZ1bmN0aW9uKC4uLmUpe2xldCBuPTA7Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKyspe2NvbnN0IGk9ZVtyXTsoMCx0LmJ5dGVzKShpKSxuKz1pLmxlbmd0aH1jb25zdCByPW5ldyBVaW50OEFycmF5KG4pO2ZvcihsZXQgdD0wLG49MDt0PGUubGVuZ3RoO3QrKyl7Y29uc3QgaT1lW3RdO3Iuc2V0KGksbiksbis9aS5sZW5ndGh9cmV0dXJuIHJ9LGUuY2hlY2tPcHRzPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09dHx8XCJvYmplY3RcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwib3B0aW9ucyBtdXN0IGJlIGRlZmluZWRcIik7cmV0dXJuIE9iamVjdC5hc3NpZ24oZSx0KX0sZS5lcXVhbEJ5dGVzPWZ1bmN0aW9uKGUsdCl7aWYoZS5sZW5ndGghPT10Lmxlbmd0aClyZXR1cm4hMTtsZXQgbj0wO2ZvcihsZXQgcj0wO3I8ZS5sZW5ndGg7cisrKW58PWVbcl1edFtyXTtyZXR1cm4gMD09PW59LGUuc2V0QmlnVWludDY0PWQsZS51NjRMZW5ndGhzPWZ1bmN0aW9uKHQsbil7Y29uc3Qgcj1uZXcgVWludDhBcnJheSgxNiksaT0oMCxlLmNyZWF0ZVZpZXcpKHIpO3JldHVybiBkKGksMCxCaWdJbnQobj9uLmxlbmd0aDowKSwhMCksZChpLDgsQmlnSW50KHQubGVuZ3RoKSwhMCkscn0sZS5pc0FsaWduZWQzMj1mdW5jdGlvbihlKXtyZXR1cm4gZS5ieXRlT2Zmc2V0JTQ9PTB9LGUuY29weUJ5dGVzPWwsZS5jbGVhbj1mdW5jdGlvbiguLi5lKXtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLmZpbGwoMCl9O2NvbnN0IHQ9bTtlLnU4PWU9Pm5ldyBVaW50OEFycmF5KGUuYnVmZmVyLGUuYnl0ZU9mZnNldCxlLmJ5dGVMZW5ndGgpO2UudTE2PWU9Pm5ldyBVaW50MTZBcnJheShlLmJ1ZmZlcixlLmJ5dGVPZmZzZXQsTWF0aC5mbG9vcihlLmJ5dGVMZW5ndGgvMikpO2UudTMyPWU9Pm5ldyBVaW50MzJBcnJheShlLmJ1ZmZlcixlLmJ5dGVPZmZzZXQsTWF0aC5mbG9vcihlLmJ5dGVMZW5ndGgvNCkpO2lmKGUuY3JlYXRlVmlldz1lPT5uZXcgRGF0YVZpZXcoZS5idWZmZXIsZS5ieXRlT2Zmc2V0LGUuYnl0ZUxlbmd0aCksZS5pc0xFPTY4PT09bmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQzMkFycmF5KFsyODc0NTQwMjBdKS5idWZmZXIpWzBdLCFlLmlzTEUpdGhyb3cgbmV3IEVycm9yKFwiTm9uIGxpdHRsZS1lbmRpYW4gaGFyZHdhcmUgaXMgbm90IHN1cHBvcnRlZFwiKTtjb25zdCBuPUFycmF5LmZyb20oe2xlbmd0aDoyNTZ9LCgoZSx0KT0+dC50b1N0cmluZygxNikucGFkU3RhcnQoMixcIjBcIikpKTtmdW5jdGlvbiByKGUpeygwLHQuYnl0ZXMpKGUpO2xldCByPVwiXCI7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspcis9bltlW3RdXTtyZXR1cm4gcn1jb25zdCBpPXtfMDo0OCxfOTo1NyxfQTo2NSxfRjo3MCxfYTo5NyxfZjoxMDJ9O2Z1bmN0aW9uIG8oZSl7cmV0dXJuIGU+PWkuXzAmJmU8PWkuXzk/ZS1pLl8wOmU+PWkuX0EmJmU8PWkuX0Y/ZS0oaS5fQS0xMCk6ZT49aS5fYSYmZTw9aS5fZj9lLShpLl9hLTEwKTp2b2lkIDB9ZnVuY3Rpb24gcyhlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgXCIrdHlwZW9mIGUpO2NvbnN0IHQ9ZS5sZW5ndGgsbj10LzI7aWYodCUyKXRocm93IG5ldyBFcnJvcihcInBhZGRlZCBoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgdW5wYWRkZWQgaGV4IG9mIGxlbmd0aCBcIit0KTtjb25zdCByPW5ldyBVaW50OEFycmF5KG4pO2ZvcihsZXQgdD0wLGk9MDt0PG47dCsrLGkrPTIpe2NvbnN0IG49byhlLmNoYXJDb2RlQXQoaSkpLHM9byhlLmNoYXJDb2RlQXQoaSsxKSk7aWYodm9pZCAwPT09bnx8dm9pZCAwPT09cyl7Y29uc3QgdD1lW2ldK2VbaSsxXTt0aHJvdyBuZXcgRXJyb3IoJ2hleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCBub24taGV4IGNoYXJhY3RlciBcIicrdCsnXCIgYXQgaW5kZXggJytpKX1yW3RdPTE2Km4rc31yZXR1cm4gcn1mdW5jdGlvbiBhKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcImhleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCBcIit0eXBlb2YgZSk7cmV0dXJuIEJpZ0ludChcIlwiPT09ZT9cIjBcIjpgMHgke2V9YCl9ZnVuY3Rpb24gYyhlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJzdHJpbmcgZXhwZWN0ZWQsIGdvdCBcIit0eXBlb2YgZSk7cmV0dXJuIG5ldyBVaW50OEFycmF5KChuZXcgVGV4dEVuY29kZXIpLmVuY29kZShlKSl9ZS5uZXh0VGljaz1hc3luYygpPT57fTtlLkhhc2g9Y2xhc3N7fTtmdW5jdGlvbiBkKGUsdCxuLHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuc2V0QmlnVWludDY0KXJldHVybiBlLnNldEJpZ1VpbnQ2NCh0LG4scik7Y29uc3QgaT1CaWdJbnQoMzIpLG89QmlnSW50KDQyOTQ5NjcyOTUpLHM9TnVtYmVyKG4+PmkmbyksYT1OdW1iZXIobiZvKSxjPXI/NDowLGQ9cj8wOjQ7ZS5zZXRVaW50MzIodCtjLHMsciksZS5zZXRVaW50MzIodCtkLGEscil9ZnVuY3Rpb24gbChlKXtyZXR1cm4gVWludDhBcnJheS5mcm9tKGUpfWUud3JhcENpcGhlcj0oZSx0KT0+KE9iamVjdC5hc3NpZ24odCxlKSx0KX0ocCk7dmFyIEM9e30seD17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoeCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx4LkFFQURfVEFHX0xFTkdUSD14LlhDSEFDSEEyMF9OT05DRV9MRU5HVEg9eC5DVVJWRTI1NTE5X1BVQkxJQ19LRVlfU0laRT14LkVUSF9QVUJMSUNfS0VZX1NJWkU9eC5VTkNPTVBSRVNTRURfUFVCTElDX0tFWV9TSVpFPXguQ09NUFJFU1NFRF9QVUJMSUNfS0VZX1NJWkU9eC5TRUNSRVRfS0VZX0xFTkdUSD12b2lkIDAseC5TRUNSRVRfS0VZX0xFTkdUSD0zMix4LkNPTVBSRVNTRURfUFVCTElDX0tFWV9TSVpFPTMzLHguVU5DT01QUkVTU0VEX1BVQkxJQ19LRVlfU0laRT02NSx4LkVUSF9QVUJMSUNfS0VZX1NJWkU9NjQseC5DVVJWRTI1NTE5X1BVQkxJQ19LRVlfU0laRT0zMix4LlhDSEFDSEEyMF9OT05DRV9MRU5HVEg9MjQseC5BRUFEX1RBR19MRU5HVEg9MTYsZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5lcGhlbWVyYWxLZXlTaXplPWUuc3ltbWV0cmljTm9uY2VMZW5ndGg9ZS5zeW1tZXRyaWNBbGdvcml0aG09ZS5pc0hrZGZLZXlDb21wcmVzc2VkPWUuaXNFcGhlbWVyYWxLZXlDb21wcmVzc2VkPWUuZWxsaXB0aWNDdXJ2ZT1lLkVDSUVTX0NPTkZJRz12b2lkIDA7dmFyIHQ9eCxuPWZ1bmN0aW9uKCl7dGhpcy5lbGxpcHRpY0N1cnZlPVwic2VjcDI1NmsxXCIsdGhpcy5pc0VwaGVtZXJhbEtleUNvbXByZXNzZWQ9ITEsdGhpcy5pc0hrZGZLZXlDb21wcmVzc2VkPSExLHRoaXMuc3ltbWV0cmljQWxnb3JpdGhtPVwiYWVzLTI1Ni1nY21cIix0aGlzLnN5bW1ldHJpY05vbmNlTGVuZ3RoPTE2fTtlLkVDSUVTX0NPTkZJRz1uZXcgbjtlLmVsbGlwdGljQ3VydmU9ZnVuY3Rpb24oKXtyZXR1cm4gZS5FQ0lFU19DT05GSUcuZWxsaXB0aWNDdXJ2ZX07ZS5pc0VwaGVtZXJhbEtleUNvbXByZXNzZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZS5FQ0lFU19DT05GSUcuaXNFcGhlbWVyYWxLZXlDb21wcmVzc2VkfTtlLmlzSGtkZktleUNvbXByZXNzZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZS5FQ0lFU19DT05GSUcuaXNIa2RmS2V5Q29tcHJlc3NlZH07ZS5zeW1tZXRyaWNBbGdvcml0aG09ZnVuY3Rpb24oKXtyZXR1cm4gZS5FQ0lFU19DT05GSUcuc3ltbWV0cmljQWxnb3JpdGhtfTtlLnN5bW1ldHJpY05vbmNlTGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIGUuRUNJRVNfQ09ORklHLnN5bW1ldHJpY05vbmNlTGVuZ3RofTtlLmVwaGVtZXJhbEtleVNpemU9ZnVuY3Rpb24oKXt2YXIgbj17c2VjcDI1NmsxOmUuRUNJRVNfQ09ORklHLmlzRXBoZW1lcmFsS2V5Q29tcHJlc3NlZD90LkNPTVBSRVNTRURfUFVCTElDX0tFWV9TSVpFOnQuVU5DT01QUkVTU0VEX1BVQkxJQ19LRVlfU0laRSx4MjU1MTk6dC5DVVJWRTI1NTE5X1BVQkxJQ19LRVlfU0laRSxlZDI1NTE5OnQuQ1VSVkUyNTUxOV9QVUJMSUNfS0VZX1NJWkV9O2lmKGUuRUNJRVNfQ09ORklHLmVsbGlwdGljQ3VydmUgaW4gbilyZXR1cm4gbltlLkVDSUVTX0NPTkZJRy5lbGxpcHRpY0N1cnZlXTt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIil9fShDKTt2YXIgaz17fSxNPXt9LEE9e30sVD17fSxJPXt9LFA9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFAsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksUC5jcnlwdG89dm9pZCAwO2NvbnN0IFI9cjtQLmNyeXB0bz1SJiZcIm9iamVjdFwiPT10eXBlb2YgUiYmXCJ3ZWJjcnlwdG9cImluIFI/Ui53ZWJjcnlwdG86UiYmXCJvYmplY3RcIj09dHlwZW9mIFImJlwicmFuZG9tQnl0ZXNcImluIFI/Ujp2b2lkIDAsZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5nY209ZS5jdHI9ZS5jYmM9ZS51dGlscz12b2lkIDAsZS5yYW5kb21CeXRlcz1pLGUuZ2V0V2ViY3J5cHRvU3VidGxlPW8sZS5tYW5hZ2VkTm9uY2U9ZnVuY3Rpb24oZSl7cmV0dXJuKDAsbi5udW1iZXIpKGUubm9uY2VMZW5ndGgpLCh0LC4uLm4pPT4oe2VuY3J5cHQobywuLi5zKXtjb25zdHtub25jZUxlbmd0aDphfT1lLGM9aShhKSxkPWUodCxjLC4uLm4pLmVuY3J5cHQobywuLi5zKSxsPSgwLHIuY29uY2F0Qnl0ZXMpKGMsZCk7cmV0dXJuIGQuZmlsbCgwKSxsfSxkZWNyeXB0KHIsLi4uaSl7Y29uc3R7bm9uY2VMZW5ndGg6b309ZSxzPXIuc3ViYXJyYXkoMCxvKSxhPXIuc3ViYXJyYXkobyk7cmV0dXJuIGUodCxzLC4uLm4pLmRlY3J5cHQoYSwuLi5pKX19KX07Y29uc3QgdD1QLG49bSxyPXA7ZnVuY3Rpb24gaShlPTMyKXtpZih0LmNyeXB0byYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKXJldHVybiB0LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoZSkpO2lmKHQuY3J5cHRvJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNyeXB0by5yYW5kb21CeXRlcylyZXR1cm4gdC5jcnlwdG8ucmFuZG9tQnl0ZXMoZSk7dGhyb3cgbmV3IEVycm9yKFwiY3J5cHRvLmdldFJhbmRvbVZhbHVlcyBtdXN0IGJlIGRlZmluZWRcIil9ZnVuY3Rpb24gbygpe2lmKHQuY3J5cHRvJiZcIm9iamVjdFwiPT10eXBlb2YgdC5jcnlwdG8uc3VidGxlJiZudWxsIT10LmNyeXB0by5zdWJ0bGUpcmV0dXJuIHQuY3J5cHRvLnN1YnRsZTt0aHJvdyBuZXcgRXJyb3IoXCJjcnlwdG8uc3VidGxlIG11c3QgYmUgZGVmaW5lZFwiKX1lLnV0aWxzPXthc3luYyBlbmNyeXB0KGUsdCxuLHIpe2NvbnN0IGk9bygpLHM9YXdhaXQgaS5pbXBvcnRLZXkoXCJyYXdcIixlLHQsITAsW1wiZW5jcnlwdFwiXSksYT1hd2FpdCBpLmVuY3J5cHQobixzLHIpO3JldHVybiBuZXcgVWludDhBcnJheShhKX0sYXN5bmMgZGVjcnlwdChlLHQsbixyKXtjb25zdCBpPW8oKSxzPWF3YWl0IGkuaW1wb3J0S2V5KFwicmF3XCIsZSx0LCEwLFtcImRlY3J5cHRcIl0pLGE9YXdhaXQgaS5kZWNyeXB0KG4scyxyKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYSl9fTtjb25zdCBzPXtDQkM6XCJBRVMtQ0JDXCIsQ1RSOlwiQUVTLUNUUlwiLEdDTTpcIkFFUy1HQ01cIn07ZnVuY3Rpb24gYSh0KXtyZXR1cm4ocixpLG8pPT57KDAsbi5ieXRlcykociksKDAsbi5ieXRlcykoaSk7Y29uc3QgYT17bmFtZTp0LGxlbmd0aDo4KnIubGVuZ3RofSxjPWZ1bmN0aW9uKGUsdCxuKXtpZihlPT09cy5DQkMpcmV0dXJue25hbWU6cy5DQkMsaXY6dH07aWYoZT09PXMuQ1RSKXJldHVybntuYW1lOnMuQ1RSLGNvdW50ZXI6dCxsZW5ndGg6NjR9O2lmKGU9PT1zLkdDTSlyZXR1cm4gbj97bmFtZTpzLkdDTSxpdjp0LGFkZGl0aW9uYWxEYXRhOm59OntuYW1lOnMuR0NNLGl2OnR9O3Rocm93IG5ldyBFcnJvcihcInVua25vd24gYWVzIGJsb2NrIG1vZGVcIil9KHQsaSxvKTtyZXR1cm57ZW5jcnlwdDp0PT4oKDAsbi5ieXRlcykodCksZS51dGlscy5lbmNyeXB0KHIsYSxjLHQpKSxkZWNyeXB0OnQ9PigoMCxuLmJ5dGVzKSh0KSxlLnV0aWxzLmRlY3J5cHQocixhLGMsdCkpfX19ZS5jYmM9YShzLkNCQyksZS5jdHI9YShzLkNUUiksZS5nY209YShzLkdDTSl9KEkpO3ZhciBPPXt9LE49e30sRD17fSxMPXt9O2Z1bmN0aW9uIEIoZSl7aWYoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGUpfHxlPDApdGhyb3cgbmV3IEVycm9yKGBwb3NpdGl2ZSBpbnRlZ2VyIGV4cGVjdGVkLCBub3QgJHtlfWApfWZ1bmN0aW9uIEsoZSl7aWYoXCJib29sZWFuXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihgYm9vbGVhbiBleHBlY3RlZCwgbm90ICR7ZX1gKX1mdW5jdGlvbiBqKGUpe3JldHVybiBlIGluc3RhbmNlb2YgVWludDhBcnJheXx8bnVsbCE9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwiVWludDhBcnJheVwiPT09ZS5jb25zdHJ1Y3Rvci5uYW1lfWZ1bmN0aW9uICQoZSwuLi50KXtpZighaihlKSl0aHJvdyBuZXcgRXJyb3IoXCJVaW50OEFycmF5IGV4cGVjdGVkXCIpO2lmKHQubGVuZ3RoPjAmJiF0LmluY2x1ZGVzKGUubGVuZ3RoKSl0aHJvdyBuZXcgRXJyb3IoYFVpbnQ4QXJyYXkgZXhwZWN0ZWQgb2YgbGVuZ3RoICR7dH0sIG5vdCBvZiBsZW5ndGg9JHtlLmxlbmd0aH1gKX1mdW5jdGlvbiBIKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGV8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUuY3JlYXRlKXRocm93IG5ldyBFcnJvcihcIkhhc2ggc2hvdWxkIGJlIHdyYXBwZWQgYnkgdXRpbHMud3JhcENvbnN0cnVjdG9yXCIpO0IoZS5vdXRwdXRMZW4pLEIoZS5ibG9ja0xlbil9ZnVuY3Rpb24gVShlLHQ9ITApe2lmKGUuZGVzdHJveWVkKXRocm93IG5ldyBFcnJvcihcIkhhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkXCIpO2lmKHQmJmUuZmluaXNoZWQpdGhyb3cgbmV3IEVycm9yKFwiSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZFwiKX1mdW5jdGlvbiBGKGUsdCl7JChlKTtjb25zdCBuPXQub3V0cHV0TGVuO2lmKGUubGVuZ3RoPG4pdGhyb3cgbmV3IEVycm9yKGBkaWdlc3RJbnRvKCkgZXhwZWN0cyBvdXRwdXQgYnVmZmVyIG9mIGxlbmd0aCBhdCBsZWFzdCAke259YCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KEwsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksTC5pc0J5dGVzPWosTC5udW1iZXI9QixMLmJvb2w9SyxMLmJ5dGVzPSQsTC5oYXNoPUgsTC5leGlzdHM9VSxMLm91dHB1dD1GO2NvbnN0IHE9e251bWJlcjpCLGJvb2w6SyxieXRlczokLGhhc2g6SCxleGlzdHM6VSxvdXRwdXQ6Rn07TC5kZWZhdWx0PXE7dmFyIHo9e30sVz17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoVyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxXLmNyeXB0bz12b2lkIDA7Y29uc3QgVj1yO1cuY3J5cHRvPVYmJlwib2JqZWN0XCI9PXR5cGVvZiBWJiZcIndlYmNyeXB0b1wiaW4gVj9WLndlYmNyeXB0bzpWJiZcIm9iamVjdFwiPT10eXBlb2YgViYmXCJyYW5kb21CeXRlc1wiaW4gVj9WOnZvaWQgMCxmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLkhhc2g9ZS5uZXh0VGljaz1lLmJ5dGVTd2FwSWZCRT1lLmJ5dGVTd2FwPWUuaXNMRT1lLnJvdGw9ZS5yb3RyPWUuY3JlYXRlVmlldz1lLnUzMj1lLnU4PXZvaWQgMCxlLmlzQnl0ZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxudWxsIT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJVaW50OEFycmF5XCI9PT1lLmNvbnN0cnVjdG9yLm5hbWV9LGUuYnl0ZVN3YXAzMj1mdW5jdGlvbih0KXtmb3IobGV0IG49MDtuPHQubGVuZ3RoO24rKyl0W25dPSgwLGUuYnl0ZVN3YXApKHRbbl0pfSxlLmJ5dGVzVG9IZXg9ZnVuY3Rpb24oZSl7KDAsbi5ieXRlcykoZSk7bGV0IHQ9XCJcIjtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl0Kz1yW2Vbbl1dO3JldHVybiB0fSxlLmhleFRvQnl0ZXM9ZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwiaGV4IHN0cmluZyBleHBlY3RlZCwgZ290IFwiK3R5cGVvZiBlKTtjb25zdCB0PWUubGVuZ3RoLG49dC8yO2lmKHQlMil0aHJvdyBuZXcgRXJyb3IoXCJwYWRkZWQgaGV4IHN0cmluZyBleHBlY3RlZCwgZ290IHVucGFkZGVkIGhleCBvZiBsZW5ndGggXCIrdCk7Y29uc3Qgcj1uZXcgVWludDhBcnJheShuKTtmb3IobGV0IHQ9MCxpPTA7dDxuO3QrKyxpKz0yKXtjb25zdCBuPW8oZS5jaGFyQ29kZUF0KGkpKSxzPW8oZS5jaGFyQ29kZUF0KGkrMSkpO2lmKHZvaWQgMD09PW58fHZvaWQgMD09PXMpe2NvbnN0IHQ9ZVtpXStlW2krMV07dGhyb3cgbmV3IEVycm9yKCdoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3Qgbm9uLWhleCBjaGFyYWN0ZXIgXCInK3QrJ1wiIGF0IGluZGV4ICcraSl9clt0XT0xNipuK3N9cmV0dXJuIHJ9LGUuYXN5bmNMb29wPWFzeW5jIGZ1bmN0aW9uKHQsbixyKXtsZXQgaT1EYXRlLm5vdygpO2ZvcihsZXQgbz0wO288dDtvKyspe3Iobyk7Y29uc3QgdD1EYXRlLm5vdygpLWk7dD49MCYmdDxufHwoYXdhaXQoMCxlLm5leHRUaWNrKSgpLGkrPXQpfX0sZS51dGY4VG9CeXRlcz1zLGUudG9CeXRlcz1hLGUuY29uY2F0Qnl0ZXM9ZnVuY3Rpb24oLi4uZSl7bGV0IHQ9MDtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl7Y29uc3QgaT1lW3JdOygwLG4uYnl0ZXMpKGkpLHQrPWkubGVuZ3RofWNvbnN0IHI9bmV3IFVpbnQ4QXJyYXkodCk7Zm9yKGxldCB0PTAsbj0wO3Q8ZS5sZW5ndGg7dCsrKXtjb25zdCBpPWVbdF07ci5zZXQoaSxuKSxuKz1pLmxlbmd0aH1yZXR1cm4gcn0sZS5jaGVja09wdHM9ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDAhPT10JiZcIltvYmplY3QgT2JqZWN0XVwiIT09Yy5jYWxsKHQpKXRocm93IG5ldyBFcnJvcihcIk9wdGlvbnMgc2hvdWxkIGJlIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIE9iamVjdC5hc3NpZ24oZSx0KX0sZS53cmFwQ29uc3RydWN0b3I9ZnVuY3Rpb24oZSl7Y29uc3QgdD10PT5lKCkudXBkYXRlKGEodCkpLmRpZ2VzdCgpLG49ZSgpO3JldHVybiB0Lm91dHB1dExlbj1uLm91dHB1dExlbix0LmJsb2NrTGVuPW4uYmxvY2tMZW4sdC5jcmVhdGU9KCk9PmUoKSx0fSxlLndyYXBDb25zdHJ1Y3RvcldpdGhPcHRzPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9KHQsbik9PmUobikudXBkYXRlKGEodCkpLmRpZ2VzdCgpLG49ZSh7fSk7cmV0dXJuIHQub3V0cHV0TGVuPW4ub3V0cHV0TGVuLHQuYmxvY2tMZW49bi5ibG9ja0xlbix0LmNyZWF0ZT10PT5lKHQpLHR9LGUud3JhcFhPRkNvbnN0cnVjdG9yV2l0aE9wdHM9ZnVuY3Rpb24oZSl7Y29uc3QgdD0odCxuKT0+ZShuKS51cGRhdGUoYSh0KSkuZGlnZXN0KCksbj1lKHt9KTtyZXR1cm4gdC5vdXRwdXRMZW49bi5vdXRwdXRMZW4sdC5ibG9ja0xlbj1uLmJsb2NrTGVuLHQuY3JlYXRlPXQ9PmUodCksdH0sZS5yYW5kb21CeXRlcz1mdW5jdGlvbihlPTMyKXtpZih0LmNyeXB0byYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKXJldHVybiB0LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoZSkpO2lmKHQuY3J5cHRvJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNyeXB0by5yYW5kb21CeXRlcylyZXR1cm4gdC5jcnlwdG8ucmFuZG9tQnl0ZXMoZSk7dGhyb3cgbmV3IEVycm9yKFwiY3J5cHRvLmdldFJhbmRvbVZhbHVlcyBtdXN0IGJlIGRlZmluZWRcIil9O2NvbnN0IHQ9VyxuPUw7ZS51OD1lPT5uZXcgVWludDhBcnJheShlLmJ1ZmZlcixlLmJ5dGVPZmZzZXQsZS5ieXRlTGVuZ3RoKTtlLnUzMj1lPT5uZXcgVWludDMyQXJyYXkoZS5idWZmZXIsZS5ieXRlT2Zmc2V0LE1hdGguZmxvb3IoZS5ieXRlTGVuZ3RoLzQpKTtlLmNyZWF0ZVZpZXc9ZT0+bmV3IERhdGFWaWV3KGUuYnVmZmVyLGUuYnl0ZU9mZnNldCxlLmJ5dGVMZW5ndGgpO2Uucm90cj0oZSx0KT0+ZTw8MzItdHxlPj4+dDtlLnJvdGw9KGUsdCk9PmU8PHR8ZT4+PjMyLXQ+Pj4wLGUuaXNMRT02OD09PW5ldyBVaW50OEFycmF5KG5ldyBVaW50MzJBcnJheShbMjg3NDU0MDIwXSkuYnVmZmVyKVswXTtlLmJ5dGVTd2FwPWU9PmU8PDI0JjQyNzgxOTAwODB8ZTw8OCYxNjcxMTY4MHxlPj4+OCY2NTI4MHxlPj4+MjQmMjU1LGUuYnl0ZVN3YXBJZkJFPWUuaXNMRT9lPT5lOnQ9PigwLGUuYnl0ZVN3YXApKHQpO2NvbnN0IHI9QXJyYXkuZnJvbSh7bGVuZ3RoOjI1Nn0sKChlLHQpPT50LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLFwiMFwiKSkpO2NvbnN0IGk9e18wOjQ4LF85OjU3LF9BOjY1LF9GOjcwLF9hOjk3LF9mOjEwMn07ZnVuY3Rpb24gbyhlKXtyZXR1cm4gZT49aS5fMCYmZTw9aS5fOT9lLWkuXzA6ZT49aS5fQSYmZTw9aS5fRj9lLShpLl9BLTEwKTplPj1pLl9hJiZlPD1pLl9mP2UtKGkuX2EtMTApOnZvaWQgMH1mdW5jdGlvbiBzKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcInV0ZjhUb0J5dGVzIGV4cGVjdGVkIHN0cmluZywgZ290IFwiK3R5cGVvZiBlKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoKG5ldyBUZXh0RW5jb2RlcikuZW5jb2RlKGUpKX1mdW5jdGlvbiBhKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1zKGUpKSwoMCxuLmJ5dGVzKShlKSxlfWUubmV4dFRpY2s9YXN5bmMoKT0+e307ZS5IYXNoPWNsYXNze2Nsb25lKCl7cmV0dXJuIHRoaXMuX2Nsb25lSW50bygpfX07Y29uc3QgYz17fS50b1N0cmluZ30oeiksT2JqZWN0LmRlZmluZVByb3BlcnR5KEQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksRC5IYXNoTUQ9RC5NYWo9RC5DaGk9dm9pZCAwO2NvbnN0IEc9TCxZPXo7RC5DaGk9KGUsdCxuKT0+ZSZ0Xn5lJm47RC5NYWo9KGUsdCxuKT0+ZSZ0XmUmbl50Jm47RC5IYXNoTUQ9Y2xhc3MgZXh0ZW5kcyBZLkhhc2h7Y29uc3RydWN0b3IoZSx0LG4scil7c3VwZXIoKSx0aGlzLmJsb2NrTGVuPWUsdGhpcy5vdXRwdXRMZW49dCx0aGlzLnBhZE9mZnNldD1uLHRoaXMuaXNMRT1yLHRoaXMuZmluaXNoZWQ9ITEsdGhpcy5sZW5ndGg9MCx0aGlzLnBvcz0wLHRoaXMuZGVzdHJveWVkPSExLHRoaXMuYnVmZmVyPW5ldyBVaW50OEFycmF5KGUpLHRoaXMudmlldz0oMCxZLmNyZWF0ZVZpZXcpKHRoaXMuYnVmZmVyKX11cGRhdGUoZSl7KDAsRy5leGlzdHMpKHRoaXMpO2NvbnN0e3ZpZXc6dCxidWZmZXI6bixibG9ja0xlbjpyfT10aGlzLGk9KGU9KDAsWS50b0J5dGVzKShlKSkubGVuZ3RoO2ZvcihsZXQgbz0wO288aTspe2NvbnN0IHM9TWF0aC5taW4oci10aGlzLnBvcyxpLW8pO2lmKHMhPT1yKW4uc2V0KGUuc3ViYXJyYXkobyxvK3MpLHRoaXMucG9zKSx0aGlzLnBvcys9cyxvKz1zLHRoaXMucG9zPT09ciYmKHRoaXMucHJvY2Vzcyh0LDApLHRoaXMucG9zPTApO2Vsc2V7Y29uc3QgdD0oMCxZLmNyZWF0ZVZpZXcpKGUpO2Zvcig7cjw9aS1vO28rPXIpdGhpcy5wcm9jZXNzKHQsbyl9fXJldHVybiB0aGlzLmxlbmd0aCs9ZS5sZW5ndGgsdGhpcy5yb3VuZENsZWFuKCksdGhpc31kaWdlc3RJbnRvKGUpeygwLEcuZXhpc3RzKSh0aGlzKSwoMCxHLm91dHB1dCkoZSx0aGlzKSx0aGlzLmZpbmlzaGVkPSEwO2NvbnN0e2J1ZmZlcjp0LHZpZXc6bixibG9ja0xlbjpyLGlzTEU6aX09dGhpcztsZXR7cG9zOm99PXRoaXM7dFtvKytdPTEyOCx0aGlzLmJ1ZmZlci5zdWJhcnJheShvKS5maWxsKDApLHRoaXMucGFkT2Zmc2V0PnItbyYmKHRoaXMucHJvY2VzcyhuLDApLG89MCk7Zm9yKGxldCBlPW87ZTxyO2UrKyl0W2VdPTA7IWZ1bmN0aW9uKGUsdCxuLHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuc2V0QmlnVWludDY0KXJldHVybiBlLnNldEJpZ1VpbnQ2NCh0LG4scik7Y29uc3QgaT1CaWdJbnQoMzIpLG89QmlnSW50KDQyOTQ5NjcyOTUpLHM9TnVtYmVyKG4+PmkmbyksYT1OdW1iZXIobiZvKSxjPXI/NDowLGQ9cj8wOjQ7ZS5zZXRVaW50MzIodCtjLHMsciksZS5zZXRVaW50MzIodCtkLGEscil9KG4sci04LEJpZ0ludCg4KnRoaXMubGVuZ3RoKSxpKSx0aGlzLnByb2Nlc3MobiwwKTtjb25zdCBzPSgwLFkuY3JlYXRlVmlldykoZSksYT10aGlzLm91dHB1dExlbjtpZihhJTQpdGhyb3cgbmV3IEVycm9yKFwiX3NoYTI6IG91dHB1dExlbiBzaG91bGQgYmUgYWxpZ25lZCB0byAzMmJpdFwiKTtjb25zdCBjPWEvNCxkPXRoaXMuZ2V0KCk7aWYoYz5kLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJfc2hhMjogb3V0cHV0TGVuIGJpZ2dlciB0aGFuIHN0YXRlXCIpO2ZvcihsZXQgZT0wO2U8YztlKyspcy5zZXRVaW50MzIoNCplLGRbZV0saSl9ZGlnZXN0KCl7Y29uc3R7YnVmZmVyOmUsb3V0cHV0TGVuOnR9PXRoaXM7dGhpcy5kaWdlc3RJbnRvKGUpO2NvbnN0IG49ZS5zbGljZSgwLHQpO3JldHVybiB0aGlzLmRlc3Ryb3koKSxufV9jbG9uZUludG8oZSl7ZXx8KGU9bmV3IHRoaXMuY29uc3RydWN0b3IpLGUuc2V0KC4uLnRoaXMuZ2V0KCkpO2NvbnN0e2Jsb2NrTGVuOnQsYnVmZmVyOm4sbGVuZ3RoOnIsZmluaXNoZWQ6aSxkZXN0cm95ZWQ6byxwb3M6c309dGhpcztyZXR1cm4gZS5sZW5ndGg9cixlLnBvcz1zLGUuZmluaXNoZWQ9aSxlLmRlc3Ryb3llZD1vLHIldCYmZS5idWZmZXIuc2V0KG4pLGV9fTt2YXIgWj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoWixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxaLmFkZDVMPVouYWRkNUg9Wi5hZGQ0SD1aLmFkZDRMPVouYWRkM0g9Wi5hZGQzTD1aLnJvdGxCTD1aLnJvdGxCSD1aLnJvdGxTTD1aLnJvdGxTSD1aLnJvdHIzMkw9Wi5yb3RyMzJIPVoucm90ckJMPVoucm90ckJIPVoucm90clNMPVoucm90clNIPVouc2hyU0w9Wi5zaHJTSD1aLnRvQmlnPXZvaWQgMCxaLmZyb21CaWc9WCxaLnNwbGl0PWVlLFouYWRkPXBlO2NvbnN0IEo9QmlnSW50KDIqKjMyLTEpLFE9QmlnSW50KDMyKTtmdW5jdGlvbiBYKGUsdD0hMSl7cmV0dXJuIHQ/e2g6TnVtYmVyKGUmSiksbDpOdW1iZXIoZT4+USZKKX06e2g6MHxOdW1iZXIoZT4+USZKKSxsOjB8TnVtYmVyKGUmSil9fWZ1bmN0aW9uIGVlKGUsdD0hMSl7bGV0IG49bmV3IFVpbnQzMkFycmF5KGUubGVuZ3RoKSxyPW5ldyBVaW50MzJBcnJheShlLmxlbmd0aCk7Zm9yKGxldCBpPTA7aTxlLmxlbmd0aDtpKyspe2NvbnN0e2g6byxsOnN9PVgoZVtpXSx0KTtbbltpXSxyW2ldXT1bbyxzXX1yZXR1cm5bbixyXX1jb25zdCB0ZT0oZSx0KT0+QmlnSW50KGU+Pj4wKTw8UXxCaWdJbnQodD4+PjApO1oudG9CaWc9dGU7Y29uc3QgbmU9KGUsdCxuKT0+ZT4+Pm47Wi5zaHJTSD1uZTtjb25zdCByZT0oZSx0LG4pPT5lPDwzMi1ufHQ+Pj5uO1ouc2hyU0w9cmU7Y29uc3QgaWU9KGUsdCxuKT0+ZT4+Pm58dDw8MzItbjtaLnJvdHJTSD1pZTtjb25zdCBvZT0oZSx0LG4pPT5lPDwzMi1ufHQ+Pj5uO1oucm90clNMPW9lO2NvbnN0IHNlPShlLHQsbik9PmU8PDY0LW58dD4+Pm4tMzI7Wi5yb3RyQkg9c2U7Y29uc3QgYWU9KGUsdCxuKT0+ZT4+Pm4tMzJ8dDw8NjQtbjtaLnJvdHJCTD1hZTtjb25zdCBjZT0oZSx0KT0+dDtaLnJvdHIzMkg9Y2U7Y29uc3QgZGU9KGUsdCk9PmU7Wi5yb3RyMzJMPWRlO2NvbnN0IGxlPShlLHQsbik9PmU8PG58dD4+PjMyLW47Wi5yb3RsU0g9bGU7Y29uc3QgdWU9KGUsdCxuKT0+dDw8bnxlPj4+MzItbjtaLnJvdGxTTD11ZTtjb25zdCBoZT0oZSx0LG4pPT50PDxuLTMyfGU+Pj42NC1uO1oucm90bEJIPWhlO2NvbnN0IGZlPShlLHQsbik9PmU8PG4tMzJ8dD4+PjY0LW47ZnVuY3Rpb24gcGUoZSx0LG4scil7Y29uc3QgaT0odD4+PjApKyhyPj4+MCk7cmV0dXJue2g6ZStuKyhpLzIqKjMyfDApfDAsbDowfGl9fVoucm90bEJMPWZlO2NvbnN0IG1lPShlLHQsbik9PihlPj4+MCkrKHQ+Pj4wKSsobj4+PjApO1ouYWRkM0w9bWU7Y29uc3QgZ2U9KGUsdCxuLHIpPT50K24rcisoZS8yKiozMnwwKXwwO1ouYWRkM0g9Z2U7Y29uc3QgdmU9KGUsdCxuLHIpPT4oZT4+PjApKyh0Pj4+MCkrKG4+Pj4wKSsocj4+PjApO1ouYWRkNEw9dmU7Y29uc3QgeWU9KGUsdCxuLHIsaSk9PnQrbityK2krKGUvMioqMzJ8MCl8MDtaLmFkZDRIPXllO2NvbnN0IEVlPShlLHQsbixyLGkpPT4oZT4+PjApKyh0Pj4+MCkrKG4+Pj4wKSsocj4+PjApKyhpPj4+MCk7Wi5hZGQ1TD1FZTtjb25zdCBiZT0oZSx0LG4scixpLG8pPT50K24rcitpK28rKGUvMioqMzJ8MCl8MDtaLmFkZDVIPWJlO2NvbnN0IHdlPXtmcm9tQmlnOlgsc3BsaXQ6ZWUsdG9CaWc6dGUsc2hyU0g6bmUsc2hyU0w6cmUscm90clNIOmllLHJvdHJTTDpvZSxyb3RyQkg6c2Uscm90ckJMOmFlLHJvdHIzMkg6Y2Uscm90cjMyTDpkZSxyb3RsU0g6bGUscm90bFNMOnVlLHJvdGxCSDpoZSxyb3RsQkw6ZmUsYWRkOnBlLGFkZDNMOm1lLGFkZDNIOmdlLGFkZDRMOnZlLGFkZDRIOnllLGFkZDVIOmJlLGFkZDVMOkVlfTtaLmRlZmF1bHQ9d2UsT2JqZWN0LmRlZmluZVByb3BlcnR5KE4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksTi5zaGEzODQ9Ti5zaGE1MTJfMjU2PU4uc2hhNTEyXzIyND1OLnNoYTUxMj1OLlNIQTM4ND1OLlNIQTUxMl8yNTY9Ti5TSEE1MTJfMjI0PU4uU0hBNTEyPXZvaWQgMDtjb25zdCBTZT1ELF9lPVosQ2U9eixbeGUsa2VdPSgoKT0+X2UuZGVmYXVsdC5zcGxpdChbXCIweDQyOGEyZjk4ZDcyOGFlMjJcIixcIjB4NzEzNzQ0OTEyM2VmNjVjZFwiLFwiMHhiNWMwZmJjZmVjNGQzYjJmXCIsXCIweGU5YjVkYmE1ODE4OWRiYmNcIixcIjB4Mzk1NmMyNWJmMzQ4YjUzOFwiLFwiMHg1OWYxMTFmMWI2MDVkMDE5XCIsXCIweDkyM2Y4MmE0YWYxOTRmOWJcIixcIjB4YWIxYzVlZDVkYTZkODExOFwiLFwiMHhkODA3YWE5OGEzMDMwMjQyXCIsXCIweDEyODM1YjAxNDU3MDZmYmVcIixcIjB4MjQzMTg1YmU0ZWU0YjI4Y1wiLFwiMHg1NTBjN2RjM2Q1ZmZiNGUyXCIsXCIweDcyYmU1ZDc0ZjI3Yjg5NmZcIixcIjB4ODBkZWIxZmUzYjE2OTZiMVwiLFwiMHg5YmRjMDZhNzI1YzcxMjM1XCIsXCIweGMxOWJmMTc0Y2Y2OTI2OTRcIixcIjB4ZTQ5YjY5YzE5ZWYxNGFkMlwiLFwiMHhlZmJlNDc4NjM4NGYyNWUzXCIsXCIweDBmYzE5ZGM2OGI4Y2Q1YjVcIixcIjB4MjQwY2ExY2M3N2FjOWM2NVwiLFwiMHgyZGU5MmM2ZjU5MmIwMjc1XCIsXCIweDRhNzQ4NGFhNmVhNmU0ODNcIixcIjB4NWNiMGE5ZGNiZDQxZmJkNFwiLFwiMHg3NmY5ODhkYTgzMTE1M2I1XCIsXCIweDk4M2U1MTUyZWU2NmRmYWJcIixcIjB4YTgzMWM2NmQyZGI0MzIxMFwiLFwiMHhiMDAzMjdjODk4ZmIyMTNmXCIsXCIweGJmNTk3ZmM3YmVlZjBlZTRcIixcIjB4YzZlMDBiZjMzZGE4OGZjMlwiLFwiMHhkNWE3OTE0NzkzMGFhNzI1XCIsXCIweDA2Y2E2MzUxZTAwMzgyNmZcIixcIjB4MTQyOTI5NjcwYTBlNmU3MFwiLFwiMHgyN2I3MGE4NTQ2ZDIyZmZjXCIsXCIweDJlMWIyMTM4NWMyNmM5MjZcIixcIjB4NGQyYzZkZmM1YWM0MmFlZFwiLFwiMHg1MzM4MGQxMzlkOTViM2RmXCIsXCIweDY1MGE3MzU0OGJhZjYzZGVcIixcIjB4NzY2YTBhYmIzYzc3YjJhOFwiLFwiMHg4MWMyYzkyZTQ3ZWRhZWU2XCIsXCIweDkyNzIyYzg1MTQ4MjM1M2JcIixcIjB4YTJiZmU4YTE0Y2YxMDM2NFwiLFwiMHhhODFhNjY0YmJjNDIzMDAxXCIsXCIweGMyNGI4YjcwZDBmODk3OTFcIixcIjB4Yzc2YzUxYTMwNjU0YmUzMFwiLFwiMHhkMTkyZTgxOWQ2ZWY1MjE4XCIsXCIweGQ2OTkwNjI0NTU2NWE5MTBcIixcIjB4ZjQwZTM1ODU1NzcxMjAyYVwiLFwiMHgxMDZhYTA3MDMyYmJkMWI4XCIsXCIweDE5YTRjMTE2YjhkMmQwYzhcIixcIjB4MWUzNzZjMDg1MTQxYWI1M1wiLFwiMHgyNzQ4Nzc0Y2RmOGVlYjk5XCIsXCIweDM0YjBiY2I1ZTE5YjQ4YThcIixcIjB4MzkxYzBjYjNjNWM5NWE2M1wiLFwiMHg0ZWQ4YWE0YWUzNDE4YWNiXCIsXCIweDViOWNjYTRmNzc2M2UzNzNcIixcIjB4NjgyZTZmZjNkNmIyYjhhM1wiLFwiMHg3NDhmODJlZTVkZWZiMmZjXCIsXCIweDc4YTU2MzZmNDMxNzJmNjBcIixcIjB4ODRjODc4MTRhMWYwYWI3MlwiLFwiMHg4Y2M3MDIwODFhNjQzOWVjXCIsXCIweDkwYmVmZmZhMjM2MzFlMjhcIixcIjB4YTQ1MDZjZWJkZTgyYmRlOVwiLFwiMHhiZWY5YTNmN2IyYzY3OTE1XCIsXCIweGM2NzE3OGYyZTM3MjUzMmJcIixcIjB4Y2EyNzNlY2VlYTI2NjE5Y1wiLFwiMHhkMTg2YjhjNzIxYzBjMjA3XCIsXCIweGVhZGE3ZGQ2Y2RlMGViMWVcIixcIjB4ZjU3ZDRmN2ZlZTZlZDE3OFwiLFwiMHgwNmYwNjdhYTcyMTc2ZmJhXCIsXCIweDBhNjM3ZGM1YTJjODk4YTZcIixcIjB4MTEzZjk4MDRiZWY5MGRhZVwiLFwiMHgxYjcxMGIzNTEzMWM0NzFiXCIsXCIweDI4ZGI3N2Y1MjMwNDdkODRcIixcIjB4MzJjYWFiN2I0MGM3MjQ5M1wiLFwiMHgzYzllYmUwYTE1YzliZWJjXCIsXCIweDQzMWQ2N2M0OWMxMDBkNGNcIixcIjB4NGNjNWQ0YmVjYjNlNDJiNlwiLFwiMHg1OTdmMjk5Y2ZjNjU3ZTJhXCIsXCIweDVmY2I2ZmFiM2FkNmZhZWNcIixcIjB4NmM0NDE5OGM0YTQ3NTgxN1wiXS5tYXAoKGU9PkJpZ0ludChlKSkpKSkoKSxNZT1uZXcgVWludDMyQXJyYXkoODApLEFlPW5ldyBVaW50MzJBcnJheSg4MCk7Y2xhc3MgVGUgZXh0ZW5kcyBTZS5IYXNoTUR7Y29uc3RydWN0b3IoKXtzdXBlcigxMjgsNjQsMTYsITEpLHRoaXMuQWg9MTc3OTAzMzcwMyx0aGlzLkFsPS0yMDU3MzE1NzYsdGhpcy5CaD0tMTE1MDgzMzAxOSx0aGlzLkJsPS0yMDY3MDkzNzAxLHRoaXMuQ2g9MTAxMzkwNDI0Mix0aGlzLkNsPS0yMzc5MTU3Myx0aGlzLkRoPS0xNTIxNDg2NTM0LHRoaXMuRGw9MTU5NTc1MDEyOSx0aGlzLkVoPTEzNTk4OTMxMTksdGhpcy5FbD0tMTM3NzQwMjE1OSx0aGlzLkZoPS0xNjk0MTQ0MzcyLHRoaXMuRmw9NzI1NTExMTk5LHRoaXMuR2g9NTI4NzM0NjM1LHRoaXMuR2w9LTc5NTc3NzQ5LHRoaXMuSGg9MTU0MTQ1OTIyNSx0aGlzLkhsPTMyNzAzMzIwOX1nZXQoKXtjb25zdHtBaDplLEFsOnQsQmg6bixCbDpyLENoOmksQ2w6byxEaDpzLERsOmEsRWg6YyxFbDpkLEZoOmwsRmw6dSxHaDpoLEdsOmYsSGg6cCxIbDptfT10aGlzO3JldHVybltlLHQsbixyLGksbyxzLGEsYyxkLGwsdSxoLGYscCxtXX1zZXQoZSx0LG4scixpLG8scyxhLGMsZCxsLHUsaCxmLHAsbSl7dGhpcy5BaD0wfGUsdGhpcy5BbD0wfHQsdGhpcy5CaD0wfG4sdGhpcy5CbD0wfHIsdGhpcy5DaD0wfGksdGhpcy5DbD0wfG8sdGhpcy5EaD0wfHMsdGhpcy5EbD0wfGEsdGhpcy5FaD0wfGMsdGhpcy5FbD0wfGQsdGhpcy5GaD0wfGwsdGhpcy5GbD0wfHUsdGhpcy5HaD0wfGgsdGhpcy5HbD0wfGYsdGhpcy5IaD0wfHAsdGhpcy5IbD0wfG19cHJvY2VzcyhlLHQpe2ZvcihsZXQgbj0wO248MTY7bisrLHQrPTQpTWVbbl09ZS5nZXRVaW50MzIodCksQWVbbl09ZS5nZXRVaW50MzIodCs9NCk7Zm9yKGxldCBlPTE2O2U8ODA7ZSsrKXtjb25zdCB0PTB8TWVbZS0xNV0sbj0wfEFlW2UtMTVdLHI9X2UuZGVmYXVsdC5yb3RyU0godCxuLDEpXl9lLmRlZmF1bHQucm90clNIKHQsbiw4KV5fZS5kZWZhdWx0LnNoclNIKHQsbiw3KSxpPV9lLmRlZmF1bHQucm90clNMKHQsbiwxKV5fZS5kZWZhdWx0LnJvdHJTTCh0LG4sOCleX2UuZGVmYXVsdC5zaHJTTCh0LG4sNyksbz0wfE1lW2UtMl0scz0wfEFlW2UtMl0sYT1fZS5kZWZhdWx0LnJvdHJTSChvLHMsMTkpXl9lLmRlZmF1bHQucm90ckJIKG8scyw2MSleX2UuZGVmYXVsdC5zaHJTSChvLHMsNiksYz1fZS5kZWZhdWx0LnJvdHJTTChvLHMsMTkpXl9lLmRlZmF1bHQucm90ckJMKG8scyw2MSleX2UuZGVmYXVsdC5zaHJTTChvLHMsNiksZD1fZS5kZWZhdWx0LmFkZDRMKGksYyxBZVtlLTddLEFlW2UtMTZdKSxsPV9lLmRlZmF1bHQuYWRkNEgoZCxyLGEsTWVbZS03XSxNZVtlLTE2XSk7TWVbZV09MHxsLEFlW2VdPTB8ZH1sZXR7QWg6bixBbDpyLEJoOmksQmw6byxDaDpzLENsOmEsRGg6YyxEbDpkLEVoOmwsRWw6dSxGaDpoLEZsOmYsR2g6cCxHbDptLEhoOmcsSGw6dn09dGhpcztmb3IobGV0IGU9MDtlPDgwO2UrKyl7Y29uc3QgdD1fZS5kZWZhdWx0LnJvdHJTSChsLHUsMTQpXl9lLmRlZmF1bHQucm90clNIKGwsdSwxOCleX2UuZGVmYXVsdC5yb3RyQkgobCx1LDQxKSx5PV9lLmRlZmF1bHQucm90clNMKGwsdSwxNCleX2UuZGVmYXVsdC5yb3RyU0wobCx1LDE4KV5fZS5kZWZhdWx0LnJvdHJCTChsLHUsNDEpLEU9bCZoXn5sJnAsYj11JmZefnUmbSx3PV9lLmRlZmF1bHQuYWRkNUwodix5LGIsa2VbZV0sQWVbZV0pLFM9X2UuZGVmYXVsdC5hZGQ1SCh3LGcsdCxFLHhlW2VdLE1lW2VdKSxfPTB8dyxDPV9lLmRlZmF1bHQucm90clNIKG4sciwyOCleX2UuZGVmYXVsdC5yb3RyQkgobixyLDM0KV5fZS5kZWZhdWx0LnJvdHJCSChuLHIsMzkpLHg9X2UuZGVmYXVsdC5yb3RyU0wobixyLDI4KV5fZS5kZWZhdWx0LnJvdHJCTChuLHIsMzQpXl9lLmRlZmF1bHQucm90ckJMKG4sciwzOSksaz1uJmlebiZzXmkmcyxNPXImb15yJmFebyZhO2c9MHxwLHY9MHxtLHA9MHxoLG09MHxmLGg9MHxsLGY9MHx1LCh7aDpsLGw6dX09X2UuZGVmYXVsdC5hZGQoMHxjLDB8ZCwwfFMsMHxfKSksYz0wfHMsZD0wfGEscz0wfGksYT0wfG8saT0wfG4sbz0wfHI7Y29uc3QgQT1fZS5kZWZhdWx0LmFkZDNMKF8seCxNKTtuPV9lLmRlZmF1bHQuYWRkM0goQSxTLEMsaykscj0wfEF9KHtoOm4sbDpyfT1fZS5kZWZhdWx0LmFkZCgwfHRoaXMuQWgsMHx0aGlzLkFsLDB8biwwfHIpKSwoe2g6aSxsOm99PV9lLmRlZmF1bHQuYWRkKDB8dGhpcy5CaCwwfHRoaXMuQmwsMHxpLDB8bykpLCh7aDpzLGw6YX09X2UuZGVmYXVsdC5hZGQoMHx0aGlzLkNoLDB8dGhpcy5DbCwwfHMsMHxhKSksKHtoOmMsbDpkfT1fZS5kZWZhdWx0LmFkZCgwfHRoaXMuRGgsMHx0aGlzLkRsLDB8YywwfGQpKSwoe2g6bCxsOnV9PV9lLmRlZmF1bHQuYWRkKDB8dGhpcy5FaCwwfHRoaXMuRWwsMHxsLDB8dSkpLCh7aDpoLGw6Zn09X2UuZGVmYXVsdC5hZGQoMHx0aGlzLkZoLDB8dGhpcy5GbCwwfGgsMHxmKSksKHtoOnAsbDptfT1fZS5kZWZhdWx0LmFkZCgwfHRoaXMuR2gsMHx0aGlzLkdsLDB8cCwwfG0pKSwoe2g6ZyxsOnZ9PV9lLmRlZmF1bHQuYWRkKDB8dGhpcy5IaCwwfHRoaXMuSGwsMHxnLDB8dikpLHRoaXMuc2V0KG4scixpLG8scyxhLGMsZCxsLHUsaCxmLHAsbSxnLHYpfXJvdW5kQ2xlYW4oKXtNZS5maWxsKDApLEFlLmZpbGwoMCl9ZGVzdHJveSgpe3RoaXMuYnVmZmVyLmZpbGwoMCksdGhpcy5zZXQoMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCl9fU4uU0hBNTEyPVRlO2NsYXNzIEllIGV4dGVuZHMgVGV7Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuQWg9LTE5NDIxNDUwODAsdGhpcy5BbD00MjQ5NTUyOTgsdGhpcy5CaD0xOTQ0MTY0NzEwLHRoaXMuQmw9LTE5ODIwMTYyOTgsdGhpcy5DaD01MDI5NzAyODYsdGhpcy5DbD04NTU2MTI1NDYsdGhpcy5EaD0xNzM4Mzk2OTQ4LHRoaXMuRGw9MTQ3OTUxNjExMSx0aGlzLkVoPTI1ODgxMjc3Nyx0aGlzLkVsPTIwNzc1MTEwODAsdGhpcy5GaD0yMDExMzkzOTA3LHRoaXMuRmw9Nzk5ODkwNTgsdGhpcy5HaD0xMDY3Mjg3OTc2LHRoaXMuR2w9MTc4MDI5OTQ2NCx0aGlzLkhoPTI4NjQ1MTM3Myx0aGlzLkhsPS0xODQ4MjA4NzM1LHRoaXMub3V0cHV0TGVuPTI4fX1OLlNIQTUxMl8yMjQ9SWU7Y2xhc3MgUGUgZXh0ZW5kcyBUZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5BaD01NzM2NDUyMDQsdGhpcy5BbD0tNjQyMjc1NDAsdGhpcy5CaD0tMTYyMTc5NDkwOSx0aGlzLkJsPS05MzQ1MTc1NjYsdGhpcy5DaD01OTY4ODM1NjMsdGhpcy5DbD0xODY3NzU1ODU3LHRoaXMuRGg9LTE3NzQ2ODQzOTEsdGhpcy5EbD0xNDk3NDI2NjIxLHRoaXMuRWg9LTE3NzU3NDczNTgsdGhpcy5FbD0tMTQ2NzAyMzM4OSx0aGlzLkZoPS0xMTAxMTI4MTU1LHRoaXMuRmw9MTQwMTMwNTQ5MCx0aGlzLkdoPTcyMTUyNTI0NCx0aGlzLkdsPTc0Njk2MTA2Nix0aGlzLkhoPTI0Njg4NTg1Mix0aGlzLkhsPS0yMTE3Nzg0NDE0LHRoaXMub3V0cHV0TGVuPTMyfX1OLlNIQTUxMl8yNTY9UGU7Y2xhc3MgUmUgZXh0ZW5kcyBUZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5BaD0tODc2ODk2OTMxLHRoaXMuQWw9LTEwNTY1OTYyNjQsdGhpcy5CaD0xNjU0MjcwMjUwLHRoaXMuQmw9OTE0MTUwNjYzLHRoaXMuQ2g9LTE4NTY0Mzc5MjYsdGhpcy5DbD04MTI3MDI5OTksdGhpcy5EaD0zNTU0NjIzNjAsdGhpcy5EbD0tMTUwMDU0NTk5LHRoaXMuRWg9MTczMTQwNTQxNSx0aGlzLkVsPS00MTkxNDM5LHRoaXMuRmg9LTE5MDA3ODcwNjUsdGhpcy5GbD0xNzUwNjAzMDI1LHRoaXMuR2g9LTYxOTk1ODc3MSx0aGlzLkdsPTE2OTQwNzY4MzksdGhpcy5IaD0xMjAzMDYyODEzLHRoaXMuSGw9LTEwOTA4OTE4NjgsdGhpcy5vdXRwdXRMZW49NDh9fU4uU0hBMzg0PVJlLE4uc2hhNTEyPSgwLENlLndyYXBDb25zdHJ1Y3RvcikoKCgpPT5uZXcgVGUpKSxOLnNoYTUxMl8yMjQ9KDAsQ2Uud3JhcENvbnN0cnVjdG9yKSgoKCk9Pm5ldyBJZSkpLE4uc2hhNTEyXzI1Nj0oMCxDZS53cmFwQ29uc3RydWN0b3IpKCgoKT0+bmV3IFBlKSksTi5zaGEzODQ9KDAsQ2Uud3JhcENvbnN0cnVjdG9yKSgoKCk9Pm5ldyBSZSkpO3ZhciBPZT17fSxOZT17fSxEZT17fSxMZT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksTGUubm90SW1wbGVtZW50ZWQ9TGUuYml0TWFzaz12b2lkIDAsTGUuaXNCeXRlcz0kZSxMZS5hYnl0ZXM9SGUsTGUuYWJvb2w9ZnVuY3Rpb24oZSx0KXtpZihcImJvb2xlYW5cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKGAke2V9IG11c3QgYmUgdmFsaWQgYm9vbGVhbiwgZ290IFwiJHt0fVwiLmApfSxMZS5ieXRlc1RvSGV4PUZlLExlLm51bWJlclRvSGV4VW5wYWRkZWQ9cWUsTGUuaGV4VG9OdW1iZXI9emUsTGUuaGV4VG9CeXRlcz1HZSxMZS5ieXRlc1RvTnVtYmVyQkU9ZnVuY3Rpb24oZSl7cmV0dXJuIHplKEZlKGUpKX0sTGUuYnl0ZXNUb051bWJlckxFPWZ1bmN0aW9uKGUpe3JldHVybiBIZShlKSx6ZShGZShVaW50OEFycmF5LmZyb20oZSkucmV2ZXJzZSgpKSl9LExlLm51bWJlclRvQnl0ZXNCRT1ZZSxMZS5udW1iZXJUb0J5dGVzTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gWWUoZSx0KS5yZXZlcnNlKCl9LExlLm51bWJlclRvVmFyQnl0ZXNCRT1mdW5jdGlvbihlKXtyZXR1cm4gR2UocWUoZSkpfSxMZS5lbnN1cmVCeXRlcz1mdW5jdGlvbihlLHQsbil7bGV0IHI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpdHJ5e3I9R2UodCl9Y2F0Y2gobil7dGhyb3cgbmV3IEVycm9yKGAke2V9IG11c3QgYmUgdmFsaWQgaGV4IHN0cmluZywgZ290IFwiJHt0fVwiLiBDYXVzZTogJHtufWApfWVsc2V7aWYoISRlKHQpKXRocm93IG5ldyBFcnJvcihgJHtlfSBtdXN0IGJlIGhleCBzdHJpbmcgb3IgVWludDhBcnJheWApO3I9VWludDhBcnJheS5mcm9tKHQpfWNvbnN0IGk9ci5sZW5ndGg7aWYoXCJudW1iZXJcIj09dHlwZW9mIG4mJmkhPT1uKXRocm93IG5ldyBFcnJvcihgJHtlfSBleHBlY3RlZCAke259IGJ5dGVzLCBnb3QgJHtpfWApO3JldHVybiByfSxMZS5jb25jYXRCeXRlcz1aZSxMZS5lcXVhbEJ5dGVzPWZ1bmN0aW9uKGUsdCl7aWYoZS5sZW5ndGghPT10Lmxlbmd0aClyZXR1cm4hMTtsZXQgbj0wO2ZvcihsZXQgcj0wO3I8ZS5sZW5ndGg7cisrKW58PWVbcl1edFtyXTtyZXR1cm4gMD09PW59LExlLnV0ZjhUb0J5dGVzPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcInV0ZjhUb0J5dGVzIGV4cGVjdGVkIHN0cmluZywgZ290IFwiK3R5cGVvZiBlKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoKG5ldyBUZXh0RW5jb2RlcikuZW5jb2RlKGUpKX0sTGUuaW5SYW5nZT1RZSxMZS5hSW5SYW5nZT1mdW5jdGlvbihlLHQsbixyKXtpZighUWUodCxuLHIpKXRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgdmFsaWQgJHtlfTogJHtufSA8PSBuIDwgJHtyfSwgZ290ICR7dHlwZW9mIHR9ICR7dH1gKX0sTGUuYml0TGVuPWZ1bmN0aW9uKGUpe2xldCB0O2Zvcih0PTA7ZT5CZTtlPj49S2UsdCs9MSk7cmV0dXJuIHR9LExlLmJpdEdldD1mdW5jdGlvbihlLHQpe3JldHVybiBlPj5CaWdJbnQodCkmS2V9LExlLmJpdFNldD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGV8KG4/S2U6QmUpPDxCaWdJbnQodCl9LExlLmNyZWF0ZUhtYWNEcmJnPWZ1bmN0aW9uKGUsdCxuKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwyKXRocm93IG5ldyBFcnJvcihcImhhc2hMZW4gbXVzdCBiZSBhIG51bWJlclwiKTtpZihcIm51bWJlclwiIT10eXBlb2YgdHx8dDwyKXRocm93IG5ldyBFcnJvcihcInFCeXRlTGVuIG11c3QgYmUgYSBudW1iZXJcIik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoXCJobWFjRm4gbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO2xldCByPVhlKGUpLGk9WGUoZSksbz0wO2NvbnN0IHM9KCk9PntyLmZpbGwoMSksaS5maWxsKDApLG89MH0sYT0oLi4uZSk9Pm4oaSxyLC4uLmUpLGM9KGU9WGUoKSk9PntpPWEoZXQoWzBdKSxlKSxyPWEoKSwwIT09ZS5sZW5ndGgmJihpPWEoZXQoWzFdKSxlKSxyPWEoKSl9LGQ9KCk9PntpZihvKys+PTFlMyl0aHJvdyBuZXcgRXJyb3IoXCJkcmJnOiB0cmllZCAxMDAwIHZhbHVlc1wiKTtsZXQgZT0wO2NvbnN0IG49W107Zm9yKDtlPHQ7KXtyPWEoKTtjb25zdCB0PXIuc2xpY2UoKTtuLnB1c2godCksZSs9ci5sZW5ndGh9cmV0dXJuIFplKC4uLm4pfTtyZXR1cm4oZSx0KT0+e2xldCBuO2ZvcihzKCksYyhlKTshKG49dChkKCkpKTspYygpO3JldHVybiBzKCksbn19LExlLnZhbGlkYXRlT2JqZWN0PWZ1bmN0aW9uKGUsdCxuPXt9KXtjb25zdCByPSh0LG4scik9Pntjb25zdCBpPXR0W25dO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZhbGlkYXRvciBcIiR7bn1cIiwgZXhwZWN0ZWQgZnVuY3Rpb25gKTtjb25zdCBvPWVbdF07aWYoIShyJiZ2b2lkIDA9PT1vfHxpKG8sZSkpKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXJhbSAke1N0cmluZyh0KX09JHtvfSAoJHt0eXBlb2Ygb30pLCBleHBlY3RlZCAke259YCl9O2Zvcihjb25zdFtlLG5db2YgT2JqZWN0LmVudHJpZXModCkpcihlLG4sITEpO2Zvcihjb25zdFtlLHRdb2YgT2JqZWN0LmVudHJpZXMobikpcihlLHQsITApO3JldHVybiBlfSxMZS5tZW1vaXplZD1mdW5jdGlvbihlKXtjb25zdCB0PW5ldyBXZWFrTWFwO3JldHVybihuLC4uLnIpPT57Y29uc3QgaT10LmdldChuKTtpZih2b2lkIDAhPT1pKXJldHVybiBpO2NvbnN0IG89ZShuLC4uLnIpO3JldHVybiB0LnNldChuLG8pLG99fTtjb25zdCBCZT1CaWdJbnQoMCksS2U9QmlnSW50KDEpLGplPUJpZ0ludCgyKTtmdW5jdGlvbiAkZShlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fG51bGwhPWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcIlVpbnQ4QXJyYXlcIj09PWUuY29uc3RydWN0b3IubmFtZX1mdW5jdGlvbiBIZShlKXtpZighJGUoZSkpdGhyb3cgbmV3IEVycm9yKFwiVWludDhBcnJheSBleHBlY3RlZFwiKX1jb25zdCBVZT1BcnJheS5mcm9tKHtsZW5ndGg6MjU2fSwoKGUsdCk9PnQudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsXCIwXCIpKSk7ZnVuY3Rpb24gRmUoZSl7SGUoZSk7bGV0IHQ9XCJcIjtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl0Kz1VZVtlW25dXTtyZXR1cm4gdH1mdW5jdGlvbiBxZShlKXtjb25zdCB0PWUudG9TdHJpbmcoMTYpO3JldHVybiAxJnQubGVuZ3RoP2AwJHt0fWA6dH1mdW5jdGlvbiB6ZShlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgXCIrdHlwZW9mIGUpO3JldHVybiBCaWdJbnQoXCJcIj09PWU/XCIwXCI6YDB4JHtlfWApfWNvbnN0IFdlPXtfMDo0OCxfOTo1NyxfQTo2NSxfRjo3MCxfYTo5NyxfZjoxMDJ9O2Z1bmN0aW9uIFZlKGUpe3JldHVybiBlPj1XZS5fMCYmZTw9V2UuXzk/ZS1XZS5fMDplPj1XZS5fQSYmZTw9V2UuX0Y/ZS0oV2UuX0EtMTApOmU+PVdlLl9hJiZlPD1XZS5fZj9lLShXZS5fYS0xMCk6dm9pZCAwfWZ1bmN0aW9uIEdlKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcImhleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCBcIit0eXBlb2YgZSk7Y29uc3QgdD1lLmxlbmd0aCxuPXQvMjtpZih0JTIpdGhyb3cgbmV3IEVycm9yKFwicGFkZGVkIGhleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCB1bnBhZGRlZCBoZXggb2YgbGVuZ3RoIFwiK3QpO2NvbnN0IHI9bmV3IFVpbnQ4QXJyYXkobik7Zm9yKGxldCB0PTAsaT0wO3Q8bjt0KyssaSs9Mil7Y29uc3Qgbj1WZShlLmNoYXJDb2RlQXQoaSkpLG89VmUoZS5jaGFyQ29kZUF0KGkrMSkpO2lmKHZvaWQgMD09PW58fHZvaWQgMD09PW8pe2NvbnN0IHQ9ZVtpXStlW2krMV07dGhyb3cgbmV3IEVycm9yKCdoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3Qgbm9uLWhleCBjaGFyYWN0ZXIgXCInK3QrJ1wiIGF0IGluZGV4ICcraSl9clt0XT0xNipuK299cmV0dXJuIHJ9ZnVuY3Rpb24gWWUoZSx0KXtyZXR1cm4gR2UoZS50b1N0cmluZygxNikucGFkU3RhcnQoMip0LFwiMFwiKSl9ZnVuY3Rpb24gWmUoLi4uZSl7bGV0IHQ9MDtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgcj1lW25dO0hlKHIpLHQrPXIubGVuZ3RofWNvbnN0IG49bmV3IFVpbnQ4QXJyYXkodCk7Zm9yKGxldCB0PTAscj0wO3Q8ZS5sZW5ndGg7dCsrKXtjb25zdCBpPWVbdF07bi5zZXQoaSxyKSxyKz1pLmxlbmd0aH1yZXR1cm4gbn1jb25zdCBKZT1lPT5cImJpZ2ludFwiPT10eXBlb2YgZSYmQmU8PWU7ZnVuY3Rpb24gUWUoZSx0LG4pe3JldHVybiBKZShlKSYmSmUodCkmJkplKG4pJiZ0PD1lJiZlPG59TGUuYml0TWFzaz1lPT4oamU8PEJpZ0ludChlLTEpKS1LZTtjb25zdCBYZT1lPT5uZXcgVWludDhBcnJheShlKSxldD1lPT5VaW50OEFycmF5LmZyb20oZSk7Y29uc3QgdHQ9e2JpZ2ludDplPT5cImJpZ2ludFwiPT10eXBlb2YgZSxmdW5jdGlvbjplPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLGJvb2xlYW46ZT0+XCJib29sZWFuXCI9PXR5cGVvZiBlLHN0cmluZzplPT5cInN0cmluZ1wiPT10eXBlb2YgZSxzdHJpbmdPclVpbnQ4QXJyYXk6ZT0+XCJzdHJpbmdcIj09dHlwZW9mIGV8fCRlKGUpLGlzU2FmZUludGVnZXI6ZT0+TnVtYmVyLmlzU2FmZUludGVnZXIoZSksYXJyYXk6ZT0+QXJyYXkuaXNBcnJheShlKSxmaWVsZDooZSx0KT0+dC5GcC5pc1ZhbGlkKGUpLGhhc2g6ZT0+XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmTnVtYmVyLmlzU2FmZUludGVnZXIoZS5vdXRwdXRMZW4pfTtMZS5ub3RJbXBsZW1lbnRlZD0oKT0+e3Rocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZFwiKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KERlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLERlLmlzTmVnYXRpdmVMRT12b2lkIDAsRGUubW9kPWx0LERlLnBvdz11dCxEZS5wb3cyPWZ1bmN0aW9uKGUsdCxuKXtsZXQgcj1lO2Zvcig7dC0tID5ydDspcio9cixyJT1uO3JldHVybiByfSxEZS5pbnZlcnQ9aHQsRGUudG9uZWxsaVNoYW5rcz1mdCxEZS5GcFNxcnQ9cHQsRGUudmFsaWRhdGVGaWVsZD1mdW5jdGlvbihlKXtjb25zdCB0PW10LnJlZHVjZSgoKGUsdCk9PihlW3RdPVwiZnVuY3Rpb25cIixlKSkse09SREVSOlwiYmlnaW50XCIsTUFTSzpcImJpZ2ludFwiLEJZVEVTOlwiaXNTYWZlSW50ZWdlclwiLEJJVFM6XCJpc1NhZmVJbnRlZ2VyXCJ9KTtyZXR1cm4oMCxudC52YWxpZGF0ZU9iamVjdCkoZSx0KX0sRGUuRnBQb3c9Z3QsRGUuRnBJbnZlcnRCYXRjaD12dCxEZS5GcERpdj1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGUubXVsKHQsXCJiaWdpbnRcIj09dHlwZW9mIG4/aHQobixlLk9SREVSKTplLmludihuKSl9LERlLkZwTGVnZW5kcmU9eXQsRGUuRnBJc1NxdWFyZT1mdW5jdGlvbihlKXtjb25zdCB0PXl0KGUuT1JERVIpO3JldHVybiBuPT57Y29uc3Qgcj10KGUsbik7cmV0dXJuIGUuZXFsKHIsZS5aRVJPKXx8ZS5lcWwocixlLk9ORSl9fSxEZS5uTGVuZ3RoPUV0LERlLkZpZWxkPWZ1bmN0aW9uKGUsdCxuPSExLHI9e30pe2lmKGU8PXJ0KXRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgRmllbGQgT1JERVIgPiAwLCBnb3QgJHtlfWApO2NvbnN0e25CaXRMZW5ndGg6aSxuQnl0ZUxlbmd0aDpvfT1FdChlLHQpO2lmKG8+MjA0OCl0aHJvdyBuZXcgRXJyb3IoXCJGaWVsZCBsZW5ndGhzIG92ZXIgMjA0OCBieXRlcyBhcmUgbm90IHN1cHBvcnRlZFwiKTtjb25zdCBzPXB0KGUpLGE9T2JqZWN0LmZyZWV6ZSh7T1JERVI6ZSxCSVRTOmksQllURVM6byxNQVNLOigwLG50LmJpdE1hc2spKGkpLFpFUk86cnQsT05FOml0LGNyZWF0ZTp0PT5sdCh0LGUpLGlzVmFsaWQ6dD0+e2lmKFwiYmlnaW50XCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZmllbGQgZWxlbWVudDogZXhwZWN0ZWQgYmlnaW50LCBnb3QgXCIrdHlwZW9mIHQpO3JldHVybiBydDw9dCYmdDxlfSxpczA6ZT0+ZT09PXJ0LGlzT2RkOmU9PihlJml0KT09PWl0LG5lZzp0PT5sdCgtdCxlKSxlcWw6KGUsdCk9PmU9PT10LHNxcjp0PT5sdCh0KnQsZSksYWRkOih0LG4pPT5sdCh0K24sZSksc3ViOih0LG4pPT5sdCh0LW4sZSksbXVsOih0LG4pPT5sdCh0Km4sZSkscG93OihlLHQpPT5ndChhLGUsdCksZGl2Oih0LG4pPT5sdCh0Kmh0KG4sZSksZSksc3FyTjplPT5lKmUsYWRkTjooZSx0KT0+ZSt0LHN1Yk46KGUsdCk9PmUtdCxtdWxOOihlLHQpPT5lKnQsaW52OnQ9Pmh0KHQsZSksc3FydDpyLnNxcnR8fChlPT5zKGEsZSkpLGludmVydEJhdGNoOmU9PnZ0KGEsZSksY21vdjooZSx0LG4pPT5uP3Q6ZSx0b0J5dGVzOmU9Pm4/KDAsbnQubnVtYmVyVG9CeXRlc0xFKShlLG8pOigwLG50Lm51bWJlclRvQnl0ZXNCRSkoZSxvKSxmcm9tQnl0ZXM6ZT0+e2lmKGUubGVuZ3RoIT09byl0aHJvdyBuZXcgRXJyb3IoYEZwLmZyb21CeXRlczogZXhwZWN0ZWQgJHtvfSwgZ290ICR7ZS5sZW5ndGh9YCk7cmV0dXJuIG4/KDAsbnQuYnl0ZXNUb051bWJlckxFKShlKTooMCxudC5ieXRlc1RvTnVtYmVyQkUpKGUpfX0pO3JldHVybiBPYmplY3QuZnJlZXplKGEpfSxEZS5GcFNxcnRPZGQ9ZnVuY3Rpb24oZSx0KXtpZighZS5pc09kZCl0aHJvdyBuZXcgRXJyb3IoXCJGaWVsZCBkb2Vzbid0IGhhdmUgaXNPZGRcIik7Y29uc3Qgbj1lLnNxcnQodCk7cmV0dXJuIGUuaXNPZGQobik/bjplLm5lZyhuKX0sRGUuRnBTcXJ0RXZlbj1mdW5jdGlvbihlLHQpe2lmKCFlLmlzT2RkKXRocm93IG5ldyBFcnJvcihcIkZpZWxkIGRvZXNuJ3QgaGF2ZSBpc09kZFwiKTtjb25zdCBuPWUuc3FydCh0KTtyZXR1cm4gZS5pc09kZChuKT9lLm5lZyhuKTpufSxEZS5oYXNoVG9Qcml2YXRlU2NhbGFyPWZ1bmN0aW9uKGUsdCxuPSExKXtlPSgwLG50LmVuc3VyZUJ5dGVzKShcInByaXZhdGVIYXNoXCIsZSk7Y29uc3Qgcj1lLmxlbmd0aCxpPUV0KHQpLm5CeXRlTGVuZ3RoKzg7aWYoaTwyNHx8cjxpfHxyPjEwMjQpdGhyb3cgbmV3IEVycm9yKGBoYXNoVG9Qcml2YXRlU2NhbGFyOiBleHBlY3RlZCAke2l9LTEwMjQgYnl0ZXMgb2YgaW5wdXQsIGdvdCAke3J9YCk7Y29uc3Qgbz1uPygwLG50LmJ5dGVzVG9OdW1iZXJMRSkoZSk6KDAsbnQuYnl0ZXNUb051bWJlckJFKShlKTtyZXR1cm4gbHQobyx0LWl0KStpdH0sRGUuZ2V0RmllbGRCeXRlc0xlbmd0aD1idCxEZS5nZXRNaW5IYXNoTGVuZ3RoPXd0LERlLm1hcEhhc2hUb0ZpZWxkPWZ1bmN0aW9uKGUsdCxuPSExKXtjb25zdCByPWUubGVuZ3RoLGk9YnQodCksbz13dCh0KTtpZihyPDE2fHxyPG98fHI+MTAyNCl0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkICR7b30tMTAyNCBieXRlcyBvZiBpbnB1dCwgZ290ICR7cn1gKTtjb25zdCBzPWx0KG4/KDAsbnQuYnl0ZXNUb051bWJlckJFKShlKTooMCxudC5ieXRlc1RvTnVtYmVyTEUpKGUpLHQtaXQpK2l0O3JldHVybiBuPygwLG50Lm51bWJlclRvQnl0ZXNMRSkocyxpKTooMCxudC5udW1iZXJUb0J5dGVzQkUpKHMsaSl9O2NvbnN0IG50PUxlLHJ0PUJpZ0ludCgwKSxpdD1CaWdJbnQoMSksb3Q9QmlnSW50KDIpLHN0PUJpZ0ludCgzKSxhdD1CaWdJbnQoNCksY3Q9QmlnSW50KDUpLGR0PUJpZ0ludCg4KTtmdW5jdGlvbiBsdChlLHQpe2NvbnN0IG49ZSV0O3JldHVybiBuPj1ydD9uOnQrbn1mdW5jdGlvbiB1dChlLHQsbil7aWYobjw9cnR8fHQ8cnQpdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgcG93ZXIvbW9kdWxvID4gMFwiKTtpZihuPT09aXQpcmV0dXJuIHJ0O2xldCByPWl0O2Zvcig7dD5ydDspdCZpdCYmKHI9ciplJW4pLGU9ZSplJW4sdD4+PWl0O3JldHVybiByfWZ1bmN0aW9uIGh0KGUsdCl7aWYoZT09PXJ0fHx0PD1ydCl0aHJvdyBuZXcgRXJyb3IoYGludmVydDogZXhwZWN0ZWQgcG9zaXRpdmUgaW50ZWdlcnMsIGdvdCBuPSR7ZX0gbW9kPSR7dH1gKTtsZXQgbj1sdChlLHQpLHI9dCxpPXJ0LG89aXQ7Zm9yKDtuIT09cnQ7KXtjb25zdCBlPXIlbix0PWktbyooci9uKTtyPW4sbj1lLGk9byxvPXR9aWYociE9PWl0KXRocm93IG5ldyBFcnJvcihcImludmVydDogZG9lcyBub3QgZXhpc3RcIik7cmV0dXJuIGx0KGksdCl9ZnVuY3Rpb24gZnQoZSl7Y29uc3QgdD0oZS1pdCkvb3Q7bGV0IG4scixpO2ZvcihuPWUtaXQscj0wO24lb3Q9PT1ydDtuLz1vdCxyKyspO2ZvcihpPW90O2k8ZSYmdXQoaSx0LGUpIT09ZS1pdDtpKyspO2lmKDE9PT1yKXtjb25zdCB0PShlK2l0KS9hdDtyZXR1cm4gZnVuY3Rpb24oZSxuKXtjb25zdCByPWUucG93KG4sdCk7aWYoIWUuZXFsKGUuc3FyKHIpLG4pKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHNxdWFyZSByb290XCIpO3JldHVybiByfX1jb25zdCBvPShuK2l0KS9vdDtyZXR1cm4gZnVuY3Rpb24oZSxzKXtpZihlLnBvdyhzLHQpPT09ZS5uZWcoZS5PTkUpKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHNxdWFyZSByb290XCIpO2xldCBhPXIsYz1lLnBvdyhlLm11bChlLk9ORSxpKSxuKSxkPWUucG93KHMsbyksbD1lLnBvdyhzLG4pO2Zvcig7IWUuZXFsKGwsZS5PTkUpOyl7aWYoZS5lcWwobCxlLlpFUk8pKXJldHVybiBlLlpFUk87bGV0IHQ9MTtmb3IobGV0IG49ZS5zcXIobCk7dDxhJiYhZS5lcWwobixlLk9ORSk7dCsrKW49ZS5zcXIobik7Y29uc3Qgbj1lLnBvdyhjLGl0PDxCaWdJbnQoYS10LTEpKTtjPWUuc3FyKG4pLGQ9ZS5tdWwoZCxuKSxsPWUubXVsKGwsYyksYT10fXJldHVybiBkfX1mdW5jdGlvbiBwdChlKXtpZihlJWF0PT09c3Qpe2NvbnN0IHQ9KGUraXQpL2F0O3JldHVybiBmdW5jdGlvbihlLG4pe2NvbnN0IHI9ZS5wb3cobix0KTtpZighZS5lcWwoZS5zcXIociksbikpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3RcIik7cmV0dXJuIHJ9fWlmKGUlZHQ9PT1jdCl7Y29uc3QgdD0oZS1jdCkvZHQ7cmV0dXJuIGZ1bmN0aW9uKGUsbil7Y29uc3Qgcj1lLm11bChuLG90KSxpPWUucG93KHIsdCksbz1lLm11bChuLGkpLHM9ZS5tdWwoZS5tdWwobyxvdCksaSksYT1lLm11bChvLGUuc3ViKHMsZS5PTkUpKTtpZighZS5lcWwoZS5zcXIoYSksbikpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3RcIik7cmV0dXJuIGF9fXJldHVybiBmdChlKX1CaWdJbnQoOSksQmlnSW50KDE2KTtEZS5pc05lZ2F0aXZlTEU9KGUsdCk9PihsdChlLHQpJml0KT09PWl0O2NvbnN0IG10PVtcImNyZWF0ZVwiLFwiaXNWYWxpZFwiLFwiaXMwXCIsXCJuZWdcIixcImludlwiLFwic3FydFwiLFwic3FyXCIsXCJlcWxcIixcImFkZFwiLFwic3ViXCIsXCJtdWxcIixcInBvd1wiLFwiZGl2XCIsXCJhZGROXCIsXCJzdWJOXCIsXCJtdWxOXCIsXCJzcXJOXCJdO2Z1bmN0aW9uIGd0KGUsdCxuKXtpZihuPHJ0KXRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIHBvd2VyID4gMFwiKTtpZihuPT09cnQpcmV0dXJuIGUuT05FO2lmKG49PT1pdClyZXR1cm4gdDtsZXQgcj1lLk9ORSxpPXQ7Zm9yKDtuPnJ0OyluJml0JiYocj1lLm11bChyLGkpKSxpPWUuc3FyKGkpLG4+Pj1pdDtyZXR1cm4gcn1mdW5jdGlvbiB2dChlLHQpe2NvbnN0IG49bmV3IEFycmF5KHQubGVuZ3RoKSxyPXQucmVkdWNlKCgodCxyLGkpPT5lLmlzMChyKT90OihuW2ldPXQsZS5tdWwodCxyKSkpLGUuT05FKSxpPWUuaW52KHIpO3JldHVybiB0LnJlZHVjZVJpZ2h0KCgodCxyLGkpPT5lLmlzMChyKT90OihuW2ldPWUubXVsKHQsbltpXSksZS5tdWwodCxyKSkpLGkpLG59ZnVuY3Rpb24geXQoZSl7Y29uc3QgdD0oZS1pdCkvb3Q7cmV0dXJuKGUsbik9PmUucG93KG4sdCl9ZnVuY3Rpb24gRXQoZSx0KXtjb25zdCBuPXZvaWQgMCE9PXQ/dDplLnRvU3RyaW5nKDIpLmxlbmd0aDtyZXR1cm57bkJpdExlbmd0aDpuLG5CeXRlTGVuZ3RoOk1hdGguY2VpbChuLzgpfX1mdW5jdGlvbiBidChlKXtpZihcImJpZ2ludFwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJmaWVsZCBvcmRlciBtdXN0IGJlIGJpZ2ludFwiKTtjb25zdCB0PWUudG9TdHJpbmcoMikubGVuZ3RoO3JldHVybiBNYXRoLmNlaWwodC84KX1mdW5jdGlvbiB3dChlKXtjb25zdCB0PWJ0KGUpO3JldHVybiB0K01hdGguY2VpbCh0LzIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxOZS53TkFGPWZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj0oZSx0KT0+e2NvbnN0IG49dC5uZWdhdGUoKTtyZXR1cm4gZT9uOnR9LHI9ZT0+e2lmKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihlKXx8ZTw9MHx8ZT50KXRocm93IG5ldyBFcnJvcihgV3Jvbmcgd2luZG93IHNpemU9JHtlfSwgc2hvdWxkIGJlIFsxLi4ke3R9XWApfSxpPWU9PntyKGUpO3JldHVybnt3aW5kb3dzOk1hdGguY2VpbCh0L2UpKzEsd2luZG93U2l6ZToyKiooZS0xKX19O3JldHVybntjb25zdFRpbWVOZWdhdGU6bix1bnNhZmVMYWRkZXIodCxuKXtsZXQgcj1lLlpFUk8saT10O2Zvcig7bj5DdDspbiZ4dCYmKHI9ci5hZGQoaSkpLGk9aS5kb3VibGUoKSxuPj49eHQ7cmV0dXJuIHJ9LHByZWNvbXB1dGVXaW5kb3coZSx0KXtjb25zdHt3aW5kb3dzOm4sd2luZG93U2l6ZTpyfT1pKHQpLG89W107bGV0IHM9ZSxhPXM7Zm9yKGxldCBlPTA7ZTxuO2UrKyl7YT1zLG8ucHVzaChhKTtmb3IobGV0IGU9MTtlPHI7ZSsrKWE9YS5hZGQocyksby5wdXNoKGEpO3M9YS5kb3VibGUoKX1yZXR1cm4gb30sd05BRih0LHIsbyl7Y29uc3R7d2luZG93czpzLHdpbmRvd1NpemU6YX09aSh0KTtsZXQgYz1lLlpFUk8sZD1lLkJBU0U7Y29uc3QgbD1CaWdJbnQoMioqdC0xKSx1PTIqKnQsaD1CaWdJbnQodCk7Zm9yKGxldCBlPTA7ZTxzO2UrKyl7Y29uc3QgdD1lKmE7bGV0IGk9TnVtYmVyKG8mbCk7bz4+PWgsaT5hJiYoaS09dSxvKz14dCk7Y29uc3Qgcz10LGY9dCtNYXRoLmFicyhpKS0xLHA9ZSUyIT0wLG09aTwwOzA9PT1pP2Q9ZC5hZGQobihwLHJbc10pKTpjPWMuYWRkKG4obSxyW2ZdKSl9cmV0dXJue3A6YyxmOmR9fSx3TkFGQ2FjaGVkKGUsdCxuKXtjb25zdCByPU10LmdldChlKXx8MTtsZXQgaT1rdC5nZXQoZSk7cmV0dXJuIGl8fChpPXRoaXMucHJlY29tcHV0ZVdpbmRvdyhlLHIpLDEhPT1yJiZrdC5zZXQoZSxuKGkpKSksdGhpcy53TkFGKHIsaSx0KX0sc2V0V2luZG93U2l6ZShlLHQpe3IodCksTXQuc2V0KGUsdCksa3QuZGVsZXRlKGUpfX19LE5lLnBpcHBlbmdlcj1mdW5jdGlvbihlLHQsbixyKXtpZighQXJyYXkuaXNBcnJheShuKXx8IUFycmF5LmlzQXJyYXkocil8fHIubGVuZ3RoIT09bi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiYXJyYXlzIG9mIHBvaW50cyBhbmQgc2NhbGFycyBtdXN0IGhhdmUgZXF1YWwgbGVuZ3RoXCIpO3IuZm9yRWFjaCgoKGUsbik9PntpZighdC5pc1ZhbGlkKGUpKXRocm93IG5ldyBFcnJvcihgd3Jvbmcgc2NhbGFyIGF0IGluZGV4ICR7bn1gKX0pKSxuLmZvckVhY2goKCh0LG4pPT57aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IEVycm9yKGB3cm9uZyBwb2ludCBhdCBpbmRleCAke259YCl9KSk7Y29uc3QgaT0oMCxfdC5iaXRMZW4pKEJpZ0ludChuLmxlbmd0aCkpLG89aT4xMj9pLTM6aT40P2ktMjppPzI6MSxzPSgxPDxvKS0xLGE9bmV3IEFycmF5KHMrMSkuZmlsbChlLlpFUk8pLGM9TWF0aC5mbG9vcigodC5CSVRTLTEpL28pKm87bGV0IGQ9ZS5aRVJPO2ZvcihsZXQgdD1jO3Q+PTA7dC09byl7YS5maWxsKGUuWkVSTyk7Zm9yKGxldCBlPTA7ZTxyLmxlbmd0aDtlKyspe2NvbnN0IGk9cltlXSxvPU51bWJlcihpPj5CaWdJbnQodCkmQmlnSW50KHMpKTthW29dPWFbb10uYWRkKG5bZV0pfWxldCBpPWUuWkVSTztmb3IobGV0IHQ9YS5sZW5ndGgtMSxuPWUuWkVSTzt0PjA7dC0tKW49bi5hZGQoYVt0XSksaT1pLmFkZChuKTtpZihkPWQuYWRkKGkpLDAhPT10KWZvcihsZXQgZT0wO2U8bztlKyspZD1kLmRvdWJsZSgpfXJldHVybiBkfSxOZS52YWxpZGF0ZUJhc2ljPWZ1bmN0aW9uKGUpe3JldHVybigwLFN0LnZhbGlkYXRlRmllbGQpKGUuRnApLCgwLF90LnZhbGlkYXRlT2JqZWN0KShlLHtuOlwiYmlnaW50XCIsaDpcImJpZ2ludFwiLEd4OlwiZmllbGRcIixHeTpcImZpZWxkXCJ9LHtuQml0TGVuZ3RoOlwiaXNTYWZlSW50ZWdlclwiLG5CeXRlTGVuZ3RoOlwiaXNTYWZlSW50ZWdlclwifSksT2JqZWN0LmZyZWV6ZSh7Li4uKDAsU3Qubkxlbmd0aCkoZS5uLGUubkJpdExlbmd0aCksLi4uZSxwOmUuRnAuT1JERVJ9KX07Y29uc3QgU3Q9RGUsX3Q9TGUsQ3Q9QmlnSW50KDApLHh0PUJpZ0ludCgxKSxrdD1uZXcgV2Vha01hcCxNdD1uZXcgV2Vha01hcDtPYmplY3QuZGVmaW5lUHJvcGVydHkoT2UsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksT2UudHdpc3RlZEVkd2FyZHM9ZnVuY3Rpb24oZSl7Y29uc3QgdD1mdW5jdGlvbihlKXtjb25zdCB0PSgwLEF0LnZhbGlkYXRlQmFzaWMpKGUpO3JldHVybiBJdC52YWxpZGF0ZU9iamVjdChlLHtoYXNoOlwiZnVuY3Rpb25cIixhOlwiYmlnaW50XCIsZDpcImJpZ2ludFwiLHJhbmRvbUJ5dGVzOlwiZnVuY3Rpb25cIn0se2FkanVzdFNjYWxhckJ5dGVzOlwiZnVuY3Rpb25cIixkb21haW46XCJmdW5jdGlvblwiLHV2UmF0aW86XCJmdW5jdGlvblwiLG1hcFRvQ3VydmU6XCJmdW5jdGlvblwifSksT2JqZWN0LmZyZWV6ZSh7Li4udH0pfShlKSx7RnA6bixuOnIscHJlaGFzaDppLGhhc2g6byxyYW5kb21CeXRlczpzLG5CeXRlTGVuZ3RoOmEsaDpjfT10LGQ9TnQ8PEJpZ0ludCg4KmEpLU90LGw9bi5jcmVhdGUsdT0oMCxUdC5GaWVsZCkodC5uLHQubkJpdExlbmd0aCksaD10LnV2UmF0aW98fCgoZSx0KT0+e3RyeXtyZXR1cm57aXNWYWxpZDohMCx2YWx1ZTpuLnNxcnQoZSpuLmludih0KSl9fWNhdGNoKGUpe3JldHVybntpc1ZhbGlkOiExLHZhbHVlOlJ0fX19KSxmPXQuYWRqdXN0U2NhbGFyQnl0ZXN8fChlPT5lKSxwPXQuZG9tYWlufHwoKGUsdCxuKT0+e2lmKCgwLFB0LmFib29sKShcInBoZmxhZ1wiLG4pLHQubGVuZ3RofHxuKXRocm93IG5ldyBFcnJvcihcIkNvbnRleHRzL3ByZS1oYXNoIGFyZSBub3Qgc3VwcG9ydGVkXCIpO3JldHVybiBlfSk7ZnVuY3Rpb24gbShlLHQpe0l0LmFJblJhbmdlKFwiY29vcmRpbmF0ZSBcIitlLHQsUnQsZCl9ZnVuY3Rpb24gZyhlKXtpZighKGUgaW5zdGFuY2VvZiBFKSl0aHJvdyBuZXcgRXJyb3IoXCJFeHRlbmRlZFBvaW50IGV4cGVjdGVkXCIpfWNvbnN0IHY9KDAsUHQubWVtb2l6ZWQpKCgoZSx0KT0+e2NvbnN0e2V4OnIsZXk6aSxlejpvfT1lLHM9ZS5pczAoKTtudWxsPT10JiYodD1zP0R0Om4uaW52KG8pKTtjb25zdCBhPWwocip0KSxjPWwoaSp0KSxkPWwobyp0KTtpZihzKXJldHVybnt4OlJ0LHk6T3R9O2lmKGQhPT1PdCl0aHJvdyBuZXcgRXJyb3IoXCJpbnZaIHdhcyBpbnZhbGlkXCIpO3JldHVybnt4OmEseTpjfX0pKSx5PSgwLFB0Lm1lbW9pemVkKSgoZT0+e2NvbnN0e2E6bixkOnJ9PXQ7aWYoZS5pczAoKSl0aHJvdyBuZXcgRXJyb3IoXCJiYWQgcG9pbnQ6IFpFUk9cIik7Y29uc3R7ZXg6aSxleTpvLGV6OnMsZXQ6YX09ZSxjPWwoaSppKSxkPWwobypvKSx1PWwocypzKSxoPWwodSp1KSxmPWwoYypuKTtpZihsKHUqbChmK2QpKSE9PWwoaCtsKHIqbChjKmQpKSkpdGhyb3cgbmV3IEVycm9yKFwiYmFkIHBvaW50OiBlcXVhdGlvbiBsZWZ0ICE9IHJpZ2h0ICgxKVwiKTtpZihsKGkqbykhPT1sKHMqYSkpdGhyb3cgbmV3IEVycm9yKFwiYmFkIHBvaW50OiBlcXVhdGlvbiBsZWZ0ICE9IHJpZ2h0ICgyKVwiKTtyZXR1cm4hMH0pKTtjbGFzcyBFe2NvbnN0cnVjdG9yKGUsdCxuLHIpe3RoaXMuZXg9ZSx0aGlzLmV5PXQsdGhpcy5lej1uLHRoaXMuZXQ9cixtKFwieFwiLGUpLG0oXCJ5XCIsdCksbShcInpcIixuKSxtKFwidFwiLHIpLE9iamVjdC5mcmVlemUodGhpcyl9Z2V0IHgoKXtyZXR1cm4gdGhpcy50b0FmZmluZSgpLnh9Z2V0IHkoKXtyZXR1cm4gdGhpcy50b0FmZmluZSgpLnl9c3RhdGljIGZyb21BZmZpbmUoZSl7aWYoZSBpbnN0YW5jZW9mIEUpdGhyb3cgbmV3IEVycm9yKFwiZXh0ZW5kZWQgcG9pbnQgbm90IGFsbG93ZWRcIik7Y29uc3R7eDp0LHk6bn09ZXx8e307cmV0dXJuIG0oXCJ4XCIsdCksbShcInlcIixuKSxuZXcgRSh0LG4sT3QsbCh0Km4pKX1zdGF0aWMgbm9ybWFsaXplWihlKXtjb25zdCB0PW4uaW52ZXJ0QmF0Y2goZS5tYXAoKGU9PmUuZXopKSk7cmV0dXJuIGUubWFwKCgoZSxuKT0+ZS50b0FmZmluZSh0W25dKSkpLm1hcChFLmZyb21BZmZpbmUpfXN0YXRpYyBtc20oZSx0KXtyZXR1cm4oMCxBdC5waXBwZW5nZXIpKEUsdSxlLHQpfV9zZXRXaW5kb3dTaXplKGUpe1Muc2V0V2luZG93U2l6ZSh0aGlzLGUpfWFzc2VydFZhbGlkaXR5KCl7eSh0aGlzKX1lcXVhbHMoZSl7ZyhlKTtjb25zdHtleDp0LGV5Om4sZXo6cn09dGhpcyx7ZXg6aSxleTpvLGV6OnN9PWUsYT1sKHQqcyksYz1sKGkqciksZD1sKG4qcyksdT1sKG8qcik7cmV0dXJuIGE9PT1jJiZkPT09dX1pczAoKXtyZXR1cm4gdGhpcy5lcXVhbHMoRS5aRVJPKX1uZWdhdGUoKXtyZXR1cm4gbmV3IEUobCgtdGhpcy5leCksdGhpcy5leSx0aGlzLmV6LGwoLXRoaXMuZXQpKX1kb3VibGUoKXtjb25zdHthOmV9PXQse2V4Om4sZXk6cixlejppfT10aGlzLG89bChuKm4pLHM9bChyKnIpLGE9bChOdCpsKGkqaSkpLGM9bChlKm8pLGQ9bityLHU9bChsKGQqZCktby1zKSxoPWMrcyxmPWgtYSxwPWMtcyxtPWwodSpmKSxnPWwoaCpwKSx2PWwodSpwKSx5PWwoZipoKTtyZXR1cm4gbmV3IEUobSxnLHksdil9YWRkKGUpe2coZSk7Y29uc3R7YTpuLGQ6cn09dCx7ZXg6aSxleTpvLGV6OnMsZXQ6YX09dGhpcyx7ZXg6YyxleTpkLGV6OnUsZXQ6aH09ZTtpZihuPT09QmlnSW50KC0xKSl7Y29uc3QgZT1sKChvLWkpKihkK2MpKSx0PWwoKG8raSkqKGQtYykpLG49bCh0LWUpO2lmKG49PT1SdClyZXR1cm4gdGhpcy5kb3VibGUoKTtjb25zdCByPWwocypOdCpoKSxmPWwoYSpOdCp1KSxwPWYrcixtPXQrZSxnPWYtcix2PWwocCpuKSx5PWwobSpnKSxiPWwocCpnKSx3PWwobiptKTtyZXR1cm4gbmV3IEUodix5LHcsYil9Y29uc3QgZj1sKGkqYykscD1sKG8qZCksbT1sKGEqcipoKSx2PWwocyp1KSx5PWwoKGkrbykqKGMrZCktZi1wKSxiPXYtbSx3PXYrbSxTPWwocC1uKmYpLF89bCh5KmIpLEM9bCh3KlMpLHg9bCh5KlMpLGs9bChiKncpO3JldHVybiBuZXcgRShfLEMsayx4KX1zdWJ0cmFjdChlKXtyZXR1cm4gdGhpcy5hZGQoZS5uZWdhdGUoKSl9d05BRihlKXtyZXR1cm4gUy53TkFGQ2FjaGVkKHRoaXMsZSxFLm5vcm1hbGl6ZVopfW11bHRpcGx5KGUpe2NvbnN0IHQ9ZTtJdC5hSW5SYW5nZShcInNjYWxhclwiLHQsT3Qscik7Y29uc3R7cDpuLGY6aX09dGhpcy53TkFGKHQpO3JldHVybiBFLm5vcm1hbGl6ZVooW24saV0pWzBdfW11bHRpcGx5VW5zYWZlKGUpe2NvbnN0IHQ9ZTtyZXR1cm4gSXQuYUluUmFuZ2UoXCJzY2FsYXJcIix0LFJ0LHIpLHQ9PT1SdD93OnRoaXMuZXF1YWxzKHcpfHx0PT09T3Q/dGhpczp0aGlzLmVxdWFscyhiKT90aGlzLndOQUYodCkucDpTLnVuc2FmZUxhZGRlcih0aGlzLHQpfWlzU21hbGxPcmRlcigpe3JldHVybiB0aGlzLm11bHRpcGx5VW5zYWZlKGMpLmlzMCgpfWlzVG9yc2lvbkZyZWUoKXtyZXR1cm4gUy51bnNhZmVMYWRkZXIodGhpcyxyKS5pczAoKX10b0FmZmluZShlKXtyZXR1cm4gdih0aGlzLGUpfWNsZWFyQ29mYWN0b3IoKXtjb25zdHtoOmV9PXQ7cmV0dXJuIGU9PT1PdD90aGlzOnRoaXMubXVsdGlwbHlVbnNhZmUoZSl9c3RhdGljIGZyb21IZXgoZSxyPSExKXtjb25zdHtkOmksYTpvfT10LHM9bi5CWVRFUztlPSgwLFB0LmVuc3VyZUJ5dGVzKShcInBvaW50SGV4XCIsZSxzKSwoMCxQdC5hYm9vbCkoXCJ6aXAyMTVcIixyKTtjb25zdCBhPWUuc2xpY2UoKSxjPWVbcy0xXTthW3MtMV09LTEyOSZjO2NvbnN0IHU9SXQuYnl0ZXNUb051bWJlckxFKGEpLGY9cj9kOm4uT1JERVI7SXQuYUluUmFuZ2UoXCJwb2ludEhleC55XCIsdSxSdCxmKTtjb25zdCBwPWwodSp1KSxtPWwocC1PdCksZz1sKGkqcC1vKTtsZXR7aXNWYWxpZDp2LHZhbHVlOnl9PWgobSxnKTtpZighdil0aHJvdyBuZXcgRXJyb3IoXCJQb2ludC5mcm9tSGV4OiBpbnZhbGlkIHkgY29vcmRpbmF0ZVwiKTtjb25zdCBiPSh5Jk90KT09PU90LHc9MCE9KDEyOCZjKTtpZighciYmeT09PVJ0JiZ3KXRocm93IG5ldyBFcnJvcihcIlBvaW50LmZyb21IZXg6IHg9MCBhbmQgeF8wPTFcIik7cmV0dXJuIHchPT1iJiYoeT1sKC15KSksRS5mcm9tQWZmaW5lKHt4OnkseTp1fSl9c3RhdGljIGZyb21Qcml2YXRlS2V5KGUpe3JldHVybiB4KGUpLnBvaW50fXRvUmF3Qnl0ZXMoKXtjb25zdHt4OmUseTp0fT10aGlzLnRvQWZmaW5lKCkscj1JdC5udW1iZXJUb0J5dGVzTEUodCxuLkJZVEVTKTtyZXR1cm4gcltyLmxlbmd0aC0xXXw9ZSZPdD8xMjg6MCxyfXRvSGV4KCl7cmV0dXJuIEl0LmJ5dGVzVG9IZXgodGhpcy50b1Jhd0J5dGVzKCkpfX1FLkJBU0U9bmV3IEUodC5HeCx0Lkd5LE90LGwodC5HeCp0Lkd5KSksRS5aRVJPPW5ldyBFKFJ0LE90LE90LFJ0KTtjb25zdHtCQVNFOmIsWkVSTzp3fT1FLFM9KDAsQXQud05BRikoRSw4KmEpO2Z1bmN0aW9uIF8oZSl7cmV0dXJuKDAsVHQubW9kKShlLHIpfWZ1bmN0aW9uIEMoZSl7cmV0dXJuIF8oSXQuYnl0ZXNUb051bWJlckxFKGUpKX1mdW5jdGlvbiB4KGUpe2NvbnN0IHQ9YTtlPSgwLFB0LmVuc3VyZUJ5dGVzKShcInByaXZhdGUga2V5XCIsZSx0KTtjb25zdCBuPSgwLFB0LmVuc3VyZUJ5dGVzKShcImhhc2hlZCBwcml2YXRlIGtleVwiLG8oZSksMip0KSxyPWYobi5zbGljZSgwLHQpKSxpPW4uc2xpY2UodCwyKnQpLHM9QyhyKSxjPWIubXVsdGlwbHkocyksZD1jLnRvUmF3Qnl0ZXMoKTtyZXR1cm57aGVhZDpyLHByZWZpeDppLHNjYWxhcjpzLHBvaW50OmMscG9pbnRCeXRlczpkfX1mdW5jdGlvbiBrKGU9bmV3IFVpbnQ4QXJyYXksLi4udCl7Y29uc3Qgbj1JdC5jb25jYXRCeXRlcyguLi50KTtyZXR1cm4gQyhvKHAobiwoMCxQdC5lbnN1cmVCeXRlcykoXCJjb250ZXh0XCIsZSksISFpKSkpfWNvbnN0IE09THQ7Yi5fc2V0V2luZG93U2l6ZSg4KTtjb25zdCBBPXtnZXRFeHRlbmRlZFB1YmxpY0tleTp4LHJhbmRvbVByaXZhdGVLZXk6KCk9PnMobi5CWVRFUykscHJlY29tcHV0ZTooZT04LHQ9RS5CQVNFKT0+KHQuX3NldFdpbmRvd1NpemUoZSksdC5tdWx0aXBseShCaWdJbnQoMykpLHQpfTtyZXR1cm57Q1VSVkU6dCxnZXRQdWJsaWNLZXk6ZnVuY3Rpb24oZSl7cmV0dXJuIHgoZSkucG9pbnRCeXRlc30sc2lnbjpmdW5jdGlvbihlLHQsbz17fSl7ZT0oMCxQdC5lbnN1cmVCeXRlcykoXCJtZXNzYWdlXCIsZSksaSYmKGU9aShlKSk7Y29uc3R7cHJlZml4OnMsc2NhbGFyOmMscG9pbnRCeXRlczpkfT14KHQpLGw9ayhvLmNvbnRleHQscyxlKSx1PWIubXVsdGlwbHkobCkudG9SYXdCeXRlcygpLGg9XyhsK2soby5jb250ZXh0LHUsZCxlKSpjKTtJdC5hSW5SYW5nZShcInNpZ25hdHVyZS5zXCIsaCxSdCxyKTtjb25zdCBmPUl0LmNvbmNhdEJ5dGVzKHUsSXQubnVtYmVyVG9CeXRlc0xFKGgsbi5CWVRFUykpO3JldHVybigwLFB0LmVuc3VyZUJ5dGVzKShcInJlc3VsdFwiLGYsMiphKX0sdmVyaWZ5OmZ1bmN0aW9uKGUsdCxyLG89TSl7Y29uc3R7Y29udGV4dDpzLHppcDIxNTphfT1vLGM9bi5CWVRFUztlPSgwLFB0LmVuc3VyZUJ5dGVzKShcInNpZ25hdHVyZVwiLGUsMipjKSx0PSgwLFB0LmVuc3VyZUJ5dGVzKShcIm1lc3NhZ2VcIix0KSx2b2lkIDAhPT1hJiYoMCxQdC5hYm9vbCkoXCJ6aXAyMTVcIixhKSxpJiYodD1pKHQpKTtjb25zdCBkPUl0LmJ5dGVzVG9OdW1iZXJMRShlLnNsaWNlKGMsMipjKSk7bGV0IGwsdSxoO3RyeXtsPUUuZnJvbUhleChyLGEpLHU9RS5mcm9tSGV4KGUuc2xpY2UoMCxjKSxhKSxoPWIubXVsdGlwbHlVbnNhZmUoZCl9Y2F0Y2goZSl7cmV0dXJuITF9aWYoIWEmJmwuaXNTbWFsbE9yZGVyKCkpcmV0dXJuITE7Y29uc3QgZj1rKHMsdS50b1Jhd0J5dGVzKCksbC50b1Jhd0J5dGVzKCksdCk7cmV0dXJuIHUuYWRkKGwubXVsdGlwbHlVbnNhZmUoZikpLnN1YnRyYWN0KGgpLmNsZWFyQ29mYWN0b3IoKS5lcXVhbHMoRS5aRVJPKX0sRXh0ZW5kZWRQb2ludDpFLHV0aWxzOkF9fTtjb25zdCBBdD1OZSxUdD1EZSxJdD1MZSxQdD1MZSxSdD1CaWdJbnQoMCksT3Q9QmlnSW50KDEpLE50PUJpZ0ludCgyKSxEdD1CaWdJbnQoOCksTHQ9e3ppcDIxNTohMH07dmFyIEJ0PXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShCdCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxCdC5leHBhbmRfbWVzc2FnZV94bWQ9cXQsQnQuZXhwYW5kX21lc3NhZ2VfeG9mPXp0LEJ0Lmhhc2hfdG9fZmllbGQ9V3QsQnQuaXNvZ2VueU1hcD1mdW5jdGlvbihlLHQpe2NvbnN0IG49dC5tYXAoKGU9PkFycmF5LmZyb20oZSkucmV2ZXJzZSgpKSk7cmV0dXJuKHQscik9Pntjb25zdFtpLG8scyxhXT1uLm1hcCgobj0+bi5yZWR1Y2UoKChuLHIpPT5lLmFkZChlLm11bChuLHQpLHIpKSkpKTtyZXR1cm4gdD1lLmRpdihpLG8pLHI9ZS5tdWwocixlLmRpdihzLGEpKSx7eDp0LHk6cn19fSxCdC5jcmVhdGVIYXNoZXI9ZnVuY3Rpb24oZSx0LG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwibWFwVG9DdXJ2ZSgpIG11c3QgYmUgZGVmaW5lZFwiKTtyZXR1cm57aGFzaFRvQ3VydmUocixpKXtjb25zdCBvPVd0KHIsMix7Li4ubixEU1Q6bi5EU1QsLi4uaX0pLHM9ZS5mcm9tQWZmaW5lKHQob1swXSkpLGE9ZS5mcm9tQWZmaW5lKHQob1sxXSkpLGM9cy5hZGQoYSkuY2xlYXJDb2ZhY3RvcigpO3JldHVybiBjLmFzc2VydFZhbGlkaXR5KCksY30sZW5jb2RlVG9DdXJ2ZShyLGkpe2NvbnN0IG89V3QociwxLHsuLi5uLERTVDpuLmVuY29kZURTVCwuLi5pfSkscz1lLmZyb21BZmZpbmUodChvWzBdKSkuY2xlYXJDb2ZhY3RvcigpO3JldHVybiBzLmFzc2VydFZhbGlkaXR5KCksc30sbWFwVG9DdXJ2ZShuKXtpZighQXJyYXkuaXNBcnJheShuKSl0aHJvdyBuZXcgRXJyb3IoXCJtYXBUb0N1cnZlOiBleHBlY3RlZCBhcnJheSBvZiBiaWdpbnRzXCIpO2Zvcihjb25zdCBlIG9mIG4paWYoXCJiaWdpbnRcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKGBtYXBUb0N1cnZlOiBleHBlY3RlZCBhcnJheSBvZiBiaWdpbnRzLCBnb3QgJHtlfSBpbiBhcnJheWApO2NvbnN0IHI9ZS5mcm9tQWZmaW5lKHQobikpLmNsZWFyQ29mYWN0b3IoKTtyZXR1cm4gci5hc3NlcnRWYWxpZGl0eSgpLHJ9fX07Y29uc3QgS3Q9RGUsanQ9TGUsJHQ9anQuYnl0ZXNUb051bWJlckJFO2Z1bmN0aW9uIEh0KGUsdCl7aWYoRnQoZSksRnQodCksZTwwfHxlPj0xPDw4KnQpdGhyb3cgbmV3IEVycm9yKGBiYWQgSTJPU1AgY2FsbDogdmFsdWU9JHtlfSBsZW5ndGg9JHt0fWApO2NvbnN0IG49QXJyYXkuZnJvbSh7bGVuZ3RoOnR9KS5maWxsKDApO2ZvcihsZXQgcj10LTE7cj49MDtyLS0pbltyXT0yNTUmZSxlPj4+PTg7cmV0dXJuIG5ldyBVaW50OEFycmF5KG4pfWZ1bmN0aW9uIFV0KGUsdCl7Y29uc3Qgbj1uZXcgVWludDhBcnJheShlLmxlbmd0aCk7Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKyspbltyXT1lW3JdXnRbcl07cmV0dXJuIG59ZnVuY3Rpb24gRnQoZSl7aWYoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGUpKXRocm93IG5ldyBFcnJvcihcIm51bWJlciBleHBlY3RlZFwiKX1mdW5jdGlvbiBxdChlLHQsbixyKXsoMCxqdC5hYnl0ZXMpKGUpLCgwLGp0LmFieXRlcykodCksRnQobiksdC5sZW5ndGg+MjU1JiYodD1yKCgwLGp0LmNvbmNhdEJ5dGVzKSgoMCxqdC51dGY4VG9CeXRlcykoXCJIMkMtT1ZFUlNJWkUtRFNULVwiKSx0KSkpO2NvbnN0e291dHB1dExlbjppLGJsb2NrTGVuOm99PXIscz1NYXRoLmNlaWwobi9pKTtpZihuPjY1NTM1fHxzPjI1NSl0aHJvdyBuZXcgRXJyb3IoXCJleHBhbmRfbWVzc2FnZV94bWQ6IGludmFsaWQgbGVuSW5CeXRlc1wiKTtjb25zdCBhPSgwLGp0LmNvbmNhdEJ5dGVzKSh0LEh0KHQubGVuZ3RoLDEpKSxjPUh0KDAsbyksZD1IdChuLDIpLGw9bmV3IEFycmF5KHMpLHU9cigoMCxqdC5jb25jYXRCeXRlcykoYyxlLGQsSHQoMCwxKSxhKSk7bFswXT1yKCgwLGp0LmNvbmNhdEJ5dGVzKSh1LEh0KDEsMSksYSkpO2ZvcihsZXQgZT0xO2U8PXM7ZSsrKXtjb25zdCB0PVtVdCh1LGxbZS0xXSksSHQoZSsxLDEpLGFdO2xbZV09cigoMCxqdC5jb25jYXRCeXRlcykoLi4udCkpfXJldHVybigwLGp0LmNvbmNhdEJ5dGVzKSguLi5sKS5zbGljZSgwLG4pfWZ1bmN0aW9uIHp0KGUsdCxuLHIsaSl7aWYoKDAsanQuYWJ5dGVzKShlKSwoMCxqdC5hYnl0ZXMpKHQpLEZ0KG4pLHQubGVuZ3RoPjI1NSl7Y29uc3QgZT1NYXRoLmNlaWwoMipyLzgpO3Q9aS5jcmVhdGUoe2RrTGVuOmV9KS51cGRhdGUoKDAsanQudXRmOFRvQnl0ZXMpKFwiSDJDLU9WRVJTSVpFLURTVC1cIikpLnVwZGF0ZSh0KS5kaWdlc3QoKX1pZihuPjY1NTM1fHx0Lmxlbmd0aD4yNTUpdGhyb3cgbmV3IEVycm9yKFwiZXhwYW5kX21lc3NhZ2VfeG9mOiBpbnZhbGlkIGxlbkluQnl0ZXNcIik7cmV0dXJuIGkuY3JlYXRlKHtka0xlbjpufSkudXBkYXRlKGUpLnVwZGF0ZShIdChuLDIpKS51cGRhdGUodCkudXBkYXRlKEh0KHQubGVuZ3RoLDEpKS5kaWdlc3QoKX1mdW5jdGlvbiBXdChlLHQsbil7KDAsanQudmFsaWRhdGVPYmplY3QpKG4se0RTVDpcInN0cmluZ09yVWludDhBcnJheVwiLHA6XCJiaWdpbnRcIixtOlwiaXNTYWZlSW50ZWdlclwiLGs6XCJpc1NhZmVJbnRlZ2VyXCIsaGFzaDpcImhhc2hcIn0pO2NvbnN0e3A6cixrOmksbTpvLGhhc2g6cyxleHBhbmQ6YSxEU1Q6Y309bjsoMCxqdC5hYnl0ZXMpKGUpLEZ0KHQpO2NvbnN0IGQ9XCJzdHJpbmdcIj09dHlwZW9mIGM/KDAsanQudXRmOFRvQnl0ZXMpKGMpOmMsbD1yLnRvU3RyaW5nKDIpLmxlbmd0aCx1PU1hdGguY2VpbCgobCtpKS84KSxoPXQqbyp1O2xldCBmO2lmKFwieG1kXCI9PT1hKWY9cXQoZSxkLGgscyk7ZWxzZSBpZihcInhvZlwiPT09YSlmPXp0KGUsZCxoLGkscyk7ZWxzZXtpZihcIl9pbnRlcm5hbF9wYXNzXCIhPT1hKXRocm93IG5ldyBFcnJvcignZXhwYW5kIG11c3QgYmUgXCJ4bWRcIiBvciBcInhvZlwiJyk7Zj1lfWNvbnN0IHA9bmV3IEFycmF5KHQpO2ZvcihsZXQgZT0wO2U8dDtlKyspe2NvbnN0IHQ9bmV3IEFycmF5KG8pO2ZvcihsZXQgbj0wO248bztuKyspe2NvbnN0IGk9dSoobitlKm8pLHM9Zi5zdWJhcnJheShpLGkrdSk7dFtuXT0oMCxLdC5tb2QpKCR0KHMpLHIpfXBbZV09dH1yZXR1cm4gcH12YXIgVnQ9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFZ0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLFZ0Lm1vbnRnb21lcnk9ZnVuY3Rpb24oZSl7Y29uc3QgdD1mdW5jdGlvbihlKXtyZXR1cm4oMCxZdC52YWxpZGF0ZU9iamVjdCkoZSx7YTpcImJpZ2ludFwifSx7bW9udGdvbWVyeUJpdHM6XCJpc1NhZmVJbnRlZ2VyXCIsbkJ5dGVMZW5ndGg6XCJpc1NhZmVJbnRlZ2VyXCIsYWRqdXN0U2NhbGFyQnl0ZXM6XCJmdW5jdGlvblwiLGRvbWFpbjpcImZ1bmN0aW9uXCIscG93UG1pbnVzMjpcImZ1bmN0aW9uXCIsR3U6XCJiaWdpbnRcIn0pLE9iamVjdC5mcmVlemUoey4uLmV9KX0oZSkse1A6bn09dCxyPWU9PigwLEd0Lm1vZCkoZSxuKSxpPXQubW9udGdvbWVyeUJpdHMsbz1NYXRoLmNlaWwoaS84KSxzPXQubkJ5dGVMZW5ndGgsYT10LmFkanVzdFNjYWxhckJ5dGVzfHwoZT0+ZSksYz10LnBvd1BtaW51czJ8fChlPT4oMCxHdC5wb3cpKGUsbi1CaWdJbnQoMiksbikpO2Z1bmN0aW9uIGQoZSx0LG4pe2NvbnN0IGk9cihlKih0LW4pKTtyZXR1cm5bdD1yKHQtaSksbj1yKG4raSldfWNvbnN0IGw9KHQuYS1CaWdJbnQoMikpL0JpZ0ludCg0KTtmdW5jdGlvbiB1KGUpe3JldHVybigwLFl0Lm51bWJlclRvQnl0ZXNMRSkocihlKSxvKX1mdW5jdGlvbiBoKGUsdCl7Y29uc3QgaD1mdW5jdGlvbihlKXtjb25zdCB0PSgwLFl0LmVuc3VyZUJ5dGVzKShcInUgY29vcmRpbmF0ZVwiLGUsbyk7cmV0dXJuIDMyPT09cyYmKHRbMzFdJj0xMjcpLCgwLFl0LmJ5dGVzVG9OdW1iZXJMRSkodCl9KHQpLGY9ZnVuY3Rpb24oZSl7Y29uc3QgdD0oMCxZdC5lbnN1cmVCeXRlcykoXCJzY2FsYXJcIixlKSxuPXQubGVuZ3RoO2lmKG4hPT1vJiZuIT09cyl0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7b30gb3IgJHtzfSBieXRlcywgZ290ICR7bn1gKTtyZXR1cm4oMCxZdC5ieXRlc1RvTnVtYmVyTEUpKGEodCkpfShlKSxwPWZ1bmN0aW9uKGUsdCl7KDAsWXQuYUluUmFuZ2UpKFwidVwiLGUsWnQsbiksKDAsWXQuYUluUmFuZ2UpKFwic2NhbGFyXCIsdCxadCxuKTtjb25zdCBvPXQscz1lO2xldCBhLHU9SnQsaD1adCxmPWUscD1KdCxtPVp0O2ZvcihsZXQgZT1CaWdJbnQoaS0xKTtlPj1adDtlLS0pe2NvbnN0IHQ9bz4+ZSZKdDttXj10LGE9ZChtLHUsZiksdT1hWzBdLGY9YVsxXSxhPWQobSxoLHApLGg9YVswXSxwPWFbMV0sbT10O2NvbnN0IG49dStoLGk9cihuKm4pLGM9dS1oLGc9cihjKmMpLHY9aS1nLHk9ZitwLEU9cigoZi1wKSpuKSxiPXIoeSpjKSx3PUUrYixTPUUtYjtmPXIodyp3KSxwPXIocypyKFMqUykpLHU9cihpKmcpLGg9cih2KihpK3IobCp2KSkpfWE9ZChtLHUsZiksdT1hWzBdLGY9YVsxXSxhPWQobSxoLHApLGg9YVswXSxwPWFbMV07Y29uc3QgZz1jKGgpO3JldHVybiByKHUqZyl9KGgsZik7aWYocD09PVp0KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcHJpdmF0ZSBvciBwdWJsaWMga2V5IHJlY2VpdmVkXCIpO3JldHVybiB1KHApfWNvbnN0IGY9dSh0Lkd1KTtmdW5jdGlvbiBwKGUpe3JldHVybiBoKGUsZil9cmV0dXJue3NjYWxhck11bHQ6aCxzY2FsYXJNdWx0QmFzZTpwLGdldFNoYXJlZFNlY3JldDooZSx0KT0+aChlLHQpLGdldFB1YmxpY0tleTplPT5wKGUpLHV0aWxzOntyYW5kb21Qcml2YXRlS2V5OigpPT50LnJhbmRvbUJ5dGVzKHQubkJ5dGVMZW5ndGgpfSxHdUJ5dGVzOmZ9fTtjb25zdCBHdD1EZSxZdD1MZSxadD1CaWdJbnQoMCksSnQ9QmlnSW50KDEpOyFmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmhhc2hfdG9fcmlzdHJldHRvMjU1PWUuaGFzaFRvUmlzdHJldHRvMjU1PWUuUmlzdHJldHRvUG9pbnQ9ZS5lbmNvZGVUb0N1cnZlPWUuaGFzaFRvQ3VydmU9ZS5lZHdhcmRzVG9Nb250Z29tZXJ5PWUueDI1NTE5PWUuZWQyNTUxOXBoPWUuZWQyNTUxOWN0eD1lLmVkMjU1MTk9ZS5FRDI1NTE5X1RPUlNJT05fU1VCR1JPVVA9dm9pZCAwLGUuZWR3YXJkc1RvTW9udGdvbWVyeVB1Yj1TLGUuZWR3YXJkc1RvTW9udGdvbWVyeVByaXY9ZnVuY3Rpb24oZSl7Y29uc3QgdD1iLmhhc2goZS5zdWJhcnJheSgwLDMyKSk7cmV0dXJuIGIuYWRqdXN0U2NhbGFyQnl0ZXModCkuc3ViYXJyYXkoMCwzMil9O2NvbnN0IHQ9TixuPXoscj1PZSxpPUJ0LG89RGUscz1WdCxhPUxlLGM9QmlnSW50KFwiNTc4OTYwNDQ2MTg2NTgwOTc3MTE3ODU0OTI1MDQzNDM5NTM5MjY2MzQ5OTIzMzI4MjAyODIwMTk3Mjg3OTIwMDM5NTY1NjQ4MTk5NDlcIiksZD1CaWdJbnQoXCIxOTY4MTE2MTM3NjcwNzUwNTk1NjgwNzA3OTMwNDk4ODU0MjAxNTQ0NjA2NjUxNTkyMzg5MDE2Mjc0NDAyMTA3MzEyMzgyOTc4NDc1MlwiKSxsPUJpZ0ludCgwKSx1PUJpZ0ludCgxKSxoPUJpZ0ludCgyKSxmPUJpZ0ludCgzKSxwPUJpZ0ludCg1KSxtPUJpZ0ludCg4KTtmdW5jdGlvbiBnKGUpe2NvbnN0IHQ9QmlnSW50KDEwKSxuPUJpZ0ludCgyMCkscj1CaWdJbnQoNDApLGk9QmlnSW50KDgwKSxzPWMsYT1lKmUlcyplJXMsZD0oMCxvLnBvdzIpKGEsaCxzKSphJXMsbD0oMCxvLnBvdzIpKGQsdSxzKSplJXMsZj0oMCxvLnBvdzIpKGwscCxzKSpsJXMsbT0oMCxvLnBvdzIpKGYsdCxzKSpmJXMsZz0oMCxvLnBvdzIpKG0sbixzKSptJXMsdj0oMCxvLnBvdzIpKGcscixzKSpnJXMseT0oMCxvLnBvdzIpKHYsaSxzKSp2JXMsRT0oMCxvLnBvdzIpKHksaSxzKSp2JXMsYj0oMCxvLnBvdzIpKEUsdCxzKSpmJXM7cmV0dXJue3Bvd19wXzVfODooMCxvLnBvdzIpKGIsaCxzKSplJXMsYjI6YX19ZnVuY3Rpb24gdihlKXtyZXR1cm4gZVswXSY9MjQ4LGVbMzFdJj0xMjcsZVszMV18PTY0LGV9ZnVuY3Rpb24geShlLHQpe2NvbnN0IG49YyxyPSgwLG8ubW9kKSh0KnQqdCxuKSxpPWcoZSooMCxvLm1vZCkocipyKnQsbikpLnBvd19wXzVfODtsZXQgcz0oMCxvLm1vZCkoZSpyKmksbik7Y29uc3QgYT0oMCxvLm1vZCkodCpzKnMsbiksbD1zLHU9KDAsby5tb2QpKHMqZCxuKSxoPWE9PT1lLGY9YT09PSgwLG8ubW9kKSgtZSxuKSxwPWE9PT0oMCxvLm1vZCkoLWUqZCxuKTtyZXR1cm4gaCYmKHM9bCksKGZ8fHApJiYocz11KSwoMCxvLmlzTmVnYXRpdmVMRSkocyxuKSYmKHM9KDAsby5tb2QpKC1zLG4pKSx7aXNWYWxpZDpofHxmLHZhbHVlOnN9fWUuRUQyNTUxOV9UT1JTSU9OX1NVQkdST1VQPVtcIjAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcImM3MTc2YTcwM2Q0ZGQ4NGZiYTNjMGI3NjBkMTA2NzBmMmEyMDUzZmEyYzM5Y2NjNjRlYzdmZDc3OTJhYzAzN2FcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODBcIixcIjI2ZTg5NThmYzJiMjI3YjA0NWMzZjQ4OWYyZWY5OGYwZDVkZmFjMDVkM2M2MzMzOWIxMzgwMjg4NmQ1M2ZjMDVcIixcImVjZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmN2ZcIixcIjI2ZTg5NThmYzJiMjI3YjA0NWMzZjQ4OWYyZWY5OGYwZDVkZmFjMDVkM2M2MzMzOWIxMzgwMjg4NmQ1M2ZjODVcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcImM3MTc2YTcwM2Q0ZGQ4NGZiYTNjMGI3NjBkMTA2NzBmMmEyMDUzZmEyYzM5Y2NjNjRlYzdmZDc3OTJhYzAzZmFcIl07Y29uc3QgRT0oKCk9PigwLG8uRmllbGQpKGMsdm9pZCAwLCEwKSkoKSxiPSgoKT0+KHthOkJpZ0ludCgtMSksZDpCaWdJbnQoXCIzNzA5NTcwNTkzNDY2OTQzOTM0MzEzODA4MzUwODc1NDU2NTE4OTU0MjExMzg3OTg0MzIxOTAxNjM4ODc4NTUzMzA4NTk0MDI4MzU1NVwiKSxGcDpFLG46QmlnSW50KFwiNzIzNzAwNTU3NzMzMjI2MjIxMzk3MzE4NjU2MzA0Mjk5NDI0MDg1NzExNjM1OTM3OTkwNzYwNjAwMTk1MDkzODI4NTQ1NDI1MDk4OVwiKSxoOm0sR3g6QmlnSW50KFwiMTUxMTIyMjEzNDk1MzU0MDA3NzI1MDExNTE0MDk1ODg1MzE1MTE0NTQwMTI2OTMwNDE4NTcyMDYwNDYxMTMyODM5NDk4NDc3NjIyMDJcIiksR3k6QmlnSW50KFwiNDYzMTY4MzU2OTQ5MjY0NzgxNjk0MjgzOTQwMDM0NzUxNjMxNDEzMDc5OTM4NjYyNTYyMjU2MTU3ODMwMzM2MDMxNjUyNTE4NTU5NjBcIiksaGFzaDp0LnNoYTUxMixyYW5kb21CeXRlczpuLnJhbmRvbUJ5dGVzLGFkanVzdFNjYWxhckJ5dGVzOnYsdXZSYXRpbzp5fSkpKCk7ZnVuY3Rpb24gdyhlLHQscil7aWYodC5sZW5ndGg+MjU1KXRocm93IG5ldyBFcnJvcihcIkNvbnRleHQgaXMgdG9vIGJpZ1wiKTtyZXR1cm4oMCxuLmNvbmNhdEJ5dGVzKSgoMCxuLnV0ZjhUb0J5dGVzKShcIlNpZ0VkMjU1MTkgbm8gRWQyNTUxOSBjb2xsaXNpb25zXCIpLG5ldyBVaW50OEFycmF5KFtyPzE6MCx0Lmxlbmd0aF0pLHQsZSl9ZnVuY3Rpb24gUyh0KXtjb25zdHt5Om59PWUuZWQyNTUxOS5FeHRlbmRlZFBvaW50LmZyb21IZXgodCkscj1CaWdJbnQoMSk7cmV0dXJuIEUudG9CeXRlcyhFLmNyZWF0ZSgocituKSpFLmludihyLW4pKSl9ZS5lZDI1NTE5PSgwLHIudHdpc3RlZEVkd2FyZHMpKGIpLGUuZWQyNTUxOWN0eD0oMCxyLnR3aXN0ZWRFZHdhcmRzKSh7Li4uYixkb21haW46d30pLGUuZWQyNTUxOXBoPSgwLHIudHdpc3RlZEVkd2FyZHMpKE9iamVjdC5hc3NpZ24oe30sYix7ZG9tYWluOncscHJlaGFzaDp0LnNoYTUxMn0pKSxlLngyNTUxOT0oMCxzLm1vbnRnb21lcnkpKHtQOmMsYTpCaWdJbnQoNDg2NjYyKSxtb250Z29tZXJ5Qml0czoyNTUsbkJ5dGVMZW5ndGg6MzIsR3U6QmlnSW50KDkpLHBvd1BtaW51czI6ZT0+e2NvbnN0IHQ9Yyx7cG93X3BfNV84Om4sYjI6cn09ZyhlKTtyZXR1cm4oMCxvLm1vZCkoKDAsby5wb3cyKShuLGYsdCkqcix0KX0sYWRqdXN0U2NhbGFyQnl0ZXM6dixyYW5kb21CeXRlczpuLnJhbmRvbUJ5dGVzfSksZS5lZHdhcmRzVG9Nb250Z29tZXJ5PVM7Y29uc3QgXz0oKCk9PihFLk9SREVSK2YpL20pKCksQz0oKCk9PkUucG93KGgsXykpKCkseD0oKCk9PkUuc3FydChFLm5lZyhFLk9ORSkpKSgpO2NvbnN0IGs9KCgpPT4oMCxvLkZwU3FydEV2ZW4pKEUsRS5uZWcoQmlnSW50KDQ4NjY2NCkpKSkoKTtmdW5jdGlvbiBNKGUpe2NvbnN0e3hNbjp0LHhNZDpuLHlNbjpyLHlNZDppfT1mdW5jdGlvbihlKXtjb25zdCB0PShFLk9SREVSLXApL20sbj1CaWdJbnQoNDg2NjYyKTtsZXQgcj1FLnNxcihlKTtyPUUubXVsKHIsaCk7bGV0IGk9RS5hZGQocixFLk9ORSksbz1FLm5lZyhuKSxzPUUuc3FyKGkpLGE9RS5tdWwocyxpKSxjPUUubXVsKHIsbik7Yz1FLm11bChjLG8pLGM9RS5hZGQoYyxzKSxjPUUubXVsKGMsbyk7bGV0IGQ9RS5zcXIoYSk7cz1FLnNxcihkKSxkPUUubXVsKGQsYSksZD1FLm11bChkLGMpLHM9RS5tdWwocyxkKTtsZXQgbD1FLnBvdyhzLHQpO2w9RS5tdWwobCxkKTtsZXQgZj1FLm11bChsLHgpO3M9RS5zcXIobCkscz1FLm11bChzLGEpO2xldCBnPUUuZXFsKHMsYyksdj1FLmNtb3YoZixsLGcpLHk9RS5tdWwobyxyKSxiPUUubXVsKGwsZSk7Yj1FLm11bChiLEMpO2xldCB3PUUubXVsKGIseCksUz1FLm11bChjLHIpO3M9RS5zcXIoYikscz1FLm11bChzLGEpO2xldCBfPUUuZXFsKHMsUyksaz1FLmNtb3YodyxiLF8pO3M9RS5zcXIodikscz1FLm11bChzLGEpO2xldCBNPUUuZXFsKHMsYyksQT1FLmNtb3YoeSxvLE0pLFQ9RS5jbW92KGssdixNKSxJPUUuaXNPZGQoVCk7cmV0dXJuIFQ9RS5jbW92KFQsRS5uZWcoVCksTSE9PUkpLHt4TW46QSx4TWQ6aSx5TW46VCx5TWQ6dX19KGUpO2xldCBvPUUubXVsKHQsaSk7bz1FLm11bChvLGspO2xldCBzPUUubXVsKG4sciksYT1FLnN1Yih0LG4pLGM9RS5hZGQodCxuKSxkPUUubXVsKHMsYyksbD1FLmVxbChkLEUuWkVSTyk7bz1FLmNtb3YobyxFLlpFUk8sbCkscz1FLmNtb3YocyxFLk9ORSxsKSxhPUUuY21vdihhLEUuT05FLGwpLGM9RS5jbW92KGMsRS5PTkUsbCk7Y29uc3QgZj1FLmludmVydEJhdGNoKFtzLGNdKTtyZXR1cm57eDpFLm11bChvLGZbMF0pLHk6RS5tdWwoYSxmWzFdKX19Y29uc3QgQT0oKCk9PigwLGkuY3JlYXRlSGFzaGVyKShlLmVkMjU1MTkuRXh0ZW5kZWRQb2ludCwoZT0+TShlWzBdKSkse0RTVDpcImVkd2FyZHMyNTUxOV9YTUQ6U0hBLTUxMl9FTEwyX1JPX1wiLGVuY29kZURTVDpcImVkd2FyZHMyNTUxOV9YTUQ6U0hBLTUxMl9FTEwyX05VX1wiLHA6RS5PUkRFUixtOjEsazoxMjgsZXhwYW5kOlwieG1kXCIsaGFzaDp0LnNoYTUxMn0pKSgpO2Z1bmN0aW9uIFQoZSl7aWYoIShlIGluc3RhbmNlb2YgJCkpdGhyb3cgbmV3IEVycm9yKFwiUmlzdHJldHRvUG9pbnQgZXhwZWN0ZWRcIil9ZS5oYXNoVG9DdXJ2ZT1BLmhhc2hUb0N1cnZlLGUuZW5jb2RlVG9DdXJ2ZT1BLmVuY29kZVRvQ3VydmU7Y29uc3QgST1kLFA9QmlnSW50KFwiMjUwNjMwNjg5NTMzODQ2MjM0NzQxMTE0MTQxNTg3MDIxNTI3MDEyNDQ1MzE1MDI0OTI2NTY0NjAwNzkyMTA0ODI2MTA0MzA3NTAyMzVcIiksUj1CaWdJbnQoXCI1NDQ2OTMwNzAwODkwOTMxNjkyMDk5NTgxMzg2ODc0NTE0MTYwNTM5MzU5NzI5MjkyNzQ1NjkyMTIwNTMxMjg5NjMxMTcyMTAxNzU3OFwiKSxPPUJpZ0ludChcIjExNTk4NDMwMjE2Njg3Nzk4NzkxOTM3NzU1MjE4NTU1ODY2NDc5MzczNTc3NTk3MTU0MTc2NTQ0Mzk4Nzk3MjA4NzYxMTE4MDY4MzhcIiksRD1CaWdJbnQoXCI0MDQ0MDgzNDM0NjMwODUzNjg1ODEwMTA0MjQ2OTMyMzE5MDgyNjI0ODM5OTE0NjIzODcwODM1MjI0MDEzMzIyMDg2NTEzNzI2NTk1MlwiKSxMPWU9PnkodSxlKSxCPUJpZ0ludChcIjB4N2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKSxLPXQ9PmUuZWQyNTUxOS5DVVJWRS5GcC5jcmVhdGUoKDAsYS5ieXRlc1RvTnVtYmVyTEUpKHQpJkIpO2Z1bmN0aW9uIGoodCl7Y29uc3R7ZDpufT1lLmVkMjU1MTkuQ1VSVkUscj1lLmVkMjU1MTkuQ1VSVkUuRnAuT1JERVIsaT1lLmVkMjU1MTkuQ1VSVkUuRnAuY3JlYXRlLHM9aShJKnQqdCksYT1pKChzK3UpKk8pO2xldCBjPUJpZ0ludCgtMSk7Y29uc3QgZD1pKChjLW4qcykqaShzK24pKTtsZXR7aXNWYWxpZDpsLHZhbHVlOmh9PXkoYSxkKSxmPWkoaCp0KTsoMCxvLmlzTmVnYXRpdmVMRSkoZixyKXx8KGY9aSgtZikpLGx8fChoPWYpLGx8fChjPXMpO2NvbnN0IHA9aShjKihzLXUpKkQtZCksbT1oKmgsZz1pKChoK2gpKmQpLHY9aShwKlApLEU9aSh1LW0pLGI9aSh1K20pO3JldHVybiBuZXcgZS5lZDI1NTE5LkV4dGVuZGVkUG9pbnQoaShnKmIpLGkoRSp2KSxpKHYqYiksaShnKkUpKX1jbGFzcyAke2NvbnN0cnVjdG9yKGUpe3RoaXMuZXA9ZX1zdGF0aWMgZnJvbUFmZmluZSh0KXtyZXR1cm4gbmV3ICQoZS5lZDI1NTE5LkV4dGVuZGVkUG9pbnQuZnJvbUFmZmluZSh0KSl9c3RhdGljIGhhc2hUb0N1cnZlKGUpe2U9KDAsYS5lbnN1cmVCeXRlcykoXCJyaXN0cmV0dG9IYXNoXCIsZSw2NCk7Y29uc3QgdD1qKEsoZS5zbGljZSgwLDMyKSkpLG49aihLKGUuc2xpY2UoMzIsNjQpKSk7cmV0dXJuIG5ldyAkKHQuYWRkKG4pKX1zdGF0aWMgZnJvbUhleCh0KXt0PSgwLGEuZW5zdXJlQnl0ZXMpKFwicmlzdHJldHRvSGV4XCIsdCwzMik7Y29uc3R7YTpuLGQ6cn09ZS5lZDI1NTE5LkNVUlZFLGk9ZS5lZDI1NTE5LkNVUlZFLkZwLk9SREVSLHM9ZS5lZDI1NTE5LkNVUlZFLkZwLmNyZWF0ZSxjPVwiUmlzdHJldHRvUG9pbnQuZnJvbUhleDogdGhlIGhleCBpcyBub3QgdmFsaWQgZW5jb2Rpbmcgb2YgUmlzdHJldHRvUG9pbnRcIixkPUsodCk7aWYoISgwLGEuZXF1YWxCeXRlcykoKDAsYS5udW1iZXJUb0J5dGVzTEUpKGQsMzIpLHQpfHwoMCxvLmlzTmVnYXRpdmVMRSkoZCxpKSl0aHJvdyBuZXcgRXJyb3IoYyk7Y29uc3QgaD1zKGQqZCksZj1zKHUrbipoKSxwPXModS1uKmgpLG09cyhmKmYpLGc9cyhwKnApLHY9cyhuKnIqbS1nKSx7aXNWYWxpZDp5LHZhbHVlOkV9PUwocyh2KmcpKSxiPXMoRSpwKSx3PXMoRSpiKnYpO2xldCBTPXMoKGQrZCkqYik7KDAsby5pc05lZ2F0aXZlTEUpKFMsaSkmJihTPXMoLVMpKTtjb25zdCBfPXMoZip3KSxDPXMoUypfKTtpZigheXx8KDAsby5pc05lZ2F0aXZlTEUpKEMsaSl8fF89PT1sKXRocm93IG5ldyBFcnJvcihjKTtyZXR1cm4gbmV3ICQobmV3IGUuZWQyNTUxOS5FeHRlbmRlZFBvaW50KFMsXyx1LEMpKX10b1Jhd0J5dGVzKCl7bGV0e2V4OnQsZXk6bixlejpyLGV0Oml9PXRoaXMuZXA7Y29uc3Qgcz1lLmVkMjU1MTkuQ1VSVkUuRnAuT1JERVIsYz1lLmVkMjU1MTkuQ1VSVkUuRnAuY3JlYXRlLGQ9YyhjKHIrbikqYyhyLW4pKSxsPWModCpuKSx1PWMobCpsKSx7dmFsdWU6aH09TChjKGQqdSkpLGY9YyhoKmQpLHA9YyhoKmwpLG09YyhmKnAqaSk7bGV0IGc7aWYoKDAsby5pc05lZ2F0aXZlTEUpKGkqbSxzKSl7bGV0IGU9YyhuKkkpLHI9Yyh0KkkpO3Q9ZSxuPXIsZz1jKGYqUil9ZWxzZSBnPXA7KDAsby5pc05lZ2F0aXZlTEUpKHQqbSxzKSYmKG49YygtbikpO2xldCB2PWMoKHItbikqZyk7cmV0dXJuKDAsby5pc05lZ2F0aXZlTEUpKHYscykmJih2PWMoLXYpKSwoMCxhLm51bWJlclRvQnl0ZXNMRSkodiwzMil9dG9IZXgoKXtyZXR1cm4oMCxhLmJ5dGVzVG9IZXgpKHRoaXMudG9SYXdCeXRlcygpKX10b1N0cmluZygpe3JldHVybiB0aGlzLnRvSGV4KCl9ZXF1YWxzKHQpe1QodCk7Y29uc3R7ZXg6bixleTpyfT10aGlzLmVwLHtleDppLGV5Om99PXQuZXAscz1lLmVkMjU1MTkuQ1VSVkUuRnAuY3JlYXRlLGE9cyhuKm8pPT09cyhyKmkpLGM9cyhyKm8pPT09cyhuKmkpO3JldHVybiBhfHxjfWFkZChlKXtyZXR1cm4gVChlKSxuZXcgJCh0aGlzLmVwLmFkZChlLmVwKSl9c3VidHJhY3QoZSl7cmV0dXJuIFQoZSksbmV3ICQodGhpcy5lcC5zdWJ0cmFjdChlLmVwKSl9bXVsdGlwbHkoZSl7cmV0dXJuIG5ldyAkKHRoaXMuZXAubXVsdGlwbHkoZSkpfW11bHRpcGx5VW5zYWZlKGUpe3JldHVybiBuZXcgJCh0aGlzLmVwLm11bHRpcGx5VW5zYWZlKGUpKX1kb3VibGUoKXtyZXR1cm4gbmV3ICQodGhpcy5lcC5kb3VibGUoKSl9bmVnYXRlKCl7cmV0dXJuIG5ldyAkKHRoaXMuZXAubmVnYXRlKCkpfX1lLlJpc3RyZXR0b1BvaW50PSgkLkJBU0V8fCgkLkJBU0U9bmV3ICQoZS5lZDI1NTE5LkV4dGVuZGVkUG9pbnQuQkFTRSkpLCQuWkVST3x8KCQuWkVSTz1uZXcgJChlLmVkMjU1MTkuRXh0ZW5kZWRQb2ludC5aRVJPKSksJCk7ZS5oYXNoVG9SaXN0cmV0dG8yNTU9KGUscik9Pntjb25zdCBvPXIuRFNULHM9XCJzdHJpbmdcIj09dHlwZW9mIG8/KDAsbi51dGY4VG9CeXRlcykobyk6byxhPSgwLGkuZXhwYW5kX21lc3NhZ2VfeG1kKShlLHMsNjQsdC5zaGE1MTIpO3JldHVybiAkLmhhc2hUb0N1cnZlKGEpfSxlLmhhc2hfdG9fcmlzdHJldHRvMjU1PWUuaGFzaFRvUmlzdHJldHRvMjU1fShPKTt2YXIgUXQ9e30sWHQ9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLFh0LnNoYTIyND1YdC5zaGEyNTY9WHQuU0hBMjU2PXZvaWQgMDtjb25zdCBlbj1ELHRuPXosbm49bmV3IFVpbnQzMkFycmF5KFsxMTE2MzUyNDA4LDE4OTk0NDc0NDEsMzA0OTMyMzQ3MSwzOTIxMDA5NTczLDk2MTk4NzE2MywxNTA4OTcwOTkzLDI0NTM2MzU3NDgsMjg3MDc2MzIyMSwzNjI0MzgxMDgwLDMxMDU5ODQwMSw2MDcyMjUyNzgsMTQyNjg4MTk4NywxOTI1MDc4Mzg4LDIxNjIwNzgyMDYsMjYxNDg4ODEwMywzMjQ4MjIyNTgwLDM4MzUzOTA0MDEsNDAyMjIyNDc3NCwyNjQzNDcwNzgsNjA0ODA3NjI4LDc3MDI1NTk4MywxMjQ5MTUwMTIyLDE1NTUwODE2OTIsMTk5NjA2NDk4NiwyNTU0MjIwODgyLDI4MjE4MzQzNDksMjk1Mjk5NjgwOCwzMjEwMzEzNjcxLDMzMzY1NzE4OTEsMzU4NDUyODcxMSwxMTM5MjY5OTMsMzM4MjQxODk1LDY2NjMwNzIwNSw3NzM1Mjk5MTIsMTI5NDc1NzM3MiwxMzk2MTgyMjkxLDE2OTUxODM3MDAsMTk4NjY2MTA1MSwyMTc3MDI2MzUwLDI0NTY5NTYwMzcsMjczMDQ4NTkyMSwyODIwMzAyNDExLDMyNTk3MzA4MDAsMzM0NTc2NDc3MSwzNTE2MDY1ODE3LDM2MDAzNTI4MDQsNDA5NDU3MTkwOSwyNzU0MjMzNDQsNDMwMjI3NzM0LDUwNjk0ODYxNiw2NTkwNjA1NTYsODgzOTk3ODc3LDk1ODEzOTU3MSwxMzIyODIyMjE4LDE1MzcwMDIwNjMsMTc0Nzg3Mzc3OSwxOTU1NTYyMjIyLDIwMjQxMDQ4MTUsMjIyNzczMDQ1MiwyMzYxODUyNDI0LDI0Mjg0MzY0NzQsMjc1NjczNDE4NywzMjA0MDMxNDc5LDMzMjkzMjUyOThdKSxybj1uZXcgVWludDMyQXJyYXkoWzE3NzkwMzM3MDMsMzE0NDEzNDI3NywxMDEzOTA0MjQyLDI3NzM0ODA3NjIsMTM1OTg5MzExOSwyNjAwODIyOTI0LDUyODczNDYzNSwxNTQxNDU5MjI1XSksb249bmV3IFVpbnQzMkFycmF5KDY0KTtjbGFzcyBzbiBleHRlbmRzIGVuLkhhc2hNRHtjb25zdHJ1Y3Rvcigpe3N1cGVyKDY0LDMyLDgsITEpLHRoaXMuQT0wfHJuWzBdLHRoaXMuQj0wfHJuWzFdLHRoaXMuQz0wfHJuWzJdLHRoaXMuRD0wfHJuWzNdLHRoaXMuRT0wfHJuWzRdLHRoaXMuRj0wfHJuWzVdLHRoaXMuRz0wfHJuWzZdLHRoaXMuSD0wfHJuWzddfWdldCgpe2NvbnN0e0E6ZSxCOnQsQzpuLEQ6cixFOmksRjpvLEc6cyxIOmF9PXRoaXM7cmV0dXJuW2UsdCxuLHIsaSxvLHMsYV19c2V0KGUsdCxuLHIsaSxvLHMsYSl7dGhpcy5BPTB8ZSx0aGlzLkI9MHx0LHRoaXMuQz0wfG4sdGhpcy5EPTB8cix0aGlzLkU9MHxpLHRoaXMuRj0wfG8sdGhpcy5HPTB8cyx0aGlzLkg9MHxhfXByb2Nlc3MoZSx0KXtmb3IobGV0IG49MDtuPDE2O24rKyx0Kz00KW9uW25dPWUuZ2V0VWludDMyKHQsITEpO2ZvcihsZXQgZT0xNjtlPDY0O2UrKyl7Y29uc3QgdD1vbltlLTE1XSxuPW9uW2UtMl0scj0oMCx0bi5yb3RyKSh0LDcpXigwLHRuLnJvdHIpKHQsMTgpXnQ+Pj4zLGk9KDAsdG4ucm90cikobiwxNyleKDAsdG4ucm90cikobiwxOSlebj4+PjEwO29uW2VdPWkrb25bZS03XStyK29uW2UtMTZdfDB9bGV0e0E6bixCOnIsQzppLEQ6byxFOnMsRjphLEc6YyxIOmR9PXRoaXM7Zm9yKGxldCBlPTA7ZTw2NDtlKyspe2NvbnN0IHQ9ZCsoKDAsdG4ucm90cikocyw2KV4oMCx0bi5yb3RyKShzLDExKV4oMCx0bi5yb3RyKShzLDI1KSkrKDAsZW4uQ2hpKShzLGEsYykrbm5bZV0rb25bZV18MCxsPSgoMCx0bi5yb3RyKShuLDIpXigwLHRuLnJvdHIpKG4sMTMpXigwLHRuLnJvdHIpKG4sMjIpKSsoMCxlbi5NYWopKG4scixpKXwwO2Q9YyxjPWEsYT1zLHM9byt0fDAsbz1pLGk9cixyPW4sbj10K2x8MH1uPW4rdGhpcy5BfDAscj1yK3RoaXMuQnwwLGk9aSt0aGlzLkN8MCxvPW8rdGhpcy5EfDAscz1zK3RoaXMuRXwwLGE9YSt0aGlzLkZ8MCxjPWMrdGhpcy5HfDAsZD1kK3RoaXMuSHwwLHRoaXMuc2V0KG4scixpLG8scyxhLGMsZCl9cm91bmRDbGVhbigpe29uLmZpbGwoMCl9ZGVzdHJveSgpe3RoaXMuc2V0KDAsMCwwLDAsMCwwLDAsMCksdGhpcy5idWZmZXIuZmlsbCgwKX19WHQuU0hBMjU2PXNuO2NsYXNzIGFuIGV4dGVuZHMgc257Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuQT0tMTA1NjU5NjI2NCx0aGlzLkI9OTE0MTUwNjYzLHRoaXMuQz04MTI3MDI5OTksdGhpcy5EPS0xNTAwNTQ1OTksdGhpcy5FPS00MTkxNDM5LHRoaXMuRj0xNzUwNjAzMDI1LHRoaXMuRz0xNjk0MDc2ODM5LHRoaXMuSD0tMTA5MDg5MTg2OCx0aGlzLm91dHB1dExlbj0yOH19WHQuc2hhMjU2PSgwLHRuLndyYXBDb25zdHJ1Y3RvcikoKCgpPT5uZXcgc24pKSxYdC5zaGEyMjQ9KDAsdG4ud3JhcENvbnN0cnVjdG9yKSgoKCk9Pm5ldyBhbikpO3ZhciBjbj17fSxkbj17fTshZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5obWFjPWUuSE1BQz12b2lkIDA7Y29uc3QgdD1MLG49ejtjbGFzcyByIGV4dGVuZHMgbi5IYXNoe2NvbnN0cnVjdG9yKGUscil7c3VwZXIoKSx0aGlzLmZpbmlzaGVkPSExLHRoaXMuZGVzdHJveWVkPSExLCgwLHQuaGFzaCkoZSk7Y29uc3QgaT0oMCxuLnRvQnl0ZXMpKHIpO2lmKHRoaXMuaUhhc2g9ZS5jcmVhdGUoKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzLmlIYXNoLnVwZGF0ZSl0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBpbnN0YW5jZSBvZiBjbGFzcyB3aGljaCBleHRlbmRzIHV0aWxzLkhhc2hcIik7dGhpcy5ibG9ja0xlbj10aGlzLmlIYXNoLmJsb2NrTGVuLHRoaXMub3V0cHV0TGVuPXRoaXMuaUhhc2gub3V0cHV0TGVuO2NvbnN0IG89dGhpcy5ibG9ja0xlbixzPW5ldyBVaW50OEFycmF5KG8pO3Muc2V0KGkubGVuZ3RoPm8/ZS5jcmVhdGUoKS51cGRhdGUoaSkuZGlnZXN0KCk6aSk7Zm9yKGxldCBlPTA7ZTxzLmxlbmd0aDtlKyspc1tlXV49NTQ7dGhpcy5pSGFzaC51cGRhdGUocyksdGhpcy5vSGFzaD1lLmNyZWF0ZSgpO2ZvcihsZXQgZT0wO2U8cy5sZW5ndGg7ZSsrKXNbZV1ePTEwNjt0aGlzLm9IYXNoLnVwZGF0ZShzKSxzLmZpbGwoMCl9dXBkYXRlKGUpe3JldHVybigwLHQuZXhpc3RzKSh0aGlzKSx0aGlzLmlIYXNoLnVwZGF0ZShlKSx0aGlzfWRpZ2VzdEludG8oZSl7KDAsdC5leGlzdHMpKHRoaXMpLCgwLHQuYnl0ZXMpKGUsdGhpcy5vdXRwdXRMZW4pLHRoaXMuZmluaXNoZWQ9ITAsdGhpcy5pSGFzaC5kaWdlc3RJbnRvKGUpLHRoaXMub0hhc2gudXBkYXRlKGUpLHRoaXMub0hhc2guZGlnZXN0SW50byhlKSx0aGlzLmRlc3Ryb3koKX1kaWdlc3QoKXtjb25zdCBlPW5ldyBVaW50OEFycmF5KHRoaXMub0hhc2gub3V0cHV0TGVuKTtyZXR1cm4gdGhpcy5kaWdlc3RJbnRvKGUpLGV9X2Nsb25lSW50byhlKXtlfHwoZT1PYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSx7fSkpO2NvbnN0e29IYXNoOnQsaUhhc2g6bixmaW5pc2hlZDpyLGRlc3Ryb3llZDppLGJsb2NrTGVuOm8sb3V0cHV0TGVuOnN9PXRoaXM7cmV0dXJuIGUuZmluaXNoZWQ9cixlLmRlc3Ryb3llZD1pLGUuYmxvY2tMZW49byxlLm91dHB1dExlbj1zLGUub0hhc2g9dC5fY2xvbmVJbnRvKGUub0hhc2gpLGUuaUhhc2g9bi5fY2xvbmVJbnRvKGUuaUhhc2gpLGV9ZGVzdHJveSgpe3RoaXMuZGVzdHJveWVkPSEwLHRoaXMub0hhc2guZGVzdHJveSgpLHRoaXMuaUhhc2guZGVzdHJveSgpfX1lLkhNQUM9cjtlLmhtYWM9KGUsdCxuKT0+bmV3IHIoZSx0KS51cGRhdGUobikuZGlnZXN0KCksZS5obWFjLmNyZWF0ZT0oZSx0KT0+bmV3IHIoZSx0KX0oZG4pO3ZhciBsbj17fTshZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5ERVI9dm9pZCAwLGUud2VpZXJzdHJhc3NQb2ludHM9ZixlLndlaWVyc3RyYXNzPWZ1bmN0aW9uKHMpe2NvbnN0IGE9ZnVuY3Rpb24oZSl7Y29uc3Qgbj0oMCx0LnZhbGlkYXRlQmFzaWMpKGUpO3JldHVybiByLnZhbGlkYXRlT2JqZWN0KG4se2hhc2g6XCJoYXNoXCIsaG1hYzpcImZ1bmN0aW9uXCIscmFuZG9tQnl0ZXM6XCJmdW5jdGlvblwifSx7Yml0czJpbnQ6XCJmdW5jdGlvblwiLGJpdHMyaW50X21vZE46XCJmdW5jdGlvblwiLGxvd1M6XCJib29sZWFuXCJ9KSxPYmplY3QuZnJlZXplKHtsb3dTOiEwLC4uLm59KX0ocykse0ZwOmwsbjp1fT1hLGg9bC5CWVRFUysxLHA9MipsLkJZVEVTKzE7ZnVuY3Rpb24gbShlKXtyZXR1cm4gbi5tb2QoZSx1KX1mdW5jdGlvbiBnKGUpe3JldHVybiBuLmludmVydChlLHUpfWNvbnN0e1Byb2plY3RpdmVQb2ludDp2LG5vcm1Qcml2YXRlS2V5VG9TY2FsYXI6eSx3ZWllcnN0cmFzc0VxdWF0aW9uOkUsaXNXaXRoaW5DdXJ2ZU9yZGVyOmJ9PWYoey4uLmEsdG9CeXRlcyhlLHQsbil7Y29uc3Qgbz10LnRvQWZmaW5lKCkscz1sLnRvQnl0ZXMoby54KSxhPXIuY29uY2F0Qnl0ZXM7cmV0dXJuKDAsaS5hYm9vbCkoXCJpc0NvbXByZXNzZWRcIixuKSxuP2EoVWludDhBcnJheS5mcm9tKFt0Lmhhc0V2ZW5ZKCk/MjozXSkscyk6YShVaW50OEFycmF5LmZyb20oWzRdKSxzLGwudG9CeXRlcyhvLnkpKX0sZnJvbUJ5dGVzKGUpe2NvbnN0IHQ9ZS5sZW5ndGgsbj1lWzBdLGk9ZS5zdWJhcnJheSgxKTtpZih0IT09aHx8MiE9PW4mJjMhPT1uKXtpZih0PT09cCYmND09PW4pe3JldHVybnt4OmwuZnJvbUJ5dGVzKGkuc3ViYXJyYXkoMCxsLkJZVEVTKSkseTpsLmZyb21CeXRlcyhpLnN1YmFycmF5KGwuQllURVMsMipsLkJZVEVTKSl9fXRocm93IG5ldyBFcnJvcihgUG9pbnQgb2YgbGVuZ3RoICR7dH0gd2FzIGludmFsaWQuIEV4cGVjdGVkICR7aH0gY29tcHJlc3NlZCBieXRlcyBvciAke3B9IHVuY29tcHJlc3NlZCBieXRlc2ApfXtjb25zdCBlPXIuYnl0ZXNUb051bWJlckJFKGkpO2lmKCFyLmluUmFuZ2UoZSxkLGwuT1JERVIpKXRocm93IG5ldyBFcnJvcihcIlBvaW50IGlzIG5vdCBvbiBjdXJ2ZVwiKTtjb25zdCB0PUUoZSk7bGV0IG87dHJ5e289bC5zcXJ0KHQpfWNhdGNoKGUpe2NvbnN0IHQ9ZSBpbnN0YW5jZW9mIEVycm9yP1wiOiBcIitlLm1lc3NhZ2U6XCJcIjt0aHJvdyBuZXcgRXJyb3IoXCJQb2ludCBpcyBub3Qgb24gY3VydmVcIit0KX1yZXR1cm4gMT09KDEmbikhPT0oKG8mZCk9PT1kKSYmKG89bC5uZWcobykpLHt4OmUseTpvfX19fSksdz1lPT5yLmJ5dGVzVG9IZXgoci5udW1iZXJUb0J5dGVzQkUoZSxhLm5CeXRlTGVuZ3RoKSk7ZnVuY3Rpb24gUyhlKXtyZXR1cm4gZT51Pj5kfWNvbnN0IF89KGUsdCxuKT0+ci5ieXRlc1RvTnVtYmVyQkUoZS5zbGljZSh0LG4pKTtjbGFzcyBDe2NvbnN0cnVjdG9yKGUsdCxuKXt0aGlzLnI9ZSx0aGlzLnM9dCx0aGlzLnJlY292ZXJ5PW4sdGhpcy5hc3NlcnRWYWxpZGl0eSgpfXN0YXRpYyBmcm9tQ29tcGFjdChlKXtjb25zdCB0PWEubkJ5dGVMZW5ndGg7cmV0dXJuIGU9KDAsaS5lbnN1cmVCeXRlcykoXCJjb21wYWN0U2lnbmF0dXJlXCIsZSwyKnQpLG5ldyBDKF8oZSwwLHQpLF8oZSx0LDIqdCkpfXN0YXRpYyBmcm9tREVSKHQpe2NvbnN0e3I6bixzOnJ9PWUuREVSLnRvU2lnKCgwLGkuZW5zdXJlQnl0ZXMpKFwiREVSXCIsdCkpO3JldHVybiBuZXcgQyhuLHIpfWFzc2VydFZhbGlkaXR5KCl7ci5hSW5SYW5nZShcInJcIix0aGlzLnIsZCx1KSxyLmFJblJhbmdlKFwic1wiLHRoaXMucyxkLHUpfWFkZFJlY292ZXJ5Qml0KGUpe3JldHVybiBuZXcgQyh0aGlzLnIsdGhpcy5zLGUpfXJlY292ZXJQdWJsaWNLZXkoZSl7Y29uc3R7cjp0LHM6bixyZWNvdmVyeTpyfT10aGlzLG89QSgoMCxpLmVuc3VyZUJ5dGVzKShcIm1zZ0hhc2hcIixlKSk7aWYobnVsbD09cnx8IVswLDEsMiwzXS5pbmNsdWRlcyhyKSl0aHJvdyBuZXcgRXJyb3IoXCJyZWNvdmVyeSBpZCBpbnZhbGlkXCIpO2NvbnN0IHM9Mj09PXJ8fDM9PT1yP3QrYS5uOnQ7aWYocz49bC5PUkRFUil0aHJvdyBuZXcgRXJyb3IoXCJyZWNvdmVyeSBpZCAyIG9yIDMgaW52YWxpZFwiKTtjb25zdCBjPTA9PSgxJnIpP1wiMDJcIjpcIjAzXCIsZD12LmZyb21IZXgoYyt3KHMpKSx1PWcocyksaD1tKC1vKnUpLGY9bShuKnUpLHA9di5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKGQsaCxmKTtpZighcCl0aHJvdyBuZXcgRXJyb3IoXCJwb2ludCBhdCBpbmZpbmlmeVwiKTtyZXR1cm4gcC5hc3NlcnRWYWxpZGl0eSgpLHB9aGFzSGlnaFMoKXtyZXR1cm4gUyh0aGlzLnMpfW5vcm1hbGl6ZVMoKXtyZXR1cm4gdGhpcy5oYXNIaWdoUygpP25ldyBDKHRoaXMucixtKC10aGlzLnMpLHRoaXMucmVjb3ZlcnkpOnRoaXN9dG9ERVJSYXdCeXRlcygpe3JldHVybiByLmhleFRvQnl0ZXModGhpcy50b0RFUkhleCgpKX10b0RFUkhleCgpe3JldHVybiBlLkRFUi5oZXhGcm9tU2lnKHtyOnRoaXMucixzOnRoaXMuc30pfXRvQ29tcGFjdFJhd0J5dGVzKCl7cmV0dXJuIHIuaGV4VG9CeXRlcyh0aGlzLnRvQ29tcGFjdEhleCgpKX10b0NvbXBhY3RIZXgoKXtyZXR1cm4gdyh0aGlzLnIpK3codGhpcy5zKX19Y29uc3QgeD17aXNWYWxpZFByaXZhdGVLZXkoZSl7dHJ5e3JldHVybiB5KGUpLCEwfWNhdGNoKGUpe3JldHVybiExfX0sbm9ybVByaXZhdGVLZXlUb1NjYWxhcjp5LHJhbmRvbVByaXZhdGVLZXk6KCk9Pntjb25zdCBlPW4uZ2V0TWluSGFzaExlbmd0aChhLm4pO3JldHVybiBuLm1hcEhhc2hUb0ZpZWxkKGEucmFuZG9tQnl0ZXMoZSksYS5uKX0scHJlY29tcHV0ZTooZT04LHQ9di5CQVNFKT0+KHQuX3NldFdpbmRvd1NpemUoZSksdC5tdWx0aXBseShCaWdJbnQoMykpLHQpfTtmdW5jdGlvbiBrKGUpe2NvbnN0IHQ9ci5pc0J5dGVzKGUpLG49XCJzdHJpbmdcIj09dHlwZW9mIGUsaT0odHx8bikmJmUubGVuZ3RoO3JldHVybiB0P2k9PT1ofHxpPT09cDpuP2k9PT0yKmh8fGk9PT0yKnA6ZSBpbnN0YW5jZW9mIHZ9Y29uc3QgTT1hLmJpdHMyaW50fHxmdW5jdGlvbihlKXtjb25zdCB0PXIuYnl0ZXNUb051bWJlckJFKGUpLG49OCplLmxlbmd0aC1hLm5CaXRMZW5ndGg7cmV0dXJuIG4+MD90Pj5CaWdJbnQobik6dH0sQT1hLmJpdHMyaW50X21vZE58fGZ1bmN0aW9uKGUpe3JldHVybiBtKE0oZSkpfSxUPXIuYml0TWFzayhhLm5CaXRMZW5ndGgpO2Z1bmN0aW9uIEkoZSl7cmV0dXJuIHIuYUluUmFuZ2UoYG51bSA8IDJeJHthLm5CaXRMZW5ndGh9YCxlLGMsVCksci5udW1iZXJUb0J5dGVzQkUoZSxhLm5CeXRlTGVuZ3RoKX1mdW5jdGlvbiBQKGUsdCxuPVIpe2lmKFtcInJlY292ZXJlZFwiLFwiY2Fub25pY2FsXCJdLnNvbWUoKGU9PmUgaW4gbikpKXRocm93IG5ldyBFcnJvcihcInNpZ24oKSBsZWdhY3kgb3B0aW9ucyBub3Qgc3VwcG9ydGVkXCIpO2NvbnN0e2hhc2g6cyxyYW5kb21CeXRlczp1fT1hO2xldHtsb3dTOmgscHJlaGFzaDpmLGV4dHJhRW50cm9weTpwfT1uO251bGw9PWgmJihoPSEwKSxlPSgwLGkuZW5zdXJlQnl0ZXMpKFwibXNnSGFzaFwiLGUpLG8obiksZiYmKGU9KDAsaS5lbnN1cmVCeXRlcykoXCJwcmVoYXNoZWQgbXNnSGFzaFwiLHMoZSkpKTtjb25zdCBFPUEoZSksdz15KHQpLF89W0kodyksSShFKV07aWYobnVsbCE9cCYmITEhPT1wKXtjb25zdCBlPSEwPT09cD91KGwuQllURVMpOnA7Xy5wdXNoKCgwLGkuZW5zdXJlQnl0ZXMpKFwiZXh0cmFFbnRyb3B5XCIsZSkpfWNvbnN0IHg9ci5jb25jYXRCeXRlcyguLi5fKSxrPUU7cmV0dXJue3NlZWQ6eCxrMnNpZzpmdW5jdGlvbihlKXtjb25zdCB0PU0oZSk7aWYoIWIodCkpcmV0dXJuO2NvbnN0IG49Zyh0KSxyPXYuQkFTRS5tdWx0aXBseSh0KS50b0FmZmluZSgpLGk9bShyLngpO2lmKGk9PT1jKXJldHVybjtjb25zdCBvPW0obiptKGsraSp3KSk7aWYobz09PWMpcmV0dXJuO2xldCBzPShyLng9PT1pPzA6Mil8TnVtYmVyKHIueSZkKSxhPW87cmV0dXJuIGgmJlMobykmJihhPWZ1bmN0aW9uKGUpe3JldHVybiBTKGUpP20oLWUpOmV9KG8pLHNePTEpLG5ldyBDKGksYSxzKX19fWNvbnN0IFI9e2xvd1M6YS5sb3dTLHByZWhhc2g6ITF9LE89e2xvd1M6YS5sb3dTLHByZWhhc2g6ITF9O3JldHVybiB2LkJBU0UuX3NldFdpbmRvd1NpemUoOCkse0NVUlZFOmEsZ2V0UHVibGljS2V5OmZ1bmN0aW9uKGUsdD0hMCl7cmV0dXJuIHYuZnJvbVByaXZhdGVLZXkoZSkudG9SYXdCeXRlcyh0KX0sZ2V0U2hhcmVkU2VjcmV0OmZ1bmN0aW9uKGUsdCxuPSEwKXtpZihrKGUpKXRocm93IG5ldyBFcnJvcihcImZpcnN0IGFyZyBtdXN0IGJlIHByaXZhdGUga2V5XCIpO2lmKCFrKHQpKXRocm93IG5ldyBFcnJvcihcInNlY29uZCBhcmcgbXVzdCBiZSBwdWJsaWMga2V5XCIpO2NvbnN0IHI9di5mcm9tSGV4KHQpO3JldHVybiByLm11bHRpcGx5KHkoZSkpLnRvUmF3Qnl0ZXMobil9LHNpZ246ZnVuY3Rpb24oZSx0LG49Uil7Y29uc3R7c2VlZDppLGsyc2lnOm99PVAoZSx0LG4pLHM9YSxjPXIuY3JlYXRlSG1hY0RyYmcocy5oYXNoLm91dHB1dExlbixzLm5CeXRlTGVuZ3RoLHMuaG1hYyk7cmV0dXJuIGMoaSxvKX0sdmVyaWZ5OmZ1bmN0aW9uKHQsbixzLGM9Tyl7Y29uc3QgZD10O2lmKG49KDAsaS5lbnN1cmVCeXRlcykoXCJtc2dIYXNoXCIsbikscz0oMCxpLmVuc3VyZUJ5dGVzKShcInB1YmxpY0tleVwiLHMpLFwic3RyaWN0XCJpbiBjKXRocm93IG5ldyBFcnJvcihcIm9wdGlvbnMuc3RyaWN0IHdhcyByZW5hbWVkIHRvIGxvd1NcIik7byhjKTtjb25zdHtsb3dTOmwscHJlaGFzaDp1fT1jO2xldCBoLGY7dHJ5e2lmKFwic3RyaW5nXCI9PXR5cGVvZiBkfHxyLmlzQnl0ZXMoZCkpdHJ5e2g9Qy5mcm9tREVSKGQpfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIGUuREVSLkVycikpdGhyb3cgdDtoPUMuZnJvbUNvbXBhY3QoZCl9ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgZHx8XCJiaWdpbnRcIiE9dHlwZW9mIGQucnx8XCJiaWdpbnRcIiE9dHlwZW9mIGQucyl0aHJvdyBuZXcgRXJyb3IoXCJQQVJTRVwiKTt7Y29uc3R7cjplLHM6dH09ZDtoPW5ldyBDKGUsdCl9fWY9di5mcm9tSGV4KHMpfWNhdGNoKGUpe2lmKFwiUEFSU0VcIj09PWUubWVzc2FnZSl0aHJvdyBuZXcgRXJyb3IoXCJzaWduYXR1cmUgbXVzdCBiZSBTaWduYXR1cmUgaW5zdGFuY2UsIFVpbnQ4QXJyYXkgb3IgaGV4IHN0cmluZ1wiKTtyZXR1cm4hMX1pZihsJiZoLmhhc0hpZ2hTKCkpcmV0dXJuITE7dSYmKG49YS5oYXNoKG4pKTtjb25zdHtyOnAsczp5fT1oLEU9QShuKSxiPWcoeSksdz1tKEUqYiksUz1tKHAqYiksXz12LkJBU0UubXVsdGlwbHlBbmRBZGRVbnNhZmUoZix3LFMpPy50b0FmZmluZSgpO2lmKCFfKXJldHVybiExO2NvbnN0IHg9bShfLngpO3JldHVybiB4PT09cH0sUHJvamVjdGl2ZVBvaW50OnYsU2lnbmF0dXJlOkMsdXRpbHM6eH19LGUuU1dVRnBTcXJ0UmF0aW89cCxlLm1hcFRvQ3VydmVTaW1wbGVTV1U9ZnVuY3Rpb24oZSx0KXtpZihuLnZhbGlkYXRlRmllbGQoZSksIWUuaXNWYWxpZCh0LkEpfHwhZS5pc1ZhbGlkKHQuQil8fCFlLmlzVmFsaWQodC5aKSl0aHJvdyBuZXcgRXJyb3IoXCJtYXBUb0N1cnZlU2ltcGxlU1dVOiBpbnZhbGlkIG9wdHNcIik7Y29uc3Qgcj1wKGUsdC5aKTtpZighZS5pc09kZCl0aHJvdyBuZXcgRXJyb3IoXCJGcC5pc09kZCBpcyBub3QgaW1wbGVtZW50ZWQhXCIpO3JldHVybiBuPT57bGV0IGksbyxzLGEsYyxkLGwsdTtpPWUuc3FyKG4pLGk9ZS5tdWwoaSx0LlopLG89ZS5zcXIoaSksbz1lLmFkZChvLGkpLHM9ZS5hZGQobyxlLk9ORSkscz1lLm11bChzLHQuQiksYT1lLmNtb3YodC5aLGUubmVnKG8pLCFlLmVxbChvLGUuWkVSTykpLGE9ZS5tdWwoYSx0LkEpLG89ZS5zcXIocyksZD1lLnNxcihhKSxjPWUubXVsKGQsdC5BKSxvPWUuYWRkKG8sYyksbz1lLm11bChvLHMpLGQ9ZS5tdWwoZCxhKSxjPWUubXVsKGQsdC5CKSxvPWUuYWRkKG8sYyksbD1lLm11bChpLHMpO2NvbnN0e2lzVmFsaWQ6aCx2YWx1ZTpmfT1yKG8sZCk7dT1lLm11bChpLG4pLHU9ZS5tdWwodSxmKSxsPWUuY21vdihsLHMsaCksdT1lLmNtb3YodSxmLGgpO2NvbnN0IHA9ZS5pc09kZChuKT09PWUuaXNPZGQodSk7cmV0dXJuIHU9ZS5jbW92KGUubmVnKHUpLHUscCksbD1lLmRpdihsLGEpLHt4OmwseTp1fX19O2NvbnN0IHQ9TmUsbj1EZSxyPUxlLGk9TGU7ZnVuY3Rpb24gbyhlKXt2b2lkIDAhPT1lLmxvd1MmJigwLGkuYWJvb2wpKFwibG93U1wiLGUubG93Uyksdm9pZCAwIT09ZS5wcmVoYXNoJiYoMCxpLmFib29sKShcInByZWhhc2hcIixlLnByZWhhc2gpfWNvbnN0e2J5dGVzVG9OdW1iZXJCRTpzLGhleFRvQnl0ZXM6YX09cjtlLkRFUj17RXJyOmNsYXNzIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoZT1cIlwiKXtzdXBlcihlKX19LF90bHY6e2VuY29kZToodCxuKT0+e2NvbnN0e0VycjppfT1lLkRFUjtpZih0PDB8fHQ+MjU2KXRocm93IG5ldyBpKFwidGx2LmVuY29kZTogd3JvbmcgdGFnXCIpO2lmKDEmbi5sZW5ndGgpdGhyb3cgbmV3IGkoXCJ0bHYuZW5jb2RlOiB1bnBhZGRlZCBkYXRhXCIpO2NvbnN0IG89bi5sZW5ndGgvMixzPXIubnVtYmVyVG9IZXhVbnBhZGRlZChvKTtpZihzLmxlbmd0aC8yJjEyOCl0aHJvdyBuZXcgaShcInRsdi5lbmNvZGU6IGxvbmcgZm9ybSBsZW5ndGggdG9vIGJpZ1wiKTtjb25zdCBhPW8+MTI3P3IubnVtYmVyVG9IZXhVbnBhZGRlZChzLmxlbmd0aC8yfDEyOCk6XCJcIjtyZXR1cm5gJHtyLm51bWJlclRvSGV4VW5wYWRkZWQodCl9JHthfSR7c30ke259YH0sZGVjb2RlKHQsbil7Y29uc3R7RXJyOnJ9PWUuREVSO2xldCBpPTA7aWYodDwwfHx0PjI1Nil0aHJvdyBuZXcgcihcInRsdi5lbmNvZGU6IHdyb25nIHRhZ1wiKTtpZihuLmxlbmd0aDwyfHxuW2krK10hPT10KXRocm93IG5ldyByKFwidGx2LmRlY29kZTogd3JvbmcgdGx2XCIpO2NvbnN0IG89bltpKytdO2xldCBzPTA7aWYoISEoMTI4Jm8pKXtjb25zdCBlPTEyNyZvO2lmKCFlKXRocm93IG5ldyByKFwidGx2LmRlY29kZShsb25nKTogaW5kZWZpbml0ZSBsZW5ndGggbm90IHN1cHBvcnRlZFwiKTtpZihlPjQpdGhyb3cgbmV3IHIoXCJ0bHYuZGVjb2RlKGxvbmcpOiBieXRlIGxlbmd0aCBpcyB0b28gYmlnXCIpO2NvbnN0IHQ9bi5zdWJhcnJheShpLGkrZSk7aWYodC5sZW5ndGghPT1lKXRocm93IG5ldyByKFwidGx2LmRlY29kZTogbGVuZ3RoIGJ5dGVzIG5vdCBjb21wbGV0ZVwiKTtpZigwPT09dFswXSl0aHJvdyBuZXcgcihcInRsdi5kZWNvZGUobG9uZyk6IHplcm8gbGVmdG1vc3QgYnl0ZVwiKTtmb3IoY29uc3QgZSBvZiB0KXM9czw8OHxlO2lmKGkrPWUsczwxMjgpdGhyb3cgbmV3IHIoXCJ0bHYuZGVjb2RlKGxvbmcpOiBub3QgbWluaW1hbCBlbmNvZGluZ1wiKX1lbHNlIHM9bztjb25zdCBhPW4uc3ViYXJyYXkoaSxpK3MpO2lmKGEubGVuZ3RoIT09cyl0aHJvdyBuZXcgcihcInRsdi5kZWNvZGU6IHdyb25nIHZhbHVlIGxlbmd0aFwiKTtyZXR1cm57djphLGw6bi5zdWJhcnJheShpK3MpfX19LF9pbnQ6e2VuY29kZSh0KXtjb25zdHtFcnI6bn09ZS5ERVI7aWYodDxjKXRocm93IG5ldyBuKFwiaW50ZWdlcjogbmVnYXRpdmUgaW50ZWdlcnMgYXJlIG5vdCBhbGxvd2VkXCIpO2xldCBpPXIubnVtYmVyVG9IZXhVbnBhZGRlZCh0KTtpZig4Jk51bWJlci5wYXJzZUludChpWzBdLDE2KSYmKGk9XCIwMFwiK2kpLDEmaS5sZW5ndGgpdGhyb3cgbmV3IG4oXCJ1bmV4cGVjdGVkIGFzc2VydGlvblwiKTtyZXR1cm4gaX0sZGVjb2RlKHQpe2NvbnN0e0VycjpufT1lLkRFUjtpZigxMjgmdFswXSl0aHJvdyBuZXcgbihcIkludmFsaWQgc2lnbmF0dXJlIGludGVnZXI6IG5lZ2F0aXZlXCIpO2lmKDA9PT10WzBdJiYhKDEyOCZ0WzFdKSl0aHJvdyBuZXcgbihcIkludmFsaWQgc2lnbmF0dXJlIGludGVnZXI6IHVubmVjZXNzYXJ5IGxlYWRpbmcgemVyb1wiKTtyZXR1cm4gcyh0KX19LHRvU2lnKHQpe2NvbnN0e0VycjpuLF9pbnQ6aSxfdGx2Om99PWUuREVSLHM9XCJzdHJpbmdcIj09dHlwZW9mIHQ/YSh0KTp0O3IuYWJ5dGVzKHMpO2NvbnN0e3Y6YyxsOmR9PW8uZGVjb2RlKDQ4LHMpO2lmKGQubGVuZ3RoKXRocm93IG5ldyBuKFwiSW52YWxpZCBzaWduYXR1cmU6IGxlZnQgYnl0ZXMgYWZ0ZXIgcGFyc2luZ1wiKTtjb25zdHt2OmwsbDp1fT1vLmRlY29kZSgyLGMpLHt2OmgsbDpmfT1vLmRlY29kZSgyLHUpO2lmKGYubGVuZ3RoKXRocm93IG5ldyBuKFwiSW52YWxpZCBzaWduYXR1cmU6IGxlZnQgYnl0ZXMgYWZ0ZXIgcGFyc2luZ1wiKTtyZXR1cm57cjppLmRlY29kZShsKSxzOmkuZGVjb2RlKGgpfX0saGV4RnJvbVNpZyh0KXtjb25zdHtfdGx2Om4sX2ludDpyfT1lLkRFUixpPWAke24uZW5jb2RlKDIsci5lbmNvZGUodC5yKSl9JHtuLmVuY29kZSgyLHIuZW5jb2RlKHQucykpfWA7cmV0dXJuIG4uZW5jb2RlKDQ4LGkpfX07Y29uc3QgYz1CaWdJbnQoMCksZD1CaWdJbnQoMSksbD1CaWdJbnQoMiksdT1CaWdJbnQoMyksaD1CaWdJbnQoNCk7ZnVuY3Rpb24gZihlKXtjb25zdCBvPWZ1bmN0aW9uKGUpe2NvbnN0IG49KDAsdC52YWxpZGF0ZUJhc2ljKShlKTtyLnZhbGlkYXRlT2JqZWN0KG4se2E6XCJmaWVsZFwiLGI6XCJmaWVsZFwifSx7YWxsb3dlZFByaXZhdGVLZXlMZW5ndGhzOlwiYXJyYXlcIix3cmFwUHJpdmF0ZUtleTpcImJvb2xlYW5cIixpc1RvcnNpb25GcmVlOlwiZnVuY3Rpb25cIixjbGVhckNvZmFjdG9yOlwiZnVuY3Rpb25cIixhbGxvd0luZmluaXR5UG9pbnQ6XCJib29sZWFuXCIsZnJvbUJ5dGVzOlwiZnVuY3Rpb25cIix0b0J5dGVzOlwiZnVuY3Rpb25cIn0pO2NvbnN0e2VuZG86aSxGcDpvLGE6c309bjtpZihpKXtpZighby5lcWwocyxvLlpFUk8pKXRocm93IG5ldyBFcnJvcihcIkVuZG9tb3JwaGlzbSBjYW4gb25seSBiZSBkZWZpbmVkIGZvciBLb2JsaXR6IGN1cnZlcyB0aGF0IGhhdmUgYT0wXCIpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBpfHxcImJpZ2ludFwiIT10eXBlb2YgaS5iZXRhfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBpLnNwbGl0U2NhbGFyKXRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGVuZG9tb3JwaGlzbSB3aXRoIGJldGE6IGJpZ2ludCBhbmQgc3BsaXRTY2FsYXI6IGZ1bmN0aW9uXCIpfXJldHVybiBPYmplY3QuZnJlZXplKHsuLi5ufSl9KGUpLHtGcDpzfT1vLGE9bi5GaWVsZChvLm4sby5uQml0TGVuZ3RoKSxsPW8udG9CeXRlc3x8KChlLHQsbik9Pntjb25zdCBpPXQudG9BZmZpbmUoKTtyZXR1cm4gci5jb25jYXRCeXRlcyhVaW50OEFycmF5LmZyb20oWzRdKSxzLnRvQnl0ZXMoaS54KSxzLnRvQnl0ZXMoaS55KSl9KSxoPW8uZnJvbUJ5dGVzfHwoZT0+e2NvbnN0IHQ9ZS5zdWJhcnJheSgxKTtyZXR1cm57eDpzLmZyb21CeXRlcyh0LnN1YmFycmF5KDAscy5CWVRFUykpLHk6cy5mcm9tQnl0ZXModC5zdWJhcnJheShzLkJZVEVTLDIqcy5CWVRFUykpfX0pO2Z1bmN0aW9uIGYoZSl7Y29uc3R7YTp0LGI6bn09byxyPXMuc3FyKGUpLGk9cy5tdWwocixlKTtyZXR1cm4gcy5hZGQocy5hZGQoaSxzLm11bChlLHQpKSxuKX1pZighcy5lcWwocy5zcXIoby5HeSksZihvLkd4KSkpdGhyb3cgbmV3IEVycm9yKFwiYmFkIGdlbmVyYXRvciBwb2ludDogZXF1YXRpb24gbGVmdCAhPSByaWdodFwiKTtmdW5jdGlvbiBwKGUpe2NvbnN0e2FsbG93ZWRQcml2YXRlS2V5TGVuZ3Roczp0LG5CeXRlTGVuZ3RoOnMsd3JhcFByaXZhdGVLZXk6YSxuOmN9PW87aWYodCYmXCJiaWdpbnRcIiE9dHlwZW9mIGUpe2lmKHIuaXNCeXRlcyhlKSYmKGU9ci5ieXRlc1RvSGV4KGUpKSxcInN0cmluZ1wiIT10eXBlb2YgZXx8IXQuaW5jbHVkZXMoZS5sZW5ndGgpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQga2V5XCIpO2U9ZS5wYWRTdGFydCgyKnMsXCIwXCIpfWxldCBsO3RyeXtsPVwiYmlnaW50XCI9PXR5cGVvZiBlP2U6ci5ieXRlc1RvTnVtYmVyQkUoKDAsaS5lbnN1cmVCeXRlcykoXCJwcml2YXRlIGtleVwiLGUscykpfWNhdGNoKHQpe3Rocm93IG5ldyBFcnJvcihgcHJpdmF0ZSBrZXkgbXVzdCBiZSAke3N9IGJ5dGVzLCBoZXggb3IgYmlnaW50LCBub3QgJHt0eXBlb2YgZX1gKX1yZXR1cm4gYSYmKGw9bi5tb2QobCxjKSksci5hSW5SYW5nZShcInByaXZhdGUga2V5XCIsbCxkLGMpLGx9ZnVuY3Rpb24gbShlKXtpZighKGUgaW5zdGFuY2VvZiB5KSl0aHJvdyBuZXcgRXJyb3IoXCJQcm9qZWN0aXZlUG9pbnQgZXhwZWN0ZWRcIil9Y29uc3QgZz0oMCxpLm1lbW9pemVkKSgoKGUsdCk9Pntjb25zdHtweDpuLHB5OnIscHo6aX09ZTtpZihzLmVxbChpLHMuT05FKSlyZXR1cm57eDpuLHk6cn07Y29uc3Qgbz1lLmlzMCgpO251bGw9PXQmJih0PW8/cy5PTkU6cy5pbnYoaSkpO2NvbnN0IGE9cy5tdWwobix0KSxjPXMubXVsKHIsdCksZD1zLm11bChpLHQpO2lmKG8pcmV0dXJue3g6cy5aRVJPLHk6cy5aRVJPfTtpZighcy5lcWwoZCxzLk9ORSkpdGhyb3cgbmV3IEVycm9yKFwiaW52WiB3YXMgaW52YWxpZFwiKTtyZXR1cm57eDphLHk6Y319KSksdj0oMCxpLm1lbW9pemVkKSgoZT0+e2lmKGUuaXMwKCkpe2lmKG8uYWxsb3dJbmZpbml0eVBvaW50JiYhcy5pczAoZS5weSkpcmV0dXJuO3Rocm93IG5ldyBFcnJvcihcImJhZCBwb2ludDogWkVST1wiKX1jb25zdHt4OnQseTpufT1lLnRvQWZmaW5lKCk7aWYoIXMuaXNWYWxpZCh0KXx8IXMuaXNWYWxpZChuKSl0aHJvdyBuZXcgRXJyb3IoXCJiYWQgcG9pbnQ6IHggb3IgeSBub3QgRkVcIik7Y29uc3Qgcj1zLnNxcihuKSxpPWYodCk7aWYoIXMuZXFsKHIsaSkpdGhyb3cgbmV3IEVycm9yKFwiYmFkIHBvaW50OiBlcXVhdGlvbiBsZWZ0ICE9IHJpZ2h0XCIpO2lmKCFlLmlzVG9yc2lvbkZyZWUoKSl0aHJvdyBuZXcgRXJyb3IoXCJiYWQgcG9pbnQ6IG5vdCBpbiBwcmltZS1vcmRlciBzdWJncm91cFwiKTtyZXR1cm4hMH0pKTtjbGFzcyB5e2NvbnN0cnVjdG9yKGUsdCxuKXtpZih0aGlzLnB4PWUsdGhpcy5weT10LHRoaXMucHo9bixudWxsPT1lfHwhcy5pc1ZhbGlkKGUpKXRocm93IG5ldyBFcnJvcihcInggcmVxdWlyZWRcIik7aWYobnVsbD09dHx8IXMuaXNWYWxpZCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJ5IHJlcXVpcmVkXCIpO2lmKG51bGw9PW58fCFzLmlzVmFsaWQobikpdGhyb3cgbmV3IEVycm9yKFwieiByZXF1aXJlZFwiKTtPYmplY3QuZnJlZXplKHRoaXMpfXN0YXRpYyBmcm9tQWZmaW5lKGUpe2NvbnN0e3g6dCx5Om59PWV8fHt9O2lmKCFlfHwhcy5pc1ZhbGlkKHQpfHwhcy5pc1ZhbGlkKG4pKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgYWZmaW5lIHBvaW50XCIpO2lmKGUgaW5zdGFuY2VvZiB5KXRocm93IG5ldyBFcnJvcihcInByb2plY3RpdmUgcG9pbnQgbm90IGFsbG93ZWRcIik7Y29uc3Qgcj1lPT5zLmVxbChlLHMuWkVSTyk7cmV0dXJuIHIodCkmJnIobik/eS5aRVJPOm5ldyB5KHQsbixzLk9ORSl9Z2V0IHgoKXtyZXR1cm4gdGhpcy50b0FmZmluZSgpLnh9Z2V0IHkoKXtyZXR1cm4gdGhpcy50b0FmZmluZSgpLnl9c3RhdGljIG5vcm1hbGl6ZVooZSl7Y29uc3QgdD1zLmludmVydEJhdGNoKGUubWFwKChlPT5lLnB6KSkpO3JldHVybiBlLm1hcCgoKGUsbik9PmUudG9BZmZpbmUodFtuXSkpKS5tYXAoeS5mcm9tQWZmaW5lKX1zdGF0aWMgZnJvbUhleChlKXtjb25zdCB0PXkuZnJvbUFmZmluZShoKCgwLGkuZW5zdXJlQnl0ZXMpKFwicG9pbnRIZXhcIixlKSkpO3JldHVybiB0LmFzc2VydFZhbGlkaXR5KCksdH1zdGF0aWMgZnJvbVByaXZhdGVLZXkoZSl7cmV0dXJuIHkuQkFTRS5tdWx0aXBseShwKGUpKX1zdGF0aWMgbXNtKGUsbil7cmV0dXJuKDAsdC5waXBwZW5nZXIpKHksYSxlLG4pfV9zZXRXaW5kb3dTaXplKGUpe2Iuc2V0V2luZG93U2l6ZSh0aGlzLGUpfWFzc2VydFZhbGlkaXR5KCl7dih0aGlzKX1oYXNFdmVuWSgpe2NvbnN0e3k6ZX09dGhpcy50b0FmZmluZSgpO2lmKHMuaXNPZGQpcmV0dXJuIXMuaXNPZGQoZSk7dGhyb3cgbmV3IEVycm9yKFwiRmllbGQgZG9lc24ndCBzdXBwb3J0IGlzT2RkXCIpfWVxdWFscyhlKXttKGUpO2NvbnN0e3B4OnQscHk6bixwejpyfT10aGlzLHtweDppLHB5Om8scHo6YX09ZSxjPXMuZXFsKHMubXVsKHQsYSkscy5tdWwoaSxyKSksZD1zLmVxbChzLm11bChuLGEpLHMubXVsKG8scikpO3JldHVybiBjJiZkfW5lZ2F0ZSgpe3JldHVybiBuZXcgeSh0aGlzLnB4LHMubmVnKHRoaXMucHkpLHRoaXMucHopfWRvdWJsZSgpe2NvbnN0e2E6ZSxiOnR9PW8sbj1zLm11bCh0LHUpLHtweDpyLHB5OmkscHo6YX09dGhpcztsZXQgYz1zLlpFUk8sZD1zLlpFUk8sbD1zLlpFUk8saD1zLm11bChyLHIpLGY9cy5tdWwoaSxpKSxwPXMubXVsKGEsYSksbT1zLm11bChyLGkpO3JldHVybiBtPXMuYWRkKG0sbSksbD1zLm11bChyLGEpLGw9cy5hZGQobCxsKSxjPXMubXVsKGUsbCksZD1zLm11bChuLHApLGQ9cy5hZGQoYyxkKSxjPXMuc3ViKGYsZCksZD1zLmFkZChmLGQpLGQ9cy5tdWwoYyxkKSxjPXMubXVsKG0sYyksbD1zLm11bChuLGwpLHA9cy5tdWwoZSxwKSxtPXMuc3ViKGgscCksbT1zLm11bChlLG0pLG09cy5hZGQobSxsKSxsPXMuYWRkKGgsaCksaD1zLmFkZChsLGgpLGg9cy5hZGQoaCxwKSxoPXMubXVsKGgsbSksZD1zLmFkZChkLGgpLHA9cy5tdWwoaSxhKSxwPXMuYWRkKHAscCksaD1zLm11bChwLG0pLGM9cy5zdWIoYyxoKSxsPXMubXVsKHAsZiksbD1zLmFkZChsLGwpLGw9cy5hZGQobCxsKSxuZXcgeShjLGQsbCl9YWRkKGUpe20oZSk7Y29uc3R7cHg6dCxweTpuLHB6OnJ9PXRoaXMse3B4OmkscHk6YSxwejpjfT1lO2xldCBkPXMuWkVSTyxsPXMuWkVSTyxoPXMuWkVSTztjb25zdCBmPW8uYSxwPXMubXVsKG8uYix1KTtsZXQgZz1zLm11bCh0LGkpLHY9cy5tdWwobixhKSxFPXMubXVsKHIsYyksYj1zLmFkZCh0LG4pLHc9cy5hZGQoaSxhKTtiPXMubXVsKGIsdyksdz1zLmFkZChnLHYpLGI9cy5zdWIoYix3KSx3PXMuYWRkKHQscik7bGV0IFM9cy5hZGQoaSxjKTtyZXR1cm4gdz1zLm11bCh3LFMpLFM9cy5hZGQoZyxFKSx3PXMuc3ViKHcsUyksUz1zLmFkZChuLHIpLGQ9cy5hZGQoYSxjKSxTPXMubXVsKFMsZCksZD1zLmFkZCh2LEUpLFM9cy5zdWIoUyxkKSxoPXMubXVsKGYsdyksZD1zLm11bChwLEUpLGg9cy5hZGQoZCxoKSxkPXMuc3ViKHYsaCksaD1zLmFkZCh2LGgpLGw9cy5tdWwoZCxoKSx2PXMuYWRkKGcsZyksdj1zLmFkZCh2LGcpLEU9cy5tdWwoZixFKSx3PXMubXVsKHAsdyksdj1zLmFkZCh2LEUpLEU9cy5zdWIoZyxFKSxFPXMubXVsKGYsRSksdz1zLmFkZCh3LEUpLGc9cy5tdWwodix3KSxsPXMuYWRkKGwsZyksZz1zLm11bChTLHcpLGQ9cy5tdWwoYixkKSxkPXMuc3ViKGQsZyksZz1zLm11bChiLHYpLGg9cy5tdWwoUyxoKSxoPXMuYWRkKGgsZyksbmV3IHkoZCxsLGgpfXN1YnRyYWN0KGUpe3JldHVybiB0aGlzLmFkZChlLm5lZ2F0ZSgpKX1pczAoKXtyZXR1cm4gdGhpcy5lcXVhbHMoeS5aRVJPKX13TkFGKGUpe3JldHVybiBiLndOQUZDYWNoZWQodGhpcyxlLHkubm9ybWFsaXplWil9bXVsdGlwbHlVbnNhZmUoZSl7ci5hSW5SYW5nZShcInNjYWxhclwiLGUsYyxvLm4pO2NvbnN0IHQ9eS5aRVJPO2lmKGU9PT1jKXJldHVybiB0O2lmKGU9PT1kKXJldHVybiB0aGlzO2NvbnN0e2VuZG86bn09bztpZighbilyZXR1cm4gYi51bnNhZmVMYWRkZXIodGhpcyxlKTtsZXR7azFuZWc6aSxrMTphLGsybmVnOmwsazI6dX09bi5zcGxpdFNjYWxhcihlKSxoPXQsZj10LHA9dGhpcztmb3IoO2E+Y3x8dT5jOylhJmQmJihoPWguYWRkKHApKSx1JmQmJihmPWYuYWRkKHApKSxwPXAuZG91YmxlKCksYT4+PWQsdT4+PWQ7cmV0dXJuIGkmJihoPWgubmVnYXRlKCkpLGwmJihmPWYubmVnYXRlKCkpLGY9bmV3IHkocy5tdWwoZi5weCxuLmJldGEpLGYucHksZi5weiksaC5hZGQoZil9bXVsdGlwbHkoZSl7Y29uc3R7ZW5kbzp0LG46bn09bztsZXQgaSxhO2lmKHIuYUluUmFuZ2UoXCJzY2FsYXJcIixlLGQsbiksdCl7Y29uc3R7azFuZWc6bixrMTpyLGsybmVnOm8sazI6Y309dC5zcGxpdFNjYWxhcihlKTtsZXR7cDpkLGY6bH09dGhpcy53TkFGKHIpLHtwOnUsZjpofT10aGlzLndOQUYoYyk7ZD1iLmNvbnN0VGltZU5lZ2F0ZShuLGQpLHU9Yi5jb25zdFRpbWVOZWdhdGUobyx1KSx1PW5ldyB5KHMubXVsKHUucHgsdC5iZXRhKSx1LnB5LHUucHopLGk9ZC5hZGQodSksYT1sLmFkZChoKX1lbHNle2NvbnN0e3A6dCxmOm59PXRoaXMud05BRihlKTtpPXQsYT1ufXJldHVybiB5Lm5vcm1hbGl6ZVooW2ksYV0pWzBdfW11bHRpcGx5QW5kQWRkVW5zYWZlKGUsdCxuKXtjb25zdCByPXkuQkFTRSxpPShlLHQpPT50IT09YyYmdCE9PWQmJmUuZXF1YWxzKHIpP2UubXVsdGlwbHkodCk6ZS5tdWx0aXBseVVuc2FmZSh0KSxvPWkodGhpcyx0KS5hZGQoaShlLG4pKTtyZXR1cm4gby5pczAoKT92b2lkIDA6b310b0FmZmluZShlKXtyZXR1cm4gZyh0aGlzLGUpfWlzVG9yc2lvbkZyZWUoKXtjb25zdHtoOmUsaXNUb3JzaW9uRnJlZTp0fT1vO2lmKGU9PT1kKXJldHVybiEwO2lmKHQpcmV0dXJuIHQoeSx0aGlzKTt0aHJvdyBuZXcgRXJyb3IoXCJpc1RvcnNpb25GcmVlKCkgaGFzIG5vdCBiZWVuIGRlY2xhcmVkIGZvciB0aGUgZWxsaXB0aWMgY3VydmVcIil9Y2xlYXJDb2ZhY3Rvcigpe2NvbnN0e2g6ZSxjbGVhckNvZmFjdG9yOnR9PW87cmV0dXJuIGU9PT1kP3RoaXM6dD90KHksdGhpcyk6dGhpcy5tdWx0aXBseVVuc2FmZShvLmgpfXRvUmF3Qnl0ZXMoZT0hMCl7cmV0dXJuKDAsaS5hYm9vbCkoXCJpc0NvbXByZXNzZWRcIixlKSx0aGlzLmFzc2VydFZhbGlkaXR5KCksbCh5LHRoaXMsZSl9dG9IZXgoZT0hMCl7cmV0dXJuKDAsaS5hYm9vbCkoXCJpc0NvbXByZXNzZWRcIixlKSxyLmJ5dGVzVG9IZXgodGhpcy50b1Jhd0J5dGVzKGUpKX19eS5CQVNFPW5ldyB5KG8uR3gsby5HeSxzLk9ORSkseS5aRVJPPW5ldyB5KHMuWkVSTyxzLk9ORSxzLlpFUk8pO2NvbnN0IEU9by5uQml0TGVuZ3RoLGI9KDAsdC53TkFGKSh5LG8uZW5kbz9NYXRoLmNlaWwoRS8yKTpFKTtyZXR1cm57Q1VSVkU6byxQcm9qZWN0aXZlUG9pbnQ6eSxub3JtUHJpdmF0ZUtleVRvU2NhbGFyOnAsd2VpZXJzdHJhc3NFcXVhdGlvbjpmLGlzV2l0aGluQ3VydmVPcmRlcjpmdW5jdGlvbihlKXtyZXR1cm4gci5pblJhbmdlKGUsZCxvLm4pfX19ZnVuY3Rpb24gcChlLHQpe2NvbnN0IG49ZS5PUkRFUjtsZXQgcj1jO2ZvcihsZXQgZT1uLWQ7ZSVsPT09YztlLz1sKXIrPWQ7Y29uc3QgaT1yLG89bDw8aS1kLWQscz1vKmwsYT0obi1kKS9zLGY9KGEtZCkvbCxwPXMtZCxtPW8sZz1lLnBvdyh0LGEpLHY9ZS5wb3codCwoYStkKS9sKTtsZXQgeT0odCxuKT0+e2xldCByPWcsbz1lLnBvdyhuLHApLHM9ZS5zcXIobyk7cz1lLm11bChzLG4pO2xldCBhPWUubXVsKHQscyk7YT1lLnBvdyhhLGYpLGE9ZS5tdWwoYSxvKSxvPWUubXVsKGEsbikscz1lLm11bChhLHQpO2xldCBjPWUubXVsKHMsbyk7YT1lLnBvdyhjLG0pO2xldCB1PWUuZXFsKGEsZS5PTkUpO289ZS5tdWwocyx2KSxhPWUubXVsKGMscikscz1lLmNtb3YobyxzLHUpLGM9ZS5jbW92KGEsYyx1KTtmb3IobGV0IHQ9aTt0PmQ7dC0tKXtsZXQgbj10LWw7bj1sPDxuLWQ7bGV0IGk9ZS5wb3coYyxuKTtjb25zdCBhPWUuZXFsKGksZS5PTkUpO289ZS5tdWwocyxyKSxyPWUubXVsKHIsciksaT1lLm11bChjLHIpLHM9ZS5jbW92KG8scyxhKSxjPWUuY21vdihpLGMsYSl9cmV0dXJue2lzVmFsaWQ6dSx2YWx1ZTpzfX07aWYoZS5PUkRFUiVoPT09dSl7Y29uc3Qgbj0oZS5PUkRFUi11KS9oLHI9ZS5zcXJ0KGUubmVnKHQpKTt5PSh0LGkpPT57bGV0IG89ZS5zcXIoaSk7Y29uc3Qgcz1lLm11bCh0LGkpO289ZS5tdWwobyxzKTtsZXQgYT1lLnBvdyhvLG4pO2E9ZS5tdWwoYSxzKTtjb25zdCBjPWUubXVsKGEsciksZD1lLm11bChlLnNxcihhKSxpKSxsPWUuZXFsKGQsdCk7cmV0dXJue2lzVmFsaWQ6bCx2YWx1ZTplLmNtb3YoYyxhLGwpfX19cmV0dXJuIHl9fShsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGNuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGNuLmdldEhhc2g9cG4sY24uY3JlYXRlQ3VydmU9ZnVuY3Rpb24oZSx0KXtjb25zdCBuPXQ9PigwLGZuLndlaWVyc3RyYXNzKSh7Li4uZSwuLi5wbih0KX0pO3JldHVybiBPYmplY3QuZnJlZXplKHsuLi5uKHQpLGNyZWF0ZTpufSl9O2NvbnN0IHVuPWRuLGhuPXosZm49bG47ZnVuY3Rpb24gcG4oZSl7cmV0dXJue2hhc2g6ZSxobWFjOih0LC4uLm4pPT4oMCx1bi5obWFjKShlLHQsKDAsaG4uY29uY2F0Qnl0ZXMpKC4uLm4pKSxyYW5kb21CeXRlczpobi5yYW5kb21CeXRlc319IWZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZW5jb2RlVG9DdXJ2ZT1lLmhhc2hUb0N1cnZlPWUuc2Nobm9ycj1lLnNlY3AyNTZrMT12b2lkIDA7Y29uc3QgdD1YdCxuPXoscj1jbixpPUJ0LG89RGUscz1MZSxhPWxuLGM9QmlnSW50KFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmYzJmXCIpLGQ9QmlnSW50KFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxXCIpLGw9QmlnSW50KDEpLHU9QmlnSW50KDIpLGg9KGUsdCk9PihlK3QvdSkvdDtmdW5jdGlvbiBmKGUpe2NvbnN0IHQ9YyxuPUJpZ0ludCgzKSxyPUJpZ0ludCg2KSxpPUJpZ0ludCgxMSkscz1CaWdJbnQoMjIpLGE9QmlnSW50KDIzKSxkPUJpZ0ludCg0NCksbD1CaWdJbnQoODgpLGg9ZSplKmUldCxmPWgqaCplJXQsbT0oMCxvLnBvdzIpKGYsbix0KSpmJXQsZz0oMCxvLnBvdzIpKG0sbix0KSpmJXQsdj0oMCxvLnBvdzIpKGcsdSx0KSpoJXQseT0oMCxvLnBvdzIpKHYsaSx0KSp2JXQsRT0oMCxvLnBvdzIpKHkscyx0KSp5JXQsYj0oMCxvLnBvdzIpKEUsZCx0KSpFJXQsdz0oMCxvLnBvdzIpKGIsbCx0KSpiJXQsUz0oMCxvLnBvdzIpKHcsZCx0KSpFJXQsXz0oMCxvLnBvdzIpKFMsbix0KSpmJXQsQz0oMCxvLnBvdzIpKF8sYSx0KSp5JXQseD0oMCxvLnBvdzIpKEMscix0KSpoJXQsaz0oMCxvLnBvdzIpKHgsdSx0KTtpZighcC5lcWwocC5zcXIoayksZSkpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3RcIik7cmV0dXJuIGt9Y29uc3QgcD0oMCxvLkZpZWxkKShjLHZvaWQgMCx2b2lkIDAse3NxcnQ6Zn0pO2Uuc2VjcDI1NmsxPSgwLHIuY3JlYXRlQ3VydmUpKHthOkJpZ0ludCgwKSxiOkJpZ0ludCg3KSxGcDpwLG46ZCxHeDpCaWdJbnQoXCI1NTA2NjI2MzAyMjI3NzM0MzY2OTU3ODcxODg5NTE2ODUzNDMyNjI1MDYwMzQ1Mzc3NzU5NDE3NTUwMDE4NzM2MDM4OTExNjcyOTI0MFwiKSxHeTpCaWdJbnQoXCIzMjY3MDUxMDAyMDc1ODgxNjk3ODA4MzA4NTEzMDUwNzA0MzE4NDQ3MTI3MzM4MDY1OTI0MzI3NTkzODkwNDMzNTc1NzMzNzQ4MjQyNFwiKSxoOkJpZ0ludCgxKSxsb3dTOiEwLGVuZG86e2JldGE6QmlnSW50KFwiMHg3YWU5NmEyYjY1N2MwNzEwNmU2NDQ3OWVhYzM0MzRlOTljZjA0OTc1MTJmNTg5OTVjMTM5NmMyODcxOTUwMWVlXCIpLHNwbGl0U2NhbGFyOmU9Pntjb25zdCB0PWQsbj1CaWdJbnQoXCIweDMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1XCIpLHI9LWwqQmlnSW50KFwiMHhlNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjM1wiKSxpPUJpZ0ludChcIjB4MTE0Y2E1MGY3YThlMmYzZjY1N2MxMTA4ZDlkNDRjZmQ4XCIpLHM9bixhPUJpZ0ludChcIjB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpLGM9aChzKmUsdCksdT1oKC1yKmUsdCk7bGV0IGY9KDAsby5tb2QpKGUtYypuLXUqaSx0KSxwPSgwLG8ubW9kKSgtYypyLXUqcyx0KTtjb25zdCBtPWY+YSxnPXA+YTtpZihtJiYoZj10LWYpLGcmJihwPXQtcCksZj5hfHxwPmEpdGhyb3cgbmV3IEVycm9yKFwic3BsaXRTY2FsYXI6IEVuZG9tb3JwaGlzbSBmYWlsZWQsIGs9XCIrZSk7cmV0dXJue2sxbmVnOm0sazE6ZixrMm5lZzpnLGsyOnB9fX19LHQuc2hhMjU2KTtjb25zdCBtPUJpZ0ludCgwKSxnPXt9O2Z1bmN0aW9uIHYoZSwuLi5uKXtsZXQgcj1nW2VdO2lmKHZvaWQgMD09PXIpe2NvbnN0IG49KDAsdC5zaGEyNTYpKFVpbnQ4QXJyYXkuZnJvbShlLChlPT5lLmNoYXJDb2RlQXQoMCkpKSk7cj0oMCxzLmNvbmNhdEJ5dGVzKShuLG4pLGdbZV09cn1yZXR1cm4oMCx0LnNoYTI1NikoKDAscy5jb25jYXRCeXRlcykociwuLi5uKSl9Y29uc3QgeT1lPT5lLnRvUmF3Qnl0ZXMoITApLnNsaWNlKDEpLEU9ZT0+KDAscy5udW1iZXJUb0J5dGVzQkUpKGUsMzIpLGI9ZT0+KDAsby5tb2QpKGUsYyksdz1lPT4oMCxvLm1vZCkoZSxkKSxTPWUuc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludCxfPShlLHQsbik9PlMuQkFTRS5tdWx0aXBseUFuZEFkZFVuc2FmZShlLHQsbik7ZnVuY3Rpb24gQyh0KXtsZXQgbj1lLnNlY3AyNTZrMS51dGlscy5ub3JtUHJpdmF0ZUtleVRvU2NhbGFyKHQpLHI9Uy5mcm9tUHJpdmF0ZUtleShuKTtyZXR1cm57c2NhbGFyOnIuaGFzRXZlblkoKT9uOncoLW4pLGJ5dGVzOnkocil9fWZ1bmN0aW9uIHgoZSl7KDAscy5hSW5SYW5nZSkoXCJ4XCIsZSxsLGMpO2NvbnN0IHQ9YihlKmUpO2xldCBuPWYoYih0KmUrQmlnSW50KDcpKSk7biV1IT09bSYmKG49YigtbikpO2NvbnN0IHI9bmV3IFMoZSxuLGwpO3JldHVybiByLmFzc2VydFZhbGlkaXR5KCkscn1jb25zdCBrPXMuYnl0ZXNUb051bWJlckJFO2Z1bmN0aW9uIE0oLi4uZSl7cmV0dXJuIHcoayh2KFwiQklQMDM0MC9jaGFsbGVuZ2VcIiwuLi5lKSkpfWZ1bmN0aW9uIEEoZSl7cmV0dXJuIEMoZSkuYnl0ZXN9ZnVuY3Rpb24gVChlLHQscj0oMCxuLnJhbmRvbUJ5dGVzKSgzMikpe2NvbnN0IGk9KDAscy5lbnN1cmVCeXRlcykoXCJtZXNzYWdlXCIsZSkse2J5dGVzOm8sc2NhbGFyOmF9PUModCksYz0oMCxzLmVuc3VyZUJ5dGVzKShcImF1eFJhbmRcIixyLDMyKSxkPUUoYV5rKHYoXCJCSVAwMzQwL2F1eFwiLGMpKSksbD12KFwiQklQMDM0MC9ub25jZVwiLGQsbyxpKSx1PXcoayhsKSk7aWYodT09PW0pdGhyb3cgbmV3IEVycm9yKFwic2lnbiBmYWlsZWQ6IGsgaXMgemVyb1wiKTtjb25zdHtieXRlczpoLHNjYWxhcjpmfT1DKHUpLHA9TShoLG8saSksZz1uZXcgVWludDhBcnJheSg2NCk7aWYoZy5zZXQoaCwwKSxnLnNldChFKHcoZitwKmEpKSwzMiksIUkoZyxpLG8pKXRocm93IG5ldyBFcnJvcihcInNpZ246IEludmFsaWQgc2lnbmF0dXJlIHByb2R1Y2VkXCIpO3JldHVybiBnfWZ1bmN0aW9uIEkoZSx0LG4pe2NvbnN0IHI9KDAscy5lbnN1cmVCeXRlcykoXCJzaWduYXR1cmVcIixlLDY0KSxpPSgwLHMuZW5zdXJlQnl0ZXMpKFwibWVzc2FnZVwiLHQpLG89KDAscy5lbnN1cmVCeXRlcykoXCJwdWJsaWNLZXlcIixuLDMyKTt0cnl7Y29uc3QgZT14KGsobykpLHQ9ayhyLnN1YmFycmF5KDAsMzIpKTtpZighKDAscy5pblJhbmdlKSh0LGwsYykpcmV0dXJuITE7Y29uc3Qgbj1rKHIuc3ViYXJyYXkoMzIsNjQpKTtpZighKDAscy5pblJhbmdlKShuLGwsZCkpcmV0dXJuITE7Y29uc3QgYT1NKEUodCkseShlKSxpKSx1PV8oZSxuLHcoLWEpKTtyZXR1cm4hKCF1fHwhdS5oYXNFdmVuWSgpfHx1LnRvQWZmaW5lKCkueCE9PXQpfWNhdGNoKGUpe3JldHVybiExfX1lLnNjaG5vcnI9e2dldFB1YmxpY0tleTpBLHNpZ246VCx2ZXJpZnk6SSx1dGlsczp7cmFuZG9tUHJpdmF0ZUtleTplLnNlY3AyNTZrMS51dGlscy5yYW5kb21Qcml2YXRlS2V5LGxpZnRfeDp4LHBvaW50VG9CeXRlczp5LG51bWJlclRvQnl0ZXNCRTpzLm51bWJlclRvQnl0ZXNCRSxieXRlc1RvTnVtYmVyQkU6cy5ieXRlc1RvTnVtYmVyQkUsdGFnZ2VkSGFzaDp2LG1vZDpvLm1vZH19O2NvbnN0IFA9KCgpPT4oMCxpLmlzb2dlbnlNYXApKHAsW1tcIjB4OGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGRhYWFhYThjN1wiLFwiMHg3ZDNkNGM4MGJjMzIxZDViOWYzMTVjZWE3ZmQ0NGM1ZDU5NWQyZmMwYmY2M2I5MmRmZmYxMDQ0ZjE3YzY1ODFcIixcIjB4NTM0YzMyOGQyM2YyMzRlNmUyYTQxM2RlY2EyNWNhZWNlNDUwNjE0NDAzN2M0MDMxNGVjYmQwYjUzZDlkZDI2MlwiLFwiMHg4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZGFhYWFhODhjXCJdLFtcIjB4ZDM1NzcxMTkzZDk0OTE4YTljYTM0Y2NiYjdiNjQwZGQ4NmNkNDA5NTQyZjg0ODdkOWZlNmI3NDU3ODFlYjQ5YlwiLFwiMHhlZGFkYzZmNjQzODNkYzFkZjdjNGIyZDUxYjU0MjI1NDA2ZDM2YjY0MWY1ZTQxYmJjNTJhNTY2MTJhOGM2ZDE0XCIsXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFcIl0sW1wiMHg0YmRhMTJmNjg0YmRhMTJmNjg0YmRhMTJmNjg0YmRhMTJmNjg0YmRhMTJmNjg0YmRhMTJmNjg0YjhlMzhlMjNjXCIsXCIweGM3NWUwYzMyZDVjYjdjMGZhOWQwYTU0YjEyYTBhNmQ1NjQ3YWIwNDZkNjg2ZGE2ZmRmZmM5MGZjMjAxZDcxYTNcIixcIjB4MjlhNjE5NDY5MWY5MWE3MzcxNTIwOWVmNjUxMmU1NzY3MjI4MzBhMjAxYmUyMDE4YTc2NWU4NWE5ZWNlZTkzMVwiLFwiMHgyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjM4ZTM4ZDg0XCJdLFtcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmVmZmZmZjkzYlwiLFwiMHg3YTA2NTM0YmI4YmRiNDlmZDVlOWU2NjMyNzIyYzI5ODk0NjdjMWJmYzhlOGQ5NzhkZmI0MjVkMjY4NWMyNTczXCIsXCIweDY0ODRhYTcxNjU0NWNhMmNmM2E3MGMzZmE4ZmUzMzdlMGEzZDIxMTYyZjBkNjI5OWE3YmY4MTkyYmZkMmE3NmZcIixcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiXV0ubWFwKChlPT5lLm1hcCgoZT0+QmlnSW50KGUpKSkpKSkpKCksUj0oKCk9PigwLGEubWFwVG9DdXJ2ZVNpbXBsZVNXVSkocCx7QTpCaWdJbnQoXCIweDNmODczMWFiZGQ2NjFhZGNhMDhhNTU1OGYwZjVkMjcyZTk1M2QzNjNjYjZmMGU1ZDQwNTQ0N2MwMWE0NDQ1MzNcIiksQjpCaWdJbnQoXCIxNzcxXCIpLFo6cC5jcmVhdGUoQmlnSW50KFwiLTExXCIpKX0pKSgpLE89KCgpPT4oMCxpLmNyZWF0ZUhhc2hlcikoZS5zZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50LChlPT57Y29uc3R7eDp0LHk6bn09UihwLmNyZWF0ZShlWzBdKSk7cmV0dXJuIFAodCxuKX0pLHtEU1Q6XCJzZWNwMjU2azFfWE1EOlNIQS0yNTZfU1NXVV9ST19cIixlbmNvZGVEU1Q6XCJzZWNwMjU2azFfWE1EOlNIQS0yNTZfU1NXVV9OVV9cIixwOnAuT1JERVIsbToxLGs6MTI4LGV4cGFuZDpcInhtZFwiLGhhc2g6dC5zaGEyNTZ9KSkoKTtlLmhhc2hUb0N1cnZlPU8uaGFzaFRvQ3VydmUsZS5lbmNvZGVUb0N1cnZlPU8uZW5jb2RlVG9DdXJ2ZX0oUXQpO3ZhciBtbj17fTshZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWNvZGVIZXg9ZS5yZW1vdmUweD12b2lkIDA7dmFyIHQ9cDtlLnJlbW92ZTB4PWZ1bmN0aW9uKGUpe3JldHVybiBlLnN0YXJ0c1dpdGgoXCIweFwiKXx8ZS5zdGFydHNXaXRoKFwiMFhcIik/ZS5zbGljZSgyKTplfTtlLmRlY29kZUhleD1mdW5jdGlvbihuKXtyZXR1cm4oMCx0LmhleFRvQnl0ZXMpKCgwLGUucmVtb3ZlMHgpKG4pKX19KG1uKSxmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmhleFRvUHVibGljS2V5PWUuY29udmVydFB1YmxpY0tleUZvcm1hdD1lLmdldFNoYXJlZFBvaW50PWUuZ2V0UHVibGljS2V5PWUuaXNWYWxpZFByaXZhdGVLZXk9ZS5nZXRWYWxpZFNlY3JldD12b2lkIDA7dmFyIHQ9SSxuPU8scj1RdCxpPUMsbz14LHM9bW47ZS5nZXRWYWxpZFNlY3JldD1mdW5jdGlvbigpe3ZhciBuO2Rve249KDAsdC5yYW5kb21CeXRlcykoby5TRUNSRVRfS0VZX0xFTkdUSCl9d2hpbGUoISgwLGUuaXNWYWxpZFByaXZhdGVLZXkpKG4pKTtyZXR1cm4gbn07ZS5pc1ZhbGlkUHJpdmF0ZUtleT1mdW5jdGlvbihlKXtyZXR1cm4gYSgoMCxpLmVsbGlwdGljQ3VydmUpKCksKGZ1bmN0aW9uKHQpe3JldHVybiB0LnV0aWxzLmlzVmFsaWRQcml2YXRlS2V5KGUpfSksKGZ1bmN0aW9uKCl7cmV0dXJuITB9KSwoZnVuY3Rpb24oKXtyZXR1cm4hMH0pKX07ZS5nZXRQdWJsaWNLZXk9ZnVuY3Rpb24oZSl7cmV0dXJuIGEoKDAsaS5lbGxpcHRpY0N1cnZlKSgpLChmdW5jdGlvbih0KXtyZXR1cm4gdC5nZXRQdWJsaWNLZXkoZSl9KSwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZ2V0UHVibGljS2V5KGUpfSksKGZ1bmN0aW9uKHQpe3JldHVybiB0LmdldFB1YmxpY0tleShlKX0pKX07ZS5nZXRTaGFyZWRQb2ludD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGEoKDAsaS5lbGxpcHRpY0N1cnZlKSgpLChmdW5jdGlvbihyKXtyZXR1cm4gci5nZXRTaGFyZWRTZWNyZXQoZSx0LG4pfSksKGZ1bmN0aW9uKG4pe3JldHVybiBuLmdldFNoYXJlZFNlY3JldChlLHQpfSksKGZ1bmN0aW9uKG4pe3JldHVybiBkKG4sZSx0KX0pKX07ZS5jb252ZXJ0UHVibGljS2V5Rm9ybWF0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGEoKDAsaS5lbGxpcHRpY0N1cnZlKSgpLChmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXRTaGFyZWRTZWNyZXQoQmlnSW50KDEpLGUsdCl9KSwoZnVuY3Rpb24oKXtyZXR1cm4gZX0pLChmdW5jdGlvbigpe3JldHVybiBlfSkpfTtmdW5jdGlvbiBhKGUsdCxpLG8pe2lmKFwic2VjcDI1NmsxXCI9PT1lKXJldHVybiB0KHIuc2VjcDI1NmsxKTtpZihcIngyNTUxOVwiPT09ZSlyZXR1cm4gaShuLngyNTUxOSk7aWYoXCJlZDI1NTE5XCI9PT1lKXJldHVybiBvKG4uZWQyNTUxOSk7dGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpfWUuaGV4VG9QdWJsaWNLZXk9ZnVuY3Rpb24oZSl7dmFyIHQ9KDAscy5kZWNvZGVIZXgpKGUpO3JldHVybiBhKCgwLGkuZWxsaXB0aWNDdXJ2ZSkoKSwoZnVuY3Rpb24oKXtyZXR1cm4gYyh0KX0pLChmdW5jdGlvbigpe3JldHVybiB0fSksKGZ1bmN0aW9uKCl7cmV0dXJuIHR9KSl9O3ZhciBjPWZ1bmN0aW9uKGUpe2lmKGUubGVuZ3RoPT09by5FVEhfUFVCTElDX0tFWV9TSVpFKXt2YXIgdD1uZXcgVWludDhBcnJheSgxK2UubGVuZ3RoKTtyZXR1cm4gdC5zZXQoWzRdKSx0LnNldChlLDEpLHR9cmV0dXJuIGV9LGQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWUudXRpbHMuZ2V0RXh0ZW5kZWRQdWJsaWNLZXkodCkuc2NhbGFyO3JldHVybiBlLkV4dGVuZGVkUG9pbnQuZnJvbUhleChuKS5tdWx0aXBseShyKS50b1Jhd0J5dGVzKCl9fShUKTt2YXIgZ249e30sdm49e307T2JqZWN0LmRlZmluZVByb3BlcnR5KHZuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHZuLmhrZGY9dm9pZCAwLHZuLmV4dHJhY3Q9d24sdm4uZXhwYW5kPUNuO2NvbnN0IHluPUwsRW49eixibj1kbjtmdW5jdGlvbiB3bihlLHQsbil7cmV0dXJuKDAseW4uaGFzaCkoZSksdm9pZCAwPT09biYmKG49bmV3IFVpbnQ4QXJyYXkoZS5vdXRwdXRMZW4pKSwoMCxibi5obWFjKShlLCgwLEVuLnRvQnl0ZXMpKG4pLCgwLEVuLnRvQnl0ZXMpKHQpKX1jb25zdCBTbj1uZXcgVWludDhBcnJheShbMF0pLF9uPW5ldyBVaW50OEFycmF5O2Z1bmN0aW9uIENuKGUsdCxuLHI9MzIpe2lmKCgwLHluLmhhc2gpKGUpLCgwLHluLm51bWJlcikocikscj4yNTUqZS5vdXRwdXRMZW4pdGhyb3cgbmV3IEVycm9yKFwiTGVuZ3RoIHNob3VsZCBiZSA8PSAyNTUqSGFzaExlblwiKTtjb25zdCBpPU1hdGguY2VpbChyL2Uub3V0cHV0TGVuKTt2b2lkIDA9PT1uJiYobj1fbik7Y29uc3Qgbz1uZXcgVWludDhBcnJheShpKmUub3V0cHV0TGVuKSxzPWJuLmhtYWMuY3JlYXRlKGUsdCksYT1zLl9jbG9uZUludG8oKSxjPW5ldyBVaW50OEFycmF5KHMub3V0cHV0TGVuKTtmb3IobGV0IHQ9MDt0PGk7dCsrKVNuWzBdPXQrMSxhLnVwZGF0ZSgwPT09dD9fbjpjKS51cGRhdGUobikudXBkYXRlKFNuKS5kaWdlc3RJbnRvKGMpLG8uc2V0KGMsZS5vdXRwdXRMZW4qdCkscy5fY2xvbmVJbnRvKGEpO3JldHVybiBzLmRlc3Ryb3koKSxhLmRlc3Ryb3koKSxjLmZpbGwoMCksU24uZmlsbCgwKSxvLnNsaWNlKDAscil9dm4uaGtkZj0oZSx0LG4scixpKT0+Q24oZSx3bihlLHQsbikscixpKSxmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmdldFNoYXJlZEtleT1lLmRlcml2ZUtleT12b2lkIDA7dmFyIHQ9cCxuPXZuLHI9WHQ7ZS5kZXJpdmVLZXk9ZnVuY3Rpb24oZSx0LGkpe3JldHVybigwLG4uaGtkZikoci5zaGEyNTYsZSx0LGksMzIpfTtlLmdldFNoYXJlZEtleT1mdW5jdGlvbigpe2Zvcih2YXIgbj1bXSxyPTA7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyluW3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4oMCxlLmRlcml2ZUtleSkodC5jb25jYXRCeXRlcy5hcHBseSh2b2lkIDAsbikpfX0oZ24pO3ZhciB4bj17fSxrbj17fSxNbj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTW4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksTW4uX2NvbXBhdD12b2lkIDA7dmFyIEFuPXAsVG49cjtNbi5fY29tcGF0PWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpPVwiYWVzLTI1Ni1nY21cIj09PWV8fFwiY2hhY2hhMjAtcG9seTEzMDVcIj09PWUsbz1pPzE2OjAscz1pP3thdXRoVGFnTGVuZ3RoOm99OnZvaWQgMDtyZXR1cm57ZW5jcnlwdDpmdW5jdGlvbihvKXt2YXIgYT0oMCxUbi5jcmVhdGVDaXBoZXJpdikoZSx0LG4scyk7aSYmdm9pZCAwIT09ciYmYS5zZXRBQUQocik7dmFyIGM9YS51cGRhdGUobyksZD1hLmZpbmFsKCk7cmV0dXJuIGk/KDAsQW4uY29uY2F0Qnl0ZXMpKGMsZCxhLmdldEF1dGhUYWcoKSk6KDAsQW4uY29uY2F0Qnl0ZXMpKGMsZCl9LGRlY3J5cHQ6ZnVuY3Rpb24oYSl7dmFyIGM9YS5zdWJhcnJheSgwLGEubGVuZ3RoLW8pLGQ9YS5zdWJhcnJheShhLmxlbmd0aC1vKSxsPSgwLFRuLmNyZWF0ZURlY2lwaGVyaXYpKGUsdCxuLHMpO2kmJih2b2lkIDAhPT1yJiZsLnNldEFBRChyKSxsLnNldEF1dGhUYWcoZCkpO3ZhciB1PWwudXBkYXRlKGMpLGg9bC5maW5hbCgpO3JldHVybigwLEFuLmNvbmNhdEJ5dGVzKSh1LGgpfX19LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShrbixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxrbi5hZXMyNTZjYmM9a24uYWVzMjU2Z2NtPXZvaWQgMDt2YXIgSW49TW47a24uYWVzMjU2Z2NtPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4oMCxJbi5fY29tcGF0KShcImFlcy0yNTYtZ2NtXCIsZSx0LG4pfTtrbi5hZXMyNTZjYmM9ZnVuY3Rpb24oZSx0LG4pe3JldHVybigwLEluLl9jb21wYXQpKFwiYWVzLTI1Ni1jYmNcIixlLHQpfTt2YXIgUG49e30sUm49e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFJuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLFJuLl9oY2hhY2hhPXZvaWQgMDtSbi5faGNoYWNoYT1mdW5jdGlvbihlLHQsbixyKXtmb3IodmFyIGk9ZVswXSxvPWVbMV0scz1lWzJdLGE9ZVszXSxjPXRbMF0sZD10WzFdLGw9dFsyXSx1PXRbM10saD10WzRdLGY9dFs1XSxwPXRbNl0sbT10WzddLGc9blswXSx2PW5bMV0seT1uWzJdLEU9blszXSxiPTA7YjwyMDtiKz0yKWc9T24oZ14oaT1pK2N8MCksMTYpLGM9T24oY14oaD1oK2d8MCksMTIpLGc9T24oZ14oaT1pK2N8MCksOCksYz1PbihjXihoPWgrZ3wwKSw3KSx2PU9uKHZeKG89bytkfDApLDE2KSxkPU9uKGReKGY9Zit2fDApLDEyKSx2PU9uKHZeKG89bytkfDApLDgpLGQ9T24oZF4oZj1mK3Z8MCksNykseT1Pbih5XihzPXMrbHwwKSwxNiksbD1PbihsXihwPXAreXwwKSwxMikseT1Pbih5XihzPXMrbHwwKSw4KSxsPU9uKGxeKHA9cCt5fDApLDcpLEU9T24oRV4oYT1hK3V8MCksMTYpLHU9T24odV4obT1tK0V8MCksMTIpLEU9T24oRV4oYT1hK3V8MCksOCksdT1Pbih1XihtPW0rRXwwKSw3KSxFPU9uKEVeKGk9aStkfDApLDE2KSxkPU9uKGReKHA9cCtFfDApLDEyKSxFPU9uKEVeKGk9aStkfDApLDgpLGQ9T24oZF4ocD1wK0V8MCksNyksZz1PbihnXihvPW8rbHwwKSwxNiksbD1PbihsXihtPW0rZ3wwKSwxMiksZz1PbihnXihvPW8rbHwwKSw4KSxsPU9uKGxeKG09bStnfDApLDcpLHY9T24odl4ocz1zK3V8MCksMTYpLHU9T24odV4oaD1oK3Z8MCksMTIpLHY9T24odl4ocz1zK3V8MCksOCksdT1Pbih1XihoPWgrdnwwKSw3KSx5PU9uKHleKGE9YStjfDApLDE2KSxjPU9uKGNeKGY9Zit5fDApLDEyKSx5PU9uKHleKGE9YStjfDApLDgpLGM9T24oY14oZj1mK3l8MCksNyk7dmFyIHc9MDtyW3crK109aSxyW3crK109byxyW3crK109cyxyW3crK109YSxyW3crK109ZyxyW3crK109dixyW3crK109eSxyW3crK109RX07dmFyIE9uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU8PHR8ZT4+PjMyLXR9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShQbixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxQbi54Y2hhY2hhMjA9dm9pZCAwO3ZhciBObj1wLERuPU1uLExuPVJuO1BuLnhjaGFjaGEyMD1mdW5jdGlvbihlLHQsbil7aWYoMjQhPT10Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ4Y2hhY2hhMjAncyBub25jZSBtdXN0IGJlIDI0IGJ5dGVzXCIpO3ZhciByPW5ldyBVaW50MzJBcnJheShbMTYzNDc2MDgwNSw4NTc3NjA4NzgsMjAzNjQ3NzIzNCwxNzk3Mjg1MjM2XSksaT1uZXcgVWludDMyQXJyYXkoOCk7KDAsTG4uX2hjaGFjaGEpKHIsKDAsTm4udTMyKShlKSwoMCxObi51MzIpKHQuc3ViYXJyYXkoMCwxNikpLGkpO3ZhciBvPW5ldyBVaW50OEFycmF5KDEyKTtyZXR1cm4gby5zZXQoWzAsMCwwLDBdKSxvLnNldCh0LnN1YmFycmF5KDE2KSw0KSwoMCxEbi5fY29tcGF0KShcImNoYWNoYTIwLXBvbHkxMzA1XCIsKDAsTm4udTgpKGkpLG8sbil9LGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuYWVzRGVjcnlwdD1lLmFlc0VuY3J5cHQ9ZS5zeW1EZWNyeXB0PWUuc3ltRW5jcnlwdD12b2lkIDA7dmFyIHQ9cCxuPUkscj1rbixpPVBuLG89QyxzPXg7ZS5zeW1FbmNyeXB0PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gYShjLGUsdCxuKX07ZnVuY3Rpb24gYShlLHQsbixhKXt2YXIgYz0oMCxvLnN5bW1ldHJpY0FsZ29yaXRobSkoKTtpZihcImFlcy0yNTYtZ2NtXCI9PT1jKXJldHVybiBlKHIuYWVzMjU2Z2NtLHQsbiwoMCxvLnN5bW1ldHJpY05vbmNlTGVuZ3RoKSgpLHMuQUVBRF9UQUdfTEVOR1RILGEpO2lmKFwieGNoYWNoYTIwXCI9PT1jKXJldHVybiBlKGkueGNoYWNoYTIwLHQsbixzLlhDSEFDSEEyMF9OT05DRV9MRU5HVEgscy5BRUFEX1RBR19MRU5HVEgsYSk7aWYoXCJhZXMtMjU2LWNiY1wiPT09YylyZXR1cm4gZShyLmFlczI1NmNiYyx0LG4sMTYsMCk7dGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpfWZ1bmN0aW9uIGMoZSxyLGksbyxzLGEpe3ZhciBjPSgwLG4ucmFuZG9tQnl0ZXMpKG8pLGQ9ZShyLGMsYSkuZW5jcnlwdChpKTtpZigwPT09cylyZXR1cm4oMCx0LmNvbmNhdEJ5dGVzKShjLGQpO3ZhciBsPWQubGVuZ3RoLXMsdT1kLnN1YmFycmF5KDAsbCksaD1kLnN1YmFycmF5KGwpO3JldHVybigwLHQuY29uY2F0Qnl0ZXMpKGMsaCx1KX1mdW5jdGlvbiBkKGUsbixyLGksbyxzKXt2YXIgYT1yLnN1YmFycmF5KDAsaSksYz1lKG4sVWludDhBcnJheS5mcm9tKGEpLHMpLGQ9ci5zdWJhcnJheShpKTtpZigwPT09bylyZXR1cm4gYy5kZWNyeXB0KGQpO3ZhciBsPWQuc3ViYXJyYXkoMCxvKSx1PWQuc3ViYXJyYXkobyk7cmV0dXJuIGMuZGVjcnlwdCgoMCx0LmNvbmNhdEJ5dGVzKSh1LGwpKX1lLnN5bURlY3J5cHQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBhKGQsZSx0LG4pfSxlLmFlc0VuY3J5cHQ9ZS5zeW1FbmNyeXB0LGUuYWVzRGVjcnlwdD1lLnN5bURlY3J5cHR9KHhuKSxmdW5jdGlvbihlKXt2YXIgdD11JiZ1Ll9fY3JlYXRlQmluZGluZ3x8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24oZSx0LG4scil7dm9pZCAwPT09ciYmKHI9bik7dmFyIGk9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LG4pO2kmJiEoXCJnZXRcImluIGk/IXQuX19lc01vZHVsZTppLndyaXRhYmxlfHxpLmNvbmZpZ3VyYWJsZSl8fChpPXtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0W25dfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIsaSl9OmZ1bmN0aW9uKGUsdCxuLHIpe3ZvaWQgMD09PXImJihyPW4pLGVbcl09dFtuXX0pLG49dSYmdS5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKGUsbil7Zm9yKHZhciByIGluIGUpXCJkZWZhdWx0XCI9PT1yfHxPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKXx8dChuLGUscil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG4oVCxlKSxuKGduLGUpLG4obW4sZSksbih4bixlKX0oQSk7dmFyIEJuPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShCbixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxCbi5QdWJsaWNLZXk9dm9pZCAwO3ZhciBLbj1wLGpuPUEsJG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuZGF0YT0oMCxqbi5jb252ZXJ0UHVibGljS2V5Rm9ybWF0KShlLCEwKX1yZXR1cm4gZS5mcm9tSGV4PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZSgoMCxqbi5oZXhUb1B1YmxpY0tleSkodCkpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJ1bmNvbXByZXNzZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJ1ZmZlci5mcm9tKCgwLGpuLmNvbnZlcnRQdWJsaWNLZXlGb3JtYXQpKHRoaXMuZGF0YSwhMSkpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImNvbXByZXNzZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuZGF0YSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUudG9IZXg9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSEwKSwoMCxLbi5ieXRlc1RvSGV4KShlP3RoaXMuZGF0YTp0aGlzLnVuY29tcHJlc3NlZCl9LGUucHJvdG90eXBlLmRlY2Fwc3VsYXRlPWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciBuPXQ/dGhpcy5kYXRhOnRoaXMudW5jb21wcmVzc2VkLHI9ZS5tdWx0aXBseSh0aGlzLHQpO3JldHVybigwLGpuLmdldFNoYXJlZEtleSkobixyKX0sZS5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKGUpe3JldHVybigwLEtuLmVxdWFsQnl0ZXMpKHRoaXMuZGF0YSxlLmRhdGEpfSxlfSgpO0JuLlB1YmxpY0tleT0kbixPYmplY3QuZGVmaW5lUHJvcGVydHkoTSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxNLlByaXZhdGVLZXk9dm9pZCAwO3ZhciBIbj1wLFVuPUEsRm49Qm4scW49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe2lmKHZvaWQgMD09PWUpdGhpcy5kYXRhPSgwLFVuLmdldFZhbGlkU2VjcmV0KSgpO2Vsc2V7aWYoISgwLFVuLmlzVmFsaWRQcml2YXRlS2V5KShlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHByaXZhdGUga2V5XCIpO3RoaXMuZGF0YT1lfXRoaXMucHVibGljS2V5PW5ldyBGbi5QdWJsaWNLZXkoKDAsVW4uZ2V0UHVibGljS2V5KSh0aGlzLmRhdGEpKX1yZXR1cm4gZS5mcm9tSGV4PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZSgoMCxVbi5kZWNvZGVIZXgpKHQpKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic2VjcmV0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiBCdWZmZXIuZnJvbSh0aGlzLmRhdGEpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLnRvSGV4PWZ1bmN0aW9uKCl7cmV0dXJuKDAsSG4uYnl0ZXNUb0hleCkodGhpcy5kYXRhKX0sZS5wcm90b3R5cGUuZW5jYXBzdWxhdGU9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD0hMSk7dmFyIG49dD90aGlzLnB1YmxpY0tleS5jb21wcmVzc2VkOnRoaXMucHVibGljS2V5LnVuY29tcHJlc3NlZCxyPXRoaXMubXVsdGlwbHkoZSx0KTtyZXR1cm4oMCxVbi5nZXRTaGFyZWRLZXkpKG4scil9LGUucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSwoMCxVbi5nZXRTaGFyZWRQb2ludCkodGhpcy5kYXRhLGUuY29tcHJlc3NlZCx0KX0sZS5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKGUpe3JldHVybigwLEhuLmVxdWFsQnl0ZXMpKHRoaXMuZGF0YSxlLmRhdGEpfSxlfSgpO00uUHJpdmF0ZUtleT1xbixmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlB1YmxpY0tleT1lLlByaXZhdGVLZXk9dm9pZCAwO3ZhciB0PU07T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJQcml2YXRlS2V5XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuUHJpdmF0ZUtleX19KTt2YXIgbj1CbjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlB1YmxpY0tleVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBuLlB1YmxpY0tleX19KX0oayksZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS51dGlscz1lLlB1YmxpY0tleT1lLlByaXZhdGVLZXk9ZS5FQ0lFU19DT05GSUc9dm9pZCAwLGUuZW5jcnlwdD1mdW5jdGlvbihlLG8pe3ZhciBzPW5ldyByLlByaXZhdGVLZXksYT1lIGluc3RhbmNlb2YgVWludDhBcnJheT9uZXcgci5QdWJsaWNLZXkoZSk6ci5QdWJsaWNLZXkuZnJvbUhleChlKSxjPXMuZW5jYXBzdWxhdGUoYSwoMCxuLmlzSGtkZktleUNvbXByZXNzZWQpKCkpLGQ9KDAsbi5pc0VwaGVtZXJhbEtleUNvbXByZXNzZWQpKCk/cy5wdWJsaWNLZXkuY29tcHJlc3NlZDpzLnB1YmxpY0tleS51bmNvbXByZXNzZWQsbD0oMCxpLnN5bUVuY3J5cHQpKGMsbyk7cmV0dXJuIEJ1ZmZlci5mcm9tKCgwLHQuY29uY2F0Qnl0ZXMpKGQsbCkpfSxlLmRlY3J5cHQ9ZnVuY3Rpb24oZSx0KXt2YXIgbz1lIGluc3RhbmNlb2YgVWludDhBcnJheT9uZXcgci5Qcml2YXRlS2V5KGUpOnIuUHJpdmF0ZUtleS5mcm9tSGV4KGUpLHM9KDAsbi5lcGhlbWVyYWxLZXlTaXplKSgpLGE9bmV3IHIuUHVibGljS2V5KHQuc3ViYXJyYXkoMCxzKSksYz10LnN1YmFycmF5KHMpLGQ9YS5kZWNhcHN1bGF0ZShvLCgwLG4uaXNIa2RmS2V5Q29tcHJlc3NlZCkoKSk7cmV0dXJuIEJ1ZmZlci5mcm9tKCgwLGkuc3ltRGVjcnlwdCkoZCxjKSl9O3ZhciB0PXAsbj1DLHI9ayxpPUE7dmFyIG89QztPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkVDSUVTX0NPTkZJR1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvLkVDSUVTX0NPTkZJR319KTt2YXIgcz1rO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiUHJpdmF0ZUtleVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzLlByaXZhdGVLZXl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJQdWJsaWNLZXlcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5QdWJsaWNLZXl9fSksZS51dGlscz17YWVzRW5jcnlwdDppLmFlc0VuY3J5cHQsYWVzRGVjcnlwdDppLmFlc0RlY3J5cHQsc3ltRW5jcnlwdDppLnN5bUVuY3J5cHQsc3ltRGVjcnlwdDppLnN5bURlY3J5cHQsZGVjb2RlSGV4OmkuZGVjb2RlSGV4LGdldFZhbGlkU2VjcmV0OmkuZ2V0VmFsaWRTZWNyZXQscmVtb3ZlMHg6aS5yZW1vdmUweH19KGYpO2NvbnN0IHpuPXQoXCJLZXlFeGNoYW5nZTpMYXllclwiKSxXbj10KFwiU29ja2V0U2VydmljZTpMYXllclwiKSxWbj10KFwiRWNpZXM6TGF5ZXJcIiksR249dChcIlJlbW90ZUNvbW11bmljYXRpb246TGF5ZXJcIik7em4uY29sb3I9XCIjIzk1YzQ0ZVwiLFduLmNvbG9yPVwiI2Y2MzhkN1wiLFZuLmNvbG9yPVwiIzQ2NWI5Y1wiLEduLmNvbG9yPVwiIzQ3YTJiZVwiO2NvbnN0IFluPXtLZXlFeGNoYW5nZTp6bixTb2NrZXRTZXJ2aWNlOlduLEVjaWVzOlZuLFJlbW90ZUNvbW11bmljYXRpb246R259O2xldCBabixKbj1bXSxRbj1bXTtjb25zdCBYbj0odCxuKT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Wm49bixRbi5wdXNoKHQpLGZ1bmN0aW9uKHQpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7aWYoIVpufHwhdClyZXR1cm47IWZ1bmN0aW9uKCl7Y29uc3QgZT1RbjtRbj1KbixKbj1lfSgpO2NvbnN0IG49Wm4uZW5kc1dpdGgoXCIvXCIpP2Ake1pufWV2dGA6YCR7Wm59L2V2dGAscj1PYmplY3QuYXNzaWduKHt9LHQpO2lmKGRlbGV0ZSByLnBhcmFtcyx0LnBhcmFtcylmb3IoY29uc3RbZSxuXW9mIE9iamVjdC5lbnRyaWVzKHQucGFyYW1zKSlyW2VdPW47Y29uc3QgaT1KU09OLnN0cmluZ2lmeShyKTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbc2VuZEJ1ZmZlcmVkRXZlbnRzXSBTZW5kaW5nICR7Sm4ubGVuZ3RofSBhbmFseXRpY3MgZXZlbnRzIHRvICR7bn1gKTt0cnl7Y29uc3QgdD15aWVsZCBlKG4se21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOntBY2NlcHQ6XCJhcHBsaWNhdGlvbi9qc29uXCIsXCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL2pzb25cIn0sYm9keTppfSkscj15aWVsZCB0LnRleHQoKTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbc2VuZEJ1ZmZlcmVkRXZlbnRzXSBSZXNwb25zZTogJHtyfWApLEpuLmxlbmd0aD0wfWNhdGNoKG4pe319KSl9KHQpLmNhdGNoKCgoKT0+e30pKX0pKTtjbGFzcyBlcntjb25zdHJ1Y3RvcihlKXt0aGlzLmVuYWJsZWQ9ITAsKG51bGw9PWU/dm9pZCAwOmUuZGVidWcpJiZ0LmVuYWJsZShcIkVjaWVzOkxheWVyXCIpLHRoaXMuZWNpZXM9KG51bGw9PWU/dm9pZCAwOmUucHJpdmF0ZUtleSk/Zi5Qcml2YXRlS2V5LmZyb21IZXgoZS5wcml2YXRlS2V5KTpuZXcgZi5Qcml2YXRlS2V5LFluLkVjaWVzKFwiW0VDSUVTIGNvbnN0cnVjdG9yKCldIGluaXRpYWxpemVkIHNlY3JldDogXCIsdGhpcy5lY2llcy50b0hleCgpKSxZbi5FY2llcyhcIltFQ0lFUyBjb25zdHJ1Y3RvcigpXSBpbml0aWFsaXplZCBwdWJsaWM6IFwiLHRoaXMuZWNpZXMucHVibGljS2V5LnRvSGV4KCkpLFluLkVjaWVzKFwiW0VDSUVTIGNvbnN0cnVjdG9yKCldIGluaXQgd2l0aFwiLHRoaXMpfWdlbmVyYXRlRUNJRVMoKXt0aGlzLmVjaWVzPW5ldyBmLlByaXZhdGVLZXl9Z2V0UHVibGljS2V5KCl7cmV0dXJuIHRoaXMuZWNpZXMucHVibGljS2V5LnRvSGV4KCl9ZW5jcnlwdChlLHQpe2xldCByPWU7aWYodGhpcy5lbmFibGVkKXRyeXtZbi5FY2llcyhcIltFQ0lFUzogZW5jcnlwdCgpXSB1c2luZyBvdGhlclB1YmxpY0tleVwiLHQpO2NvbnN0IGk9bi5CdWZmZXIuZnJvbShlKSxvPWYuZW5jcnlwdCh0LGkpO3I9bi5CdWZmZXIuZnJvbShvKS50b1N0cmluZyhcImJhc2U2NFwiKX1jYXRjaChyKXt0aHJvdyBZbi5FY2llcyhcIltFQ0lFUzogZW5jcnlwdCgpXSBlcnJvciBlbmNyeXB0OlwiLHIpLFluLkVjaWVzKFwiW0VDSUVTOiBlbmNyeXB0KCldIHByaXZhdGU6IFwiLHRoaXMuZWNpZXMudG9IZXgoKSksWW4uRWNpZXMoXCJbRUNJRVM6IGVuY3J5cHQoKV0gZGF0YTogXCIsZSksWW4uRWNpZXMoXCJbRUNJRVM6IGVuY3J5cHQoKV0gb3RoZXJrZXk6IFwiLHQpLHJ9cmV0dXJuIHJ9ZGVjcnlwdChlKXtsZXQgdD1lO2lmKHRoaXMuZW5hYmxlZCl0cnl7WW4uRWNpZXMoXCJbRUNJRVM6IGRlY3J5cHQoKV0gdXNpbmcgcHJpdmF0ZUtleVwiLHRoaXMuZWNpZXMudG9IZXgoKSk7Y29uc3Qgcj1uLkJ1ZmZlci5mcm9tKGUudG9TdHJpbmcoKSxcImJhc2U2NFwiKTt0PWYuZGVjcnlwdCh0aGlzLmVjaWVzLnRvSGV4KCkscikudG9TdHJpbmcoKX1jYXRjaCh0KXt0aHJvdyBZbi5FY2llcyhcIltFQ0lFUzogZGVjcnlwdCgpXSBlcnJvciBkZWNyeXB0XCIsdCksWW4uRWNpZXMoXCJbRUNJRVM6IGRlY3J5cHQoKV0gcHJpdmF0ZTogXCIsdGhpcy5lY2llcy50b0hleCgpKSxZbi5FY2llcyhcIltFQ0lFUzogZGVjcnlwdCgpXSBlbmNyeXB0ZWREYXRhOiBcIixlKSx0fXJldHVybiB0fWdldEtleUluZm8oKXtyZXR1cm57cHJpdmF0ZTp0aGlzLmVjaWVzLnRvSGV4KCkscHVibGljOnRoaXMuZWNpZXMucHVibGljS2V5LnRvSGV4KCl9fXRvU3RyaW5nKCl7WW4uRWNpZXMoXCJbRUNJRVM6IHRvU3RyaW5nKCldXCIsdGhpcy5nZXRLZXlJbmZvKCkpfX12YXIgdHI9e25hbWU6XCJAbWV0YW1hc2svc2RrLWNvbW11bmljYXRpb24tbGF5ZXJcIix2ZXJzaW9uOlwiMC4zMi4wXCIsZGVzY3JpcHRpb246XCJcIixob21lcGFnZTpcImh0dHBzOi8vZ2l0aHViLmNvbS9NZXRhTWFzay9tZXRhbWFzay1zZGsjcmVhZG1lXCIsYnVnczp7dXJsOlwiaHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL21ldGFtYXNrLXNkay9pc3N1ZXNcIn0scmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9NZXRhTWFzay9tZXRhbWFzay1zZGsuZ2l0XCIsZGlyZWN0b3J5OlwicGFja2FnZXMvc2RrLWNvbW11bmljYXRpb24tbGF5ZXJcIn0sbWFpbjpcImRpc3Qvbm9kZS9janMvbWV0YW1hc2stc2RrLWNvbW11bmljYXRpb24tbGF5ZXIuanNcIix1bnBrZzpcImRpc3QvYnJvd3Nlci91bWQvbWV0YW1hc2stc2RrLWNvbW11bmljYXRpb24tbGF5ZXIuanNcIixtb2R1bGU6XCJkaXN0L25vZGUvZXMvbWV0YW1hc2stc2RrLWNvbW11bmljYXRpb24tbGF5ZXIuanNcIixicm93c2VyOlwiZGlzdC9icm93c2VyL2VzL21ldGFtYXNrLXNkay1jb21tdW5pY2F0aW9uLWxheWVyLmpzXCIsXCJyZWFjdC1uYXRpdmVcIjpcImRpc3QvcmVhY3QtbmF0aXZlL2VzL21ldGFtYXNrLXNkay1jb21tdW5pY2F0aW9uLWxheWVyLmpzXCIsdHlwZXM6XCJkaXN0L3R5cGVzL3NyYy9pbmRleC5kLnRzXCIsZmlsZXM6W1wiL2Rpc3RcIl0sc2NyaXB0czp7XCJidWlsZDp0eXBlc1wiOlwidHNjIC0tcHJvamVjdCB0c2NvbmZpZy5idWlsZC5qc29uIC0tZW1pdERlY2xhcmF0aW9uT25seSAtLW91dERpciBkaXN0L3R5cGVzXCIsXCJidWlsZDpjbGVhblwiOlwieWFybiBjbGVhbiAmJiB5YXJuIGJ1aWxkXCIsYnVpbGQ6XCJ5YXJuIGJ1aWxkOnR5cGVzICYmIHJvbGx1cCAtYyAtLWJ1bmRsZUNvbmZpZ0FzQ2pzXCIsXCJidWlsZDpkZXZcIjpcInlhcm4gYnVpbGQ6dHlwZXMgJiYgTk9ERV9FTlY9ZGV2IHJvbGx1cCAtYyAtLWJ1bmRsZUNvbmZpZ0FzQ2pzXCIsZGV2Oidjb25jdXJyZW50bHkgXCJ0c2MgLS13YXRjaFwiIFwicm9sbHVwIC1jIC0tYnVuZGxlQ29uZmlnQXNDanMgLXdcIicsXCJidWlsZDpwb3N0LXRzY1wiOlwiZWNobyAnTi9BJ1wiLFwiYnVpbGQ6cHJlLXRzY1wiOlwiZWNobyAnTi9BJ1wiLHNpemU6XCJzaXplLWxpbWl0XCIsY2xlYW46XCJyaW1yYWYgLi9kaXN0XCIsbGludDpcInlhcm4gbGludDplc2xpbnQgJiYgeWFybiBsaW50Om1pc2MgLS1jaGVja1wiLFwibGludDpjaGFuZ2Vsb2dcIjpcIi4uLy4uL3NjcmlwdHMvdmFsaWRhdGUtY2hhbmdlbG9nLnNoIEBtZXRhbWFzay9zZGstY29tbXVuaWNhdGlvbi1sYXllclwiLFwibGludDplc2xpbnRcIjpcImVzbGludCAuIC0tY2FjaGUgLS1leHQganMsdHNcIixcImxpbnQ6Zml4XCI6XCJ5YXJuIGxpbnQ6ZXNsaW50IC0tZml4ICYmIHlhcm4gbGludDptaXNjIC0td3JpdGVcIixcImxpbnQ6bWlzY1wiOlwicHJldHRpZXIgJyoqLyouanNvbicgJyoqLyoubWQnICchQ0hBTkdFTE9HLm1kJyAtLWlnbm9yZS1wYXRoIC4uLy4uLy5naXRpZ25vcmVcIixcInB1Ymxpc2g6cHJldmlld1wiOlwieWFybiBucG0gcHVibGlzaCAtLXRhZyBwcmV2aWV3XCIscHJlcGFjazpcIi4uLy4uL3NjcmlwdHMvcHJlcGFjay5zaFwiLHJlc2V0OlwieWFybiBjbGVhbiAmJiByaW1yYWYgLi9ub2RlX21vZHVsZXMvXCIsdGVzdDonamVzdCAtLXRlc3RQYXRoSWdub3JlUGF0dGVybnMgXCIvZTJlL1wiJyxcInRlc3Q6ZTJlXCI6J2plc3QgLS10ZXN0UGF0aFBhdHRlcm4gXCIvZTJlL1wiJyxcInRlc3Q6Y292ZXJhZ2VcIjpcImplc3QgLS1jb3ZlcmFnZVwiLFwidGVzdDpjaVwiOidqZXN0IC0tY292ZXJhZ2UgLS1wYXNzV2l0aE5vVGVzdHMgLS1zZXR1cEZpbGVzQWZ0ZXJFbnYgLi9qZXN0LXByZWxvYWQuanMgLS10ZXN0UGF0aElnbm9yZVBhdHRlcm5zIFwiL2UyZS9cIicsXCJ0ZXN0OmRldlwiOlwiamVzdFwiLHdhdGNoOlwicm9sbHVwIC1jIC0tYnVuZGxlQ29uZmlnQXNDanMgLXdcIn0sZGVwZW5kZW5jaWVzOntidWZmZXJ1dGlsOlwiXjQuMC44XCIsXCJkYXRlLWZuc1wiOlwiXjIuMjkuM1wiLGRlYnVnOlwiXjQuMy40XCIsXCJ1dGYtOC12YWxpZGF0ZVwiOlwiXjUuMC4yXCIsdXVpZDpcIl44LjMuMlwifSxkZXZEZXBlbmRlbmNpZXM6e1wiQGplc3QvZ2xvYmFsc1wiOlwiXjI5LjMuMVwiLFwiQGxhdmFtb2F0L2FsbG93LXNjcmlwdHNcIjpcIl4yLjMuMVwiLFwiQG1ldGFtYXNrL2F1dG8tY2hhbmdlbG9nXCI6XCIzLjEuMFwiLFwiQG1ldGFtYXNrL2VzbGludC1jb25maWdcIjpcIl42LjAuMFwiLFwiQG1ldGFtYXNrL2VzbGludC1jb25maWctbm9kZWpzXCI6XCJeNi4wLjBcIixcIkBtZXRhbWFzay9lc2xpbnQtY29uZmlnLXR5cGVzY3JpcHRcIjpcIl42LjAuMFwiLFwiQHJvbGx1cC9wbHVnaW4tY29tbW9uanNcIjpcIl4yNS4wLjBcIixcIkByb2xsdXAvcGx1Z2luLWpzb25cIjpcIl42LjAuMFwiLFwiQHJvbGx1cC9wbHVnaW4tbm9kZS1yZXNvbHZlXCI6XCJeMTUuMC4yXCIsXCJAcm9sbHVwL3BsdWdpbi1yZXBsYWNlXCI6XCJeNi4wLjFcIixcIkByb2xsdXAvcGx1Z2luLXRlcnNlclwiOlwiXjAuNC40XCIsXCJAc2l6ZS1saW1pdC9wcmVzZXQtYmlnLWxpYlwiOlwiXjExLjAuMlwiLFwiQHR5cGVzL2plc3RcIjpcIl4yOS4yLjRcIixcIkB0eXBlcy9ub2RlXCI6XCJeMjAuMS4zXCIsXCJAdHlwZXMvdXVpZFwiOlwiXjkuMC4wXCIsXCJAdHlwZXNjcmlwdC1lc2xpbnQvZXNsaW50LXBsdWdpblwiOlwiXjQuMjYuMFwiLFwiQHR5cGVzY3JpcHQtZXNsaW50L3BhcnNlclwiOlwiXjQuMjYuMFwiLGNvbmN1cnJlbnRseTpcIl45LjEuMlwiLFwiY3Jvc3MtZmV0Y2hcIjpcIl40LjAuMFwiLGVjaWVzanM6XCJeMC40LjExXCIsZXNsaW50OlwiXjcuMzAuMFwiLFwiZXNsaW50LWNvbmZpZy1wcmV0dGllclwiOlwiXjguMy4wXCIsXCJlc2xpbnQtcGx1Z2luLWltcG9ydFwiOlwiXjIuMjMuNFwiLFwiZXNsaW50LXBsdWdpbi1qZXN0XCI6XCJeMjQuNC4wXCIsXCJlc2xpbnQtcGx1Z2luLWpzZG9jXCI6XCJeMzYuMS4wXCIsXCJlc2xpbnQtcGx1Z2luLW5vZGVcIjpcIl4xMS4xLjBcIixcImVzbGludC1wbHVnaW4tcHJldHRpZXJcIjpcIl4zLjQuMFwiLGV2ZW50ZW1pdHRlcjI6XCJeNi40LjlcIixqZXN0OlwiXjI5LjMuMVwiLHByZXR0aWVyOlwiXjIuMy4wXCIscmltcmFmOlwiXjMuMC4yXCIscm9sbHVwOlwiXjQuMjYuMFwiLFwicm9sbHVwLXBsdWdpbi1qc2NjXCI6XCJeMi4wLjBcIixcInJvbGx1cC1wbHVnaW4tbmF0aXZlc1wiOlwiXjAuNy41XCIsXCJyb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnNcIjpcIl4yLjEuMlwiLFwicm9sbHVwLXBsdWdpbi1ub2RlLWdsb2JhbHNcIjpcIl4xLjQuMFwiLFwicm9sbHVwLXBsdWdpbi1wZWVyLWRlcHMtZXh0ZXJuYWxcIjpcIl4yLjIuNFwiLFwicm9sbHVwLXBsdWdpbi1wb2x5ZmlsbC1ub2RlXCI6XCJeMC4xMy4wXCIsXCJyb2xsdXAtcGx1Z2luLXNpemVzXCI6XCJeMS4wLjZcIixcInJvbGx1cC1wbHVnaW4tdHlwZXNjcmlwdDJcIjpcIl4wLjMxLjJcIixcInJvbGx1cC1wbHVnaW4tdmlzdWFsaXplclwiOlwiXjUuMTIuMFwiLFwic2l6ZS1saW1pdFwiOlwiXjExLjEuNlwiLFwic29ja2V0LmlvLWNsaWVudFwiOlwiXjQuNS4xXCIsXCJzdHJlYW0tYnJvd3NlcmlmeVwiOlwiXjMuMC4wXCIsXCJ0cy1qZXN0XCI6XCJeMjkuMC4zXCIsXCJ0cy1ub2RlXCI6XCJeMTAuOS4xXCIsdHlwZXNjcmlwdDpcIl41LjYuM1wifSxwZWVyRGVwZW5kZW5jaWVzOntcImNyb3NzLWZldGNoXCI6XCJeNC4wLjBcIixlY2llc2pzOlwiKlwiLGV2ZW50ZW1pdHRlcjI6XCJeNi40LjlcIixcInJlYWRhYmxlLXN0cmVhbVwiOlwiXjMuNi4yXCIsXCJzb2NrZXQuaW8tY2xpZW50XCI6XCJeNC41LjFcIn0scHVibGlzaENvbmZpZzp7YWNjZXNzOlwicHVibGljXCIscmVnaXN0cnk6XCJodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9cIn0sbGF2YW1vYXQ6e2FsbG93U2NyaXB0czp7XCJAbGF2YW1vYXQvcHJlaW5zdGFsbC1hbHdheXMtZmFpbFwiOiExLGNhbnZhczohMCxcImVjaWVzanM+c2VjcDI1NmsxXCI6ITEsXCJzb2NrZXQuaW8tY2xpZW50PmVuZ2luZS5pby1jbGllbnQ+d3M+YnVmZmVydXRpbFwiOiExLFwic29ja2V0LmlvLWNsaWVudD5lbmdpbmUuaW8tY2xpZW50PndzPnV0Zi04LXZhbGlkYXRlXCI6ITEsYnVmZmVydXRpbDohMSxcInV0Zi04LXZhbGlkYXRlXCI6ITF9fX07Y29uc3QgbnI9XCJodHRwczovL21ldGFtYXNrLXNkay5hcGkuY3gubWV0YW1hc2suaW8vXCIscnI9W1wid2Vic29ja2V0XCJdLGlyPTYwNDhlNSxvcj0zZTMsc3I9e01FVEFNQVNLX0dFVFBST1ZJREVSU1RBVEU6XCJtZXRhbWFza19nZXRQcm92aWRlclN0YXRlXCIsRVRIX1JFUVVFU1RBQ0NPVU5UUzpcImV0aF9yZXF1ZXN0QWNjb3VudHNcIn07ZnVuY3Rpb24gYXIoZSl7Y29uc3R7Y29udGV4dDp0fT1lO1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBjbGVhbigpXSBjb250ZXh0PSR7dH1gKSxlLmNoYW5uZWxDb25maWc9dm9pZCAwLGUucmVhZHk9ITEsZS5vcmlnaW5hdG9yQ29ubmVjdFN0YXJ0ZWQ9ITF9dmFyIGNyLGRyLGxyLHVyO2V4cG9ydHMuQ29ubmVjdGlvblN0YXR1cz12b2lkIDAsZXhwb3J0cy5FdmVudFR5cGU9dm9pZCAwLGV4cG9ydHMuTWVzc2FnZVR5cGU9dm9pZCAwLCh1cj1leHBvcnRzLkNvbm5lY3Rpb25TdGF0dXN8fChleHBvcnRzLkNvbm5lY3Rpb25TdGF0dXM9e30pKS5ESVNDT05ORUNURUQ9XCJkaXNjb25uZWN0ZWRcIix1ci5XQUlUSU5HPVwid2FpdGluZ1wiLHVyLlRJTUVPVVQ9XCJ0aW1lb3V0XCIsdXIuTElOS0VEPVwibGlua2VkXCIsdXIuUEFVU0VEPVwicGF1c2VkXCIsdXIuVEVSTUlOQVRFRD1cInRlcm1pbmF0ZWRcIixmdW5jdGlvbihlKXtlLktFWV9JTkZPPVwia2V5X2luZm9cIixlLlNFUlZJQ0VfU1RBVFVTPVwic2VydmljZV9zdGF0dXNcIixlLlBST1ZJREVSX1VQREFURT1cInByb3ZpZGVyX3VwZGF0ZVwiLGUuUlBDX1VQREFURT1cInJwY191cGRhdGVcIixlLktFWVNfRVhDSEFOR0VEPVwia2V5c19leGNoYW5nZWRcIixlLkpPSU5fQ0hBTk5FTD1cImpvaW5fY2hhbm5lbFwiLGUuUFVCTElDX0tFWT1cInB1YmxpY19rZXlcIixlLkNIQU5ORUxfQ1JFQVRFRD1cImNoYW5uZWxfY3JlYXRlZFwiLGUuQ0xJRU5UU19DT05ORUNURUQ9XCJjbGllbnRzX2Nvbm5lY3RlZFwiLGUuQ0xJRU5UU19ESVNDT05ORUNURUQ9XCJjbGllbnRzX2Rpc2Nvbm5lY3RlZFwiLGUuQ0xJRU5UU19XQUlUSU5HPVwiY2xpZW50c193YWl0aW5nXCIsZS5DTElFTlRTX1JFQURZPVwiY2xpZW50c19yZWFkeVwiLGUuUkVKRUNURUQ9XCJyZWplY3RlZFwiLGUuV0FMTEVUX0lOSVQ9XCJ3YWxsZXRfaW5pdFwiLGUuQ0hBTk5FTF9QRVJTSVNURU5DRT1cImNoYW5uZWxfcGVyc2lzdGVuY2VcIixlLkNPTkZJRz1cImNvbmZpZ1wiLGUuTUVTU0FHRV9BQ0s9XCJhY2tcIixlLlNPQ0tFVF9ESVNDT05ORUNURUQ9XCJzb2NrZXRfZGlzY29ubmVjdGVkXCIsZS5TT0NLRVRfUkVDT05ORUNUPVwic29ja2V0X3JlY29ubmVjdFwiLGUuT1RQPVwib3RwXCIsZS5TREtfUlBDX0NBTEw9XCJzZGtfcnBjX2NhbGxcIixlLkFVVEhPUklaRUQ9XCJhdXRob3JpemVkXCIsZS5DT05ORUNUSU9OX1NUQVRVUz1cImNvbm5lY3Rpb25fc3RhdHVzXCIsZS5NRVNTQUdFPVwibWVzc2FnZVwiLGUuVEVSTUlOQVRFPVwidGVybWluYXRlXCJ9KGV4cG9ydHMuRXZlbnRUeXBlfHwoZXhwb3J0cy5FdmVudFR5cGU9e30pKSwoY3J8fChjcj17fSkpLktFWV9FWENIQU5HRT1cImtleV9leGNoYW5nZVwiLGZ1bmN0aW9uKGUpe2UuS0VZX0hBTkRTSEFLRV9TVEFSVD1cImtleV9oYW5kc2hha2Vfc3RhcnRcIixlLktFWV9IQU5EU0hBS0VfQ0hFQ0s9XCJrZXlfaGFuZHNoYWtlX2NoZWNrXCIsZS5LRVlfSEFORFNIQUtFX1NZTj1cImtleV9oYW5kc2hha2VfU1lOXCIsZS5LRVlfSEFORFNIQUtFX1NZTkFDSz1cImtleV9oYW5kc2hha2VfU1lOQUNLXCIsZS5LRVlfSEFORFNIQUtFX0FDSz1cImtleV9oYW5kc2hha2VfQUNLXCIsZS5LRVlfSEFORFNIQUtFX1dBTExFVD1cImtleV9oYW5kc2hha2Vfd2FsbGV0XCIsZS5LRVlfSEFORFNIQUtFX05PTkU9XCJub25lXCJ9KGRyfHwoZHI9e30pKTtjbGFzcyBociBleHRlbmRzIGkuRXZlbnRFbWl0dGVyMntjb25zdHJ1Y3Rvcih7Y29tbXVuaWNhdGlvbkxheWVyOmUsb3RoZXJQdWJsaWNLZXk6dCxjb250ZXh0Om4sZWNpZXM6cixsb2dnaW5nOml9KXtzdXBlcigpLHRoaXMua2V5c0V4Y2hhbmdlZD0hMSx0aGlzLnN0ZXA9ZHIuS0VZX0hBTkRTSEFLRV9OT05FLHRoaXMuZGVidWc9ITEsdGhpcy5jb250ZXh0PW4sdGhpcy5jb21tdW5pY2F0aW9uTGF5ZXI9ZSwobnVsbD09cj92b2lkIDA6ci5wcml2YXRlS2V5KSYmdCYmKFluLktleUV4Y2hhbmdlKGBbS2V5RXhjaGFuZ2U6IGNvbnN0cnVjdG9yKCldIG90aGVyUHViS2V5PSR7dH0gc2V0IGtleXNFeGNoYW5nZWQgdG8gdHJ1ZSFgLHIpLHRoaXMua2V5c0V4Y2hhbmdlZD0hMCksdGhpcy5teUVDSUVTPW5ldyBlcihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scikse2RlYnVnOm51bGw9PWk/dm9pZCAwOmkuZWNpZXNMYXllcn0pKSx0aGlzLmNvbW11bmljYXRpb25MYXllci5zdGF0ZS5lY2llc0luc3RhbmNlPXRoaXMubXlFQ0lFUyx0aGlzLm15UHVibGljS2V5PXRoaXMubXlFQ0lFUy5nZXRQdWJsaWNLZXkoKSx0aGlzLmRlYnVnPSEwPT09KG51bGw9PWk/dm9pZCAwOmkua2V5RXhjaGFuZ2VMYXllciksdCYmdGhpcy5zZXRPdGhlclB1YmxpY0tleSh0KSx0aGlzLmNvbW11bmljYXRpb25MYXllci5vbihjci5LRVlfRVhDSEFOR0UsdGhpcy5vbktleUV4Y2hhbmdlTWVzc2FnZS5iaW5kKHRoaXMpKX1vbktleUV4Y2hhbmdlTWVzc2FnZShlKXtjb25zdHtyZWxheVBlcnNpc3RlbmNlOnR9PXRoaXMuY29tbXVuaWNhdGlvbkxheWVyLnJlbW90ZS5zdGF0ZTtpZihZbi5LZXlFeGNoYW5nZShgW0tleUV4Y2hhbmdlOiBvbktleUV4Y2hhbmdlTWVzc2FnZSgpXSBjb250ZXh0PSR7dGhpcy5jb250ZXh0fSBrZXlzRXhjaGFuZ2VkPSR7dGhpcy5rZXlzRXhjaGFuZ2VkfSByZWxheVBlcnNpc3RlbmNlPSR7dH1gLGUpLHQpcmV0dXJuIHZvaWQgWW4uS2V5RXhjaGFuZ2UoXCJbS2V5RXhjaGFuZ2U6IG9uS2V5RXhjaGFuZ2VNZXNzYWdlKCldIElnbm9yaW5nIGtleSBleGNoYW5nZSBtZXNzYWdlIGJlY2F1c2UgcmVsYXkgcGVyc2lzdGVuY2UgaXMgYWN0aXZhdGVkXCIpO2NvbnN0e21lc3NhZ2U6bn09ZTt0aGlzLmtleXNFeGNoYW5nZWQmJlluLktleUV4Y2hhbmdlKGBbS2V5RXhjaGFuZ2U6IG9uS2V5RXhjaGFuZ2VNZXNzYWdlKCldIGNvbnRleHQ9JHt0aGlzLmNvbnRleHR9IHJlY2VpdmVkIGhhbmRzaGFrZSB3aGlsZSBhbHJlYWR5IGV4Y2hhbmdlZC4gc3RlcD0ke3RoaXMuc3RlcH0gb3RoZXJQdWJLZXk9JHt0aGlzLm90aGVyUHVibGljS2V5fWApLHRoaXMuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5LRVlfSU5GTyxuLnR5cGUpLG4udHlwZT09PWRyLktFWV9IQU5EU0hBS0VfU1lOPyh0aGlzLmNoZWNrU3RlcChbZHIuS0VZX0hBTkRTSEFLRV9OT05FLGRyLktFWV9IQU5EU0hBS0VfQUNLXSksWW4uS2V5RXhjaGFuZ2UoXCJbS2V5RXhjaGFuZ2U6IG9uS2V5RXhjaGFuZ2VNZXNzYWdlKCldIEtFWV9IQU5EU0hBS0VfU1lOXCIsbiksbi5wdWJrZXkmJnRoaXMuc2V0T3RoZXJQdWJsaWNLZXkobi5wdWJrZXkpLHRoaXMuY29tbXVuaWNhdGlvbkxheWVyLnNlbmRNZXNzYWdlKHt0eXBlOmRyLktFWV9IQU5EU0hBS0VfU1lOQUNLLHB1YmtleTp0aGlzLm15UHVibGljS2V5fSkuY2F0Y2goKGU9PntZbi5LZXlFeGNoYW5nZShcIltLZXlFeGNoYW5nZTogb25LZXlFeGNoYW5nZU1lc3NhZ2UoKV0gRXJyb3Igc2VuZGluZyBLRVlfSEFORFNIQUtFX1NZTkFDS1wiLGUpfSkpLHRoaXMuc2V0U3RlcChkci5LRVlfSEFORFNIQUtFX0FDSykpOm4udHlwZT09PWRyLktFWV9IQU5EU0hBS0VfU1lOQUNLPyh0aGlzLmNoZWNrU3RlcChbZHIuS0VZX0hBTkRTSEFLRV9TWU5BQ0ssZHIuS0VZX0hBTkRTSEFLRV9BQ0ssZHIuS0VZX0hBTkRTSEFLRV9OT05FXSksWW4uS2V5RXhjaGFuZ2UoXCJbS2V5RXhjaGFuZ2U6IG9uS2V5RXhjaGFuZ2VNZXNzYWdlKCldIEtFWV9IQU5EU0hBS0VfU1lOQUNLXCIpLG4ucHVia2V5JiZ0aGlzLnNldE90aGVyUHVibGljS2V5KG4ucHVia2V5KSx0aGlzLmNvbW11bmljYXRpb25MYXllci5zZW5kTWVzc2FnZSh7dHlwZTpkci5LRVlfSEFORFNIQUtFX0FDS30pLmNhdGNoKChlPT57WW4uS2V5RXhjaGFuZ2UoXCJbS2V5RXhjaGFuZ2U6IG9uS2V5RXhjaGFuZ2VNZXNzYWdlKCldIEVycm9yIHNlbmRpbmcgS0VZX0hBTkRTSEFLRV9BQ0tcIixlKX0pKSx0aGlzLmtleXNFeGNoYW5nZWQ9ITAsdGhpcy5zZXRTdGVwKGRyLktFWV9IQU5EU0hBS0VfQUNLKSx0aGlzLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuS0VZU19FWENIQU5HRUQpKTpuLnR5cGU9PT1kci5LRVlfSEFORFNIQUtFX0FDSyYmKFluLktleUV4Y2hhbmdlKFwiW0tleUV4Y2hhbmdlOiBvbktleUV4Y2hhbmdlTWVzc2FnZSgpXSBLRVlfSEFORFNIQUtFX0FDSyBzZXQga2V5c0V4Y2hhbmdlZCB0byB0cnVlIVwiKSx0aGlzLmNoZWNrU3RlcChbZHIuS0VZX0hBTkRTSEFLRV9BQ0ssZHIuS0VZX0hBTkRTSEFLRV9OT05FXSksdGhpcy5rZXlzRXhjaGFuZ2VkPSEwLHRoaXMuc2V0U3RlcChkci5LRVlfSEFORFNIQUtFX0FDSyksdGhpcy5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLktFWVNfRVhDSEFOR0VEKSl9cmVzZXRLZXlzKGUpe3RoaXMuY2xlYW4oKSx0aGlzLm15RUNJRVM9bmV3IGVyKGUpfWNsZWFuKCl7WW4uS2V5RXhjaGFuZ2UoYFtLZXlFeGNoYW5nZTogY2xlYW4oKV0gY29udGV4dD0ke3RoaXMuY29udGV4dH0gcmVzZXQgaGFuZHNoYWtlIHN0YXRlYCksdGhpcy5zZXRTdGVwKGRyLktFWV9IQU5EU0hBS0VfTk9ORSksdGhpcy5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLktFWV9JTkZPLHRoaXMuc3RlcCksdGhpcy5rZXlzRXhjaGFuZ2VkPSExfXN0YXJ0KHtpc09yaWdpbmF0b3I6ZSxmb3JjZTp0fSl7Y29uc3R7cmVsYXlQZXJzaXN0ZW5jZTpuLHByb3RvY29sVmVyc2lvbjpyfT10aGlzLmNvbW11bmljYXRpb25MYXllci5yZW1vdGUuc3RhdGUsaT1yPj0yO24/WW4uS2V5RXhjaGFuZ2UoXCJbS2V5RXhjaGFuZ2U6IHN0YXJ0KCldIElnbm9yaW5nIGtleSBleGNoYW5nZSBtZXNzYWdlIGJlY2F1c2UgcmVsYXkgcGVyc2lzdGVuY2UgaXMgYWN0aXZhdGVkXCIpOihZbi5LZXlFeGNoYW5nZShgW0tleUV4Y2hhbmdlOiBzdGFydCgpXSBjb250ZXh0PSR7dGhpcy5jb250ZXh0fSBwcm90b2NvbFZlcnNpb249JHtyfSBpc09yaWdpbmF0b3I9JHtlfSBzdGVwPSR7dGhpcy5zdGVwfSBmb3JjZT0ke3R9IHJlbGF5UGVyc2lzdGVuY2U9JHtufSBrZXlzRXhjaGFuZ2VkPSR7dGhpcy5rZXlzRXhjaGFuZ2VkfWApLGU/ISh0aGlzLmtleXNFeGNoYW5nZWR8fHRoaXMuc3RlcCE9PWRyLktFWV9IQU5EU0hBS0VfTk9ORSYmdGhpcy5zdGVwIT09ZHIuS0VZX0hBTkRTSEFLRV9TWU5BQ0spfHx0PyhZbi5LZXlFeGNoYW5nZShgW0tleUV4Y2hhbmdlOiBzdGFydCgpXSBjb250ZXh0PSR7dGhpcy5jb250ZXh0fSAtLSBzdGFydCBrZXkgZXhjaGFuZ2UgKGZvcmNlPSR7dH0pIC0tIHN0ZXA9JHt0aGlzLnN0ZXB9YCx0aGlzLnN0ZXApLHRoaXMuY2xlYW4oKSx0aGlzLnNldFN0ZXAoZHIuS0VZX0hBTkRTSEFLRV9TWU5BQ0spLHRoaXMuY29tbXVuaWNhdGlvbkxheWVyLnNlbmRNZXNzYWdlKHt0eXBlOmRyLktFWV9IQU5EU0hBS0VfU1lOLHB1YmtleTp0aGlzLm15UHVibGljS2V5LHY6Mn0pLmNhdGNoKChlPT57WW4uS2V5RXhjaGFuZ2UoXCJbS2V5RXhjaGFuZ2U6IHN0YXJ0KCldIEVycm9yIHNlbmRpbmcgS0VZX0hBTkRTSEFLRV9TWU5cIixlKX0pKSk6WW4uS2V5RXhjaGFuZ2UoYFtLZXlFeGNoYW5nZTogc3RhcnQoKV0gY29udGV4dD0ke3RoaXMuY29udGV4dH0gLS0ga2V5IGV4Y2hhbmdlIGFscmVhZHkgJHt0aGlzLmtleXNFeGNoYW5nZWQ/XCJkb25lXCI6XCJpbiBwcm9ncmVzc1wifSAtLSBhYm9ydGVkLmAsdGhpcy5zdGVwKTp0aGlzLmtleXNFeGNoYW5nZWQmJiEwIT09dD9Zbi5LZXlFeGNoYW5nZShcIltLZXlFeGNoYW5nZTogc3RhcnQoKV0gZG9uJ3Qgc2VuZCBLRVlfSEFORFNIQUtFX1NUQVJUIC0tIGV4Y2hhbmdlIGFscmVhZHkgZG9uZS5cIik6aT90aGlzLmNvbW11bmljYXRpb25MYXllci5zZW5kTWVzc2FnZSh7dHlwZTpkci5LRVlfSEFORFNIQUtFX1NZTkFDSyxwdWJrZXk6dGhpcy5teVB1YmxpY0tleSx2OjJ9KS5jYXRjaCgoZT0+e1luLktleUV4Y2hhbmdlKFwiW0tleUV4Y2hhbmdlOiBzdGFydCgpXSBFcnJvciBzZW5kaW5nIEtFWV9IQU5EU0hBS0VfU1lOQUNLXCIsZSl9KSk6KHRoaXMuY29tbXVuaWNhdGlvbkxheWVyLnNlbmRNZXNzYWdlKHt0eXBlOmRyLktFWV9IQU5EU0hBS0VfU1RBUlR9KS5jYXRjaCgoZT0+e1luLktleUV4Y2hhbmdlKFwiW0tleUV4Y2hhbmdlOiBzdGFydCgpXSBFcnJvciBzZW5kaW5nIEtFWV9IQU5EU0hBS0VfU1RBUlRcIixlKX0pKSx0aGlzLmNsZWFuKCkpKX1zZXRTdGVwKGUpe3RoaXMuc3RlcD1lLHRoaXMuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5LRVlfSU5GTyxlKX1jaGVja1N0ZXAoZSl7ZS5sZW5ndGg+MCYmZS5pbmRleE9mKHRoaXMuc3RlcC50b1N0cmluZygpKX1zZXRSZWxheVBlcnNpc3RlbmNlKHtsb2NhbEtleTplLG90aGVyS2V5OnR9KXt0aGlzLm90aGVyUHVibGljS2V5PXQsdGhpcy5teUVDSUVTPW5ldyBlcih7cHJpdmF0ZUtleTplLGRlYnVnOnRoaXMuZGVidWd9KSx0aGlzLmtleXNFeGNoYW5nZWQ9ITB9c2V0S2V5c0V4Y2hhbmdlZChlKXt0aGlzLmtleXNFeGNoYW5nZWQ9ZX1hcmVLZXlzRXhjaGFuZ2VkKCl7cmV0dXJuIHRoaXMua2V5c0V4Y2hhbmdlZH1nZXRNeVB1YmxpY0tleSgpe3JldHVybiB0aGlzLm15UHVibGljS2V5fWdldE90aGVyUHVibGljS2V5KCl7cmV0dXJuIHRoaXMub3RoZXJQdWJsaWNLZXl9c2V0T3RoZXJQdWJsaWNLZXkoZSl7WW4uS2V5RXhjaGFuZ2UoXCJbS2V5RXhjaGFuZ2U6IHNldE90aGVyUHViS2V5KCldXCIsZSksdGhpcy5vdGhlclB1YmxpY0tleT1lfWVuY3J5cHRNZXNzYWdlKGUpe2lmKCF0aGlzLm90aGVyUHVibGljS2V5KXRocm93IG5ldyBFcnJvcihcImVuY3J5cHRNZXNzYWdlOiBLZXlzIG5vdCBleGNoYW5nZWQgLSBtaXNzaW5nIG90aGVyUHViS2V5XCIpO3JldHVybiB0aGlzLm15RUNJRVMuZW5jcnlwdChlLHRoaXMub3RoZXJQdWJsaWNLZXkpfWRlY3J5cHRNZXNzYWdlKGUpe2lmKCF0aGlzLm90aGVyUHVibGljS2V5KXRocm93IG5ldyBFcnJvcihcImRlY3J5cHRNZXNzYWdlOiBLZXlzIG5vdCBleGNoYW5nZWQgLSBtaXNzaW5nIG90aGVyUHViS2V5XCIpO3JldHVybiB0aGlzLm15RUNJRVMuZGVjcnlwdChlKX1nZXRLZXlJbmZvKCl7cmV0dXJue2VjaWVzOk9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx0aGlzLm15RUNJRVMuZ2V0S2V5SW5mbygpKSx7b3RoZXJQdWJLZXk6dGhpcy5vdGhlclB1YmxpY0tleX0pLHN0ZXA6dGhpcy5zdGVwLGtleXNFeGNoYW5nZWQ6dGhpcy5hcmVLZXlzRXhjaGFuZ2VkKCl9fXRvU3RyaW5nKCl7Y29uc3QgZT17a2V5SW5mbzp0aGlzLmdldEtleUluZm8oKSxrZXlzRXhjaGFuZ2VkOnRoaXMua2V5c0V4Y2hhbmdlZCxzdGVwOnRoaXMuc3RlcH07cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpfX0hZnVuY3Rpb24oZSl7ZS5URVJNSU5BVEU9XCJ0ZXJtaW5hdGVcIixlLkFOU1dFUj1cImFuc3dlclwiLGUuT0ZGRVI9XCJvZmZlclwiLGUuQ0FORElEQVRFPVwiY2FuZGlkYXRlXCIsZS5KU09OUlBDPVwianNvbnJwY1wiLGUuV0FMTEVUX0lORk89XCJ3YWxsZXRfaW5mb1wiLGUuV0FMTEVUX0lOSVQ9XCJ3YWxsZXRfaW5pdFwiLGUuT1JJR0lOQVRPUl9JTkZPPVwib3JpZ2luYXRvcl9pbmZvXCIsZS5QQVVTRT1cInBhdXNlXCIsZS5PVFA9XCJvdHBcIixlLkFVVEhPUklaRUQ9XCJhdXRob3JpemVkXCIsZS5QSU5HPVwicGluZ1wiLGUuUkVBRFk9XCJyZWFkeVwifShleHBvcnRzLk1lc3NhZ2VUeXBlfHwoZXhwb3J0cy5NZXNzYWdlVHlwZT17fSkpLGZ1bmN0aW9uKGUpe2UuUkVRVUVTVD1cInNka19jb25uZWN0X3JlcXVlc3Rfc3RhcnRlZFwiLGUuUkVRVUVTVF9NT0JJTEU9XCJzZGtfY29ubmVjdF9yZXF1ZXN0X3N0YXJ0ZWRfbW9iaWxlXCIsZS5SRUNPTk5FQ1Q9XCJzZGtfcmVjb25uZWN0X3JlcXVlc3Rfc3RhcnRlZFwiLGUuQ09OTkVDVEVEPVwic2RrX2Nvbm5lY3Rpb25fZXN0YWJsaXNoZWRcIixlLkNPTk5FQ1RFRF9NT0JJTEU9XCJzZGtfY29ubmVjdGlvbl9lc3RhYmxpc2hlZF9tb2JpbGVcIixlLkFVVEhPUklaRUQ9XCJzZGtfY29ubmVjdGlvbl9hdXRob3JpemVkXCIsZS5SRUpFQ1RFRD1cInNka19jb25uZWN0aW9uX3JlamVjdGVkXCIsZS5URVJNSU5BVEVEPVwic2RrX2Nvbm5lY3Rpb25fdGVybWluYXRlZFwiLGUuRElTQ09OTkVDVEVEPVwic2RrX2Rpc2Nvbm5lY3RlZFwiLGUuU0RLX1VTRV9FWFRFTlNJT049XCJzZGtfdXNlX2V4dGVuc2lvblwiLGUuU0RLX1JQQ19SRVFVRVNUPVwic2RrX3JwY19yZXF1ZXN0XCIsZS5TREtfUlBDX1JFUVVFU1RfUkVDRUlWRUQ9XCJzZGtfcnBjX3JlcXVlc3RfcmVjZWl2ZWRcIixlLlNES19SUENfUkVRVUVTVF9ET05FPVwic2RrX3JwY19yZXF1ZXN0X2RvbmVcIixlLlNES19FWFRFTlNJT05fVVRJTElaRUQ9XCJzZGtfZXh0ZW5zaW9uX3V0aWxpemVkXCIsZS5TREtfVVNFX0lOQVBQX0JST1dTRVI9XCJzZGtfdXNlX2luYXBwX2Jyb3dzZXJcIn0obHJ8fChscj17fSkpO2NvbnN0IGZyPShlLHQsbik9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciByLGksbyxzLGEsYztjb25zdHtyZW1vdGU6ZCxzdGF0ZTpsfT1lLHtjaGFubmVsSWQ6dSxpc09yaWdpbmF0b3I6aH09bDtpZihcImVycm9yX3Rlcm1pbmF0ZWRcIj09PXQpcmV0dXJuIFluLlNvY2tldFNlcnZpY2UoYGhhbmRsZUpvaW5DaGFubmVsUmVzdWx0czogQ2hhbm5lbCAke3V9IHRlcm1pbmF0ZWRgKSx2b2lkIGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5URVJNSU5BVEUpO2lmKCFuKXJldHVybiB2b2lkIFluLlNvY2tldFNlcnZpY2UoYGhhbmRsZUpvaW5DaGFubmVsUmVzdWx0czogTm8gcmVzdWx0IGZvciBjaGFubmVsICR7dX1gKTtjb25zdHtwZXJzaXN0ZW5jZTpmLHdhbGxldEtleTpwLHJlamVjdGVkOm19PW47aWYoWW4uU29ja2V0U2VydmljZShgaGFuZGxlSm9pbkNoYW5uZWxSZXN1bHRzOiBDaGFubmVsICR7dX0gcGVyc2lzdGVuY2U9JHtmfSB3YWxsZXRLZXk9JHtwfSByZWplY3RlZD0ke219YCksbSlyZXR1cm4gWW4uU29ja2V0U2VydmljZShgaGFuZGxlSm9pbkNoYW5uZWxSZXN1bHRzOiBDaGFubmVsICR7dX0gcmVqZWN0ZWRgKSx5aWVsZCBlLnJlbW90ZS5kaXNjb25uZWN0KHt0ZXJtaW5hdGU6ITB9KSxlLnJlbW90ZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLlJFSkVDVEVELHtjaGFubmVsSWQ6dX0pLHZvaWQgZS5yZW1vdGUuZW1pdFNlcnZpY2VTdGF0dXNFdmVudCgpO2lmKHAmJiEobnVsbD09PShyPWQuc3RhdGUuY2hhbm5lbENvbmZpZyl8fHZvaWQgMD09PXI/dm9pZCAwOnIub3RoZXJLZXkpKXtlLmdldEtleUV4Y2hhbmdlKCkuc2V0T3RoZXJQdWJsaWNLZXkocCksbnVsbD09PShpPWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1pfHxpLnNldEtleXNFeGNoYW5nZWQoITApLGQuc3RhdGUucmVhZHk9ITAsZC5zdGF0ZS5hdXRob3JpemVkPSEwLGQuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5BVVRIT1JJWkVEKTtjb25zdHtjb21tdW5pY2F0aW9uTGF5ZXI6dCxzdG9yYWdlTWFuYWdlcjpufT1kLnN0YXRlLHI9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGQuc3RhdGUuY2hhbm5lbENvbmZpZykse2NoYW5uZWxJZDpudWxsIT09KG89ZC5zdGF0ZS5jaGFubmVsSWQpJiZ2b2lkIDAhPT1vP286XCJcIix2YWxpZFVudGlsOkRhdGUubm93KCkraXIsbG9jYWxLZXk6bnVsbD09dD92b2lkIDA6dC5nZXRLZXlJbmZvKCkuZWNpZXMucHJpdmF0ZSxvdGhlcktleTpwfSk7ZS5zZW5kTWVzc2FnZSh7dHlwZTpkci5LRVlfSEFORFNIQUtFX0FDS30pLmNhdGNoKChlPT57fSkpLG51bGw9PT0ocz1lLnN0YXRlLnNvY2tldCl8fHZvaWQgMD09PXN8fHMuZW1pdChleHBvcnRzLk1lc3NhZ2VUeXBlLlBJTkcse2lkOnUsY2xpZW50VHlwZTpoP1wiZGFwcFwiOlwid2FsbGV0XCIsY29udGV4dDpcIm9uX2NoYW5uZWxfcmVjb25uZWN0XCIsbWVzc2FnZTpcIlwifSkseWllbGQgbnVsbD09bj92b2lkIDA6bi5wZXJzaXN0Q2hhbm5lbENvbmZpZyhyKSxkLmVtaXRTZXJ2aWNlU3RhdHVzRXZlbnQoKSxkLnNldENvbm5lY3Rpb25TdGF0dXMoZXhwb3J0cy5Db25uZWN0aW9uU3RhdHVzLkxJTktFRCl9ZiYmKGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5DSEFOTkVMX1BFUlNJU1RFTkNFKSxudWxsPT09KGE9ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PWF8fGEuc2V0S2V5c0V4Y2hhbmdlZCghMCksZC5zdGF0ZS5yZWFkeT0hMCxkLnN0YXRlLmF1dGhvcml6ZWQ9ITAsZC5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkFVVEhPUklaRUQpLFhuKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7aWQ6bnVsbCE9dT91OlwiXCIsZXZlbnQ6aD9sci5DT05ORUNURUQ6bHIuQ09OTkVDVEVEX01PQklMRX0sZS5yZW1vdGUuc3RhdGUub3JpZ2luYXRvckluZm8pLHtzZGtWZXJzaW9uOmUucmVtb3RlLnN0YXRlLnNka1ZlcnNpb24sY29tbUxheWVyOmUuc3RhdGUuY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZSxjb21tTGF5ZXJWZXJzaW9uOnRyLnZlcnNpb24sd2FsbGV0VmVyc2lvbjpudWxsPT09KGM9ZS5yZW1vdGUuc3RhdGUud2FsbGV0SW5mbyl8fHZvaWQgMD09PWM/dm9pZCAwOmMudmVyc2lvbn0pLGwuY29tbXVuaWNhdGlvblNlcnZlclVybCkuY2F0Y2goKGU9Pnt9KSkpfSkpLHByPWU9Pm5ldyBQcm9taXNlKCh0PT57c2V0VGltZW91dCh0LGUpfSkpLG1yPShlLHQsLi4ubik9Pmwodm9pZCAwLFtlLHQsLi4ubl0sdm9pZCAwLChmdW5jdGlvbiooZSx0LG49MjAwKXtsZXQgcjtjb25zdCBpPURhdGUubm93KCk7bGV0IG89ITE7Zm9yKDshbzspe2lmKG89RGF0ZS5ub3coKS1pPjNlNSxyPXRbZV0sdm9pZCAwIT09ci5lbGFwc2VkVGltZSlyZXR1cm4gcjt5aWVsZCBwcihuKX10aHJvdyBuZXcgRXJyb3IoYFJQQyAke2V9IHRpbWVkIG91dGApfSkpLGdyPWU9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0e3N0YXRlOnR9PWUse3NvY2tldDpuLGNoYW5uZWxJZDpyLGNvbnRleHQ6aSxpc09yaWdpbmF0b3I6byxpc1JlY29ubmVjdGluZzpzfT10O2lmKHMpcmV0dXJuIFluLlNvY2tldFNlcnZpY2UoXCJbU29ja2V0U2VydmljZTogcmVjb25uZWN0U29ja2V0KCldIFJlY29ubmVjdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzLCBza2lwcGluZ1wiLGUpLCExO2lmKCFuKXJldHVybiBZbi5Tb2NrZXRTZXJ2aWNlKFwiW1NvY2tldFNlcnZpY2U6IHJlY29ubmVjdFNvY2tldCgpXSBzb2NrZXQgaXMgbm90IGRlZmluZWRcIixlKSwhMTtpZighcilyZXR1cm4hMTtjb25zdHtjb25uZWN0ZWQ6YX09bjt0LmlzUmVjb25uZWN0aW5nPSEwLHQucmVjb25uZWN0aW9uQXR0ZW1wdHM9MCxZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogcmVjb25uZWN0U29ja2V0KCldIGNvbm5lY3RlZD0ke2F9IHRyeWluZyB0byByZWNvbm5lY3QgYWZ0ZXIgc29ja2V0aW8gZGlzY29ubmVjdGlvbmAsZSk7dHJ5e2Zvcig7Mz50LnJlY29ubmVjdGlvbkF0dGVtcHRzOyl7aWYoWW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IHJlY29ubmVjdFNvY2tldCgpXSBBdHRlbXB0ICR7dC5yZWNvbm5lY3Rpb25BdHRlbXB0cysxfSBvZiAzYCxlKSx5aWVsZCBwcigyMDApLG4uY29ubmVjdGVkKXJldHVybiBZbi5Tb2NrZXRTZXJ2aWNlKFwiU29ja2V0IGFscmVhZHkgY29ubmVjdGVkIC0tLSBwaW5nIHRvIHJldHJpZXZlIG1lc3NhZ2VzXCIpLG4uZW1pdChleHBvcnRzLk1lc3NhZ2VUeXBlLlBJTkcse2lkOnIsY2xpZW50VHlwZTpvP1wiZGFwcFwiOlwid2FsbGV0XCIsY29udGV4dDpcIm9uX2NoYW5uZWxfY29uZmlnXCIsbWVzc2FnZTpcIlwifSksITA7dC5yZXN1bWVkPSEwLG4uY29ubmVjdCgpLGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5TT0NLRVRfUkVDT05ORUNUKTt0cnl7aWYoeWllbGQgbmV3IFByb21pc2UoKCh0LHMpPT57bi5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkpPSU5fQ0hBTk5FTCx7Y2hhbm5lbElkOnIsY29udGV4dDpgJHtpfWNvbm5lY3RfYWdhaW5gLGNsaWVudFR5cGU6bz9cImRhcHBcIjpcIndhbGxldFwifSwoKG4scik9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3RyeXt5aWVsZCBmcihlLG4sciksdCgpfWNhdGNoKGUpe3MoZSl9fSkpKSl9KSkseWllbGQgcHIoMTAwKSxuLmNvbm5lY3RlZClyZXR1cm4gWW4uU29ja2V0U2VydmljZShgUmVjb25uZWN0aW9uIHN1Y2Nlc3NmdWwgb24gYXR0ZW1wdCAke3QucmVjb25uZWN0aW9uQXR0ZW1wdHMrMX1gKSwhMH1jYXRjaChlKXtZbi5Tb2NrZXRTZXJ2aWNlKGBFcnJvciBkdXJpbmcgcmVjb25uZWN0aW9uIGF0dGVtcHQgJHt0LnJlY29ubmVjdGlvbkF0dGVtcHRzKzF9OmAsZSl9dC5yZWNvbm5lY3Rpb25BdHRlbXB0cys9MSwzPnQucmVjb25uZWN0aW9uQXR0ZW1wdHMmJih5aWVsZCBwcigyMDApKX1yZXR1cm4gWW4uU29ja2V0U2VydmljZShcIkZhaWxlZCB0byByZWNvbm5lY3QgYWZ0ZXIgMyBhdHRlbXB0c1wiKSwhMX1maW5hbGx5e3QuaXNSZWNvbm5lY3Rpbmc9ITEsdC5yZWNvbm5lY3Rpb25BdHRlbXB0cz0wfX0pKTtmdW5jdGlvbiB2cihlLHQpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIG47Y29uc3Qgcj1udWxsPT09KG49ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PW4/dm9pZCAwOm4uZW5jcnlwdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkodCkpLGk9e2lkOmUuc3RhdGUuY2hhbm5lbElkLGNvbnRleHQ6ZS5zdGF0ZS5jb250ZXh0LGNsaWVudFR5cGU6ZS5zdGF0ZS5pc09yaWdpbmF0b3I/XCJkYXBwXCI6XCJ3YWxsZXRcIixtZXNzYWdlOnIscGxhaW50ZXh0OmUuc3RhdGUuaGFzUGxhaW50ZXh0P0pTT04uc3RyaW5naWZ5KHQpOnZvaWQgMH07cmV0dXJuIFluLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBlbmNyeXB0QW5kU2VuZE1lc3NhZ2UoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH1gLGkpLHQudHlwZT09PWV4cG9ydHMuTWVzc2FnZVR5cGUuVEVSTUlOQVRFJiYoZS5zdGF0ZS5tYW51YWxEaXNjb25uZWN0PSEwKSxuZXcgUHJvbWlzZSgoKHQsbik9Pnt2YXIgcjtudWxsPT09KHI9ZS5zdGF0ZS5zb2NrZXQpfHx2b2lkIDA9PT1yfHxyLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuTUVTU0FHRSxpLCgoZSxyKT0+e3ZhciBpO2UmJihZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogZW5jcnlwdEFuZFNlbmRNZXNzYWdlKCldIGVycm9yPSR7ZX1gKSxuKGUpKSxZbi5Tb2NrZXRTZXJ2aWNlKFwiW2VuY3J5cHRBbmRTZW5kTWVzc2FnZV0gcmVzcG9uc2VcIixyKSx0KG51bGwhPT0oaT1udWxsPT1yP3ZvaWQgMDpyLnN1Y2Nlc3MpJiZ2b2lkIDAhPT1pJiZpKX0pKX0pKX0pKX12YXIgeXI7IWZ1bmN0aW9uKGUpe2UuUlBDX0NIRUNLPVwicnBjQ2hlY2tcIixlLlNLSVBQRURfUlBDPVwic2tpcHBlZFJwY1wifSh5cnx8KHlyPXt9KSk7Y29uc3QgRXI9W1wiZXRoX3NlbmRUcmFuc2FjdGlvblwiLFwiZXRoX3NpZ25UeXBlZERhdGFcIixcImV0aF9zaWduVHJhbnNhY3Rpb25cIixcInBlcnNvbmFsX3NpZ25cIixcIndhbGxldF9yZXF1ZXN0UGVybWlzc2lvbnNcIixcIndhbGxldF9zd2l0Y2hFdGhlcmV1bUNoYWluXCIsXCJldGhfc2lnblR5cGVkRGF0YV92M1wiLFwiZXRoX3NpZ25UeXBlZERhdGFfdjRcIixcIm1ldGFtYXNrX2Nvbm5lY3RTaWduXCIsXCJtZXRhbWFza19jb25uZWN0V2l0aFwiLFwibWV0YW1hc2tfYmF0Y2hcIl0ubWFwKChlPT5lLnRvTG93ZXJDYXNlKCkpKTtjb25zdCBicj1be2V2ZW50OmV4cG9ydHMuRXZlbnRUeXBlLkNMSUVOVFNfQ09OTkVDVEVELGhhbmRsZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbj0+bCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciBuLHIsaSxvLHMsYSxjLGQsbCx1LGg7Y29uc3QgZj1udWxsIT09KHI9bnVsbD09PShuPWUucmVtb3RlLnN0YXRlLmNoYW5uZWxDb25maWcpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnJlbGF5UGVyc2lzdGVuY2UpJiZ2b2lkIDAhPT1yJiZyO2lmKFluLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBoYW5kbGVDbGllbnRzQ29ubmVjdGVkKCldIGNvbnRleHQ9JHtlLnN0YXRlLmNvbnRleHR9IG9uICdjbGllbnRzX2Nvbm5lY3RlZC0ke3R9JyByZWxheVBlcnNpc3RlbmNlPSR7Zn0gcmVzdW1lZD0ke2Uuc3RhdGUucmVzdW1lZH0gIGNsaWVudHNQYXVzZWQ9JHtlLnN0YXRlLmNsaWVudHNQYXVzZWR9IGtleXNFeGNoYW5nZWQ9JHtudWxsPT09KGk9ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuYXJlS2V5c0V4Y2hhbmdlZCgpfSBpc09yaWdpbmF0b3I9JHtlLnN0YXRlLmlzT3JpZ2luYXRvcn1gKSxlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuQ0xJRU5UU19DT05ORUNURUQse2lzT3JpZ2luYXRvcjplLnN0YXRlLmlzT3JpZ2luYXRvcixrZXlzRXhjaGFuZ2VkOm51bGw9PT0obz1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09bz92b2lkIDA6by5hcmVLZXlzRXhjaGFuZ2VkKCksY29udGV4dDplLnN0YXRlLmNvbnRleHR9KSxlLnN0YXRlLnJlc3VtZWQpZS5zdGF0ZS5pc09yaWdpbmF0b3J8fChZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogaGFuZGxlQ2xpZW50c0Nvbm5lY3RlZCgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fSAnY2xpZW50c19jb25uZWN0ZWQnIC8ga2V5c0V4Y2hhbmdlZD0ke251bGw9PT0ocz1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09cz92b2lkIDA6cy5hcmVLZXlzRXhjaGFuZ2VkKCl9IC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlgKSxudWxsPT09KGE9ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PWF8fGEuc3RhcnQoe2lzT3JpZ2luYXRvcjpudWxsIT09KGM9ZS5zdGF0ZS5pc09yaWdpbmF0b3IpJiZ2b2lkIDAhPT1jJiZjfSkpLGUuc3RhdGUucmVzdW1lZD0hMTtlbHNlIGlmKGUuc3RhdGUuY2xpZW50c1BhdXNlZClZbi5Tb2NrZXRTZXJ2aWNlKFwiW1NvY2tldFNlcnZpY2U6IGhhbmRsZUNsaWVudHNDb25uZWN0ZWQoKV0gJ2NsaWVudHNfY29ubmVjdGVkJyBza2lwIHNlbmRpbmcgb3JpZ2luYXRvckluZm8gb24gcGF1c2VcIik7ZWxzZSBpZighZS5zdGF0ZS5pc09yaWdpbmF0b3Ipe2NvbnN0IHQ9IWY7WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZUNsaWVudHNDb25uZWN0ZWQoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH0gb24gJ2NsaWVudHNfY29ubmVjdGVkJyAvIGtleXNFeGNoYW5nZWQ9JHtudWxsPT09KGQ9ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PWQ/dm9pZCAwOmQuYXJlS2V5c0V4Y2hhbmdlZCgpfSAtLSBmb3JjZT0ke3R9IC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlgKSxZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogaGFuZGxlQ2xpZW50c0Nvbm5lY3RlZCgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fSBvbiAnY2xpZW50c19jb25uZWN0ZWQnIC8ga2V5c0V4Y2hhbmdlZD0ke251bGw9PT0obD1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09bD92b2lkIDA6bC5hcmVLZXlzRXhjaGFuZ2VkKCl9IC0tIGZvcmNlPSR7dH0gLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eWApLG51bGw9PT0odT1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09dXx8dS5zdGFydCh7aXNPcmlnaW5hdG9yOm51bGwhPT0oaD1lLnN0YXRlLmlzT3JpZ2luYXRvcikmJnZvaWQgMCE9PWgmJmgsZm9yY2U6dH0pfWUuc3RhdGUuY2xpZW50c0Nvbm5lY3RlZD0hMCxlLnN0YXRlLmNsaWVudHNQYXVzZWQ9ITF9KSl9fSx7ZXZlbnQ6ZXhwb3J0cy5FdmVudFR5cGUuQ0hBTk5FTF9DUkVBVEVELGhhbmRsZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbj0+e1luLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBoYW5kbGVDaGFubmVsQ3JlYXRlZCgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fSBvbiAnY2hhbm5lbF9jcmVhdGVkLSR7dH0nYCxuKSxlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuQ0hBTk5FTF9DUkVBVEVELG4pfX19LHtldmVudDpleHBvcnRzLkV2ZW50VHlwZS5DTElFTlRTX0RJU0NPTk5FQ1RFRCxoYW5kbGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKCk9Pnt2YXIgbjtlLnN0YXRlLmNsaWVudHNDb25uZWN0ZWQ9ITEsWW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZXNDbGllbnRzRGlzY29ubmVjdGVkKCldIGNvbnRleHQ9JHtlLnN0YXRlLmNvbnRleHR9IG9uICdjbGllbnRzX2Rpc2Nvbm5lY3RlZC0ke3R9J2ApLGUucmVtb3RlLnN0YXRlLnJlbGF5UGVyc2lzdGVuY2U/WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZXNDbGllbnRzRGlzY29ubmVjdGVkKCldIGNvbnRleHQ9JHtlLnN0YXRlLmNvbnRleHR9IG9uICdjbGllbnRzX2Rpc2Nvbm5lY3RlZC0ke3R9JyAtIHJlbGF5UGVyc2lzdGVuY2UgZW5hYmxlZCwgc2tpcHBpbmcga2V5IGV4Y2hhbmdlIGNsZWFudXAuYCk6KGUuc3RhdGUuaXNPcmlnaW5hdG9yJiYhZS5zdGF0ZS5jbGllbnRzUGF1c2VkJiYobnVsbD09PShuPWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1ufHxuLmNsZWFuKCkpLGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5DTElFTlRTX0RJU0NPTk5FQ1RFRCx0KSl9fX0se2V2ZW50OmV4cG9ydHMuRXZlbnRUeXBlLkNPTkZJRyxoYW5kbGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG49PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt2YXIgcixpLG87WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZUNoYW5uZWxDb25maWcoKV0gdXBkYXRlIHJlbGF5UGVyc2lzdGVuY2Ugb24gJ2NvbmZpZy0ke3R9J2Asbik7Y29uc3R7cGVyc2lzdGVuY2U6cyx3YWxsZXRLZXk6YX09bjtlLnN0YXRlLmlzT3JpZ2luYXRvciYmZS5yZW1vdGUuc3RhdGUuY2hhbm5lbENvbmZpZz8obi53YWxsZXRLZXkmJiFlLnJlbW90ZS5zdGF0ZS5jaGFubmVsQ29uZmlnLm90aGVyS2V5JiYoWW4uU29ja2V0U2VydmljZShgU2V0dGluZyB3YWxsZXQga2V5ICR7YX1gKSxlLnJlbW90ZS5zdGF0ZS5jaGFubmVsQ29uZmlnLm90aGVyS2V5PWEsZS5nZXRLZXlFeGNoYW5nZSgpLnNldE90aGVyUHVibGljS2V5KG4ud2FsbGV0S2V5KSxudWxsPT09KHI9ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PXJ8fHIuc2V0S2V5c0V4Y2hhbmdlZCghMCkseWllbGQgZS5yZW1vdGUuc2VuZE1lc3NhZ2Uoe3R5cGU6ZHIuS0VZX0hBTkRTSEFLRV9BQ0t9KSx5aWVsZCBlLnJlbW90ZS5zZW5kTWVzc2FnZSh7dHlwZTpleHBvcnRzLk1lc3NhZ2VUeXBlLlBJTkd9KSx5aWVsZCBudWxsPT09KGk9ZS5yZW1vdGUuc3RhdGUuc3RvcmFnZU1hbmFnZXIpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLnBlcnNpc3RDaGFubmVsQ29uZmlnKGUucmVtb3RlLnN0YXRlLmNoYW5uZWxDb25maWcpKSwhMCE9PXN8fGUucmVtb3RlLnN0YXRlLmNoYW5uZWxDb25maWcucmVsYXlQZXJzaXN0ZW5jZXx8KFluLlNvY2tldFNlcnZpY2UoYFNldHRpbmcgcmVsYXkgcGVyc2lzdGVuY2UgJHtzfWApLGUucmVtb3RlLnN0YXRlLmNoYW5uZWxDb25maWcucmVsYXlQZXJzaXN0ZW5jZT1zLGUucmVtb3RlLnN0YXRlLnJlbGF5UGVyc2lzdGVuY2U9ITAsZS5yZW1vdGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5DSEFOTkVMX1BFUlNJU1RFTkNFKSxlLnJlbW90ZS5zdGF0ZS5hdXRob3JpemVkPSEwLGUucmVtb3RlLnN0YXRlLnJlYWR5PSEwLGUucmVtb3RlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuQVVUSE9SSVpFRCkseWllbGQgbnVsbD09PShvPWUucmVtb3RlLnN0YXRlLnN0b3JhZ2VNYW5hZ2VyKXx8dm9pZCAwPT09bz92b2lkIDA6by5wZXJzaXN0Q2hhbm5lbENvbmZpZyhlLnJlbW90ZS5zdGF0ZS5jaGFubmVsQ29uZmlnKSkpOmUuc3RhdGUuaXNPcmlnaW5hdG9yfHxuLnBlcnNpc3RlbmNlJiYoZS5yZW1vdGUuc3RhdGUucmVsYXlQZXJzaXN0ZW5jZT0hMCxlLnJlbW90ZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkNIQU5ORUxfUEVSU0lTVEVOQ0UpKX0pKX19LHtldmVudDpleHBvcnRzLkV2ZW50VHlwZS5NRVNTQUdFLGhhbmRsZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbj0+e3ZhciByLGksbyxzLGEsYyxkLGwsdSxoLGYscCxtLGcsdix5LEUsYjtjb25zdHthY2tJZDp3LG1lc3NhZ2U6UyxlcnJvcjpffT1uLEM9bnVsbCE9PShyPWUucmVtb3RlLnN0YXRlLnJlbGF5UGVyc2lzdGVuY2UpJiZ2b2lkIDAhPT1yJiZyO2lmKFluLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlIGhhbmRsZU1lc3NhZ2UoKV0gIHJlbGF5UGVyc2lzdGVuY2U9JHtDfSAgY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH0gb24gJ21lc3NhZ2UnICR7dH0ga2V5c0V4Y2hhbmdlZD0ke251bGw9PT0oaT1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09aT92b2lkIDA6aS5hcmVLZXlzRXhjaGFuZ2VkKCl9YCxuKSxfKXRocm93IFluLlNvY2tldFNlcnZpY2UoYFxcbiAgICAgIFtTb2NrZXRTZXJ2aWNlIGhhbmRsZU1lc3NhZ2UoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH06Om9uICdtZXNzYWdlJyBlcnJvcj0ke199YCksbmV3IEVycm9yKF8pO2NvbnN0IHg9XCJzdHJpbmdcIj09dHlwZW9mIFM7aWYoIXgmJihudWxsPT1TP3ZvaWQgMDpTLnR5cGUpPT09ZHIuS0VZX0hBTkRTSEFLRV9TVEFSVCl7aWYoQylyZXR1cm47cmV0dXJuIFluLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlIGhhbmRsZU1lc3NhZ2UoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH06Om9uICdtZXNzYWdlJyByZWNlaXZlZCBIQU5EU0hBS0VfU1RBUlQgaXNPcmlnaW5hdG9yPSR7ZS5zdGF0ZS5pc09yaWdpbmF0b3J9YCxTKSx2b2lkKG51bGw9PT0obz1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09b3x8by5zdGFydCh7aXNPcmlnaW5hdG9yOm51bGwhPT0ocz1lLnN0YXRlLmlzT3JpZ2luYXRvcikmJnZvaWQgMCE9PXMmJnMsZm9yY2U6ITB9KSl9aWYoIXgmJihudWxsPT09KGE9bnVsbD09Uz92b2lkIDA6Uy50eXBlKXx8dm9pZCAwPT09YT92b2lkIDA6YS5zdGFydHNXaXRoKFwia2V5X2hhbmRzaGFrZVwiKSkpe2lmKEMpcmV0dXJuO3JldHVybiBZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZSBoYW5kbGVNZXNzYWdlKCldIGNvbnRleHQ9JHtlLnN0YXRlLmNvbnRleHR9OjpvbiAnbWVzc2FnZScgZW1pdCBLRVlfRVhDSEFOR0VgLFMpLHZvaWQgZS5lbWl0KGNyLktFWV9FWENIQU5HRSx7bWVzc2FnZTpTLGNvbnRleHQ6ZS5zdGF0ZS5jb250ZXh0fSl9aWYoeCYmIShudWxsPT09KGM9ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PWM/dm9pZCAwOmMuYXJlS2V5c0V4Y2hhbmdlZCgpKSl7bGV0IHQ9ITE7dHJ5e1luLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlIGhhbmRsZU1lc3NhZ2UoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH06Om9uICdtZXNzYWdlJyB0cnlpbmcgdG8gZGVjcnlwdCBtZXNzYWdlYCksbnVsbD09PShkPWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1kfHxkLmRlY3J5cHRNZXNzYWdlKFMpLHQ9ITB9Y2F0Y2godCl7WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2UgaGFuZGxlTWVzc2FnZSgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fTo6b24gJ21lc3NhZ2UnIGVycm9yYCx0KX1pZighdClyZXR1cm4gZS5zdGF0ZS5pc09yaWdpbmF0b3I/bnVsbD09PSh1PWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT11fHx1LnN0YXJ0KHtpc09yaWdpbmF0b3I6bnVsbCE9PShoPWUuc3RhdGUuaXNPcmlnaW5hdG9yKSYmdm9pZCAwIT09aCYmaH0pOmUuc2VuZE1lc3NhZ2Uoe3R5cGU6ZHIuS0VZX0hBTkRTSEFLRV9TVEFSVH0pLmNhdGNoKChlPT57fSkpLHZvaWQgWW4uU29ja2V0U2VydmljZShgTWVzc2FnZSBpZ25vcmVkIGJlY2F1c2UgaW52YWxpZCBrZXkgZXhjaGFuZ2Ugc3RhdHVzLiBzdGVwPSR7bnVsbD09PShmPWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1mP3ZvaWQgMDpmLmdldEtleUluZm8oKS5zdGVwfWAsbnVsbD09PShwPWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1wP3ZvaWQgMDpwLmdldEtleUluZm8oKSxTKTtZbi5Tb2NrZXRTZXJ2aWNlKFwiSW52YWxpZCBrZXkgZXhjaGFuZ2Ugc3RhdHVzIGRldGVjdGVkIC0tLSB1cGRhdGluZyBpdC5cIiksbnVsbD09PShsPWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1sfHxsLnNldEtleXNFeGNoYW5nZWQoITApfWVsc2UgaWYoIXgmJihudWxsPT1TP3ZvaWQgMDpTLnR5cGUpKXJldHVybiB2b2lkIGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5NRVNTQUdFLFMpO2lmKCF4KXJldHVybiB2b2lkIGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5NRVNTQUdFLFMpO2NvbnN0IGs9bnVsbD09PShtPWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1tP3ZvaWQgMDptLmRlY3J5cHRNZXNzYWdlKFMpLE09SlNPTi5wYXJzZShudWxsIT1rP2s6XCJ7fVwiKTtpZih3JiYobnVsbD09dz92b2lkIDA6dy5sZW5ndGgpPjAmJihZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZSBoYW5kbGVNZXNzYWdlKCldIGNvbnRleHQ9JHtlLnN0YXRlLmNvbnRleHR9OjpvbiAnbWVzc2FnZScgYWNraWQ9JHt3fSBjaGFubmVsSWQ9JHt0fWApLG51bGw9PT0oZz1lLnN0YXRlLnNvY2tldCl8fHZvaWQgMD09PWd8fGcuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5NRVNTQUdFX0FDSyx7YWNrSWQ6dyxjaGFubmVsSWQ6dCxjbGllbnRUeXBlOmUuc3RhdGUuaXNPcmlnaW5hdG9yP1wiZGFwcFwiOlwid2FsbGV0XCJ9KSksZS5zdGF0ZS5jbGllbnRzUGF1c2VkPShudWxsPT1NP3ZvaWQgMDpNLnR5cGUpPT09ZXhwb3J0cy5NZXNzYWdlVHlwZS5QQVVTRSxlLnN0YXRlLmlzT3JpZ2luYXRvciYmTS5kYXRhKXtjb25zdCB0PU0uZGF0YSxuPWUuc3RhdGUucnBjTWV0aG9kVHJhY2tlclt0LmlkXTtpZihuKXtjb25zdCByPURhdGUubm93KCktbi50aW1lc3RhbXA7WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2UgaGFuZGxlTWVzc2FnZSgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fTo6b24gJ21lc3NhZ2UnIHJlY2VpdmVkIGFuc3dlciBmb3IgaWQ9JHt0LmlkfSBtZXRob2Q9JHtuLm1ldGhvZH0gcmVzcG9uc2VUaW1lPSR7cn1gLE0pLGUucmVtb3RlLnN0YXRlLmFuYWx5dGljcyYmRXIuaW5jbHVkZXMobi5tZXRob2QudG9Mb3dlckNhc2UoKSkmJlhuKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7aWQ6bnVsbCE9PSh2PWUucmVtb3RlLnN0YXRlLmNoYW5uZWxJZCkmJnZvaWQgMCE9PXY/djpcIlwiLGV2ZW50OmxyLlNES19SUENfUkVRVUVTVF9ET05FLHNka1ZlcnNpb246ZS5yZW1vdGUuc3RhdGUuc2RrVmVyc2lvbixjb21tTGF5ZXJWZXJzaW9uOnRyLnZlcnNpb259LGUucmVtb3RlLnN0YXRlLm9yaWdpbmF0b3JJbmZvKSx7d2FsbGV0VmVyc2lvbjpudWxsPT09KHk9ZS5yZW1vdGUuc3RhdGUud2FsbGV0SW5mbyl8fHZvaWQgMD09PXk/dm9pZCAwOnkudmVyc2lvbixwYXJhbXM6e21ldGhvZDpuLm1ldGhvZCxmcm9tOlwibW9iaWxlXCJ9fSksZS5yZW1vdGUuc3RhdGUuY29tbXVuaWNhdGlvblNlcnZlclVybCkuY2F0Y2goKGU9Pnt9KSk7Y29uc3QgaT1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbikse3Jlc3VsdDp0LnJlc3VsdCxlcnJvcjp0LmVycm9yP3tjb2RlOm51bGw9PT0oRT10LmVycm9yKXx8dm9pZCAwPT09RT92b2lkIDA6RS5jb2RlLG1lc3NhZ2U6bnVsbD09PShiPXQuZXJyb3IpfHx2b2lkIDA9PT1iP3ZvaWQgMDpiLm1lc3NhZ2V9OnZvaWQgMCxlbGFwc2VkVGltZTpyfSk7ZS5zdGF0ZS5ycGNNZXRob2RUcmFja2VyW3QuaWRdPWksZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLlJQQ19VUERBVEUsaSl9fWUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5NRVNTQUdFLHttZXNzYWdlOk19KX19fSx7ZXZlbnQ6ZXhwb3J0cy5FdmVudFR5cGUuUkVKRUNURUQsaGFuZGxlcjpmdW5jdGlvbihlLHQpe3JldHVybiBuPT5sKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIG47ZS5zdGF0ZS5pc09yaWdpbmF0b3ImJiFlLnJlbW90ZS5zdGF0ZS5yZWFkeT8oWW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZUNoYW5uZWxSZWplY3RlZCgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fSBjaGFubmVsSWQ9JHt0fSBpc09yaWdpbmF0b3I9JHtlLnN0YXRlLmlzT3JpZ2luYXRvcn0gcmVhZHk9JHtlLnJlbW90ZS5zdGF0ZS5yZWFkeX1gLGUucmVtb3RlLnN0YXRlLm9yaWdpbmF0b3JJbmZvKSxYbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe2lkOnQsZXZlbnQ6bHIuUkVKRUNURUR9LGUucmVtb3RlLnN0YXRlLm9yaWdpbmF0b3JJbmZvKSx7c2RrVmVyc2lvbjplLnJlbW90ZS5zdGF0ZS5zZGtWZXJzaW9uLGNvbW1MYXllcjplLnN0YXRlLmNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2UsY29tbUxheWVyVmVyc2lvbjp0ci52ZXJzaW9uLHdhbGxldFZlcnNpb246bnVsbD09PShuPWUucmVtb3RlLnN0YXRlLndhbGxldEluZm8pfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnZlcnNpb259KSxlLnJlbW90ZS5zdGF0ZS5jb21tdW5pY2F0aW9uU2VydmVyVXJsKS5jYXRjaCgoZT0+e30pKSx5aWVsZCBlLnJlbW90ZS5kaXNjb25uZWN0KHt0ZXJtaW5hdGU6ITB9KSxlLnJlbW90ZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLlJFSkVDVEVELHtjaGFubmVsSWQ6dH0pLGUucmVtb3RlLnNldENvbm5lY3Rpb25TdGF0dXMoZXhwb3J0cy5Db25uZWN0aW9uU3RhdHVzLkRJU0NPTk5FQ1RFRCkpOlluLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBoYW5kbGVDaGFubmVsUmVqZWN0ZWQoKV0gU0tJUCAtLSBjaGFubmVsSWQ9JHt0fSBpc09yaWdpbmF0b3I9JHtlLnN0YXRlLmlzT3JpZ2luYXRvcn0gcmVhZHk9JHtlLnJlbW90ZS5zdGF0ZS5yZWFkeX1gKX0pKX19LHtldmVudDpcImNsaWVudHNfd2FpdGluZ190b19qb2luXCIsaGFuZGxlcjpmdW5jdGlvbihlLHQpe3JldHVybiBuPT57WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZUNsaWVudHNXYWl0aW5nVG9Kb2luKCldIGNvbnRleHQ9JHtlLnN0YXRlLmNvbnRleHR9IG9uICdjbGllbnRzX3dhaXRpbmdfdG9fam9pbi0ke3R9J2AsbiksZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkNMSUVOVFNfV0FJVElORyxuKX19fV0sd3I9W3tldmVudDpleHBvcnRzLkV2ZW50VHlwZS5LRVlfSU5GTyxoYW5kbGVyOmZ1bmN0aW9uKGUpe3JldHVybiB0PT57WW4uU29ja2V0U2VydmljZShcIltTb2NrZXRTZXJ2aWNlOiBoYW5kbGVLZXlJbmZvKCldIG9uICdLRVlfSU5GTydcIix0KSxlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuS0VZX0lORk8sdCl9fX0se2V2ZW50OmV4cG9ydHMuRXZlbnRUeXBlLktFWVNfRVhDSEFOR0VELGhhbmRsZXI6ZnVuY3Rpb24oZSl7cmV0dXJuKCk9Pnt2YXIgdCxuLHI7WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZUtleXNFeGNoYW5nZWQoKV0gb24gJ2tleXNfZXhjaGFuZ2VkJyBrZXlzY2hhbmdlZD0ke251bGw9PT0odD1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09dD92b2lkIDA6dC5hcmVLZXlzRXhjaGFuZ2VkKCl9YCk7Y29uc3R7Y2hhbm5lbENvbmZpZzppfT1lLnJlbW90ZS5zdGF0ZTtpZihpKXtjb25zdCB0PWUuZ2V0S2V5RXhjaGFuZ2UoKS5nZXRLZXlJbmZvKCkuZWNpZXM7aS5sb2NhbEtleT10LnByaXZhdGUsaS5vdGhlcktleT10Lm90aGVyUHViS2V5LGUucmVtb3RlLnN0YXRlLmNoYW5uZWxDb25maWc9aSxudWxsPT09KG49ZS5yZW1vdGUuc3RhdGUuc3RvcmFnZU1hbmFnZXIpfHx2b2lkIDA9PT1ufHxuLnBlcnNpc3RDaGFubmVsQ29uZmlnKGkpLmNhdGNoKChlPT57fSkpfWUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5LRVlTX0VYQ0hBTkdFRCx7a2V5c0V4Y2hhbmdlZDpudWxsPT09KHI9ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PXI/dm9pZCAwOnIuYXJlS2V5c0V4Y2hhbmdlZCgpLGlzT3JpZ2luYXRvcjplLnN0YXRlLmlzT3JpZ2luYXRvcn0pO2NvbnN0IG89e2tleUluZm86ZS5nZXRLZXlJbmZvKCl9O2UuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5TRVJWSUNFX1NUQVRVUyxvKX19fV07ZnVuY3Rpb24gU3IoZSx0KXtZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogc2V0dXBDaGFubmVsTGlzdGVuZXIoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH0gc2V0dGluZyBzb2NrZXQgbGlzdGVuZXJzIGZvciBjaGFubmVsICR7dH0uLi5gKTtjb25zdHtzb2NrZXQ6bn09ZS5zdGF0ZSx7a2V5RXhjaGFuZ2U6cn09ZS5zdGF0ZTtuJiZlLnN0YXRlLmlzT3JpZ2luYXRvciYmKGUuc3RhdGUuZGVidWcmJihudWxsPT1ufHxuLmlvLm9uKFwiZXJyb3JcIiwodD0+e1luLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBzZXR1cENoYW5uZWxMaXN0ZW5lcigpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fSBzb2NrZXQgZXZlbnQ9ZXJyb3JgLHQpfSkpLG51bGw9PW58fG4uaW8ub24oXCJyZWNvbm5lY3RcIiwodD0+e1luLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBzZXR1cENoYW5uZWxMaXN0ZW5lcigpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fSBzb2NrZXQgZXZlbnQ9cmVjb25uZWN0YCx0KSxncihlKS5jYXRjaCgoZT0+e30pKX0pKSxudWxsPT1ufHxuLmlvLm9uKFwicmVjb25uZWN0X2Vycm9yXCIsKHQ9PntZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogc2V0dXBDaGFubmVsTGlzdGVuZXIoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH0gc29ja2V0IGV2ZW50PXJlY29ubmVjdF9lcnJvcmAsdCl9KSksbnVsbD09bnx8bi5pby5vbihcInJlY29ubmVjdF9mYWlsZWRcIiwoKCk9PntZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogc2V0dXBDaGFubmVsTGlzdGVuZXIoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH0gc29ja2V0IGV2ZW50PXJlY29ubmVjdF9mYWlsZWRgKX0pKSksbnVsbD09bnx8bi5vbihcImRpc2Nvbm5lY3RcIiwodD0+KFluLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBzZXR1cENoYW5uZWxMaXN0ZW5lcigpXSBvbiAnZGlzY29ubmVjdCcgLS0gTWV0YU1hc2tTREsgc29ja2V0IGRpc2Nvbm5lY3RlZCAnJHt0fScgYmVnaW4gcmVjb3ZlcnkuLi5gKSxmdW5jdGlvbihlKXtyZXR1cm4gdD0+e1luLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBoYW5kbGVEaXNjb25uZWN0KCldIG9uICdkaXNjb25uZWN0JyBtYW51YWxEaXNjb25uZWN0PSR7ZS5zdGF0ZS5tYW51YWxEaXNjb25uZWN0fWAsdCksZS5zdGF0ZS5tYW51YWxEaXNjb25uZWN0fHwoZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLlNPQ0tFVF9ESVNDT05ORUNURUQpLGdyKGUpLmNhdGNoKChlPT57fSkpKX19KGUpKHQpKSkpKSxici5mb3JFYWNoKCgoe2V2ZW50OnIsaGFuZGxlcjppfSk9PntudWxsPT1ufHxuLm9uKGAke3J9LSR7dH1gLGkoZSx0KSl9KSksd3IuZm9yRWFjaCgoKHtldmVudDp0LGhhbmRsZXI6bn0pPT57bnVsbD09cnx8ci5vbih0LG4oZSkpfSkpLGUuc3RhdGUuc2V0dXBDaGFubmVsTGlzdGVuZXJzPSEwfWNsYXNzIF9yIGV4dGVuZHMgaS5FdmVudEVtaXR0ZXIye2NvbnN0cnVjdG9yKGUpe3N1cGVyKCksdGhpcy5zdGF0ZT17Y2xpZW50c0Nvbm5lY3RlZDohMSxjbGllbnRzUGF1c2VkOiExLG1hbnVhbERpc2Nvbm5lY3Q6ITEsbGFzdFJwY0lkOnZvaWQgMCxycGNNZXRob2RUcmFja2VyOnt9LGhhc1BsYWludGV4dDohMSxjb21tdW5pY2F0aW9uU2VydmVyVXJsOlwiXCIsZm9jdXNMaXN0ZW5lckFkZGVkOiExLHJlbW92ZUZvY3VzTGlzdGVuZXI6dm9pZCAwLGlzUmVjb25uZWN0aW5nOiExLHJlY29ubmVjdGlvbkF0dGVtcHRzOjB9LHRoaXMub3B0aW9ucz1lO2NvbnN0e3JlY29ubmVjdDpuLGNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2U6cixjb21tdW5pY2F0aW9uU2VydmVyVXJsOmksY29udGV4dDpvLHJlbW90ZTpzLGxvZ2dpbmc6YX09ZTt0aGlzLnN0YXRlLnJlc3VtZWQ9bix0aGlzLnN0YXRlLmNvbnRleHQ9byx0aGlzLnN0YXRlLmlzT3JpZ2luYXRvcj1zLnN0YXRlLmlzT3JpZ2luYXRvcix0aGlzLnN0YXRlLmNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2U9cix0aGlzLnN0YXRlLmRlYnVnPSEwPT09KG51bGw9PWE/dm9pZCAwOmEuc2VydmljZUxheWVyKSx0aGlzLnJlbW90ZT1zLCEwPT09KG51bGw9PWE/dm9pZCAwOmEuc2VydmljZUxheWVyKSYmdC5lbmFibGUoXCJTb2NrZXRTZXJ2aWNlOkxheWVyXCIpLHRoaXMuc3RhdGUuY29tbXVuaWNhdGlvblNlcnZlclVybD1pLHRoaXMuc3RhdGUuaGFzUGxhaW50ZXh0PXRoaXMuc3RhdGUuY29tbXVuaWNhdGlvblNlcnZlclVybCE9PW5yJiYhMD09PShudWxsPT1hP3ZvaWQgMDphLnBsYWludGV4dCksWW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGNvbnN0cnVjdG9yKCldIFNvY2tldCBJTyB1cmw6ICR7dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uU2VydmVyVXJsfWApLHRoaXMuaW5pdFNvY2tldCgpfWluaXRTb2NrZXQoKXt2YXIgZTtjb25zdHtvdGhlclB1YmxpY0tleTp0LGVjaWVzOm4sbG9nZ2luZzpyfT10aGlzLm9wdGlvbnMsaT17YXV0b0Nvbm5lY3Q6ITEsdHJhbnNwb3J0czpycix3aXRoQ3JlZGVudGlhbHM6ITB9LG89dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uU2VydmVyVXJsO1luLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBpbml0U29ja2V0KCldIFNvY2tldCBJTyB1cmw6ICR7b31gKSx0aGlzLnN0YXRlLnNvY2tldD1zLmlvKG8saSksZnVuY3Rpb24oZSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiYoWW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IHNldHVwU29ja2V0Rm9jdXNMaXN0ZW5lcigpXSBoYXNGb2N1cz0ke2RvY3VtZW50Lmhhc0ZvY3VzKCl9YCxlKSwhZS5zdGF0ZS5mb2N1c0xpc3RlbmVyQWRkZWQpKXtjb25zdCB0PSgpPT57WW4uU29ja2V0U2VydmljZShcIkRvY3VtZW50IGhhcyBmb2N1cyAtLS0gcmVjb25uZWN0aW5nIHNvY2tldFwiKSxncihlKS5jYXRjaCgoZT0+e30pKX07d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLHQpLGUuc3RhdGUuZm9jdXNMaXN0ZW5lckFkZGVkPSEwLGUuc3RhdGUucmVtb3ZlRm9jdXNMaXN0ZW5lcj0oKT0+e3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIix0KSxlLnN0YXRlLmZvY3VzTGlzdGVuZXJBZGRlZD0hMX19fSh0aGlzKTtjb25zdCBhPXtjb21tdW5pY2F0aW9uTGF5ZXI6dGhpcyxvdGhlclB1YmxpY0tleTp0LHNlbmRQdWJsaWNLZXk6ITEsY29udGV4dDpudWxsIT09KGU9dGhpcy5zdGF0ZS5jb250ZXh0KSYmdm9pZCAwIT09ZT9lOlwiXCIsZWNpZXM6bixsb2dnaW5nOnJ9O3RoaXMuc3RhdGUua2V5RXhjaGFuZ2U9bmV3IGhyKGEpfXJlc2V0S2V5cygpe3JldHVybiBZbi5Tb2NrZXRTZXJ2aWNlKFwiW1NvY2tldFNlcnZpY2U6IHJlc2V0S2V5cygpXSBSZXNldHRpbmcga2V5cy5cIiksdm9pZChudWxsPT09KGU9dGhpcy5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PWV8fGUucmVzZXRLZXlzKCkpO3ZhciBlfWNyZWF0ZUNoYW5uZWwoKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciB0LG4scjtpZihZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogY3JlYXRlQ2hhbm5lbCgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fWApLGUuc3RhdGUuc29ja2V0fHxlLmluaXRTb2NrZXQoKSxudWxsPT09KHQ9ZS5zdGF0ZS5zb2NrZXQpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmNvbm5lY3RlZCl0aHJvdyBuZXcgRXJyb3IoXCJzb2NrZXQgYWxyZWFkeSBjb25uZWN0ZWRcIik7bnVsbD09PShuPWUuc3RhdGUuc29ja2V0KXx8dm9pZCAwPT09bnx8bi5jb25uZWN0KCksZS5zdGF0ZS5tYW51YWxEaXNjb25uZWN0PSExLGUuc3RhdGUuaXNPcmlnaW5hdG9yPSEwO2NvbnN0IGk9by52NCgpO2Uuc3RhdGUuY2hhbm5lbElkPWksU3IoZSxpKSx5aWVsZCBuZXcgUHJvbWlzZSgoKHQsbik9Pnt2YXIgcjtudWxsPT09KHI9ZS5zdGF0ZS5zb2NrZXQpfHx2b2lkIDA9PT1yfHxyLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuSk9JTl9DSEFOTkVMLHtjaGFubmVsSWQ6aSxjb250ZXh0OmAke2Uuc3RhdGUuY29udGV4dH1jcmVhdGVDaGFubmVsYCxjbGllbnRUeXBlOlwiZGFwcFwifSwoKHIsaSk9PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt0cnl7eWllbGQgZnIoZSxyLGkpLHQoKX1jYXRjaChlKXtuKGUpfX0pKSkpfSkpO2NvbnN0IHM9bnVsbD09PShyPWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmdldEtleUluZm8oKTtyZXR1cm57Y2hhbm5lbElkOmkscHViS2V5OihudWxsPT1zP3ZvaWQgMDpzLmVjaWVzLnB1YmxpYyl8fFwiXCIscHJpdktleToobnVsbD09cz92b2lkIDA6cy5lY2llcy5wcml2YXRlKXx8XCJcIn19KSl9KHRoaXMpfSkpfWNvbm5lY3RUb0NoYW5uZWwoe2NoYW5uZWxJZDplLHdpdGhLZXlFeGNoYW5nZTp0PSExLGF1dGhvcml6ZWQ6bn0pe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLGFyZ3VtZW50cyx2b2lkIDAsKGZ1bmN0aW9uKih7b3B0aW9uczplLGluc3RhbmNlOnR9KXtjb25zdHtjaGFubmVsSWQ6bixhdXRob3JpemVkOnIsd2l0aEtleUV4Y2hhbmdlOml9PWUse3N0YXRlOm8scmVtb3RlOnN9PXQse2lzT3JpZ2luYXRvcjphPSExLHNvY2tldDpjLGtleUV4Y2hhbmdlOmR9PW8se2NoYW5uZWxDb25maWc6dX09cy5zdGF0ZTtpZihudWxsPT1jP3ZvaWQgMDpjLmNvbm5lY3RlZCl0aHJvdyBuZXcgRXJyb3IoXCJzb2NrZXQgYWxyZWFkeSBjb25uZWN0ZWRcIik7aWYoYSYmKG51bGw9PXU/dm9pZCAwOnUucmVsYXlQZXJzaXN0ZW5jZSkpe2NvbnN0e2xvY2FsS2V5OmUsb3RoZXJLZXk6dH09dTtlJiZ0JiYobnVsbD09ZHx8ZC5zZXRSZWxheVBlcnNpc3RlbmNlKHtsb2NhbEtleTplLG90aGVyS2V5OnR9KSl9cmV0dXJuIE9iamVjdC5hc3NpZ24obyx7bWFudWFsRGlzY29ubmVjdDohMSx3aXRoS2V5RXhjaGFuZ2U6aSxpc09yaWdpbmF0b3I6YSxjaGFubmVsSWQ6bn0pLG51bGw9PWN8fGMuY29ubmVjdCgpLFNyKHQsbiksIWEmJnImJihudWxsPT1kfHxkLnNldEtleXNFeGNoYW5nZWQoITApLE9iamVjdC5hc3NpZ24ocy5zdGF0ZSx7cmVhZHk6ITAsYXV0aG9yaXplZDohMH0pKSxuZXcgUHJvbWlzZSgoZT0+e3ZhciBpO2NvbnN0IHM9bnVsbD09PShpPW51bGw9PWQ/dm9pZCAwOmQuZ2V0S2V5SW5mbygpKXx8dm9pZCAwPT09aT92b2lkIDA6aS5lY2llcy5wdWJsaWM7bnVsbD09Y3x8Yy5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkpPSU5fQ0hBTk5FTCx7Y2hhbm5lbElkOm4sY29udGV4dDpgJHtvLmNvbnRleHR9X2Nvbm5lY3RUb0NoYW5uZWxgLGNsaWVudFR5cGU6YT9cImRhcHBcIjpcIndhbGxldFwiLHB1YmxpY0tleTpyJiYhYT9zOnZvaWQgMH0sKChuLHIpPT5sKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7eWllbGQgZnIodCxuLHIpLGUoKX0pKSkpfSkpfSkpfSh7b3B0aW9uczp7Y2hhbm5lbElkOmUsd2l0aEtleUV4Y2hhbmdlOnQsYXV0aG9yaXplZDpufSxpbnN0YW5jZTp0aGlzfSl9Z2V0S2V5SW5mbygpe3JldHVybiB0aGlzLnN0YXRlLmtleUV4Y2hhbmdlLmdldEtleUluZm8oKX1rZXlDaGVjaygpe3ZhciBlLHQ7bnVsbD09PSh0PShlPXRoaXMpLnN0YXRlLnNvY2tldCl8fHZvaWQgMD09PXR8fHQuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5NRVNTQUdFLHtpZDplLnN0YXRlLmNoYW5uZWxJZCxjb250ZXh0OmUuc3RhdGUuY29udGV4dCxtZXNzYWdlOnt0eXBlOmRyLktFWV9IQU5EU0hBS0VfQ0hFQ0sscHVia2V5OmUuZ2V0S2V5SW5mbygpLmVjaWVzLm90aGVyUHViS2V5fX0pfWdldEtleUV4Y2hhbmdlKCl7cmV0dXJuIHRoaXMuc3RhdGUua2V5RXhjaGFuZ2V9c2VuZE1lc3NhZ2UoZSl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciBuLHIsaTtpZighZS5zdGF0ZS5jaGFubmVsSWQpdGhyb3cgWW4uU29ja2V0U2VydmljZShcImhhbmRsZVNlbmRNZXNzYWdlOiBubyBjaGFubmVsSWQgLSBDcmVhdGUgYSBjaGFubmVsIGZpcnN0XCIpLG5ldyBFcnJvcihcIkNyZWF0ZSBhIGNoYW5uZWwgZmlyc3RcIik7aWYoWW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZVNlbmRNZXNzYWdlKCldIGNvbnRleHQ9JHtlLnN0YXRlLmNvbnRleHR9IGFyZUtleXNFeGNoYW5nZWQ9JHtudWxsPT09KG49ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PW4/dm9pZCAwOm4uYXJlS2V5c0V4Y2hhbmdlZCgpfWAsdCksbnVsbD09PShyPW51bGw9PXQ/dm9pZCAwOnQudHlwZSl8fHZvaWQgMD09PXI/dm9pZCAwOnIuc3RhcnRzV2l0aChcImtleV9oYW5kc2hha2VcIikpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG47WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IGhhbmRsZUtleUhhbmRzaGFrZSgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fWAsdCksbnVsbD09PShuPWUuc3RhdGUuc29ja2V0KXx8dm9pZCAwPT09bnx8bi5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLk1FU1NBR0Use2lkOmUuc3RhdGUuY2hhbm5lbElkLGNvbnRleHQ6ZS5zdGF0ZS5jb250ZXh0LGNsaWVudFR5cGU6ZS5zdGF0ZS5pc09yaWdpbmF0b3I/XCJkYXBwXCI6XCJ3YWxsZXRcIixtZXNzYWdlOnR9KX0oZSx0KSwhMDshZnVuY3Rpb24oZSx0KXt2YXIgbjtpZighKG51bGw9PT0obj1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09bj92b2lkIDA6bi5hcmVLZXlzRXhjaGFuZ2VkKCkpJiYhZS5yZW1vdGUuc3RhdGUucmVsYXlQZXJzaXN0ZW5jZSl0aHJvdyBZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogdmFsaWRhdGVLZXlFeGNoYW5nZSgpXSBjb250ZXh0PSR7ZS5zdGF0ZS5jb250ZXh0fSBFUlJPUiBrZXlzIG5vdCBleGNoYW5nZWRgLHQpLG5ldyBFcnJvcihcIktleXMgbm90IGV4Y2hhbmdlZCBCQkJcIil9KGUsdCksZnVuY3Rpb24oZSx0KXt2YXIgbjtjb25zdCByPW51bGwhPT0obj1udWxsPT10P3ZvaWQgMDp0Lm1ldGhvZCkmJnZvaWQgMCE9PW4/bjpcIlwiLGk9bnVsbD09dD92b2lkIDA6dC5pZDtlLnN0YXRlLmlzT3JpZ2luYXRvciYmaSYmKGUuc3RhdGUucnBjTWV0aG9kVHJhY2tlcltpXT17aWQ6aSx0aW1lc3RhbXA6RGF0ZS5ub3coKSxtZXRob2Q6cn0sZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLlJQQ19VUERBVEUsZS5zdGF0ZS5ycGNNZXRob2RUcmFja2VyW2ldKSl9KGUsdCk7Y29uc3Qgbz15aWVsZCB2cihlLHQpO3JldHVybiBlLnJlbW90ZS5zdGF0ZS5hbmFseXRpY3MmJmUucmVtb3RlLnN0YXRlLmlzT3JpZ2luYXRvciYmdC5tZXRob2QmJkVyLmluY2x1ZGVzKHQubWV0aG9kLnRvTG93ZXJDYXNlKCkpJiZYbih7aWQ6bnVsbCE9PShpPWUucmVtb3RlLnN0YXRlLmNoYW5uZWxJZCkmJnZvaWQgMCE9PWk/aTpcIlwiLGV2ZW50OmxyLlNES19SUENfUkVRVUVTVCxwYXJhbXM6e21ldGhvZDp0Lm1ldGhvZCxmcm9tOlwibW9iaWxlXCJ9fSxlLnJlbW90ZS5zdGF0ZS5jb21tdW5pY2F0aW9uU2VydmVyVXJsKS5jYXRjaCgoZT0+e30pKSxmdW5jdGlvbihlLHQpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIG47Y29uc3Qgcj1udWxsPT10P3ZvaWQgMDp0LmlkLGk9bnVsbCE9PShuPW51bGw9PXQ/dm9pZCAwOnQubWV0aG9kKSYmdm9pZCAwIT09bj9uOlwiXCI7aWYoZS5zdGF0ZS5pc09yaWdpbmF0b3ImJnIpdHJ5e2NvbnN0IG49bXIocixlLnN0YXRlLnJwY01ldGhvZFRyYWNrZXIsMjAwKS50aGVuKChlPT4oe3R5cGU6eXIuUlBDX0NIRUNLLHJlc3VsdDplfSkpKSxvPSgoKT0+bCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0IHQ9eWllbGQoZT0+bCh2b2lkIDAsW2VdLHZvaWQgMCwoZnVuY3Rpb24qKHtycGNJZDplLGluc3RhbmNlOnR9KXtmb3IoO3Quc3RhdGUubGFzdFJwY0lkPT09ZXx8dm9pZCAwPT09dC5zdGF0ZS5sYXN0UnBjSWQ7KXlpZWxkIHByKDIwMCk7cmV0dXJuIHQuc3RhdGUubGFzdFJwY0lkfSkpKSh7aW5zdGFuY2U6ZSxycGNJZDpyfSksbj15aWVsZCBtcih0LGUuc3RhdGUucnBjTWV0aG9kVHJhY2tlciwyMDApO3JldHVybnt0eXBlOnlyLlNLSVBQRURfUlBDLHJlc3VsdDpufX0pKSkoKSxzPXlpZWxkIFByb21pc2UucmFjZShbbixvXSk7aWYocy50eXBlPT09eXIuUlBDX0NIRUNLKXtjb25zdCBlPXMucmVzdWx0O1luLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOmhhbmRsZVJwY1JlcGxpZXMoKV0gaWQ9JHt0LmlkfSAke2l9ICggJHtlLmVsYXBzZWRUaW1lfSBtcylgLGUucmVzdWx0KX1lbHNle2lmKHMudHlwZSE9PXlyLlNLSVBQRURfUlBDKXRocm93IG5ldyBFcnJvcihgRXJyb3IgaGFuZGxpbmcgUlBDIHJlcGxpZXMgZm9yICR7cn1gKTt7Y29uc3QgdD1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZS5zdGF0ZS5ycGNNZXRob2RUcmFja2VyW3JdKSx7ZXJyb3I6bmV3IEVycm9yKFwiU0RLX0NPTk5FQ1RJT05fSVNTVUVcIil9KTtlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuUlBDX1VQREFURSx0KTtjb25zdCBuPXtkYXRhOk9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx0KSx7anNvbnJwYzpcIjIuMFwifSksbmFtZTpcIm1ldGFtYXNrLXByb3ZpZGVyXCJ9O2UuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5NRVNTQUdFLHttZXNzYWdlOm59KX19fWNhdGNoKGUpe3Rocm93IGV9fSkpfShlLHQpLmNhdGNoKChlPT57fSkpLG99KSl9KHRoaXMsZSl9KSl9cGluZygpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciB0LG47WW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IHBpbmcoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH0gb3JpZ2luYXRvcj0ke2Uuc3RhdGUuaXNPcmlnaW5hdG9yfSBrZXlzRXhjaGFuZ2VkPSR7bnVsbD09PSh0PWUuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmFyZUtleXNFeGNoYW5nZWQoKX1gKSxudWxsPT09KG49ZS5zdGF0ZS5zb2NrZXQpfHx2b2lkIDA9PT1ufHxuLmVtaXQoZXhwb3J0cy5NZXNzYWdlVHlwZS5QSU5HLHtpZDplLnN0YXRlLmNoYW5uZWxJZCxjb250ZXh0OlwicGluZ1wiLGNsaWVudFR5cGU6ZS5yZW1vdGUuc3RhdGUuaXNPcmlnaW5hdG9yP1wiZGFwcFwiOlwid2FsbGV0XCIsbWVzc2FnZTpcIlwifSl9KSl9KHRoaXMpfXBhdXNlKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIHQsbjtZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogcGF1c2UoKV0gY29udGV4dD0ke2Uuc3RhdGUuY29udGV4dH1gKSxlLnN0YXRlLm1hbnVhbERpc2Nvbm5lY3Q9ITAsKG51bGw9PT0odD1lLnN0YXRlLmtleUV4Y2hhbmdlKXx8dm9pZCAwPT09dD92b2lkIDA6dC5hcmVLZXlzRXhjaGFuZ2VkKCkpJiYoeWllbGQgZS5zZW5kTWVzc2FnZSh7dHlwZTpleHBvcnRzLk1lc3NhZ2VUeXBlLlBBVVNFfSkpLG51bGw9PT0obj1lLnN0YXRlLnNvY2tldCl8fHZvaWQgMD09PW58fG4uZGlzY29ubmVjdCgpfSkpfSh0aGlzKX1pc0Nvbm5lY3RlZCgpe3ZhciBlO3JldHVybiBudWxsPT09KGU9dGhpcy5zdGF0ZS5zb2NrZXQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNvbm5lY3RlZH1yZXN1bWUoKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdHtzdGF0ZTp0LHJlbW90ZTpufT1lLHtzb2NrZXQ6cixjaGFubmVsSWQ6aSxjb250ZXh0Om8sa2V5RXhjaGFuZ2U6cyxpc09yaWdpbmF0b3I6YX09dCx7aXNPcmlnaW5hdG9yOmN9PW4uc3RhdGU7aWYoWW4uU29ja2V0U2VydmljZShgW1NvY2tldFNlcnZpY2U6IHJlc3VtZSgpXSBjaGFubmVsSWQ9JHtpfSBjb250ZXh0PSR7b30gY29ubmVjdGVkPSR7bnVsbD09cj92b2lkIDA6ci5jb25uZWN0ZWR9IG1hbnVhbERpc2Nvbm5lY3Q9JHt0Lm1hbnVhbERpc2Nvbm5lY3R9IHJlc3VtZWQ9JHt0LnJlc3VtZWR9IGtleXNFeGNoYW5nZWQ9JHtudWxsPT1zP3ZvaWQgMDpzLmFyZUtleXNFeGNoYW5nZWQoKX1gKSwhaSl0aHJvdyBZbi5Tb2NrZXRTZXJ2aWNlKFwiW1NvY2tldFNlcnZpY2U6IHJlc3VtZSgpXSBjaGFubmVsSWQgaXMgbm90IGRlZmluZWRcIiksbmV3IEVycm9yKFwiQ2hhbm5lbElkIGlzIG5vdCBkZWZpbmVkXCIpOyhudWxsPT1yP3ZvaWQgMDpyLmNvbm5lY3RlZCk/KFluLlNvY2tldFNlcnZpY2UoXCJbU29ja2V0U2VydmljZTogcmVzdW1lKCldIGFscmVhZHkgY29ubmVjdGVkLlwiKSxyLmVtaXQoZXhwb3J0cy5NZXNzYWdlVHlwZS5QSU5HLHtpZDppLGNsaWVudFR5cGU6Yz9cImRhcHBcIjpcIndhbGxldFwiLGNvbnRleHQ6XCJvbl9jaGFubmVsX2NvbmZpZ1wiLG1lc3NhZ2U6XCJcIn0pLG4uaGFzUmVsYXlQZXJzaXN0ZW5jZSgpfHwobnVsbD09cz92b2lkIDA6cy5hcmVLZXlzRXhjaGFuZ2VkKCkpfHwoYT95aWVsZCBlLnNlbmRNZXNzYWdlKHt0eXBlOmV4cG9ydHMuTWVzc2FnZVR5cGUuUkVBRFl9KTpudWxsPT1zfHxzLnN0YXJ0KHtpc09yaWdpbmF0b3I6ITF9KSkpOihudWxsPT1yfHxyLmNvbm5lY3QoKSxZbi5Tb2NrZXRTZXJ2aWNlKGBbU29ja2V0U2VydmljZTogcmVzdW1lKCldIGFmdGVyIGNvbm5lY3Rpbmcgc29ja2V0IC0tXFx4M2UgY29ubmVjdGVkPSR7bnVsbD09cj92b2lkIDA6ci5jb25uZWN0ZWR9YCksbnVsbD09cnx8ci5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkpPSU5fQ0hBTk5FTCx7Y2hhbm5lbElkOmksY29udGV4dDpgJHtvfV9yZXN1bWVgLGNsaWVudFR5cGU6Yz9cImRhcHBcIjpcIndhbGxldFwifSwoKHQsbik9PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt0cnl7eWllbGQgZnIoZSx0LG4pfWNhdGNoKGUpe319KSkpKSksdC5tYW51YWxEaXNjb25uZWN0PSExLHQucmVzdW1lZD0hMH0pKX0odGhpcyl9Z2V0UlBDTWV0aG9kVHJhY2tlcigpe3JldHVybiB0aGlzLnN0YXRlLnJwY01ldGhvZFRyYWNrZXJ9ZGlzY29ubmVjdChlKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxzO1luLlNvY2tldFNlcnZpY2UoYFtTb2NrZXRTZXJ2aWNlOiBkaXNjb25uZWN0KCldIGNvbnRleHQ9JHtlLnN0YXRlLmNvbnRleHR9YCx0KSwobnVsbD09dD92b2lkIDA6dC50ZXJtaW5hdGUpJiYobnVsbD09PShyPShuPWUuc3RhdGUpLnJlbW92ZUZvY3VzTGlzdGVuZXIpfHx2b2lkIDA9PT1yfHxyLmNhbGwobiksZS5zdGF0ZS5jaGFubmVsSWQ9dC5jaGFubmVsSWQsbnVsbD09PShpPWUuc3RhdGUuc29ja2V0KXx8dm9pZCAwPT09aXx8aS5yZW1vdmVBbGxMaXN0ZW5lcnMoKSxudWxsPT09KG89ZS5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PW98fG8uY2xlYW4oKSxlLnJlbW90ZS5zdGF0ZS5yZWFkeT0hMSxlLnN0YXRlLnNvY2tldD12b2lkIDAsZS5zdGF0ZS5ycGNNZXRob2RUcmFja2VyPXt9KSxlLnN0YXRlLm1hbnVhbERpc2Nvbm5lY3Q9ITAsbnVsbD09PShzPWUuc3RhdGUuc29ja2V0KXx8dm9pZCAwPT09c3x8cy5kaXNjb25uZWN0KCl9KHRoaXMsZSl9fXZhciBDcjtmdW5jdGlvbiB4cihlKXtyZXR1cm4oKT0+bCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciB0LG4scjtjb25zdHtzdGF0ZTppfT1lO2lmKGkuYXV0aG9yaXplZClyZXR1cm47eWllbGQoKCk9PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtmb3IoOyFpLndhbGxldEluZm87KXlpZWxkIHByKDUwMCl9KSkpKCk7Y29uc3Qgbz1cIjcuM1wiLmxvY2FsZUNvbXBhcmUoKG51bGw9PT0odD1pLndhbGxldEluZm8pfHx2b2lkIDA9PT10P3ZvaWQgMDp0LnZlcnNpb24pfHxcIlwiKTtpZihZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogaGFuZGxlQXV0aG9yaXplZEV2ZW50KCldIEhBQ0sgJ2F1dGhvcml6ZWQnIHZlcnNpb249JHtudWxsPT09KG49aS53YWxsZXRJbmZvKXx8dm9pZCAwPT09bj92b2lkIDA6bi52ZXJzaW9ufSBjb21wYXJlVmFsdWU9JHtvfWApLDEhPT1vKXJldHVybjtjb25zdCBzPWkucGxhdGZvcm1UeXBlPT09ZXhwb3J0cy5QbGF0Zm9ybVR5cGUuTW9iaWxlV2VifHxpLnBsYXRmb3JtVHlwZT09PWV4cG9ydHMuUGxhdGZvcm1UeXBlLlJlYWN0TmF0aXZlfHxpLnBsYXRmb3JtVHlwZT09PWV4cG9ydHMuUGxhdGZvcm1UeXBlLk1ldGFNYXNrTW9iaWxlV2VidmlldztZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogaGFuZGxlQXV0aG9yaXplZEV2ZW50KCldIEhBQ0sgJ2F1dGhvcml6ZWQnIHBsYXRmb3JtPSR7aS5wbGF0Zm9ybVR5cGV9IHNlY3VyZT0ke3N9IGNoYW5uZWw9JHtpLmNoYW5uZWxJZH0gd2FsbGV0VmVyc2lvbj0ke251bGw9PT0ocj1pLndhbGxldEluZm8pfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnZlcnNpb259YCkscyYmKGkuYXV0aG9yaXplZD0hMCxlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuQVVUSE9SSVpFRCkpfSkpfWZ1bmN0aW9uIGtyKGUpe3JldHVybiB0PT57Y29uc3R7c3RhdGU6bn09ZTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogaGFuZGxlQ2hhbm5lbENyZWF0ZWRFdmVudCgpXSBjb250ZXh0PSR7bi5jb250ZXh0fSBvbiAnY2hhbm5lbF9jcmVhdGVkJyBjaGFubmVsSWQ9JHt0fWApLGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5DSEFOTkVMX0NSRUFURUQsdCl9fWZ1bmN0aW9uIE1yKGUsdCl7cmV0dXJuKCk9Pnt2YXIgbixyLGksbztjb25zdHtzdGF0ZTpzfT1lO1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBoYW5kbGVDbGllbnRzQ29ubmVjdGVkRXZlbnQoKV0gb24gJ2NsaWVudHNfY29ubmVjdGVkJyBjaGFubmVsPSR7cy5jaGFubmVsSWR9IGtleXNFeGNoYW5nZWQ9JHtudWxsPT09KHI9bnVsbD09PShuPXMuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09bj92b2lkIDA6bi5nZXRLZXlJbmZvKCkpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmtleXNFeGNoYW5nZWR9YCkscy5hbmFseXRpY3MmJlhuKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7aWQ6bnVsbCE9PShpPXMuY2hhbm5lbElkKSYmdm9pZCAwIT09aT9pOlwiXCIsZXZlbnQ6cy5yZWNvbm5lY3Rpb24/bHIuUkVDT05ORUNUOnMuaXNPcmlnaW5hdG9yP2xyLlJFUVVFU1Q6bHIuUkVRVUVTVF9NT0JJTEV9LHMub3JpZ2luYXRvckluZm8pLHtjb21tTGF5ZXI6dCxzZGtWZXJzaW9uOnMuc2RrVmVyc2lvbix3YWxsZXRWZXJzaW9uOm51bGw9PT0obz1zLndhbGxldEluZm8pfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnZlcnNpb24sY29tbUxheWVyVmVyc2lvbjp0ci52ZXJzaW9ufSkscy5jb21tdW5pY2F0aW9uU2VydmVyVXJsKS5jYXRjaCgoZT0+e30pKSxzLmNsaWVudHNDb25uZWN0ZWQ9ITAscy5vcmlnaW5hdG9ySW5mb1NlbnQ9ITEsZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkNMSUVOVFNfQ09OTkVDVEVEKX19ZnVuY3Rpb24gQXIoZSl7cmV0dXJuIHQ9Pntjb25zdHtzdGF0ZTpufT1lO1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBoYW5kbGVDbGllbnRzRGlzY29ubmVjdGVkRXZlbnQoKV0gY29udGV4dD0ke24uY29udGV4dH0gb24gJ2NsaWVudHNfZGlzY29ubmVjdGVkJyBjaGFubmVsSWQ9JHt0fWApLG4ucmVsYXlQZXJzaXN0ZW5jZXx8KG4uY2xpZW50c0Nvbm5lY3RlZD0hMSxuLnJlYWR5PSExLG4uYXV0aG9yaXplZD0hMSksZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkNMSUVOVFNfRElTQ09OTkVDVEVELG4uY2hhbm5lbElkKSxlLnNldENvbm5lY3Rpb25TdGF0dXMoZXhwb3J0cy5Db25uZWN0aW9uU3RhdHVzLkRJU0NPTk5FQ1RFRCl9fWZ1bmN0aW9uIFRyKGUpe3JldHVybiB0PT57dmFyIG47Y29uc3R7c3RhdGU6cn09ZTtpZihZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogaGFuZGxlQ2xpZW50c1dhaXRpbmdFdmVudCgpXSBjb250ZXh0PSR7ci5jb250ZXh0fSBvbiAnY2xpZW50c193YWl0aW5nJyBudW1iZXJVc2Vycz0ke3R9IHJlYWR5PSR7ci5yZWFkeX0gYXV0b1N0YXJ0ZWQ9JHtyLm9yaWdpbmF0b3JDb25uZWN0U3RhcnRlZH1gKSxlLnNldENvbm5lY3Rpb25TdGF0dXMoZXhwb3J0cy5Db25uZWN0aW9uU3RhdHVzLldBSVRJTkcpLGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5DTElFTlRTX1dBSVRJTkcsdCksci5vcmlnaW5hdG9yQ29ubmVjdFN0YXJ0ZWQpe1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBoYW5kbGVDbGllbnRzV2FpdGluZ0V2ZW50KCldIG9uICdjbGllbnRzX3dhaXRpbmcnIHdhdGNoIGF1dG9TdGFydGVkPSR7ci5vcmlnaW5hdG9yQ29ubmVjdFN0YXJ0ZWR9IHRpbWVvdXRgLHIuYXV0b0Nvbm5lY3RPcHRpb25zKTtjb25zdCB0PShudWxsPT09KG49ci5hdXRvQ29ubmVjdE9wdGlvbnMpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnRpbWVvdXQpfHwzZTMsaT1zZXRUaW1lb3V0KCgoKT0+e1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBoYW5kbGVDbGllbnRzV2FpdGluZ0V2ZW50KCldIHNldFRpbWVvdXQoJHt0fSkgdGVybWluYXRlIGNoYW5uZWxDb25maWdgLHIuYXV0b0Nvbm5lY3RPcHRpb25zKSxyLm9yaWdpbmF0b3JDb25uZWN0U3RhcnRlZD0hMSxyLnJlYWR5fHxlLnNldENvbm5lY3Rpb25TdGF0dXMoZXhwb3J0cy5Db25uZWN0aW9uU3RhdHVzLlRJTUVPVVQpLGNsZWFyVGltZW91dChpKX0pLHQpfX19ZnVuY3Rpb24gSXIoZSx0KXtyZXR1cm4gbj0+e3ZhciByLGksbyxzLGEsYyxkLGw7Y29uc3R7c3RhdGU6dX09ZTtpZihZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogaGFuZGxlS2V5c0V4Y2hhbmdlZEV2ZW50KCldIGNvbnRleHQ9JHt1LmNvbnRleHR9IG9uIGNvbW1MYXllci4na2V5c19leGNoYW5nZWQnIGNoYW5uZWw9JHt1LmNoYW5uZWxJZH1gLG4pLG51bGw9PT0oaT1udWxsPT09KHI9dS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmdldEtleUluZm8oKSl8fHZvaWQgMD09PWk/dm9pZCAwOmkua2V5c0V4Y2hhbmdlZCl7Y29uc3QgdD1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdS5jaGFubmVsQ29uZmlnKSx7Y2hhbm5lbElkOm51bGwhPT0obz11LmNoYW5uZWxJZCkmJnZvaWQgMCE9PW8/bzpcIlwiLHZhbGlkVW50aWw6KG51bGw9PT0ocz11LmNoYW5uZWxDb25maWcpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLnZhbGlkVW50aWwpfHxpcixsb2NhbEtleTp1LmNvbW11bmljYXRpb25MYXllci5nZXRLZXlJbmZvKCkuZWNpZXMucHJpdmF0ZSxvdGhlcktleTp1LmNvbW11bmljYXRpb25MYXllci5nZXRLZXlJbmZvKCkuZWNpZXMub3RoZXJQdWJLZXl9KTtudWxsPT09KGE9dS5zdG9yYWdlTWFuYWdlcil8fHZvaWQgMD09PWF8fGEucGVyc2lzdENoYW5uZWxDb25maWcodCkuY2F0Y2goKGU9Pnt9KSksZS5zZXRDb25uZWN0aW9uU3RhdHVzKGV4cG9ydHMuQ29ubmVjdGlvblN0YXR1cy5MSU5LRUQpfSFmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLHMsYSxjLGQ7Y29uc3R7c3RhdGU6bH09ZTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogc2V0TGFzdEFjdGl2ZURhdGUoKV0gY2hhbm5lbD0ke2wuY2hhbm5lbElkfWAsdCk7Y29uc3QgdT1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbC5jaGFubmVsQ29uZmlnKSx7Y2hhbm5lbElkOm51bGwhPT0obj1sLmNoYW5uZWxJZCkmJnZvaWQgMCE9PW4/bjpcIlwiLHZhbGlkVW50aWw6bnVsbCE9PShpPW51bGw9PT0ocj1sLmNoYW5uZWxDb25maWcpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnZhbGlkVW50aWwpJiZ2b2lkIDAhPT1pP2k6MCxyZWxheVBlcnNpc3RlbmNlOmwucmVsYXlQZXJzaXN0ZW5jZSxsb2NhbEtleTpudWxsPT09KHM9bnVsbD09PShvPWwuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09bz92b2lkIDA6by5zdGF0ZS5rZXlFeGNoYW5nZSl8fHZvaWQgMD09PXM/dm9pZCAwOnMuZ2V0S2V5SW5mbygpLmVjaWVzLnByaXZhdGUsb3RoZXJLZXk6bnVsbD09PShjPW51bGw9PT0oYT1sLmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PWE/dm9pZCAwOmEuc3RhdGUua2V5RXhjaGFuZ2UpfHx2b2lkIDA9PT1jP3ZvaWQgMDpjLmdldEtleUluZm8oKS5lY2llcy5vdGhlclB1YktleSxsYXN0QWN0aXZlOnQuZ2V0VGltZSgpfSk7bnVsbD09PShkPWwuc3RvcmFnZU1hbmFnZXIpfHx2b2lkIDA9PT1kfHxkLnBlcnNpc3RDaGFubmVsQ29uZmlnKHUpfShlLG5ldyBEYXRlKSx1LmFuYWx5dGljcyYmdS5jaGFubmVsSWQmJlhuKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7aWQ6dS5jaGFubmVsSWQsZXZlbnQ6bi5pc09yaWdpbmF0b3I/bHIuQ09OTkVDVEVEOmxyLkNPTk5FQ1RFRF9NT0JJTEV9LHUub3JpZ2luYXRvckluZm8pLHtzZGtWZXJzaW9uOnUuc2RrVmVyc2lvbixjb21tTGF5ZXI6dCxjb21tTGF5ZXJWZXJzaW9uOnRyLnZlcnNpb24sd2FsbGV0VmVyc2lvbjpudWxsPT09KGM9dS53YWxsZXRJbmZvKXx8dm9pZCAwPT09Yz92b2lkIDA6Yy52ZXJzaW9ufSksdS5jb21tdW5pY2F0aW9uU2VydmVyVXJsKS5jYXRjaCgoZT0+e30pKSx1LmlzT3JpZ2luYXRvcj1uLmlzT3JpZ2luYXRvcixuLmlzT3JpZ2luYXRvcnx8KG51bGw9PT0oZD11LmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PWR8fGQuc2VuZE1lc3NhZ2Uoe3R5cGU6ZXhwb3J0cy5NZXNzYWdlVHlwZS5SRUFEWX0pLHUucmVhZHk9ITAsdS5wYXVzZWQ9ITEpLG4uaXNPcmlnaW5hdG9yJiYhdS5vcmlnaW5hdG9ySW5mb1NlbnQmJihudWxsPT09KGw9dS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1sfHxsLnNlbmRNZXNzYWdlKHt0eXBlOmV4cG9ydHMuTWVzc2FnZVR5cGUuT1JJR0lOQVRPUl9JTkZPLG9yaWdpbmF0b3JJbmZvOnUub3JpZ2luYXRvckluZm8sb3JpZ2luYXRvcjp1Lm9yaWdpbmF0b3JJbmZvfSksdS5vcmlnaW5hdG9ySW5mb1NlbnQ9ITApfX1mdW5jdGlvbiBQcihlKXtyZXR1cm4gdD0+e2xldCBuPXQ7dC5tZXNzYWdlJiYobj1uLm1lc3NhZ2UpLGZ1bmN0aW9uKGUsdCl7Y29uc3R7c3RhdGU6bn09dDtpZihZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogb25Db21tdW5pY2F0aW9uTGF5ZXJNZXNzYWdlKCldIGNvbnRleHQ9JHtuLmNvbnRleHR9IG9uICdtZXNzYWdlJyB0eXBlb2Y9JHt0eXBlb2YgZX1gLGUpLHQuc3RhdGUucmVhZHk9ITAsbi5pc09yaWdpbmF0b3J8fGUudHlwZSE9PWV4cG9ydHMuTWVzc2FnZVR5cGUuT1JJR0lOQVRPUl9JTkZPKWlmKG4uaXNPcmlnaW5hdG9yJiZlLnR5cGU9PT1leHBvcnRzLk1lc3NhZ2VUeXBlLldBTExFVF9JTkZPKSFmdW5jdGlvbihlLHQpe2NvbnN0e3N0YXRlOm59PWU7bi53YWxsZXRJbmZvPXQud2FsbGV0SW5mbyxuLnBhdXNlZD0hMX0odCxlKTtlbHNle2lmKG4uaXNPcmlnaW5hdG9yJiZlLnR5cGU9PT1leHBvcnRzLk1lc3NhZ2VUeXBlLldBTExFVF9JTklUKShmdW5jdGlvbihlLHQpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIG4scixpO2NvbnN0e3N0YXRlOm99PWU7aWYoby5pc09yaWdpbmF0b3Ipe2NvbnN0IG89dC5kYXRhfHx7fTtpZihcIm9iamVjdFwiPT10eXBlb2YgbyYmXCJhY2NvdW50c1wiaW4gbyYmXCJjaGFpbklkXCJpbiBvJiZcIndhbGxldEtleVwiaW4gbyl0cnl7Y29uc3R7Y2hhbm5lbENvbmZpZzp0fT1lLnN0YXRlO2lmKFluLlJlbW90ZUNvbW11bmljYXRpb24oXCJXQUxMRVRfSU5JVDogY2hhbm5lbENvbmZpZ1wiLEpTT04uc3RyaW5naWZ5KHQsbnVsbCwyKSksdCl7Y29uc3Qgcz1vLmFjY291bnRzLGE9by5jaGFpbklkLGM9by53YWxsZXRLZXk7bGV0IGQsbD0hMTtcImRlZXBsaW5rUHJvdG9jb2xcImluIG8mJihsPUJvb2xlYW4oby5kZWVwbGlua1Byb3RvY29sKSxlLnN0YXRlLmRlZXBsaW5rUHJvdG9jb2xBdmFpbGFibGU9bCksXCJ3YWxsZXRWZXJzaW9uXCJpbiBvJiYoZD1vLndhbGxldFZlcnNpb24pLHlpZWxkIG51bGw9PT0obj1lLnN0YXRlLnN0b3JhZ2VNYW5hZ2VyKXx8dm9pZCAwPT09bj92b2lkIDA6bi5wZXJzaXN0Q2hhbm5lbENvbmZpZyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdCkse290aGVyS2V5OmMsd2FsbGV0VmVyc2lvbjpkLGRlZXBsaW5rUHJvdG9jb2xBdmFpbGFibGU6bCxyZWxheVBlcnNpc3RlbmNlOiEwfSkpLHlpZWxkIG51bGw9PT0ocj1lLnN0YXRlLnN0b3JhZ2VNYW5hZ2VyKXx8dm9pZCAwPT09cj92b2lkIDA6ci5wZXJzaXN0QWNjb3VudHMocykseWllbGQgbnVsbD09PShpPWUuc3RhdGUuc3RvcmFnZU1hbmFnZXIpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLnBlcnNpc3RDaGFpbklkKGEpfWUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5XQUxMRVRfSU5JVCx7YWNjb3VudHM6by5hY2NvdW50cyxjaGFpbklkOm8uY2hhaW5JZH0pfWNhdGNoKG4pe319fSkpfSkodCxlKS5jYXRjaCgoZT0+e1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBvbkNvbW11bmljYXRpb25MYXllck1lc3NhZ2UoKV0gZXJyb3I9JHtlfWApfSkpO2Vsc2UgaWYoZS50eXBlPT09ZXhwb3J0cy5NZXNzYWdlVHlwZS5URVJNSU5BVEUpKGZ1bmN0aW9uKGUpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3R7c3RhdGU6dH09ZTt0LmlzT3JpZ2luYXRvciYmKHlpZWxkIExyKHtvcHRpb25zOnt0ZXJtaW5hdGU6ITAsc2VuZE1lc3NhZ2U6ITF9LGluc3RhbmNlOmV9KSxlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuVEVSTUlOQVRFKSl9KSl9KSh0KS5jYXRjaCgoZT0+e1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBvbkNvbW11bmljYXRpb25MYXllck1lc3NhZ2UoKV0gZXJyb3I9JHtlfWApfSkpO2Vsc2UgaWYoZS50eXBlPT09ZXhwb3J0cy5NZXNzYWdlVHlwZS5QQVVTRSkhZnVuY3Rpb24oZSl7Y29uc3R7c3RhdGU6dH09ZTt0LnBhdXNlZD0hMCxlLnNldENvbm5lY3Rpb25TdGF0dXMoZXhwb3J0cy5Db25uZWN0aW9uU3RhdHVzLlBBVVNFRCl9KHQpO2Vsc2UgaWYoZS50eXBlPT09ZXhwb3J0cy5NZXNzYWdlVHlwZS5SRUFEWSYmbi5pc09yaWdpbmF0b3IpIWZ1bmN0aW9uKGUpe2NvbnN0e3N0YXRlOnR9PWU7ZS5zZXRDb25uZWN0aW9uU3RhdHVzKGV4cG9ydHMuQ29ubmVjdGlvblN0YXR1cy5MSU5LRUQpO2NvbnN0IG49dC5wYXVzZWQ7dC5wYXVzZWQ9ITEsZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkNMSUVOVFNfUkVBRFkse2lzT3JpZ2luYXRvcjp0LmlzT3JpZ2luYXRvcix3YWxsZXRJbmZvOnQud2FsbGV0SW5mb30pLG4mJih0LmF1dGhvcml6ZWQ9ITAsZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkFVVEhPUklaRUQpKX0odCk7ZWxzZXtpZihlLnR5cGU9PT1leHBvcnRzLk1lc3NhZ2VUeXBlLk9UUCYmbi5pc09yaWdpbmF0b3IpcmV0dXJuIHZvaWQgZnVuY3Rpb24oZSx0KXt2YXIgbjtjb25zdHtzdGF0ZTpyfT1lO2UuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5PVFAsdC5vdHBBbnN3ZXIpLDE9PT1cIjYuNlwiLmxvY2FsZUNvbXBhcmUoKG51bGw9PT0obj1yLndhbGxldEluZm8pfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnZlcnNpb24pfHxcIlwiKSYmZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLlNES19SUENfQ0FMTCx7bWV0aG9kOnNyLkVUSF9SRVFVRVNUQUNDT1VOVFMscGFyYW1zOltdfSl9KHQsZSk7ZS50eXBlPT09ZXhwb3J0cy5NZXNzYWdlVHlwZS5BVVRIT1JJWkVEJiZuLmlzT3JpZ2luYXRvciYmZnVuY3Rpb24oZSl7Y29uc3R7c3RhdGU6dH09ZTt0LmF1dGhvcml6ZWQ9ITAsZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkFVVEhPUklaRUQpfSh0KX10LmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuTUVTU0FHRSxlKX1lbHNlIWZ1bmN0aW9uKGUsdCl7dmFyIG47Y29uc3R7c3RhdGU6cn09ZTtudWxsPT09KG49ci5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1ufHxuLnNlbmRNZXNzYWdlKHt0eXBlOmV4cG9ydHMuTWVzc2FnZVR5cGUuV0FMTEVUX0lORk8sd2FsbGV0SW5mbzpyLndhbGxldEluZm99KSxyLm9yaWdpbmF0b3JJbmZvPXQub3JpZ2luYXRvckluZm98fHQub3JpZ2luYXRvcixlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuQ0xJRU5UU19SRUFEWSx7aXNPcmlnaW5hdG9yOnIuaXNPcmlnaW5hdG9yLG9yaWdpbmF0b3JJbmZvOnIub3JpZ2luYXRvckluZm99KSxyLnBhdXNlZD0hMX0odCxlKX0obixlKX19ZnVuY3Rpb24gUnIoZSl7cmV0dXJuKCk9Pntjb25zdHtzdGF0ZTp0fT1lO1luLlJlbW90ZUNvbW11bmljYXRpb24oXCJbUmVtb3RlQ29tbXVuaWNhdGlvbjogaGFuZGxlU29ja2V0UmVjb25uZWN0RXZlbnQoKV0gb24gJ3NvY2tldF9yZWNvbm5lY3QnIC0tIHJlc2V0IGtleSBleGNoYW5nZSBzdGF0dXMgLyBzZXQgcmVhZHkgdG8gZmFsc2VcIiksdC5yZWFkeT0hMSx0LmF1dGhvcml6ZWQ9ITEsYXIodCksZS5lbWl0U2VydmljZVN0YXR1c0V2ZW50KHtjb250ZXh0Olwic29ja2V0X3JlY29ubmVjdFwifSl9fWZ1bmN0aW9uIE9yKGUpe3JldHVybigpPT57Y29uc3R7c3RhdGU6dH09ZTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKFwiW1JlbW90ZUNvbW11bmljYXRpb246IGhhbmRsZVNvY2tldERpc2Nvbm5lY3RlZEV2ZW50KCldIG9uICdzb2NrZXRfRGlzY29ubmVjdGVkJyBzZXQgcmVhZHkgdG8gZmFsc2VcIiksdC5yZWFkeT0hMX19ZnVuY3Rpb24gTnIoZSl7cmV0dXJuKCk9PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt2YXIgdCxuLHIsaSxvLHMsYTtjb25zdHtzdGF0ZTpjfT1lO1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBoYW5kbGVGdWxsUGVyc2lzdGVuY2VFdmVudCgpXSBjb250ZXh0PSR7Yy5jb250ZXh0fWApLGUuc3RhdGUucmVhZHk9ITAsZS5zdGF0ZS5jbGllbnRzQ29ubmVjdGVkPSEwLGUuc3RhdGUuYXV0aG9yaXplZD0hMCxlLnN0YXRlLnJlbGF5UGVyc2lzdGVuY2U9ITAsbnVsbD09PSh0PWUuc3RhdGUuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09dHx8dC5nZXRLZXlFeGNoYW5nZSgpLnNldEtleXNFeGNoYW5nZWQoITApLGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5LRVlTX0VYQ0hBTkdFRCx7a2V5c0V4Y2hhbmdlZDohMCxpc09yaWdpbmF0b3I6ITB9KSxlLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuQVVUSE9SSVpFRCksZS5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLkNMSUVOVFNfUkVBRFkpLGUuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5DSEFOTkVMX1BFUlNJU1RFTkNFKTt0cnl7Yy5jaGFubmVsQ29uZmlnPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxjLmNoYW5uZWxDb25maWcpLHtsb2NhbEtleTpudWxsPT09KG49Yy5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLmdldEtleUV4Y2hhbmdlKCkuZ2V0S2V5SW5mbygpLmVjaWVzLnByaXZhdGUsb3RoZXJLZXk6bnVsbD09PShyPWMuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09cj92b2lkIDA6ci5nZXRLZXlFeGNoYW5nZSgpLmdldE90aGVyUHVibGljS2V5KCksY2hhbm5lbElkOm51bGwhPT0oaT1jLmNoYW5uZWxJZCkmJnZvaWQgMCE9PWk/aTpcIlwiLHZhbGlkVW50aWw6bnVsbCE9PShzPW51bGw9PT0obz1jLmNoYW5uZWxDb25maWcpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnZhbGlkVW50aWwpJiZ2b2lkIDAhPT1zP3M6aXIscmVsYXlQZXJzaXN0ZW5jZTohMH0pLHlpZWxkIG51bGw9PT0oYT1jLnN0b3JhZ2VNYW5hZ2VyKXx8dm9pZCAwPT09YT92b2lkIDA6YS5wZXJzaXN0Q2hhbm5lbENvbmZpZyhjLmNoYW5uZWxDb25maWcpfWNhdGNoKHQpe319KSl9ZnVuY3Rpb24gRHIoe2NvbW11bmljYXRpb25MYXllclByZWZlcmVuY2U6ZSxvdGhlclB1YmxpY0tleTp0LHJlY29ubmVjdDpuLGVjaWVzOnIsY29tbXVuaWNhdGlvblNlcnZlclVybDppPW5yLGluc3RhbmNlOm99KXt2YXIgcyxhLGMsZCxsLHUsaCxmLHAsbSxnO2NvbnN0e3N0YXRlOnZ9PW87aWYoWW4uUmVtb3RlQ29tbXVuaWNhdGlvbihcIltpbml0Q29tbXVuaWNhdGlvbkxheWVyKCldIFwiLEpTT04uc3RyaW5naWZ5KHYsbnVsbCwyKSksZSE9PWV4cG9ydHMuQ29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZS5TT0NLRVQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb21tdW5pY2F0aW9uIHByb3RvY29sXCIpO3YuY29tbXVuaWNhdGlvbkxheWVyPW5ldyBfcih7Y29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZTplLG90aGVyUHVibGljS2V5OnQscmVjb25uZWN0Om4sdHJhbnNwb3J0czp2LnRyYW5zcG9ydHMsY29tbXVuaWNhdGlvblNlcnZlclVybDppLGNvbnRleHQ6di5jb250ZXh0LGVjaWVzOnIsbG9nZ2luZzp2LmxvZ2dpbmcscmVtb3RlOm99KTtsZXQgeT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmRvY3VtZW50LlVSTHx8XCJcIixFPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCYmZG9jdW1lbnQudGl0bGV8fFwiXCI7KG51bGw9PT0ocz12LmRhcHBNZXRhZGF0YSl8fHZvaWQgMD09PXM/dm9pZCAwOnMudXJsKSYmKHk9di5kYXBwTWV0YWRhdGEudXJsKSwobnVsbD09PShhPXYuZGFwcE1ldGFkYXRhKXx8dm9pZCAwPT09YT92b2lkIDA6YS5uYW1lKSYmKEU9di5kYXBwTWV0YWRhdGEubmFtZSk7Y29uc3QgYj1udWxsIT09KHU9bnVsbCE9PShkPW51bGw9PT0oYz12LmRhcHBNZXRhZGF0YSl8fHZvaWQgMD09PWM/dm9pZCAwOmMubmFtZSkmJnZvaWQgMCE9PWQ/ZDpudWxsPT09KGw9di5kYXBwTWV0YWRhdGEpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLnVybCkmJnZvaWQgMCE9PXU/dTpcIk4vQVwiLHc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmdm9pZCAwIT09d2luZG93LmxvY2F0aW9uJiZudWxsIT09KGg9d2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKSYmdm9pZCAwIT09aD9oOmIsUz17dXJsOnksdGl0bGU6RSxzb3VyY2U6bnVsbD09PShmPXYuZGFwcE1ldGFkYXRhKXx8dm9pZCAwPT09Zj92b2lkIDA6Zi5zb3VyY2UsZGFwcElkOncsaWNvbjoobnVsbD09PShwPXYuZGFwcE1ldGFkYXRhKXx8dm9pZCAwPT09cD92b2lkIDA6cC5pY29uVXJsKXx8KG51bGw9PT0obT12LmRhcHBNZXRhZGF0YSl8fHZvaWQgMD09PW0/dm9pZCAwOm0uYmFzZTY0SWNvbikscGxhdGZvcm06di5wbGF0Zm9ybVR5cGUsYXBpVmVyc2lvbjp0ci52ZXJzaW9uLGNvbm5lY3RvcjpudWxsPT09KGc9di5kYXBwTWV0YWRhdGEpfHx2b2lkIDA9PT1nP3ZvaWQgMDpnLmNvbm5lY3Rvcn07di5vcmlnaW5hdG9ySW5mbz1TO2NvbnN0IF89e1tleHBvcnRzLkV2ZW50VHlwZS5BVVRIT1JJWkVEXTp4cihvKSxbZXhwb3J0cy5FdmVudFR5cGUuTUVTU0FHRV06UHIobyksW2V4cG9ydHMuRXZlbnRUeXBlLkNIQU5ORUxfUEVSU0lTVEVOQ0VdOk5yKG8pLFtleHBvcnRzLkV2ZW50VHlwZS5DTElFTlRTX0NPTk5FQ1RFRF06TXIobyxlKSxbZXhwb3J0cy5FdmVudFR5cGUuS0VZU19FWENIQU5HRURdOklyKG8sZSksW2V4cG9ydHMuRXZlbnRUeXBlLlNPQ0tFVF9ESVNDT05ORUNURURdOk9yKG8pLFtleHBvcnRzLkV2ZW50VHlwZS5TT0NLRVRfUkVDT05ORUNUXTpScihvKSxbZXhwb3J0cy5FdmVudFR5cGUuQ0xJRU5UU19ESVNDT05ORUNURURdOkFyKG8pLFtleHBvcnRzLkV2ZW50VHlwZS5LRVlfSU5GT106KCk9Pnt9LFtleHBvcnRzLkV2ZW50VHlwZS5DSEFOTkVMX0NSRUFURURdOmtyKG8pLFtleHBvcnRzLkV2ZW50VHlwZS5DTElFTlRTX1dBSVRJTkddOlRyKG8pLFtleHBvcnRzLkV2ZW50VHlwZS5SUENfVVBEQVRFXTplPT57by5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLlJQQ19VUERBVEUsZSl9fTtmb3IoY29uc3RbdCxuXW9mIE9iamVjdC5lbnRyaWVzKF8pKXRyeXt2LmNvbW11bmljYXRpb25MYXllci5vbih0LG4pfWNhdGNoKGUpe319ZnVuY3Rpb24gTHIoZSl7cmV0dXJuIGwodGhpcyxhcmd1bWVudHMsdm9pZCAwLChmdW5jdGlvbiooe29wdGlvbnM6ZSxpbnN0YW5jZTp0fSl7Y29uc3R7c3RhdGU6bn09dDtyZXR1cm4gWW4uUmVtb3RlQ29tbXVuaWNhdGlvbihgW1JlbW90ZUNvbW11bmljYXRpb246IGRpc2Nvbm5lY3QoKV0gY2hhbm5lbD0ke24uY2hhbm5lbElkfWAsZSksbmV3IFByb21pc2UoKChyLGkpPT57dmFyIHMsYSxjLGQsbCx1OyhudWxsPT1lP3ZvaWQgMDplLnRlcm1pbmF0ZSk/KHQuc3RhdGUucmVhZHkmJlhuKHtpZDpudWxsIT09KHM9dC5zdGF0ZS5jaGFubmVsSWQpJiZ2b2lkIDAhPT1zP3M6XCJcIixldmVudDpsci5URVJNSU5BVEVEfSx0LnN0YXRlLmNvbW11bmljYXRpb25TZXJ2ZXJVcmwpLmNhdGNoKChlPT57fSkpLG4ucmVhZHk9ITEsbi5wYXVzZWQ9ITEsbnVsbD09PShhPW4uc3RvcmFnZU1hbmFnZXIpfHx2b2lkIDA9PT1hfHxhLnRlcm1pbmF0ZShudWxsIT09KGM9bi5jaGFubmVsSWQpJiZ2b2lkIDAhPT1jP2M6XCJcIiksdC5zdGF0ZS50ZXJtaW5hdGVkPSEwLGUuc2VuZE1lc3NhZ2U/KG51bGw9PT0oZD1uLmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PWQ/dm9pZCAwOmQuZ2V0S2V5SW5mbygpLmtleXNFeGNoYW5nZWQpJiZ0LnN0YXRlLmNvbW11bmljYXRpb25MYXllciYmdnIodC5zdGF0ZS5jb21tdW5pY2F0aW9uTGF5ZXIse3R5cGU6ZXhwb3J0cy5NZXNzYWdlVHlwZS5URVJNSU5BVEV9KS50aGVuKCgoKT0+e3IoITApfSkpLmNhdGNoKChlPT57aShlKX0pKTpyKCEwKSxuLmF1dGhvcml6ZWQ9ITEsbi5yZWxheVBlcnNpc3RlbmNlPSExLG4uY2hhbm5lbElkPW8udjQoKSxlLmNoYW5uZWxJZD1uLmNoYW5uZWxJZCxuLmNoYW5uZWxDb25maWc9dm9pZCAwLG4ub3JpZ2luYXRvckNvbm5lY3RTdGFydGVkPSExLG51bGw9PT0obD1uLmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PWx8fGwuZGlzY29ubmVjdChlKSx0LnNldENvbm5lY3Rpb25TdGF0dXMoZXhwb3J0cy5Db25uZWN0aW9uU3RhdHVzLlRFUk1JTkFURUQpKToobnVsbD09PSh1PW4uY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09dXx8dS5kaXNjb25uZWN0KGUpLHQuc2V0Q29ubmVjdGlvblN0YXR1cyhleHBvcnRzLkNvbm5lY3Rpb25TdGF0dXMuRElTQ09OTkVDVEVEKSxyKCEwKSl9KSl9KSl9ZXhwb3J0cy5Db21tdW5pY2F0aW9uTGF5ZXJQcmVmZXJlbmNlPXZvaWQgMCxleHBvcnRzLlBsYXRmb3JtVHlwZT12b2lkIDAsKGV4cG9ydHMuQ29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZXx8KGV4cG9ydHMuQ29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZT17fSkpLlNPQ0tFVD1cInNvY2tldFwiLGZ1bmN0aW9uKGUpe2UuTm9uQnJvd3Nlcj1cIm5vZGVqc1wiLGUuTWV0YU1hc2tNb2JpbGVXZWJ2aWV3PVwiaW4tYXBwLWJyb3dzZXJcIixlLkRlc2t0b3BXZWI9XCJ3ZWItZGVza3RvcFwiLGUuTW9iaWxlV2ViPVwid2ViLW1vYmlsZVwiLGUuUmVhY3ROYXRpdmU9XCJyZWFjdC1uYXRpdmVcIn0oZXhwb3J0cy5QbGF0Zm9ybVR5cGV8fChleHBvcnRzLlBsYXRmb3JtVHlwZT17fSkpO2NsYXNzIEJyIGV4dGVuZHMgaS5FdmVudEVtaXR0ZXIye2NvbnN0cnVjdG9yKGUpe3N1cGVyKCksdGhpcy5zdGF0ZT17cmVhZHk6ITEsYXV0aG9yaXplZDohMSxpc09yaWdpbmF0b3I6ITEsdGVybWluYXRlZDohMSxwcm90b2NvbFZlcnNpb246MSxwYXVzZWQ6ITEsZGVlcGxpbmtQcm90b2NvbEF2YWlsYWJsZTohMSxwbGF0Zm9ybVR5cGU6XCJtZXRhbWFzay1tb2JpbGVcIixhbmFseXRpY3M6ITEscmVjb25uZWN0aW9uOiExLG9yaWdpbmF0b3JJbmZvU2VudDohMSxjb21tdW5pY2F0aW9uU2VydmVyVXJsOm5yLGNvbnRleHQ6XCJcIixwZXJzaXN0OiExLGNsaWVudHNDb25uZWN0ZWQ6ITEsc2Vzc2lvbkR1cmF0aW9uOmlyLG9yaWdpbmF0b3JDb25uZWN0U3RhcnRlZDohMSxkZWJ1ZzohMSxfY29ubmVjdGlvblN0YXR1czpleHBvcnRzLkNvbm5lY3Rpb25TdGF0dXMuRElTQ09OTkVDVEVEfSx0aGlzLl9vcHRpb25zPWU7Y29uc3R7cGxhdGZvcm1UeXBlOm4sY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZTpyLG90aGVyUHVibGljS2V5OmkscmVjb25uZWN0Om8sd2FsbGV0SW5mbzpzLGRhcHBNZXRhZGF0YTphLHByb3RvY29sVmVyc2lvbjpjLHRyYW5zcG9ydHM6ZCxjb250ZXh0OmwscmVsYXlQZXJzaXN0ZW5jZTp1LGVjaWVzOmgsYW5hbHl0aWNzOmY9ITEsc3RvcmFnZTpwLHNka1ZlcnNpb246bSxjb21tdW5pY2F0aW9uU2VydmVyVXJsOmc9bnIsbG9nZ2luZzp2LGF1dG9Db25uZWN0Onk9e3RpbWVvdXQ6b3J9fT1lO3RoaXMuc3RhdGUub3RoZXJQdWJsaWNLZXk9aSx0aGlzLnN0YXRlLmRhcHBNZXRhZGF0YT1hLHRoaXMuc3RhdGUud2FsbGV0SW5mbz1zLHRoaXMuc3RhdGUudHJhbnNwb3J0cz1kLHRoaXMuc3RhdGUucGxhdGZvcm1UeXBlPW4sdGhpcy5zdGF0ZS5hbmFseXRpY3M9Zix0aGlzLnN0YXRlLnByb3RvY29sVmVyc2lvbj1udWxsIT1jP2M6MSx0aGlzLnN0YXRlLmlzT3JpZ2luYXRvcj0haSx0aGlzLnN0YXRlLnJlbGF5UGVyc2lzdGVuY2U9dSx0aGlzLnN0YXRlLmNvbW11bmljYXRpb25TZXJ2ZXJVcmw9Zyx0aGlzLnN0YXRlLmNvbnRleHQ9bCx0aGlzLnN0YXRlLnRlcm1pbmF0ZWQ9ITEsdGhpcy5zdGF0ZS5zZGtWZXJzaW9uPW0sdGhpcy5zZXRNYXhMaXN0ZW5lcnMoNTApLHRoaXMuc2V0Q29ubmVjdGlvblN0YXR1cyhleHBvcnRzLkNvbm5lY3Rpb25TdGF0dXMuRElTQ09OTkVDVEVEKSwobnVsbD09cD92b2lkIDA6cC5kdXJhdGlvbikmJih0aGlzLnN0YXRlLnNlc3Npb25EdXJhdGlvbj1pciksdGhpcy5zdGF0ZS5zdG9yYWdlT3B0aW9ucz1wLHRoaXMuc3RhdGUuYXV0b0Nvbm5lY3RPcHRpb25zPXksdGhpcy5zdGF0ZS5kZWJ1Zz0hMD09PShudWxsPT12P3ZvaWQgMDp2LnJlbW90ZUxheWVyKSwhMD09PShudWxsPT12P3ZvaWQgMDp2LnJlbW90ZUxheWVyKSYmdC5lbmFibGUoXCJSZW1vdGVDb21tdW5pY2F0aW9uOkxheWVyXCIpLCEwPT09KG51bGw9PXY/dm9pZCAwOnYuc2VydmljZUxheWVyKSYmdC5lbmFibGUoXCJTb2NrZXRTZXJ2aWNlOkxheWVyXCIpLCEwPT09KG51bGw9PXY/dm9pZCAwOnYuZWNpZXNMYXllcikmJnQuZW5hYmxlKFwiRUNJRVM6TGF5ZXJcIiksITA9PT0obnVsbD09dj92b2lkIDA6di5rZXlFeGNoYW5nZUxheWVyKSYmdC5lbmFibGUoXCJLZXlFeGNoYW5nZTpMYXllclwiKSx0aGlzLnN0YXRlLmxvZ2dpbmc9diwobnVsbD09cD92b2lkIDA6cC5zdG9yYWdlTWFuYWdlcikmJih0aGlzLnN0YXRlLnN0b3JhZ2VNYW5hZ2VyPXAuc3RvcmFnZU1hbmFnZXIpLFluLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBjb25zdHJ1Y3RvcigpXSBwcm90b2NvbFZlcnNpb249JHtjfSByZWxheVBlcnNpc3RlbmNlPSR7dX0gaXNPcmlnaW5hdG9yPSR7dGhpcy5zdGF0ZS5pc09yaWdpbmF0b3J9IGNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2U9JHtyfSBvdGhlclB1YmxpY0tleT0ke2l9IHJlY29ubmVjdD0ke299YCksdGhpcy5zdGF0ZS5pc09yaWdpbmF0b3J8fERyKHtjb21tdW5pY2F0aW9uTGF5ZXJQcmVmZXJlbmNlOnIsb3RoZXJQdWJsaWNLZXk6aSxyZWNvbm5lY3Q6byxlY2llczpoLGNvbW11bmljYXRpb25TZXJ2ZXJVcmw6ZyxpbnN0YW5jZTp0aGlzfSksdGhpcy5lbWl0U2VydmljZVN0YXR1c0V2ZW50KHtjb250ZXh0OlwiY29uc3RydWN0b3JcIn0pfWluaXRGcm9tRGFwcFN0b3JhZ2UoKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciBlO2lmKHRoaXMuc3RhdGUuc3RvcmFnZU1hbmFnZXIpe2NvbnN0IHQ9eWllbGQgdGhpcy5zdGF0ZS5zdG9yYWdlTWFuYWdlci5nZXRQZXJzaXN0ZWRDaGFubmVsQ29uZmlnKHt9KTt0JiYodGhpcy5zdGF0ZS5jaGFubmVsQ29uZmlnPXQsdGhpcy5zdGF0ZS5jaGFubmVsSWQ9dC5jaGFubmVsSWQsdGhpcy5zdGF0ZS5kZWVwbGlua1Byb3RvY29sQXZhaWxhYmxlPW51bGwhPT0oZT10LmRlZXBsaW5rUHJvdG9jb2xBdmFpbGFibGUpJiZ2b2lkIDAhPT1lJiZlLHQucmVsYXlQZXJzaXN0ZW5jZSYmKHRoaXMuc3RhdGUuYXV0aG9yaXplZD0hMCx0aGlzLnN0YXRlLnJlYWR5PSEwLHRoaXMuc2V0Q29ubmVjdGlvblN0YXR1cyhleHBvcnRzLkNvbm5lY3Rpb25TdGF0dXMuTElOS0VEKSx5aWVsZCB0aGlzLmNvbm5lY3RUb0NoYW5uZWwoe2NoYW5uZWxJZDp0LmNoYW5uZWxJZH0pKSl9RHIoe2NvbW11bmljYXRpb25MYXllclByZWZlcmVuY2U6ZXhwb3J0cy5Db21tdW5pY2F0aW9uTGF5ZXJQcmVmZXJlbmNlLlNPQ0tFVCxvdGhlclB1YmxpY0tleTp0aGlzLnN0YXRlLm90aGVyUHVibGljS2V5LHJlY29ubmVjdDp0aGlzLl9vcHRpb25zLnJlY29ubmVjdCxlY2llczp0aGlzLl9vcHRpb25zLmVjaWVzLGNvbW11bmljYXRpb25TZXJ2ZXJVcmw6dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uU2VydmVyVXJsLGluc3RhbmNlOnRoaXN9KX0pKX1vcmlnaW5hdG9yU2Vzc2lvbkNvbm5lY3QoKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiB5aWVsZCBmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciB0O2NvbnN0e3N0YXRlOm59PWU7aWYoIW4uc3RvcmFnZU1hbmFnZXIpcmV0dXJuIHZvaWQgWW4uUmVtb3RlQ29tbXVuaWNhdGlvbihcIltSZW1vdGVDb21tdW5pY2F0aW9uOiBvcmlnaW5hdG9yU2Vzc2lvbkNvbm5lY3QoKV0gbm8gc3RvcmFnZSBtYW5hZ2VyIGRlZmluZWQgLSBza2lwXCIpO2NvbnN0IHI9eWllbGQgbi5zdG9yYWdlTWFuYWdlci5nZXRQZXJzaXN0ZWRDaGFubmVsQ29uZmlnKHt9KTtpZihZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogb3JpZ2luYXRvclNlc3Npb25Db25uZWN0KCldIGF1dG9TdGFydGVkPSR7bi5vcmlnaW5hdG9yQ29ubmVjdFN0YXJ0ZWR9IGNoYW5uZWxDb25maWdgLHIpLG51bGw9PT0odD1uLmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PXQ/dm9pZCAwOnQuaXNDb25uZWN0ZWQoKSlyZXR1cm4gWW4uUmVtb3RlQ29tbXVuaWNhdGlvbihcIltSZW1vdGVDb21tdW5pY2F0aW9uOiBvcmlnaW5hdG9yU2Vzc2lvbkNvbm5lY3QoKV0gc29ja2V0IGFscmVhZHkgY29ubmVjdGVkIC0gc2tpcFwiKSxyO2lmKHIpe2lmKHIudmFsaWRVbnRpbD5EYXRlLm5vdygpKXJldHVybiBuLmNoYW5uZWxDb25maWc9cixuLm9yaWdpbmF0b3JDb25uZWN0U3RhcnRlZD0hMCxuLmNoYW5uZWxJZD1udWxsPT1yP3ZvaWQgMDpyLmNoYW5uZWxJZCxuLnJlY29ubmVjdGlvbj0hMCxyO1luLlJlbW90ZUNvbW11bmljYXRpb24oXCJbUmVtb3RlQ29tbXVuaWNhdGlvbjogYXV0b0Nvbm5lY3QoKV0gU2Vzc2lvbiBoYXMgZXhwaXJlZFwiKX1uLm9yaWdpbmF0b3JDb25uZWN0U3RhcnRlZD0hMX0pKX0odGhpcyl9KSl9Z2VuZXJhdGVDaGFubmVsSWRDb25uZWN0KCl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt2YXIgdCxuLHIsaSxvLHM7aWYoIWUuY29tbXVuaWNhdGlvbkxheWVyKXRocm93IG5ldyBFcnJvcihcImNvbW11bmljYXRpb24gbGF5ZXIgbm90IGluaXRpYWxpemVkXCIpO2lmKGUucmVhZHkpdGhyb3cgbmV3IEVycm9yKFwiQ2hhbm5lbCBhbHJlYWR5IGNvbm5lY3RlZFwiKTtpZihlLmNoYW5uZWxJZCYmKG51bGw9PT0odD1lLmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PXQ/dm9pZCAwOnQuaXNDb25uZWN0ZWQoKSkpcmV0dXJuIGUuY2hhbm5lbENvbmZpZz1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZS5jaGFubmVsQ29uZmlnKSx7Y2hhbm5lbElkOmUuY2hhbm5lbElkLHZhbGlkVW50aWw6RGF0ZS5ub3coKStlLnNlc3Npb25EdXJhdGlvbn0pLG51bGw9PT0obj1lLnN0b3JhZ2VNYW5hZ2VyKXx8dm9pZCAwPT09bnx8bi5wZXJzaXN0Q2hhbm5lbENvbmZpZyhlLmNoYW5uZWxDb25maWcpLHtjaGFubmVsSWQ6ZS5jaGFubmVsSWQscHJpdktleTpudWxsPT09KGk9bnVsbD09PShyPWUuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09cj92b2lkIDA6ci5nZXRLZXlJbmZvKCkpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmVjaWVzLnByaXZhdGUscHViS2V5Om51bGw9PT0ocz1udWxsPT09KG89ZS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLmdldEtleUluZm8oKSl8fHZvaWQgMD09PXM/dm9pZCAwOnMuZWNpZXMucHVibGljfTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKFwiW1JlbW90ZUNvbW11bmljYXRpb246IGdlbmVyYXRlQ2hhbm5lbElkKCldXCIpO2NvbnN0IGE9eWllbGQgZS5jb21tdW5pY2F0aW9uTGF5ZXIuY3JlYXRlQ2hhbm5lbCgpO1luLlJlbW90ZUNvbW11bmljYXRpb24oXCJbUmVtb3RlQ29tbXVuaWNhdGlvbjogZ2VuZXJhdGVDaGFubmVsSWQoKV0gY2hhbm5lbCBjcmVhdGVkXCIsYSk7Y29uc3QgYz1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZS5jaGFubmVsQ29uZmlnKSx7Y2hhbm5lbElkOmEuY2hhbm5lbElkLGxvY2FsS2V5OmEucHJpdktleSx2YWxpZFVudGlsOkRhdGUubm93KCkrZS5zZXNzaW9uRHVyYXRpb259KTtyZXR1cm4gZS5jaGFubmVsSWQ9YS5jaGFubmVsSWQsZS5jaGFubmVsQ29uZmlnPWMse2NoYW5uZWxJZDplLmNoYW5uZWxJZCxwdWJLZXk6YS5wdWJLZXkscHJpdktleTphLnByaXZLZXl9fSkpfSh0aGlzLnN0YXRlKX0pKX1jbGVhbigpe3JldHVybiBhcih0aGlzLnN0YXRlKX1jb25uZWN0VG9DaGFubmVsKHtjaGFubmVsSWQ6ZSx3aXRoS2V5RXhjaGFuZ2U6dCxhdXRob3JpemVkOm59KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGwodGhpcyxhcmd1bWVudHMsdm9pZCAwLChmdW5jdGlvbiooe2NoYW5uZWxJZDplLHdpdGhLZXlFeGNoYW5nZTp0LGF1dGhvcml6ZWQ6bixzdGF0ZTpyfSl7dmFyIGkscyxhO2lmKCFvLnZhbGlkYXRlKGUpKXRocm93IFluLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBjb25uZWN0VG9DaGFubmVsKCldIGNvbnRleHQ9JHtyLmNvbnRleHR9IGludmFsaWQgY2hhbm5lbCBjaGFubmVsSWQ9JHtlfWApLG5ldyBFcnJvcihgSW52YWxpZCBjaGFubmVsICR7ZX1gKTtpZihZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogY29ubmVjdFRvQ2hhbm5lbCgpXSBjb250ZXh0PSR7ci5jb250ZXh0fSBjaGFubmVsSWQ9JHtlfSB3aXRoS2V5RXhjaGFuZ2U9JHt0fWApLG51bGw9PT0oaT1yLmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PWk/dm9pZCAwOmkuaXNDb25uZWN0ZWQoKSlyZXR1cm4gdm9pZCBZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogY29ubmVjdFRvQ2hhbm5lbCgpXSBjb250ZXh0PSR7ci5jb250ZXh0fSBhbHJlYWR5IGNvbm5lY3RlZCAtIGludGVycnVwdCBjb25uZWN0aW9uLmApO3IuY2hhbm5lbElkPWUseWllbGQgbnVsbD09PShzPXIuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09cz92b2lkIDA6cy5jb25uZWN0VG9DaGFubmVsKHtjaGFubmVsSWQ6ZSxhdXRob3JpemVkOm4sd2l0aEtleUV4Y2hhbmdlOnR9KTtjb25zdCBjPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxyLmNoYW5uZWxDb25maWcpLHtjaGFubmVsSWQ6ZSx2YWxpZFVudGlsOkRhdGUubm93KCkrci5zZXNzaW9uRHVyYXRpb259KTtyLmNoYW5uZWxDb25maWc9YyxudWxsPT09KGE9ci5zdG9yYWdlTWFuYWdlcil8fHZvaWQgMD09PWF8fGEucGVyc2lzdENoYW5uZWxDb25maWcoYyl9KSl9KHtjaGFubmVsSWQ6ZSxhdXRob3JpemVkOm4sd2l0aEtleUV4Y2hhbmdlOnQsc3RhdGU6dGhpcy5zdGF0ZX0pfXNlbmRNZXNzYWdlKGUpe3JldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIG4scjtjb25zdHtzdGF0ZTppfT1lO1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBzZW5kTWVzc2FnZSgpXSBjb250ZXh0PSR7aS5jb250ZXh0fSBwYXVzZWQ9JHtpLnBhdXNlZH0gcmVhZHk9JHtpLnJlYWR5fSByZWxheVBlcnNpc3RlbmNlPSR7aS5yZWxheVBlcnNpc3RlbmNlfSBhdXRob3JpemVkPSR7aS5hdXRob3JpemVkfSBzb2NrZXQ9JHtudWxsPT09KG49aS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLmlzQ29ubmVjdGVkKCl9IGNsaWVudHNDb25uZWN0ZWQ9JHtpLmNsaWVudHNDb25uZWN0ZWR9IHN0YXR1cz0ke2kuX2Nvbm5lY3Rpb25TdGF0dXN9YCx0KSxpLnJlbGF5UGVyc2lzdGVuY2V8fGkucmVhZHkmJihudWxsPT09KHI9aS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmlzQ29ubmVjdGVkKCkpJiZpLmNsaWVudHNDb25uZWN0ZWR8fChZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogc2VuZE1lc3NhZ2UoKV0gY29udGV4dD0ke2kuY29udGV4dH0gIFNLSVAgbWVzc2FnZSB3YWl0aW5nIGZvciBNTSBtb2JpbGUgcmVhZGluZXNzLmApLHlpZWxkIG5ldyBQcm9taXNlKCh0PT57ZS5vbmNlKGV4cG9ydHMuRXZlbnRUeXBlLkNMSUVOVFNfUkVBRFksdCl9KSksWW4uUmVtb3RlQ29tbXVuaWNhdGlvbihgW1JlbW90ZUNvbW11bmljYXRpb246IHNlbmRNZXNzYWdlKCldIGNvbnRleHQ9JHtpLmNvbnRleHR9ICBBRlRFUiBTS0lQIC8gUkVBRFkgLS0gc2VuZGluZyBwZW5kaW5nIG1lc3NhZ2VgKSk7dHJ5e2NvbnN0IG49eWllbGQgZnVuY3Rpb24oZSx0KXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiBuZXcgUHJvbWlzZSgobj0+e3ZhciByO2NvbnN0e3N0YXRlOml9PWU7WW4uUmVtb3RlQ29tbXVuaWNhdGlvbihgW1JlbW90ZUNvbW11bmljYXRpb246IGhhbmRsZUF1dGhvcml6YXRpb24oKV0gY29udGV4dD0ke2kuY29udGV4dH0gcmVhZHk9JHtpLnJlYWR5fSBhdXRob3JpemVkPSR7aS5hdXRob3JpemVkfSBtZXRob2Q9JHt0Lm1ldGhvZH1gKSwhaS5pc09yaWdpbmF0b3J8fGkuYXV0aG9yaXplZHx8aS5yZWxheVBlcnNpc3RlbmNlP251bGw9PT0ocj1pLmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PXJ8fHIuc2VuZE1lc3NhZ2UodCkudGhlbigoZT0+e24oZSl9KSkuY2F0Y2goKGU9PntuKCExKX0pKTplLm9uY2UoZXhwb3J0cy5FdmVudFR5cGUuQVVUSE9SSVpFRCwoKCk9Pnt2YXIgZTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogaGFuZGxlQXV0aG9yaXphdGlvbigpXSBjb250ZXh0PSR7aS5jb250ZXh0fSAgQUZURVIgU0tJUCAvIEFVVEhPUklaRUQgLS0gc2VuZGluZyBwZW5kaW5nIG1lc3NhZ2VgKSxudWxsPT09KGU9aS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1lfHxlLnNlbmRNZXNzYWdlKHQpLnRoZW4oKGU9PntuKGUpfSkpLmNhdGNoKChlPT57bighMSl9KSl9KSl9KSl9KSl9KGUsdCk7cmV0dXJuIG59Y2F0Y2goZSl7dGhyb3cgZX19KSl9KHRoaXMsZSl9dGVzdFN0b3JhZ2UoKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciB0O2NvbnN0IG49eWllbGQgbnVsbD09PSh0PWUuc3RvcmFnZU1hbmFnZXIpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmdldFBlcnNpc3RlZENoYW5uZWxDb25maWcoKTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKFwiW1JlbW90ZUNvbW11bmljYXRpb246IHRlc3RTdG9yYWdlKCldIHJlc1wiLG4pfSkpfSh0aGlzLnN0YXRlKX0pKX1oYXNEZWVwbGlua1Byb3RvY29sKCl7cmV0dXJuIHRoaXMuc3RhdGUuZGVlcGxpbmtQcm90b2NvbEF2YWlsYWJsZX1nZXRDaGFubmVsQ29uZmlnKCl7cmV0dXJuIHRoaXMuc3RhdGUuY2hhbm5lbENvbmZpZ31pc1JlYWR5KCl7cmV0dXJuIHRoaXMuc3RhdGUucmVhZHl9aXNDb25uZWN0ZWQoKXt2YXIgZTtyZXR1cm4gbnVsbD09PShlPXRoaXMuc3RhdGUuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5pc0Nvbm5lY3RlZCgpfWlzQXV0aG9yaXplZCgpe3JldHVybiB0aGlzLnN0YXRlLmF1dGhvcml6ZWR9aXNQYXVzZWQoKXtyZXR1cm4gdGhpcy5zdGF0ZS5wYXVzZWR9Z2V0Q29tbXVuaWNhdGlvbkxheWVyKCl7cmV0dXJuIHRoaXMuc3RhdGUuY29tbXVuaWNhdGlvbkxheWVyfXBpbmcoKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciBlO1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiBwaW5nKCldIGNoYW5uZWw9JHt0aGlzLnN0YXRlLmNoYW5uZWxJZH1gKSx5aWVsZCBudWxsPT09KGU9dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnBpbmcoKX0pKX10ZXN0TG9nZ2VyKCl7WW4uUmVtb3RlQ29tbXVuaWNhdGlvbihgdGVzdExvZ2dlcigpIGNoYW5uZWw9JHt0aGlzLnN0YXRlLmNoYW5uZWxJZH1gKSxZbi5Tb2NrZXRTZXJ2aWNlKGB0ZXN0TG9nZ2VyKCkgY2hhbm5lbD0ke3RoaXMuc3RhdGUuY2hhbm5lbElkfWApLFluLkVjaWVzKGB0ZXN0TG9nZ2VyKCkgY2hhbm5lbD0ke3RoaXMuc3RhdGUuY2hhbm5lbElkfWApLFluLktleUV4Y2hhbmdlKGB0ZXN0TG9nZ2VyKCkgY2hhbm5lbD0ke3RoaXMuc3RhdGUuY2hhbm5lbElkfWApfWtleUNoZWNrKCl7dmFyIGU7WW4uUmVtb3RlQ29tbXVuaWNhdGlvbihgW1JlbW90ZUNvbW11bmljYXRpb246IGtleUNoZWNrKCldIGNoYW5uZWw9JHt0aGlzLnN0YXRlLmNoYW5uZWxJZH1gKSxudWxsPT09KGU9dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1lfHxlLmtleUNoZWNrKCl9c2V0Q29ubmVjdGlvblN0YXR1cyhlKXt0aGlzLnN0YXRlLl9jb25uZWN0aW9uU3RhdHVzIT09ZSYmKHRoaXMuc3RhdGUuX2Nvbm5lY3Rpb25TdGF0dXM9ZSx0aGlzLmVtaXQoZXhwb3J0cy5FdmVudFR5cGUuQ09OTkVDVElPTl9TVEFUVVMsZSksdGhpcy5lbWl0U2VydmljZVN0YXR1c0V2ZW50KHtjb250ZXh0Olwic2V0Q29ubmVjdGlvblN0YXR1c1wifSkpfWVtaXRTZXJ2aWNlU3RhdHVzRXZlbnQoZT17fSl7dGhpcy5lbWl0KGV4cG9ydHMuRXZlbnRUeXBlLlNFUlZJQ0VfU1RBVFVTLHRoaXMuZ2V0U2VydmljZVN0YXR1cygpKX1nZXRDb25uZWN0aW9uU3RhdHVzKCl7cmV0dXJuIHRoaXMuc3RhdGUuX2Nvbm5lY3Rpb25TdGF0dXN9Z2V0U2VydmljZVN0YXR1cygpe3JldHVybntvcmlnaW5hdG9ySW5mbzp0aGlzLnN0YXRlLm9yaWdpbmF0b3JJbmZvLGtleUluZm86dGhpcy5nZXRLZXlJbmZvKCksY29ubmVjdGlvblN0YXR1czp0aGlzLnN0YXRlLl9jb25uZWN0aW9uU3RhdHVzLGNoYW5uZWxDb25maWc6dGhpcy5zdGF0ZS5jaGFubmVsQ29uZmlnLGNoYW5uZWxJZDp0aGlzLnN0YXRlLmNoYW5uZWxJZH19Z2V0S2V5SW5mbygpe3ZhciBlO3JldHVybiBudWxsPT09KGU9dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmdldEtleUluZm8oKX1yZXNldEtleXMoKXt2YXIgZTtudWxsPT09KGU9dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1lfHxlLnJlc2V0S2V5cygpfXNldE90aGVyUHVibGljS2V5KGUpe3ZhciB0O2NvbnN0IG49bnVsbD09PSh0PXRoaXMuc3RhdGUuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09dD92b2lkIDA6dC5nZXRLZXlFeGNoYW5nZSgpO2lmKCFuKXRocm93IG5ldyBFcnJvcihcIktleUV4Y2hhbmdlIGlzIG5vdCBpbml0aWFsaXplZC5cIik7bi5nZXRPdGhlclB1YmxpY0tleSgpIT09ZSYmbi5zZXRPdGhlclB1YmxpY0tleShlKX1wYXVzZSgpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIGU7WW4uUmVtb3RlQ29tbXVuaWNhdGlvbihgW1JlbW90ZUNvbW11bmljYXRpb246IHBhdXNlKCldIGNoYW5uZWw9JHt0aGlzLnN0YXRlLmNoYW5uZWxJZH1gKSx5aWVsZCBudWxsPT09KGU9dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnBhdXNlKCksdGhpcy5zZXRDb25uZWN0aW9uU3RhdHVzKGV4cG9ydHMuQ29ubmVjdGlvblN0YXR1cy5QQVVTRUQpfSkpfWdldFZlcnNpb24oKXtyZXR1cm4gdHIudmVyc2lvbn1oYXNSZWxheVBlcnNpc3RlbmNlKCl7dmFyIGU7cmV0dXJuIG51bGwhPT0oZT10aGlzLnN0YXRlLnJlbGF5UGVyc2lzdGVuY2UpJiZ2b2lkIDAhPT1lJiZlfXJlc3VtZSgpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIHQ7Y29uc3R7c3RhdGU6bn09ZTtZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogcmVzdW1lKCldIGNoYW5uZWw9JHtuLmNoYW5uZWxJZH1gKSx5aWVsZCBudWxsPT09KHQ9bi5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LnJlc3VtZSgpLGUuc2V0Q29ubmVjdGlvblN0YXR1cyhleHBvcnRzLkNvbm5lY3Rpb25TdGF0dXMuTElOS0VEKX0pKX0odGhpcyl9KSl9ZW5jcnlwdChlKXt2YXIgdCxuLHI7Y29uc3QgaT1udWxsPT09KHQ9dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmdldEtleUV4Y2hhbmdlKCksbz1udWxsPT1pP3ZvaWQgMDppLmdldE90aGVyUHVibGljS2V5KCk7aWYoIW8pdGhyb3cgbmV3IEVycm9yKFwiS2V5RXhjaGFuZ2Ugbm90IGNvbXBsZXRlZFwiKTtyZXR1cm4gbnVsbD09PShyPW51bGw9PT0obj10aGlzLnN0YXRlLmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PW4/dm9pZCAwOm4uc3RhdGUuZWNpZXNJbnN0YW5jZSl8fHZvaWQgMD09PXI/dm9pZCAwOnIuZW5jcnlwdChlLG8pfWRlY3J5cHQoZSl7dmFyIHQsbixyO2lmKCEobnVsbD09PSh0PXRoaXMuc3RhdGUuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09dD92b2lkIDA6dC5zdGF0ZS5lY2llc0luc3RhbmNlKSl0aHJvdyBuZXcgRXJyb3IoXCJFQ0lFUyBpbnN0YW5jZSBpcyBub3QgaW5pdGlhbGl6ZWRcIik7cmV0dXJuIG51bGw9PT0ocj1udWxsPT09KG49dGhpcy5zdGF0ZS5jb21tdW5pY2F0aW9uTGF5ZXIpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnN0YXRlLmVjaWVzSW5zdGFuY2UpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmRlY3J5cHQoZSl9Z2V0Q2hhbm5lbElkKCl7cmV0dXJuIHRoaXMuc3RhdGUuY2hhbm5lbElkfWdldFJQQ01ldGhvZFRyYWNrZXIoKXt2YXIgZTtyZXR1cm4gbnVsbD09PShlPXRoaXMuc3RhdGUuY29tbXVuaWNhdGlvbkxheWVyKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5nZXRSUENNZXRob2RUcmFja2VyKCl9cmVqZWN0KHtjaGFubmVsSWQ6ZX0pe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLGFyZ3VtZW50cyx2b2lkIDAsKGZ1bmN0aW9uKih7Y2hhbm5lbElkOmUsc3RhdGU6dH0pe3ZhciBuLHIsaTtpZighby52YWxpZGF0ZShlKSl0aHJvdyBZbi5SZW1vdGVDb21tdW5pY2F0aW9uKGBbUmVtb3RlQ29tbXVuaWNhdGlvbjogY29ubmVjdFRvQ2hhbm5lbCgpXSBjb250ZXh0PSR7dC5jb250ZXh0fSBpbnZhbGlkIGNoYW5uZWwgY2hhbm5lbElkPSR7ZX1gKSxuZXcgRXJyb3IoYEludmFsaWQgY2hhbm5lbCAke2V9YCk7aWYodC5pc09yaWdpbmF0b3IpcmV0dXJuIHZvaWQgWW4uUmVtb3RlQ29tbXVuaWNhdGlvbihgW1JlbW90ZUNvbW11bmljYXRpb246IHJlamVjdCgpXSBjb250ZXh0PSR7dC5jb250ZXh0fSBpc09yaWdpbmF0b3I9JHt0LmlzT3JpZ2luYXRvcn0gY2hhbm5lbElkPSR7ZX1gKTtjb25zdHtzb2NrZXQ6c309bnVsbCE9PShyPW51bGw9PT0obj10LmNvbW11bmljYXRpb25MYXllcil8fHZvaWQgMD09PW4/dm9pZCAwOm4uc3RhdGUpJiZ2b2lkIDAhPT1yP3I6e307KG51bGw9PXM/dm9pZCAwOnMuY29ubmVjdGVkKXx8KFluLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiByZWplY3QoKV0gY29udGV4dD0ke3QuY29udGV4dH0gc29ja2V0IGFscmVhZHkgY29ubmVjdGVkYCksbnVsbD09c3x8cy5jb25uZWN0KCkpLFhuKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7aWQ6ZSxldmVudDpsci5SRUpFQ1RFRH0sdC5vcmlnaW5hdG9ySW5mbykse3Nka1ZlcnNpb246dC5zZGtWZXJzaW9uLGNvbW1MYXllclZlcnNpb246dHIudmVyc2lvbix3YWxsZXRWZXJzaW9uOm51bGw9PT0oaT10LndhbGxldEluZm8pfHx2b2lkIDA9PT1pP3ZvaWQgMDppLnZlcnNpb259KSx0LmNvbW11bmljYXRpb25TZXJ2ZXJVcmwpLmNhdGNoKChlPT57fSkpLHlpZWxkIG5ldyBQcm9taXNlKCgobixyKT0+e251bGw9PXN8fHMuZW1pdChleHBvcnRzLkV2ZW50VHlwZS5SRUpFQ1RFRCx7Y2hhbm5lbElkOmV9LCgoZSxpKT0+e1luLlJlbW90ZUNvbW11bmljYXRpb24oYFtSZW1vdGVDb21tdW5pY2F0aW9uOiByZWplY3QoKV0gY29udGV4dD0ke3QuY29udGV4dH0gc29ja2V0PSR7bnVsbD09cz92b2lkIDA6cy5pZH1gLHtlcnJvcjplLHJlc3BvbnNlOml9KSxlP3IoZSk6bihpKX0pKX0pKX0pKX0oe2NoYW5uZWxJZDplLHN0YXRlOnRoaXMuc3RhdGV9KX1kaXNjb25uZWN0KGUpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIExyKHtvcHRpb25zOmUsaW5zdGFuY2U6dGhpc30pfSkpfX0hZnVuY3Rpb24oZSl7ZS5SRU5FVz1cInJlbmV3XCIsZS5MSU5LPVwibGlua1wifShDcnx8KENyPXt9KSk7dmFyIEtyPVwiRVJDNzIxXCIsanI9XCJFUkMxMTU1XCIsJHI9e2Vycm9yczp7ZGlzY29ubmVjdGVkOigpPT5cIk1ldGFNYXNrOiBEaXNjb25uZWN0ZWQgZnJvbSBjaGFpbi4gQXR0ZW1wdGluZyB0byBjb25uZWN0LlwiLHBlcm1hbmVudGx5RGlzY29ubmVjdGVkOigpPT5cIk1ldGFNYXNrOiBEaXNjb25uZWN0ZWQgZnJvbSBNZXRhTWFzayBiYWNrZ3JvdW5kLiBQYWdlIHJlbG9hZCByZXF1aXJlZC5cIixzZW5kU2l0ZU1ldGFkYXRhOigpPT5cIk1ldGFNYXNrOiBGYWlsZWQgdG8gc2VuZCBzaXRlIG1ldGFkYXRhLiBUaGlzIGlzIGFuIGludGVybmFsIGVycm9yLCBwbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLHVuc3VwcG9ydGVkU3luYzplPT5gTWV0YU1hc2s6IFRoZSBNZXRhTWFzayBFdGhlcmV1bSBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IHN5bmNocm9ub3VzIG1ldGhvZHMgbGlrZSAke2V9IHdpdGhvdXQgYSBjYWxsYmFjayBwYXJhbWV0ZXIuYCxpbnZhbGlkRHVwbGV4U3RyZWFtOigpPT5cIk11c3QgcHJvdmlkZSBhIE5vZGUuanMtc3R5bGUgZHVwbGV4IHN0cmVhbS5cIixpbnZhbGlkTmV0d29ya1BhcmFtczooKT0+XCJNZXRhTWFzazogUmVjZWl2ZWQgaW52YWxpZCBuZXR3b3JrIHBhcmFtZXRlcnMuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsaW52YWxpZFJlcXVlc3RBcmdzOigpPT5cIkV4cGVjdGVkIGEgc2luZ2xlLCBub24tYXJyYXksIG9iamVjdCBhcmd1bWVudC5cIixpbnZhbGlkUmVxdWVzdE1ldGhvZDooKT0+XCInYXJncy5tZXRob2QnIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLlwiLGludmFsaWRSZXF1ZXN0UGFyYW1zOigpPT5cIidhcmdzLnBhcmFtcycgbXVzdCBiZSBhbiBvYmplY3Qgb3IgYXJyYXkgaWYgcHJvdmlkZWQuXCIsaW52YWxpZExvZ2dlck9iamVjdDooKT0+XCInYXJncy5sb2dnZXInIG11c3QgYmUgYW4gb2JqZWN0IGlmIHByb3ZpZGVkLlwiLGludmFsaWRMb2dnZXJNZXRob2Q6ZT0+YCdhcmdzLmxvZ2dlcicgbXVzdCBpbmNsdWRlIHJlcXVpcmVkIG1ldGhvZCAnJHtlfScuYH0saW5mbzp7Y29ubmVjdGVkOmU9PmBNZXRhTWFzazogQ29ubmVjdGVkIHRvIGNoYWluIHdpdGggSUQgXCIke2V9XCIuYH0sd2FybmluZ3M6e2NoYWluSWREZXByZWNhdGlvbjpcIk1ldGFNYXNrOiAnZXRoZXJldW0uY2hhaW5JZCcgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gUGxlYXNlIHVzZSB0aGUgJ2V0aF9jaGFpbklkJyBSUEMgbWV0aG9kIGluc3RlYWQuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL21ldGFtYXNrLWltcHJvdmVtZW50LXByb3Bvc2Fscy9kaXNjdXNzaW9ucy8yM1wiLG5ldHdvcmtWZXJzaW9uRGVwcmVjYXRpb246XCJNZXRhTWFzazogJ2V0aGVyZXVtLm5ldHdvcmtWZXJzaW9uJyBpcyBkZXByZWNhdGVkIGFuZCBtYXkgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBQbGVhc2UgdXNlIHRoZSAnbmV0X3ZlcnNpb24nIFJQQyBtZXRob2QgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vTWV0YU1hc2svbWV0YW1hc2staW1wcm92ZW1lbnQtcHJvcG9zYWxzL2Rpc2N1c3Npb25zLzIzXCIsc2VsZWN0ZWRBZGRyZXNzRGVwcmVjYXRpb246XCJNZXRhTWFzazogJ2V0aGVyZXVtLnNlbGVjdGVkQWRkcmVzcycgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gUGxlYXNlIHVzZSB0aGUgJ2V0aF9hY2NvdW50cycgUlBDIG1ldGhvZCBpbnN0ZWFkLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9NZXRhTWFzay9tZXRhbWFzay1pbXByb3ZlbWVudC1wcm9wb3NhbHMvZGlzY3Vzc2lvbnMvMjNcIixlbmFibGVEZXByZWNhdGlvbjpcIk1ldGFNYXNrOiAnZXRoZXJldW0uZW5hYmxlKCknIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFBsZWFzZSB1c2UgdGhlICdldGhfcmVxdWVzdEFjY291bnRzJyBSUEMgbWV0aG9kIGluc3RlYWQuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTAyXCIsc2VuZERlcHJlY2F0aW9uOlwiTWV0YU1hc2s6ICdldGhlcmV1bS5zZW5kKC4uLiknIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFBsZWFzZSB1c2UgJ2V0aGVyZXVtLnNlbmRBc3luYyguLi4pJyBvciAnZXRoZXJldW0ucmVxdWVzdCguLi4pJyBpbnN0ZWFkLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5M1wiLGV2ZW50czp7Y2xvc2U6XCJNZXRhTWFzazogVGhlIGV2ZW50ICdjbG9zZScgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gUGxlYXNlIHVzZSAnZGlzY29ubmVjdCcgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMjZGlzY29ubmVjdFwiLGRhdGE6XCJNZXRhTWFzazogVGhlIGV2ZW50ICdkYXRhJyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gVXNlICdtZXNzYWdlJyBpbnN0ZWFkLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5MyNtZXNzYWdlXCIsbmV0d29ya0NoYW5nZWQ6XCJNZXRhTWFzazogVGhlIGV2ZW50ICduZXR3b3JrQ2hhbmdlZCcgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gVXNlICdjaGFpbkNoYW5nZWQnIGluc3RlYWQuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTkzI2NoYWluY2hhbmdlZFwiLG5vdGlmaWNhdGlvbjpcIk1ldGFNYXNrOiBUaGUgZXZlbnQgJ25vdGlmaWNhdGlvbicgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gVXNlICdtZXNzYWdlJyBpbnN0ZWFkLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5MyNtZXNzYWdlXCJ9LHJwYzp7ZXRoRGVjcnlwdERlcHJlY2F0aW9uOlwiTWV0YU1hc2s6IFRoZSBSUEMgbWV0aG9kICdldGhfZGVjcnlwdCcgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL21lZGl1bS5jb20vbWV0YW1hc2svbWV0YW1hc2stYXBpLW1ldGhvZC1kZXByZWNhdGlvbi0yYjA1NjRhODQ2ODZcIixldGhHZXRFbmNyeXB0aW9uUHVibGljS2V5RGVwcmVjYXRpb246XCJNZXRhTWFzazogVGhlIFJQQyBtZXRob2QgJ2V0aF9nZXRFbmNyeXB0aW9uUHVibGljS2V5JyBpcyBkZXByZWNhdGVkIGFuZCBtYXkgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vbWVkaXVtLmNvbS9tZXRhbWFzay9tZXRhbWFzay1hcGktbWV0aG9kLWRlcHJlY2F0aW9uLTJiMDU2NGE4NDY4NlwiLHdhbGxldFdhdGNoQXNzZXRORlRFeHBlcmltZW50YWw6XCJNZXRhTWFzazogVGhlIFJQQyBtZXRob2QgJ3dhbGxldF93YXRjaEFzc2V0JyBpcyBleHBlcmltZW50YWwgZm9yIEVSQzcyMS9FUkMxMTU1IGFzc2V0cyBhbmQgbWF5IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9NZXRhTWFzay9tZXRhbWFzay1pbXByb3ZlbWVudC1wcm9wb3NhbHMvYmxvYi9tYWluL01JUHMvbWlwLTEubWQgYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9NZXRhTWFzay9tZXRhbWFzay1pbXByb3ZlbWVudC1wcm9wb3NhbHMvYmxvYi9tYWluL1BST0NFU1MtR1VJREUubWQjcHJvcG9zYWwtbGlmZWN5Y2xlXCJ9LGV4cGVyaW1lbnRhbE1ldGhvZHM6XCJNZXRhTWFzazogJ2V0aGVyZXVtLl9tZXRhbWFzaycgZXhwb3NlcyBub24tc3RhbmRhcmQsIGV4cGVyaW1lbnRhbCBtZXRob2RzLiBUaGV5IG1heSBiZSByZW1vdmVkIG9yIGNoYW5nZWQgd2l0aG91dCB3YXJuaW5nLlwifX07ZnVuY3Rpb24gSHIoZSl7Y29uc3QgdD17ZXRoRGVjcnlwdERlcHJlY2F0aW9uOiExLGV0aEdldEVuY3J5cHRpb25QdWJsaWNLZXlEZXByZWNhdGlvbjohMSx3YWxsZXRXYXRjaEFzc2V0TkZURXhwZXJpbWVudGFsOiExfTtyZXR1cm4obixyLGkpPT57dC5ldGhEZWNyeXB0RGVwcmVjYXRpb258fFwiZXRoX2RlY3J5cHRcIiE9PW4ubWV0aG9kP3QuZXRoR2V0RW5jcnlwdGlvblB1YmxpY0tleURlcHJlY2F0aW9ufHxcImV0aF9nZXRFbmNyeXB0aW9uUHVibGljS2V5XCIhPT1uLm1ldGhvZD8hdC53YWxsZXRXYXRjaEFzc2V0TkZURXhwZXJpbWVudGFsJiZcIndhbGxldF93YXRjaEFzc2V0XCI9PT1uLm1ldGhvZCYmW0tyLGpyXS5pbmNsdWRlcyhuLnBhcmFtcz8udHlwZXx8XCJcIikmJihlLndhcm4oJHIud2FybmluZ3MucnBjLndhbGxldFdhdGNoQXNzZXRORlRFeHBlcmltZW50YWwpLHQud2FsbGV0V2F0Y2hBc3NldE5GVEV4cGVyaW1lbnRhbD0hMCk6KGUud2Fybigkci53YXJuaW5ncy5ycGMuZXRoR2V0RW5jcnlwdGlvblB1YmxpY0tleURlcHJlY2F0aW9uKSx0LmV0aEdldEVuY3J5cHRpb25QdWJsaWNLZXlEZXByZWNhdGlvbj0hMCk6KGUud2Fybigkci53YXJuaW5ncy5ycGMuZXRoRGVjcnlwdERlcHJlY2F0aW9uKSx0LmV0aERlY3J5cHREZXByZWNhdGlvbj0hMCksaSgpfX12YXIgVXI9NDI5NDk2NzI5NSxGcj1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqVXIpO2Z1bmN0aW9uIHFyKCl7cmV0dXJuKGUsdCxuLHIpPT57Y29uc3QgaT1lLmlkLG89RnI9KEZyKzEpJVVyO2UuaWQ9byx0LmlkPW8sbigobj0+e2UuaWQ9aSx0LmlkPWksbigpfSkpfX12YXIgenI9KGUsdCxuKT0+e2lmKCF0LmhhcyhlKSl0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgXCIrbil9LFdyPShlLHQsbik9Pih6cihlLHQsXCJyZWFkIGZyb20gcHJpdmF0ZSBmaWVsZFwiKSxuP24uY2FsbChlKTp0LmdldChlKSksVnI9KGUsdCxuKT0+e2lmKHQuaGFzKGUpKXRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgdGhlIHNhbWUgcHJpdmF0ZSBtZW1iZXIgbW9yZSB0aGFuIG9uY2VcIik7dCBpbnN0YW5jZW9mIFdlYWtTZXQ/dC5hZGQoZSk6dC5zZXQoZSxuKX0sR3I9KGUsdCxuLHIpPT4oenIoZSx0LFwid3JpdGUgdG8gcHJpdmF0ZSBmaWVsZFwiKSx0LnNldChlLG4pLG4pLFlyPShlLHQsbik9Pih6cihlLHQsXCJhY2Nlc3MgcHJpdmF0ZSBtZXRob2RcIiksbiksWnI9e2ludmFsaWRJbnB1dDotMzJlMyxyZXNvdXJjZU5vdEZvdW5kOi0zMjAwMSxyZXNvdXJjZVVuYXZhaWxhYmxlOi0zMjAwMix0cmFuc2FjdGlvblJlamVjdGVkOi0zMjAwMyxtZXRob2ROb3RTdXBwb3J0ZWQ6LTMyMDA0LGxpbWl0RXhjZWVkZWQ6LTMyMDA1LHBhcnNlOi0zMjcwMCxpbnZhbGlkUmVxdWVzdDotMzI2MDAsbWV0aG9kTm90Rm91bmQ6LTMyNjAxLGludmFsaWRQYXJhbXM6LTMyNjAyLGludGVybmFsOi0zMjYwM30sSnI9e1wiLTMyNzAwXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIkludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci4gQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXCJ9LFwiLTMyNjAwXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIlRoZSBKU09OIHNlbnQgaXMgbm90IGEgdmFsaWQgUmVxdWVzdCBvYmplY3QuXCJ9LFwiLTMyNjAxXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIlRoZSBtZXRob2QgZG9lcyBub3QgZXhpc3QgLyBpcyBub3QgYXZhaWxhYmxlLlwifSxcIi0zMjYwMlwiOntzdGFuZGFyZDpcIkpTT04gUlBDIDIuMFwiLG1lc3NhZ2U6XCJJbnZhbGlkIG1ldGhvZCBwYXJhbWV0ZXIocykuXCJ9LFwiLTMyNjAzXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIkludGVybmFsIEpTT04tUlBDIGVycm9yLlwifSxcIi0zMjAwMFwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIkludmFsaWQgaW5wdXQuXCJ9LFwiLTMyMDAxXCI6e3N0YW5kYXJkOlwiRUlQLTE0NzRcIixtZXNzYWdlOlwiUmVzb3VyY2Ugbm90IGZvdW5kLlwifSxcIi0zMjAwMlwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlJlc291cmNlIHVuYXZhaWxhYmxlLlwifSxcIi0zMjAwM1wiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlRyYW5zYWN0aW9uIHJlamVjdGVkLlwifSxcIi0zMjAwNFwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIk1ldGhvZCBub3Qgc3VwcG9ydGVkLlwifSxcIi0zMjAwNVwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlJlcXVlc3QgbGltaXQgZXhjZWVkZWQuXCJ9LDQwMDE6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVXNlciByZWplY3RlZCB0aGUgcmVxdWVzdC5cIn0sNDEwMDp7c3RhbmRhcmQ6XCJFSVAtMTE5M1wiLG1lc3NhZ2U6XCJUaGUgcmVxdWVzdGVkIGFjY291bnQgYW5kL29yIG1ldGhvZCBoYXMgbm90IGJlZW4gYXV0aG9yaXplZCBieSB0aGUgdXNlci5cIn0sNDIwMDp7c3RhbmRhcmQ6XCJFSVAtMTE5M1wiLG1lc3NhZ2U6XCJUaGUgcmVxdWVzdGVkIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgRXRoZXJldW0gcHJvdmlkZXIuXCJ9LDQ5MDA6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIGFsbCBjaGFpbnMuXCJ9LDQ5MDE6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBzcGVjaWZpZWQgY2hhaW4uXCJ9fTtmdW5jdGlvbiBRcihlKXtyZXR1cm4gQm9vbGVhbihlKSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJiFBcnJheS5pc0FycmF5KGUpfXZhciBYcj0oZSx0KT0+T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSx0KTtjbGFzcyBlaSBleHRlbmRzIFR5cGVFcnJvcntjb25zdHJ1Y3RvcihlLHQpe2xldCBuO2NvbnN0e21lc3NhZ2U6cixleHBsYW5hdGlvbjppLC4uLm99PWUse3BhdGg6c309ZSxhPTA9PT1zLmxlbmd0aD9yOmBBdCBwYXRoOiAke3Muam9pbihcIi5cIil9IC0tICR7cn1gO3N1cGVyKGk/P2EpLG51bGwhPWkmJih0aGlzLmNhdXNlPWEpLE9iamVjdC5hc3NpZ24odGhpcyxvKSx0aGlzLm5hbWU9dGhpcy5jb25zdHJ1Y3Rvci5uYW1lLHRoaXMuZmFpbHVyZXM9KCk9Pm4/PyhuPVtlLC4uLnQoKV0pfX1mdW5jdGlvbiB0aShlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9ZX1mdW5jdGlvbiBuaShlKXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZT9lLnRvU3RyaW5nKCk6XCJzdHJpbmdcIj09dHlwZW9mIGU/SlNPTi5zdHJpbmdpZnkoZSk6YCR7ZX1gfWZ1bmN0aW9uIHJpKGUsdCxuLHIpe2lmKCEwPT09ZSlyZXR1cm47ITE9PT1lP2U9e306XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXttZXNzYWdlOmV9KTtjb25zdHtwYXRoOmksYnJhbmNoOm99PXQse3R5cGU6c309bix7cmVmaW5lbWVudDphLG1lc3NhZ2U6Yz1gRXhwZWN0ZWQgYSB2YWx1ZSBvZiB0eXBlIFxcYCR7c31cXGAke2E/YCB3aXRoIHJlZmluZW1lbnQgXFxgJHthfVxcYGA6XCJcIn0sIGJ1dCByZWNlaXZlZDogXFxgJHtuaShyKX1cXGBgfT1lO3JldHVybnt2YWx1ZTpyLHR5cGU6cyxyZWZpbmVtZW50OmEsa2V5OmlbaS5sZW5ndGgtMV0scGF0aDppLGJyYW5jaDpvLC4uLmUsbWVzc2FnZTpjfX1mdW5jdGlvbippaShlLHQsbixyKXsoZnVuY3Rpb24oZSl7cmV0dXJuIHRpKGUpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlW1N5bWJvbC5pdGVyYXRvcl19KShlKXx8KGU9W2VdKTtmb3IoY29uc3QgaSBvZiBlKXtjb25zdCBlPXJpKGksdCxuLHIpO2UmJih5aWVsZCBlKX19ZnVuY3Rpb24qb2koZSx0LG49e30pe2NvbnN0e3BhdGg6cj1bXSxicmFuY2g6aT1bZV0sY29lcmNlOm89ITEsbWFzazpzPSExfT1uLGE9e3BhdGg6cixicmFuY2g6aX07aWYobyYmKGU9dC5jb2VyY2VyKGUsYSkscyYmXCJ0eXBlXCIhPT10LnR5cGUmJnRpKHQuc2NoZW1hKSYmdGkoZSkmJiFBcnJheS5pc0FycmF5KGUpKSlmb3IoY29uc3QgbiBpbiBlKXZvaWQgMD09PXQuc2NoZW1hW25dJiZkZWxldGUgZVtuXTtsZXQgYz1cInZhbGlkXCI7Zm9yKGNvbnN0IHIgb2YgdC52YWxpZGF0b3IoZSxhKSlyLmV4cGxhbmF0aW9uPW4ubWVzc2FnZSxjPVwibm90X3ZhbGlkXCIseWllbGRbcix2b2lkIDBdO2ZvcihsZXRbZCxsLHVdb2YgdC5lbnRyaWVzKGUsYSkpe2NvbnN0IHQ9b2kobCx1LHtwYXRoOnZvaWQgMD09PWQ/cjpbLi4ucixkXSxicmFuY2g6dm9pZCAwPT09ZD9pOlsuLi5pLGxdLGNvZXJjZTpvLG1hc2s6cyxtZXNzYWdlOm4ubWVzc2FnZX0pO2Zvcihjb25zdCBuIG9mIHQpblswXT8oYz1udWxsIT1uWzBdLnJlZmluZW1lbnQ/XCJub3RfcmVmaW5lZFwiOlwibm90X3ZhbGlkXCIseWllbGRbblswXSx2b2lkIDBdKTpvJiYobD1uWzFdLHZvaWQgMD09PWQ/ZT1sOmUgaW5zdGFuY2VvZiBNYXA/ZS5zZXQoZCxsKTplIGluc3RhbmNlb2YgU2V0P2UuYWRkKGwpOnRpKGUpJiYodm9pZCAwIT09bHx8ZCBpbiBlKSYmKGVbZF09bCkpfWlmKFwibm90X3ZhbGlkXCIhPT1jKWZvcihjb25zdCByIG9mIHQucmVmaW5lcihlLGEpKXIuZXhwbGFuYXRpb249bi5tZXNzYWdlLGM9XCJub3RfcmVmaW5lZFwiLHlpZWxkW3Isdm9pZCAwXTtcInZhbGlkXCI9PT1jJiYoeWllbGRbdm9pZCAwLGVdKX1jbGFzcyBzaXtjb25zdHJ1Y3RvcihlKXtjb25zdHt0eXBlOnQsc2NoZW1hOm4sdmFsaWRhdG9yOnIscmVmaW5lcjppLGNvZXJjZXI6bz0oZT0+ZSksZW50cmllczpzPWZ1bmN0aW9uKigpe319PWU7dGhpcy50eXBlPXQsdGhpcy5zY2hlbWE9bix0aGlzLmVudHJpZXM9cyx0aGlzLmNvZXJjZXI9byx0aGlzLnZhbGlkYXRvcj1yPyhlLHQpPT5paShyKGUsdCksdCx0aGlzLGUpOigpPT5bXSx0aGlzLnJlZmluZXI9aT8oZSx0KT0+aWkoaShlLHQpLHQsdGhpcyxlKTooKT0+W119YXNzZXJ0KGUsdCl7cmV0dXJuIGFpKGUsdGhpcyx0KX1jcmVhdGUoZSx0KXtyZXR1cm4gY2koZSx0aGlzLHQpfWlzKGUpe3JldHVybiBkaShlLHRoaXMpfW1hc2soZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSx0LG4pe2NvbnN0IHI9bGkoZSx0LHtjb2VyY2U6ITAsbWFzazohMCxtZXNzYWdlOm59KTtpZihyWzBdKXRocm93IHJbMF07cmV0dXJuIHJbMV19KGUsdGhpcyx0KX12YWxpZGF0ZShlLHQ9e30pe3JldHVybiBsaShlLHRoaXMsdCl9fWZ1bmN0aW9uIGFpKGUsdCxuKXtjb25zdCByPWxpKGUsdCx7bWVzc2FnZTpufSk7aWYoclswXSl0aHJvdyByWzBdfWZ1bmN0aW9uIGNpKGUsdCxuKXtjb25zdCByPWxpKGUsdCx7Y29lcmNlOiEwLG1lc3NhZ2U6bn0pO2lmKHJbMF0pdGhyb3cgclswXTtyZXR1cm4gclsxXX1mdW5jdGlvbiBkaShlLHQpe3JldHVybiFsaShlLHQpWzBdfWZ1bmN0aW9uIGxpKGUsdCxuPXt9KXtjb25zdCByPW9pKGUsdCxuKSxpPWZ1bmN0aW9uKGUpe2NvbnN0e2RvbmU6dCx2YWx1ZTpufT1lLm5leHQoKTtyZXR1cm4gdD92b2lkIDA6bn0ocik7aWYoaVswXSl7Y29uc3QgZT1uZXcgZWkoaVswXSwoZnVuY3Rpb24qKCl7Zm9yKGNvbnN0IGUgb2YgcillWzBdJiYoeWllbGQgZVswXSl9KSk7cmV0dXJuW2Usdm9pZCAwXX1yZXR1cm5bdm9pZCAwLGlbMV1dfWZ1bmN0aW9uIHVpKGUsdCl7cmV0dXJuIG5ldyBzaSh7dHlwZTplLHNjaGVtYTpudWxsLHZhbGlkYXRvcjp0fSl9ZnVuY3Rpb24gaGkoZSl7bGV0IHQ7cmV0dXJuIG5ldyBzaSh7dHlwZTpcImxhenlcIixzY2hlbWE6bnVsbCwqZW50cmllcyhuLHIpe3Q/Pyh0PWUoKSkseWllbGQqdC5lbnRyaWVzKG4scil9LHZhbGlkYXRvcjoobixyKT0+KHQ/Pyh0PWUoKSksdC52YWxpZGF0b3IobixyKSksY29lcmNlcjoobixyKT0+KHQ/Pyh0PWUoKSksdC5jb2VyY2VyKG4scikpLHJlZmluZXI6KG4scik9Pih0Pz8odD1lKCkpLHQucmVmaW5lcihuLHIpKX0pfWZ1bmN0aW9uIGZpKGUpe3JldHVybiBuZXcgc2koe3R5cGU6XCJhcnJheVwiLHNjaGVtYTplLCplbnRyaWVzKHQpe2lmKGUmJkFycmF5LmlzQXJyYXkodCkpZm9yKGNvbnN0W24scl1vZiB0LmVudHJpZXMoKSl5aWVsZFtuLHIsZV19LGNvZXJjZXI6ZT0+QXJyYXkuaXNBcnJheShlKT9lLnNsaWNlKCk6ZSx2YWxpZGF0b3I6ZT0+QXJyYXkuaXNBcnJheShlKXx8YEV4cGVjdGVkIGFuIGFycmF5IHZhbHVlLCBidXQgcmVjZWl2ZWQ6ICR7bmkoZSl9YH0pfWZ1bmN0aW9uIHBpKGUpe2NvbnN0IHQ9bmkoZSksbj10eXBlb2YgZTtyZXR1cm4gbmV3IHNpKHt0eXBlOlwibGl0ZXJhbFwiLHNjaGVtYTpcInN0cmluZ1wiPT09bnx8XCJudW1iZXJcIj09PW58fFwiYm9vbGVhblwiPT09bj9lOm51bGwsdmFsaWRhdG9yOm49Pm49PT1lfHxgRXhwZWN0ZWQgdGhlIGxpdGVyYWwgXFxgJHt0fVxcYCwgYnV0IHJlY2VpdmVkOiAke25pKG4pfWB9KX1mdW5jdGlvbiBtaSgpe3JldHVybiB1aShcIm51bWJlclwiLChlPT5cIm51bWJlclwiPT10eXBlb2YgZSYmIWlzTmFOKGUpfHxgRXhwZWN0ZWQgYSBudW1iZXIsIGJ1dCByZWNlaXZlZDogJHtuaShlKX1gKSl9ZnVuY3Rpb24gZ2koZSl7Y29uc3QgdD1lP09iamVjdC5rZXlzKGUpOltdLG49dWkoXCJuZXZlclwiLCgoKT0+ITEpKTtyZXR1cm4gbmV3IHNpKHt0eXBlOlwib2JqZWN0XCIsc2NoZW1hOmV8fG51bGwsKmVudHJpZXMocil7aWYoZSYmdGkocikpe2NvbnN0IGk9bmV3IFNldChPYmplY3Qua2V5cyhyKSk7Zm9yKGNvbnN0IG4gb2YgdClpLmRlbGV0ZShuKSx5aWVsZFtuLHJbbl0sZVtuXV07Zm9yKGNvbnN0IGUgb2YgaSl5aWVsZFtlLHJbZV0sbl19fSx2YWxpZGF0b3I6ZT0+dGkoZSl8fGBFeHBlY3RlZCBhbiBvYmplY3QsIGJ1dCByZWNlaXZlZDogJHtuaShlKX1gLGNvZXJjZXI6ZT0+dGkoZSk/ey4uLmV9OmV9KX1mdW5jdGlvbiB2aShlKXtyZXR1cm4gbmV3IHNpKHsuLi5lLHZhbGlkYXRvcjoodCxuKT0+dm9pZCAwPT09dHx8ZS52YWxpZGF0b3IodCxuKSxyZWZpbmVyOih0LG4pPT52b2lkIDA9PT10fHxlLnJlZmluZXIodCxuKX0pfWZ1bmN0aW9uIHlpKGUsdCl7cmV0dXJuIG5ldyBzaSh7dHlwZTpcInJlY29yZFwiLHNjaGVtYTpudWxsLCplbnRyaWVzKG4pe2lmKHRpKG4pKWZvcihjb25zdCByIGluIG4pe2NvbnN0IGk9bltyXTt5aWVsZFtyLHIsZV0seWllbGRbcixpLHRdfX0sdmFsaWRhdG9yOmU9PnRpKGUpfHxgRXhwZWN0ZWQgYW4gb2JqZWN0LCBidXQgcmVjZWl2ZWQ6ICR7bmkoZSl9YH0pfWZ1bmN0aW9uIEVpKCl7cmV0dXJuIHVpKFwic3RyaW5nXCIsKGU9Plwic3RyaW5nXCI9PXR5cGVvZiBlfHxgRXhwZWN0ZWQgYSBzdHJpbmcsIGJ1dCByZWNlaXZlZDogJHtuaShlKX1gKSl9ZnVuY3Rpb24gYmkoZSl7Y29uc3QgdD1lLm1hcCgoZT0+ZS50eXBlKSkuam9pbihcIiB8IFwiKTtyZXR1cm4gbmV3IHNpKHt0eXBlOlwidW5pb25cIixzY2hlbWE6bnVsbCxjb2VyY2VyKHQpe2Zvcihjb25zdCBuIG9mIGUpe2NvbnN0W2Uscl09bi52YWxpZGF0ZSh0LHtjb2VyY2U6ITB9KTtpZighZSlyZXR1cm4gcn1yZXR1cm4gdH0sdmFsaWRhdG9yKG4scil7Y29uc3QgaT1bXTtmb3IoY29uc3QgdCBvZiBlKXtjb25zdFsuLi5lXT1vaShuLHQsciksW29dPWU7aWYoIW9bMF0pcmV0dXJuW107Zm9yKGNvbnN0W3Rdb2YgZSl0JiZpLnB1c2godCl9cmV0dXJuW2BFeHBlY3RlZCB0aGUgdmFsdWUgdG8gc2F0aXNmeSBhIHVuaW9uIG9mIFxcYCR7dH1cXGAsIGJ1dCByZWNlaXZlZDogJHtuaShuKX1gLC4uLmldfX0pfWZ1bmN0aW9uIHdpKGUpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lJiZcIm1lc3NhZ2VcImluIGV9KGUpJiZcInN0cmluZ1wiPT10eXBlb2YgZS5tZXNzYWdlP2UubWVzc2FnZTpudWxsPT1lP1wiXCI6U3RyaW5nKGUpfShlKS5yZXBsYWNlKC9cXC4kL3UsXCJcIil9ZnVuY3Rpb24gU2koZSx0KXtyZXR1cm4gbj1lLEJvb2xlYW4oXCJzdHJpbmdcIj09dHlwZW9mIG4/LnByb3RvdHlwZT8uY29uc3RydWN0b3I/Lm5hbWUpP25ldyBlKHttZXNzYWdlOnR9KTplKHttZXNzYWdlOnR9KTt2YXIgbn12YXIgX2k9Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlKXtzdXBlcihlLm1lc3NhZ2UpLHRoaXMuY29kZT1cIkVSUl9BU1NFUlRJT05cIn19O3ZhciBDaT1lPT5naShlKTtmdW5jdGlvbiB4aSh7cGF0aDplLGJyYW5jaDp0fSl7Y29uc3Qgbj1lW2UubGVuZ3RoLTFdO3JldHVybiBYcih0W3QubGVuZ3RoLTJdLG4pfWZ1bmN0aW9uIGtpKGUpe3JldHVybiBuZXcgc2koey4uLmUsdHlwZTpgb3B0aW9uYWwgJHtlLnR5cGV9YCx2YWxpZGF0b3I6KHQsbik9PiF4aShuKXx8ZS52YWxpZGF0b3IodCxuKSxyZWZpbmVyOih0LG4pPT4heGkobil8fGUucmVmaW5lcih0LG4pfSl9dmFyIE1pLEFpLFRpLElpPWJpKFtwaShudWxsKSx1aShcImJvb2xlYW5cIiwoZT0+XCJib29sZWFuXCI9PXR5cGVvZiBlKSksdWkoXCJmaW5pdGUgbnVtYmVyXCIsKGU9PmRpKGUsbWkoKSkmJk51bWJlci5pc0Zpbml0ZShlKSkpLEVpKCksZmkoaGkoKCgpPT5JaSkpKSx5aShFaSgpLGhpKCgoKT0+SWkpKSldKSxQaT0oTWk9SWksQWk9dWkoXCJhbnlcIiwoKCk9PiEwKSksVGk9ZT0+KGZ1bmN0aW9uKGUsdCxuPVwiQXNzZXJ0aW9uIGZhaWxlZFwiLHI9X2kpe3RyeXthaShlLHQpfWNhdGNoKGUpe3Rocm93IFNpKHIsYCR7bn06ICR7d2koZSl9LmApfX0oZSxJaSksSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlLCgoZSx0KT0+e2lmKFwiX19wcm90b19fXCIhPT1lJiZcImNvbnN0cnVjdG9yXCIhPT1lKXJldHVybiB0fSkpKSksbmV3IHNpKHsuLi5NaSxjb2VyY2VyOihlLHQpPT5kaShlLEFpKT9NaS5jb2VyY2VyKFRpKGUsdCksdCk6TWkuY29lcmNlcihlLHQpfSkpO2Z1bmN0aW9uIFJpKGUpe3RyeXtyZXR1cm4gZnVuY3Rpb24oZSl7Y2koZSxQaSl9KGUpLCEwfWNhdGNoe3JldHVybiExfX12YXIgT2k9cGkoXCIyLjBcIiksTmk9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBzaSh7Li4uZSx2YWxpZGF0b3I6KHQsbik9Pm51bGw9PT10fHxlLnZhbGlkYXRvcih0LG4pLHJlZmluZXI6KHQsbik9Pm51bGw9PT10fHxlLnJlZmluZXIodCxuKX0pfShiaShbbWkoKSxFaSgpXSkpLERpPUNpKHtjb2RlOnVpKFwiaW50ZWdlclwiLChlPT5cIm51bWJlclwiPT10eXBlb2YgZSYmIWlzTmFOKGUpJiZOdW1iZXIuaXNJbnRlZ2VyKGUpfHxgRXhwZWN0ZWQgYW4gaW50ZWdlciwgYnV0IHJlY2VpdmVkOiAke25pKGUpfWApKSxtZXNzYWdlOkVpKCksZGF0YTpraShQaSksc3RhY2s6a2koRWkoKSl9KSxMaT1iaShbeWkoRWkoKSxQaSksZmkoUGkpXSksQmk9Q2koe2lkOk5pLGpzb25ycGM6T2ksbWV0aG9kOkVpKCkscGFyYW1zOmtpKExpKX0pLEtpPUNpKHtqc29ucnBjOk9pLG1ldGhvZDpFaSgpLHBhcmFtczpraShMaSl9KTtmdW5jdGlvbiBqaShlKXtyZXR1cm4gZGkoZSxCaSl9ZnVuY3Rpb24gJGkoZSl7cmV0dXJuIGRpKGUsRGkpfWdpKHtpZDpOaSxqc29ucnBjOk9pLHJlc3VsdDp2aSh1aShcInVua25vd25cIiwoKCk9PiEwKSkpLGVycm9yOnZpKERpKX0pLGJpKFtDaSh7aWQ6TmksanNvbnJwYzpPaSxyZXN1bHQ6UGl9KSxDaSh7aWQ6TmksanNvbnJwYzpPaSxlcnJvcjpEaX0pXSk7dmFyIEhpPVpyLmludGVybmFsLFVpPVwiVW5zcGVjaWZpZWQgZXJyb3IgbWVzc2FnZS4gVGhpcyBpcyBhIGJ1ZywgcGxlYXNlIHJlcG9ydCBpdC5cIixGaT17Y29kZTpIaSxtZXNzYWdlOnppKEhpKX0scWk9XCJVbnNwZWNpZmllZCBzZXJ2ZXIgZXJyb3IuXCI7ZnVuY3Rpb24gemkoZSx0PVVpKXtpZihmdW5jdGlvbihlKXtyZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihlKX0oZSkpe2NvbnN0IHQ9ZS50b1N0cmluZygpO2lmKFhyKEpyLHQpKXJldHVybiBKclt0XS5tZXNzYWdlO2lmKGZ1bmN0aW9uKGUpe3JldHVybiBlPj0tMzIwOTkmJmU8PS0zMmUzfShlKSlyZXR1cm4gcWl9cmV0dXJuIHR9ZnVuY3Rpb24gV2koZSx7ZmFsbGJhY2tFcnJvcjp0PUZpLHNob3VsZEluY2x1ZGVTdGFjazpuPSEwfT17fSl7aWYoISRpKHQpKXRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBmYWxsYmFjayBlcnJvciB3aXRoIGludGVnZXIgbnVtYmVyIGNvZGUgYW5kIHN0cmluZyBtZXNzYWdlLlwiKTtjb25zdCByPWZ1bmN0aW9uKGUsdCl7aWYoZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwic2VyaWFsaXplXCJpbiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnNlcmlhbGl6ZSlyZXR1cm4gZS5zZXJpYWxpemUoKTtpZigkaShlKSlyZXR1cm4gZTtjb25zdCBuPVZpKGUpLHI9ey4uLnQsZGF0YTp7Y2F1c2U6bn19O3JldHVybiByfShlLHQpO3JldHVybiBufHxkZWxldGUgci5zdGFjayxyfWZ1bmN0aW9uIFZpKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2UubWFwKChlPT5SaShlKT9lOlFyKGUpP0dpKGUpOm51bGwpKTpRcihlKT9HaShlKTpSaShlKT9lOm51bGx9ZnVuY3Rpb24gR2koZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpLnJlZHVjZSgoKHQsbik9Pntjb25zdCByPWVbbl07cmV0dXJuIFJpKHIpJiYodFtuXT1yKSx0fSkse30pfXZhciBZaT10bzt0by5kZWZhdWx0PXRvLHRvLnN0YWJsZT1vbyx0by5zdGFibGVTdHJpbmdpZnk9b287dmFyIFppPVwiWy4uLl1cIixKaT1cIltDaXJjdWxhcl1cIixRaT1bXSxYaT1bXTtmdW5jdGlvbiBlbygpe3JldHVybntkZXB0aExpbWl0Ok51bWJlci5NQVhfU0FGRV9JTlRFR0VSLGVkZ2VzTGltaXQ6TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJ9fWZ1bmN0aW9uIHRvKGUsdCxuLHIpe3ZhciBpO3ZvaWQgMD09PXImJihyPWVvKCkpLHJvKGUsXCJcIiwwLFtdLHZvaWQgMCwwLHIpO3RyeXtpPTA9PT1YaS5sZW5ndGg/SlNPTi5zdHJpbmdpZnkoZSx0LG4pOkpTT04uc3RyaW5naWZ5KGUsYW8odCksbil9Y2F0Y2goZSl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KFwiW3VuYWJsZSB0byBzZXJpYWxpemUsIGNpcmN1bGFyIHJlZmVyZW5jZSBpcyB0b28gY29tcGxleCB0byBhbmFseXplXVwiKX1maW5hbGx5e2Zvcig7MCE9PVFpLmxlbmd0aDspe3ZhciBvPVFpLnBvcCgpOzQ9PT1vLmxlbmd0aD9PYmplY3QuZGVmaW5lUHJvcGVydHkob1swXSxvWzFdLG9bM10pOm9bMF1bb1sxXV09b1syXX19cmV0dXJuIGl9ZnVuY3Rpb24gbm8oZSx0LG4scil7dmFyIGk9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLG4pO3ZvaWQgMCE9PWkuZ2V0P2kuY29uZmlndXJhYmxlPyhPYmplY3QuZGVmaW5lUHJvcGVydHkocixuLHt2YWx1ZTplfSksUWkucHVzaChbcixuLHQsaV0pKTpYaS5wdXNoKFt0LG4sZV0pOihyW25dPWUsUWkucHVzaChbcixuLHRdKSl9ZnVuY3Rpb24gcm8oZSx0LG4scixpLG8scyl7dmFyIGE7aWYobys9MSxcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUpe2ZvcihhPTA7YTxyLmxlbmd0aDthKyspaWYoclthXT09PWUpcmV0dXJuIHZvaWQgbm8oSmksZSx0LGkpO2lmKHZvaWQgMCE9PXMuZGVwdGhMaW1pdCYmbz5zLmRlcHRoTGltaXQpcmV0dXJuIHZvaWQgbm8oWmksZSx0LGkpO2lmKHZvaWQgMCE9PXMuZWRnZXNMaW1pdCYmbisxPnMuZWRnZXNMaW1pdClyZXR1cm4gdm9pZCBubyhaaSxlLHQsaSk7aWYoci5wdXNoKGUpLEFycmF5LmlzQXJyYXkoZSkpZm9yKGE9MDthPGUubGVuZ3RoO2ErKylybyhlW2FdLGEsYSxyLGUsbyxzKTtlbHNle3ZhciBjPU9iamVjdC5rZXlzKGUpO2ZvcihhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07cm8oZVtkXSxkLGEscixlLG8scyl9fXIucG9wKCl9fWZ1bmN0aW9uIGlvKGUsdCl7cmV0dXJuIGU8dD8tMTplPnQ/MTowfWZ1bmN0aW9uIG9vKGUsdCxuLHIpe3ZvaWQgMD09PXImJihyPWVvKCkpO3ZhciBpLG89c28oZSxcIlwiLDAsW10sdm9pZCAwLDAscil8fGU7dHJ5e2k9MD09PVhpLmxlbmd0aD9KU09OLnN0cmluZ2lmeShvLHQsbik6SlNPTi5zdHJpbmdpZnkobyxhbyh0KSxuKX1jYXRjaChlKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoXCJbdW5hYmxlIHRvIHNlcmlhbGl6ZSwgY2lyY3VsYXIgcmVmZXJlbmNlIGlzIHRvbyBjb21wbGV4IHRvIGFuYWx5emVdXCIpfWZpbmFsbHl7Zm9yKDswIT09UWkubGVuZ3RoOyl7dmFyIHM9UWkucG9wKCk7ND09PXMubGVuZ3RoP09iamVjdC5kZWZpbmVQcm9wZXJ0eShzWzBdLHNbMV0sc1szXSk6c1swXVtzWzFdXT1zWzJdfX1yZXR1cm4gaX1mdW5jdGlvbiBzbyhlLHQsbixyLGksbyxzKXt2YXIgYTtpZihvKz0xLFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSl7Zm9yKGE9MDthPHIubGVuZ3RoO2ErKylpZihyW2FdPT09ZSlyZXR1cm4gdm9pZCBubyhKaSxlLHQsaSk7dHJ5e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudG9KU09OKXJldHVybn1jYXRjaChlKXtyZXR1cm59aWYodm9pZCAwIT09cy5kZXB0aExpbWl0JiZvPnMuZGVwdGhMaW1pdClyZXR1cm4gdm9pZCBubyhaaSxlLHQsaSk7aWYodm9pZCAwIT09cy5lZGdlc0xpbWl0JiZuKzE+cy5lZGdlc0xpbWl0KXJldHVybiB2b2lkIG5vKFppLGUsdCxpKTtpZihyLnB1c2goZSksQXJyYXkuaXNBcnJheShlKSlmb3IoYT0wO2E8ZS5sZW5ndGg7YSsrKXNvKGVbYV0sYSxhLHIsZSxvLHMpO2Vsc2V7dmFyIGM9e30sZD1PYmplY3Qua2V5cyhlKS5zb3J0KGlvKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXt2YXIgbD1kW2FdO3NvKGVbbF0sbCxhLHIsZSxvLHMpLGNbbF09ZVtsXX1pZih2b2lkIDA9PT1pKXJldHVybiBjO1FpLnB1c2goW2ksdCxlXSksaVt0XT1jfXIucG9wKCl9fWZ1bmN0aW9uIGFvKGUpe3JldHVybiBlPXZvaWQgMCE9PWU/ZTpmdW5jdGlvbihlLHQpe3JldHVybiB0fSxmdW5jdGlvbih0LG4pe2lmKFhpLmxlbmd0aD4wKWZvcih2YXIgcj0wO3I8WGkubGVuZ3RoO3IrKyl7dmFyIGk9WGlbcl07aWYoaVsxXT09PXQmJmlbMF09PT1uKXtuPWlbMl0sWGkuc3BsaWNlKHIsMSk7YnJlYWt9fXJldHVybiBlLmNhbGwodGhpcyx0LG4pfX12YXIgY289aChZaSksbG89Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlLHQsbil7aWYoIU51bWJlci5pc0ludGVnZXIoZSkpdGhyb3cgbmV3IEVycm9yKCdcImNvZGVcIiBtdXN0IGJlIGFuIGludGVnZXIuJyk7aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcignXCJtZXNzYWdlXCIgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuJyk7c3VwZXIodCksdGhpcy5jb2RlPWUsdm9pZCAwIT09biYmKHRoaXMuZGF0YT1uKX1zZXJpYWxpemUoKXtjb25zdCBlPXtjb2RlOnRoaXMuY29kZSxtZXNzYWdlOnRoaXMubWVzc2FnZX07cmV0dXJuIHZvaWQgMCE9PXRoaXMuZGF0YSYmKGUuZGF0YT10aGlzLmRhdGEsZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiExO3RyeXtsZXQgdD1lO2Zvcig7bnVsbCE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTspdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihlKT09PXR9Y2F0Y2goZSl7cmV0dXJuITF9fSh0aGlzLmRhdGEpJiYoZS5kYXRhLmNhdXNlPVZpKHRoaXMuZGF0YS5jYXVzZSkpKSx0aGlzLnN0YWNrJiYoZS5zdGFjaz10aGlzLnN0YWNrKSxlfXRvU3RyaW5nKCl7cmV0dXJuIGNvKHRoaXMuc2VyaWFsaXplKCksdW8sMil9fTtmdW5jdGlvbiB1byhlLHQpe2lmKFwiW0NpcmN1bGFyXVwiIT09dClyZXR1cm4gdH12YXIgaG89ZT0+Zm8oWnIuaW52YWxpZFJlcXVlc3QsZSk7ZnVuY3Rpb24gZm8oZSx0KXtjb25zdFtuLHJdPWZ1bmN0aW9uKGUpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybltlXTtpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmIUFycmF5LmlzQXJyYXkoZSkpe2NvbnN0e21lc3NhZ2U6dCxkYXRhOm59PWU7aWYodCYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBzcGVjaWZ5IHN0cmluZyBtZXNzYWdlLlwiKTtyZXR1cm5bdD8/dm9pZCAwLG5dfX1yZXR1cm5bXX0odCk7cmV0dXJuIG5ldyBsbyhlLG4/P3ppKGUpLHIpfXZhciBwbz17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkocG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3QgbW89YTtmdW5jdGlvbiBnbyhlLHQsbil7dHJ5e1JlZmxlY3QuYXBwbHkoZSx0LG4pfWNhdGNoKGUpe3NldFRpbWVvdXQoKCgpPT57dGhyb3cgZX0pKX19bGV0IHZvPWNsYXNzIGV4dGVuZHMgbW8uRXZlbnRFbWl0dGVye2VtaXQoZSwuLi50KXtsZXQgbj1cImVycm9yXCI9PT1lO2NvbnN0IHI9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXIpbj1uJiZ2b2lkIDA9PT1yLmVycm9yO2Vsc2UgaWYoIW4pcmV0dXJuITE7aWYobil7bGV0IGU7aWYodC5sZW5ndGg+MCYmKFtlXT10KSxlIGluc3RhbmNlb2YgRXJyb3IpdGhyb3cgZTtjb25zdCBuPW5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIisoZT9gICgke2UubWVzc2FnZX0pYDpcIlwiKSk7dGhyb3cgbi5jb250ZXh0PWUsbn1jb25zdCBpPXJbZV07aWYodm9pZCAwPT09aSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBpKWdvKGksdGhpcyx0KTtlbHNle2NvbnN0IGU9aS5sZW5ndGgsbj1mdW5jdGlvbihlKXtjb25zdCB0PWUubGVuZ3RoLG49bmV3IEFycmF5KHQpO2ZvcihsZXQgcj0wO3I8dDtyKz0xKW5bcl09ZVtyXTtyZXR1cm4gbn0oaSk7Zm9yKGxldCByPTA7cjxlO3IrPTEpZ28obltyXSx0aGlzLHQpfXJldHVybiEwfX07dmFyIHlvLEVvLGJvLHdvLFNvLF9vLENvLHhvLGtvLE1vLEFvLFRvLElvLFBvLFJvLE9vLE5vLERvLExvLEJvPXBvLmRlZmF1bHQ9dm8sS289Y2xhc3MgZSBleHRlbmRzIEJve2NvbnN0cnVjdG9yKHtub3RpZmljYXRpb25IYW5kbGVyOmV9PXt9KXtzdXBlcigpLFZyKHRoaXMsd28pLFZyKHRoaXMsX28pLFZyKHRoaXMseG8pLFZyKHRoaXMseW8sITEpLFZyKHRoaXMsRW8sdm9pZCAwKSxWcih0aGlzLGJvLHZvaWQgMCksR3IodGhpcyxFbyxbXSksR3IodGhpcyxibyxlKX1kZXN0cm95KCl7V3IodGhpcyxFbykuZm9yRWFjaCgoZT0+e1wiZGVzdHJveVwiaW4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5kZXN0cm95JiZlLmRlc3Ryb3koKX0pKSxHcih0aGlzLEVvLFtdKSxHcih0aGlzLHlvLCEwKX1wdXNoKGUpe1lyKHRoaXMsd28sU28pLmNhbGwodGhpcyksV3IodGhpcyxFbykucHVzaChlKX1oYW5kbGUoZSx0KXtpZihZcih0aGlzLHdvLFNvKS5jYWxsKHRoaXMpLHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKCdcImNhbGxiYWNrXCIgbXVzdCBiZSBhIGZ1bmN0aW9uIGlmIHByb3ZpZGVkLicpO3JldHVybiBBcnJheS5pc0FycmF5KGUpP3Q/WXIodGhpcyxfbyxDbykuY2FsbCh0aGlzLGUsdCk6WXIodGhpcyxfbyxDbykuY2FsbCh0aGlzLGUpOnQ/WXIodGhpcyx4byxrbykuY2FsbCh0aGlzLGUsdCk6dGhpcy5fcHJvbWlzZUhhbmRsZShlKX1hc01pZGRsZXdhcmUoKXtyZXR1cm4gWXIodGhpcyx3byxTbykuY2FsbCh0aGlzKSxhc3luYyh0LG4scixpKT0+e3ZhciBvLHM7dHJ5e2NvbnN0W2EsYyxkXT1hd2FpdCBZcihvPWUsVG8sSW8pLmNhbGwobyx0LG4sV3IodGhpcyxFbykpO3JldHVybiBjPyhhd2FpdCBZcihzPWUsT28sTm8pLmNhbGwocyxkKSxpKGEpKTpyKChhc3luYyB0PT57dmFyIG47dHJ5e2F3YWl0IFlyKG49ZSxPbyxObykuY2FsbChuLGQpfWNhdGNoKGUpe3JldHVybiB0KGUpfXJldHVybiB0KCl9KSl9Y2F0Y2goZSl7cmV0dXJuIGkoZSl9fX1hc3luYyBfcHJvbWlzZUhhbmRsZShlKXtyZXR1cm4gbmV3IFByb21pc2UoKCh0LG4pPT57WXIodGhpcyx4byxrbykuY2FsbCh0aGlzLGUsKChlLHIpPT57ZSYmdm9pZCAwPT09cj9uKGUpOnQocil9KSkuY2F0Y2gobil9KSl9fTt5bz1uZXcgV2Vha01hcCxFbz1uZXcgV2Vha01hcCxibz1uZXcgV2Vha01hcCx3bz1uZXcgV2Vha1NldCxTbz1mdW5jdGlvbigpe2lmKFdyKHRoaXMseW8pKXRocm93IG5ldyBFcnJvcihcIlRoaXMgZW5naW5lIGlzIGRlc3Ryb3llZCBhbmQgY2FuIG5vIGxvbmdlciBiZSB1c2VkLlwiKX0sX289bmV3IFdlYWtTZXQsQ289YXN5bmMgZnVuY3Rpb24oZSx0KXt0cnl7aWYoMD09PWUubGVuZ3RoKXtjb25zdCBlPVt7aWQ6bnVsbCxqc29ucnBjOlwiMi4wXCIsZXJyb3I6bmV3IGxvKFpyLmludmFsaWRSZXF1ZXN0LFwiUmVxdWVzdCBiYXRjaCBtdXN0IGNvbnRhaW4gcGxhaW4gb2JqZWN0cy4gUmVjZWl2ZWQgYW4gZW1wdHkgYXJyYXlcIil9XTtyZXR1cm4gdD90KG51bGwsZSk6ZX1jb25zdCBuPShhd2FpdCBQcm9taXNlLmFsbChlLm1hcCh0aGlzLl9wcm9taXNlSGFuZGxlLmJpbmQodGhpcykpKSkuZmlsdGVyKChlPT52b2lkIDAhPT1lKSk7cmV0dXJuIHQ/dChudWxsLG4pOm59Y2F0Y2goZSl7aWYodClyZXR1cm4gdChlKTt0aHJvdyBlfX0seG89bmV3IFdlYWtTZXQsa289YXN5bmMgZnVuY3Rpb24oZSx0KXt2YXIgbjtpZighZXx8QXJyYXkuaXNBcnJheShlKXx8XCJvYmplY3RcIiE9dHlwZW9mIGUpe2NvbnN0IG49bmV3IGxvKFpyLmludmFsaWRSZXF1ZXN0LFwiUmVxdWVzdHMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBSZWNlaXZlZDogXCIrdHlwZW9mIGUse3JlcXVlc3Q6ZX0pO3JldHVybiB0KG4se2lkOm51bGwsanNvbnJwYzpcIjIuMFwiLGVycm9yOm59KX1pZihcInN0cmluZ1wiIT10eXBlb2YgZS5tZXRob2Qpe2NvbnN0IG49bmV3IGxvKFpyLmludmFsaWRSZXF1ZXN0LFwiTXVzdCBzcGVjaWZ5IGEgc3RyaW5nIG1ldGhvZC4gUmVjZWl2ZWQ6IFwiK3R5cGVvZiBlLm1ldGhvZCx7cmVxdWVzdDplfSk7cmV0dXJuIFdyKHRoaXMsYm8pJiYhamkoZSk/dChudWxsKTp0KG4se2lkOmUuaWQ/P251bGwsanNvbnJwYzpcIjIuMFwiLGVycm9yOm59KX1pZihXcih0aGlzLGJvKSYmZGkoZSxLaSkmJiFqaShlKSl7dHJ5e2F3YWl0IFdyKHRoaXMsYm8pLmNhbGwodGhpcyxlKX1jYXRjaChlKXtyZXR1cm4gdChlKX1yZXR1cm4gdChudWxsKX1sZXQgcj1udWxsO2NvbnN0IGk9ey4uLmV9LG89e2lkOmkuaWQsanNvbnJwYzppLmpzb25ycGN9O3RyeXthd2FpdCBZcihuPUtvLE1vLEFvKS5jYWxsKG4saSxvLFdyKHRoaXMsRW8pKX1jYXRjaChlKXtyPWV9cmV0dXJuIHImJihkZWxldGUgby5yZXN1bHQsby5lcnJvcnx8KG8uZXJyb3I9V2kocikpKSx0KHIsbyl9LE1vPW5ldyBXZWFrU2V0LEFvPWFzeW5jIGZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG87Y29uc3RbcyxhLGNdPWF3YWl0IFlyKHI9S28sVG8sSW8pLmNhbGwocixlLHQsbik7aWYoWXIoaT1LbyxEbyxMbykuY2FsbChpLGUsdCxhKSxhd2FpdCBZcihvPUtvLE9vLE5vKS5jYWxsKG8sYykscyl0aHJvdyBzfSxUbz1uZXcgV2Vha1NldCxJbz1hc3luYyBmdW5jdGlvbihlLHQsbil7dmFyIHI7Y29uc3QgaT1bXTtsZXQgbz1udWxsLHM9ITE7Zm9yKGNvbnN0IGEgb2YgbilpZihbbyxzXT1hd2FpdCBZcihyPUtvLFBvLFJvKS5jYWxsKHIsZSx0LGEsaSkscylicmVhaztyZXR1cm5bbyxzLGkucmV2ZXJzZSgpXX0sUG89bmV3IFdlYWtTZXQsUm89YXN5bmMgZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIG5ldyBQcm9taXNlKChpPT57Y29uc3Qgbz1lPT57Y29uc3Qgbj1lfHx0LmVycm9yO24mJih0LmVycm9yPVdpKG4pKSxpKFtuLCEwXSl9LHM9bj0+e3QuZXJyb3I/byh0LmVycm9yKToobiYmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm8obmV3IGxvKFpyLmludGVybmFsLGBKc29uUnBjRW5naW5lOiBcIm5leHRcIiByZXR1cm4gaGFuZGxlcnMgbXVzdCBiZSBmdW5jdGlvbnMuIFJlY2VpdmVkIFwiJHt0eXBlb2Ygbn1cIiBmb3IgcmVxdWVzdDpcXG4keyRvKGUpfWAse3JlcXVlc3Q6ZX0pKSxyLnB1c2gobikpLGkoW251bGwsITFdKSl9O3RyeXtuKGUsdCxzLG8pfWNhdGNoKGUpe28oZSl9fSkpfSxPbz1uZXcgV2Vha1NldCxObz1hc3luYyBmdW5jdGlvbihlKXtmb3IoY29uc3QgdCBvZiBlKWF3YWl0IG5ldyBQcm9taXNlKCgoZSxuKT0+e3QoKHQ9PnQ/bih0KTplKCkpKX0pKX0sRG89bmV3IFdlYWtTZXQsTG89ZnVuY3Rpb24oZSx0LG4pe2lmKCFYcih0LFwicmVzdWx0XCIpJiYhWHIodCxcImVycm9yXCIpKXRocm93IG5ldyBsbyhaci5pbnRlcm5hbCxgSnNvblJwY0VuZ2luZTogUmVzcG9uc2UgaGFzIG5vIGVycm9yIG9yIHJlc3VsdCBmb3IgcmVxdWVzdDpcXG4keyRvKGUpfWAse3JlcXVlc3Q6ZX0pO2lmKCFuKXRocm93IG5ldyBsbyhaci5pbnRlcm5hbCxgSnNvblJwY0VuZ2luZTogTm90aGluZyBlbmRlZCByZXF1ZXN0OlxcbiR7JG8oZSl9YCx7cmVxdWVzdDplfSl9LFZyKEtvLE1vKSxWcihLbyxUbyksVnIoS28sUG8pLFZyKEtvLE9vKSxWcihLbyxEbyk7dmFyIGpvPUtvO2Z1bmN0aW9uICRvKGUpe3JldHVybiBKU09OLnN0cmluZ2lmeShlLG51bGwsMil9dmFyIEhvPU9iamVjdC5mcmVlemUoW1wiZXRoX3N1YnNjcmlwdGlvblwiXSksVW89KGU9Y29uc29sZSk9PntyZXR1cm5bcXIoKSwodD1lLChlLG4scik9PntcInN0cmluZ1wiPT10eXBlb2YgZS5tZXRob2QmJmUubWV0aG9kfHwobi5lcnJvcj1obyh7bWVzc2FnZTpcIlRoZSByZXF1ZXN0ICdtZXRob2QnIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLlwiLGRhdGE6ZX0pKSxyKChlPT57Y29uc3R7ZXJyb3I6cn09bjtyZXR1cm4gcj8odC5lcnJvcihgTWV0YU1hc2sgLSBSUEMgRXJyb3I6ICR7ci5tZXNzYWdlfWAsciksZSgpKTplKCl9KSl9KSxIcihlKV07dmFyIHR9O3ZhciBGbz0oZSx0LG49ITApPT4ocixpKT0+e3J8fGkuZXJyb3I/dChyfHxpLmVycm9yKTohbnx8QXJyYXkuaXNBcnJheShpKT9lKGkpOmUoaS5yZXN1bHQpfSxxbz1lPT5Cb29sZWFuKGUpJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmZS5zdGFydHNXaXRoKFwiMHhcIiksem89KCk9Pnt9O2FzeW5jIGZ1bmN0aW9uIFdvKGUsdCl7dHJ5e2NvbnN0IHQ9YXdhaXQgYXN5bmMgZnVuY3Rpb24oKXtyZXR1cm57bmFtZTpWbyh3aW5kb3cpLGljb246YXdhaXQgR28od2luZG93KX19KCk7ZS5oYW5kbGUoe2pzb25ycGM6XCIyLjBcIixpZDoxLG1ldGhvZDpcIm1ldGFtYXNrX3NlbmREb21haW5NZXRhZGF0YVwiLHBhcmFtczp0fSx6byl9Y2F0Y2goZSl7dC5lcnJvcih7bWVzc2FnZTokci5lcnJvcnMuc2VuZFNpdGVNZXRhZGF0YSgpLG9yaWdpbmFsRXJyb3I6ZX0pfX1mdW5jdGlvbiBWbyhlKXtjb25zdHtkb2N1bWVudDp0fT1lLG49dC5xdWVyeVNlbGVjdG9yKCdoZWFkID4gbWV0YVtwcm9wZXJ0eT1cIm9nOnNpdGVfbmFtZVwiXScpO2lmKG4pcmV0dXJuIG4uY29udGVudDtjb25zdCByPXQucXVlcnlTZWxlY3RvcignaGVhZCA+IG1ldGFbbmFtZT1cInRpdGxlXCJdJyk7cmV0dXJuIHI/ci5jb250ZW50OnQudGl0bGUmJnQudGl0bGUubGVuZ3RoPjA/dC50aXRsZTp3aW5kb3cubG9jYXRpb24uaG9zdG5hbWV9YXN5bmMgZnVuY3Rpb24gR28oZSl7Y29uc3R7ZG9jdW1lbnQ6dH09ZSxuPXQucXVlcnlTZWxlY3RvckFsbCgnaGVhZCA+IGxpbmtbcmVsfj1cImljb25cIl0nKTtmb3IoY29uc3QgZSBvZiBBcnJheS5mcm9tKG4pKWlmKGUmJmF3YWl0IFlvKGUuaHJlZikpcmV0dXJuIGUuaHJlZjtyZXR1cm4gbnVsbH1hc3luYyBmdW5jdGlvbiBZbyhlKXtyZXR1cm4gbmV3IFByb21pc2UoKCh0LG4pPT57dHJ5e2NvbnN0IG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtuLm9ubG9hZD0oKT0+dCghMCksbi5vbmVycm9yPSgpPT50KCExKSxuLnNyYz1lfWNhdGNoKGUpe24oZSl9fSkpfXZhciBabz0oZSx0LG4pPT57aWYoIXQuaGFzKGUpKXRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBcIituKX0sSm89KGUsdCxuKT0+KFpvKGUsdCxcInJlYWQgZnJvbSBwcml2YXRlIGZpZWxkXCIpLG4/bi5jYWxsKGUpOnQuZ2V0KGUpKSxRbz0oZSx0LG4pPT57aWYodC5oYXMoZSkpdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCB0aGUgc2FtZSBwcml2YXRlIG1lbWJlciBtb3JlIHRoYW4gb25jZVwiKTt0IGluc3RhbmNlb2YgV2Vha1NldD90LmFkZChlKTp0LnNldChlLG4pfSxYbz0oZSx0LG4scik9PihabyhlLHQsXCJ3cml0ZSB0byBwcml2YXRlIGZpZWxkXCIpLHQuc2V0KGUsbiksbik7ZnVuY3Rpb24gZXMoZSx0LG4pe3RyeXtSZWZsZWN0LmFwcGx5KGUsdCxuKX1jYXRjaChlKXtzZXRUaW1lb3V0KCgoKT0+e3Rocm93IGV9KSl9fWNsYXNzIHRzIGV4dGVuZHMgYS5FdmVudEVtaXR0ZXJ7ZW1pdChlLC4uLnQpe2xldCBuPVwiZXJyb3JcIj09PWU7Y29uc3Qgcj10aGlzLl9ldmVudHM7aWYodm9pZCAwIT09ciluPW4mJnZvaWQgMD09PXIuZXJyb3I7ZWxzZSBpZighbilyZXR1cm4hMTtpZihuKXtsZXQgZTtpZih0Lmxlbmd0aD4wJiYoW2VdPXQpLGUgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBlO2NvbnN0IG49bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhlP2AgKCR7ZS5tZXNzYWdlfSlgOlwiXCIpKTt0aHJvdyBuLmNvbnRleHQ9ZSxufWNvbnN0IGk9cltlXTtpZih2b2lkIDA9PT1pKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGkpZXMoaSx0aGlzLHQpO2Vsc2V7Y29uc3QgZT1pLmxlbmd0aCxuPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9ZS5sZW5ndGgsbj1uZXcgQXJyYXkodCk7Zm9yKGxldCByPTA7cjx0O3IrPTEpbltyXT1lW3JdO3JldHVybiBufShpKTtmb3IobGV0IHI9MDtyPGU7cis9MSllcyhuW3JdLHRoaXMsdCl9cmV0dXJuITB9fXZhciBucyxycyxpcz1mdW5jdGlvbiBlKHQsbil7aWYodD09PW4pcmV0dXJuITA7aWYodCYmbiYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwib2JqZWN0XCI9PXR5cGVvZiBuKXtpZih0LmNvbnN0cnVjdG9yIT09bi5jb25zdHJ1Y3RvcilyZXR1cm4hMTt2YXIgcixpLG87aWYoQXJyYXkuaXNBcnJheSh0KSl7aWYoKHI9dC5sZW5ndGgpIT1uLmxlbmd0aClyZXR1cm4hMTtmb3IoaT1yOzAhPWktLTspaWYoIWUodFtpXSxuW2ldKSlyZXR1cm4hMTtyZXR1cm4hMH1pZih0LmNvbnN0cnVjdG9yPT09UmVnRXhwKXJldHVybiB0LnNvdXJjZT09PW4uc291cmNlJiZ0LmZsYWdzPT09bi5mbGFncztpZih0LnZhbHVlT2YhPT1PYmplY3QucHJvdG90eXBlLnZhbHVlT2YpcmV0dXJuIHQudmFsdWVPZigpPT09bi52YWx1ZU9mKCk7aWYodC50b1N0cmluZyE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpcmV0dXJuIHQudG9TdHJpbmcoKT09PW4udG9TdHJpbmcoKTtpZigocj0obz1PYmplY3Qua2V5cyh0KSkubGVuZ3RoKSE9PU9iamVjdC5rZXlzKG4pLmxlbmd0aClyZXR1cm4hMTtmb3IoaT1yOzAhPWktLTspaWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLG9baV0pKXJldHVybiExO2ZvcihpPXI7MCE9aS0tOyl7dmFyIHM9b1tpXTtpZighZSh0W3NdLG5bc10pKXJldHVybiExfXJldHVybiEwfXJldHVybiB0IT10JiZuIT1ufSxvcz1oKGlzKSxzcz1jbGFzcyBlIGV4dGVuZHMgdHN7Y29uc3RydWN0b3Ioe2xvZ2dlcjp0PWNvbnNvbGUsbWF4RXZlbnRMaXN0ZW5lcnM6bj0xMDAscnBjTWlkZGxld2FyZTpyPVtdfT17fSl7c3VwZXIoKSxRbyh0aGlzLG5zLHZvaWQgMCksUW8odGhpcyxycyx2b2lkIDApLHRoaXMuX2xvZz10LHRoaXMuc2V0TWF4TGlzdGVuZXJzKG4pLHRoaXMuX3N0YXRlPXsuLi5lLl9kZWZhdWx0U3RhdGV9LFhvKHRoaXMscnMsbnVsbCksWG8odGhpcyxucyxudWxsKSx0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQ9dGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkLmJpbmQodGhpcyksdGhpcy5faGFuZGxlQ29ubmVjdD10aGlzLl9oYW5kbGVDb25uZWN0LmJpbmQodGhpcyksdGhpcy5faGFuZGxlQ2hhaW5DaGFuZ2VkPXRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZC5iaW5kKHRoaXMpLHRoaXMuX2hhbmRsZURpc2Nvbm5lY3Q9dGhpcy5faGFuZGxlRGlzY29ubmVjdC5iaW5kKHRoaXMpLHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZD10aGlzLl9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQuYmluZCh0aGlzKSx0aGlzLl9ycGNSZXF1ZXN0PXRoaXMuX3JwY1JlcXVlc3QuYmluZCh0aGlzKSx0aGlzLnJlcXVlc3Q9dGhpcy5yZXF1ZXN0LmJpbmQodGhpcyk7Y29uc3QgaT1uZXcgam87ci5mb3JFYWNoKChlPT5pLnB1c2goZSkpKSx0aGlzLl9ycGNFbmdpbmU9aX1nZXQgY2hhaW5JZCgpe3JldHVybiBKbyh0aGlzLG5zKX1nZXQgc2VsZWN0ZWRBZGRyZXNzKCl7cmV0dXJuIEpvKHRoaXMscnMpfWlzQ29ubmVjdGVkKCl7cmV0dXJuIHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkfWFzeW5jIHJlcXVlc3QoZSl7aWYoIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlfHxBcnJheS5pc0FycmF5KGUpKXRocm93IGhvKHttZXNzYWdlOiRyLmVycm9ycy5pbnZhbGlkUmVxdWVzdEFyZ3MoKSxkYXRhOmV9KTtjb25zdHttZXRob2Q6dCxwYXJhbXM6bn09ZTtpZihcInN0cmluZ1wiIT10eXBlb2YgdHx8MD09PXQubGVuZ3RoKXRocm93IGhvKHttZXNzYWdlOiRyLmVycm9ycy5pbnZhbGlkUmVxdWVzdE1ldGhvZCgpLGRhdGE6ZX0pO2lmKHZvaWQgMCE9PW4mJiFBcnJheS5pc0FycmF5KG4pJiYoXCJvYmplY3RcIiE9dHlwZW9mIG58fG51bGw9PT1uKSl0aHJvdyBobyh7bWVzc2FnZTokci5lcnJvcnMuaW52YWxpZFJlcXVlc3RQYXJhbXMoKSxkYXRhOmV9KTtjb25zdCByPW51bGw9PW4/e21ldGhvZDp0fTp7bWV0aG9kOnQscGFyYW1zOm59O3JldHVybiBuZXcgUHJvbWlzZSgoKGUsdCk9Pnt0aGlzLl9ycGNSZXF1ZXN0KHIsRm8oZSx0KSl9KSl9X2luaXRpYWxpemVTdGF0ZShlKXtpZih0aGlzLl9zdGF0ZS5pbml0aWFsaXplZCl0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlciBhbHJlYWR5IGluaXRpYWxpemVkLlwiKTtpZihlKXtjb25zdHthY2NvdW50czp0LGNoYWluSWQ6bixpc1VubG9ja2VkOnIsbmV0d29ya1ZlcnNpb246aX09ZTt0aGlzLl9oYW5kbGVDb25uZWN0KG4pLHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZCh7Y2hhaW5JZDpuLG5ldHdvcmtWZXJzaW9uOml9KSx0aGlzLl9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQoe2FjY291bnRzOnQsaXNVbmxvY2tlZDpyfSksdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKHQpfXRoaXMuX3N0YXRlLmluaXRpYWxpemVkPSEwLHRoaXMuZW1pdChcIl9pbml0aWFsaXplZFwiKX1fcnBjUmVxdWVzdChlLHQpe2xldCBuPXQ7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl8fChlLmpzb25ycGN8fChlLmpzb25ycGM9XCIyLjBcIiksXCJldGhfYWNjb3VudHNcIiE9PWUubWV0aG9kJiZcImV0aF9yZXF1ZXN0QWNjb3VudHNcIiE9PWUubWV0aG9kfHwobj0obixyKT0+e3RoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZChyLnJlc3VsdD8/W10sXCJldGhfYWNjb3VudHNcIj09PWUubWV0aG9kKSx0KG4scil9KSksdGhpcy5fcnBjRW5naW5lLmhhbmRsZShlLG4pfV9oYW5kbGVDb25uZWN0KGUpe3RoaXMuX3N0YXRlLmlzQ29ubmVjdGVkfHwodGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQ9ITAsdGhpcy5lbWl0KFwiY29ubmVjdFwiLHtjaGFpbklkOmV9KSx0aGlzLl9sb2cuZGVidWcoJHIuaW5mby5jb25uZWN0ZWQoZSkpKX1faGFuZGxlRGlzY29ubmVjdChlLHQpe2lmKHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkfHwhdGhpcy5fc3RhdGUuaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCYmIWUpe2xldCBuO3RoaXMuX3N0YXRlLmlzQ29ubmVjdGVkPSExLGU/KG49bmV3IGxvKDEwMTMsdD8/JHIuZXJyb3JzLmRpc2Nvbm5lY3RlZCgpKSx0aGlzLl9sb2cuZGVidWcobikpOihuPW5ldyBsbygxMDExLHQ/PyRyLmVycm9ycy5wZXJtYW5lbnRseURpc2Nvbm5lY3RlZCgpKSx0aGlzLl9sb2cuZXJyb3IobiksWG8odGhpcyxucyxudWxsKSx0aGlzLl9zdGF0ZS5hY2NvdW50cz1udWxsLFhvKHRoaXMscnMsbnVsbCksdGhpcy5fc3RhdGUuaXNVbmxvY2tlZD0hMSx0aGlzLl9zdGF0ZS5pc1Blcm1hbmVudGx5RGlzY29ubmVjdGVkPSEwKSx0aGlzLmVtaXQoXCJkaXNjb25uZWN0XCIsbil9fV9oYW5kbGVDaGFpbkNoYW5nZWQoe2NoYWluSWQ6ZX09e30pe3FvKGUpPyh0aGlzLl9oYW5kbGVDb25uZWN0KGUpLGUhPT1Kbyh0aGlzLG5zKSYmKFhvKHRoaXMsbnMsZSksdGhpcy5fc3RhdGUuaW5pdGlhbGl6ZWQmJnRoaXMuZW1pdChcImNoYWluQ2hhbmdlZFwiLEpvKHRoaXMsbnMpKSkpOnRoaXMuX2xvZy5lcnJvcigkci5lcnJvcnMuaW52YWxpZE5ldHdvcmtQYXJhbXMoKSx7Y2hhaW5JZDplfSl9X2hhbmRsZUFjY291bnRzQ2hhbmdlZChlLHQ9ITEpe2xldCBuPWU7QXJyYXkuaXNBcnJheShlKXx8KHRoaXMuX2xvZy5lcnJvcihcIk1ldGFNYXNrOiBSZWNlaXZlZCBpbnZhbGlkIGFjY291bnRzIHBhcmFtZXRlci4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIixlKSxuPVtdKTtmb3IoY29uc3QgdCBvZiBlKWlmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXt0aGlzLl9sb2cuZXJyb3IoXCJNZXRhTWFzazogUmVjZWl2ZWQgbm9uLXN0cmluZyBhY2NvdW50LiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLGUpLG49W107YnJlYWt9aWYoIW9zKHRoaXMuX3N0YXRlLmFjY291bnRzLG4pJiYodCYmbnVsbCE9PXRoaXMuX3N0YXRlLmFjY291bnRzJiZ0aGlzLl9sb2cuZXJyb3IoXCJNZXRhTWFzazogJ2V0aF9hY2NvdW50cycgdW5leHBlY3RlZGx5IHVwZGF0ZWQgYWNjb3VudHMuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsbiksdGhpcy5fc3RhdGUuYWNjb3VudHM9bixKbyh0aGlzLHJzKSE9PW5bMF0mJlhvKHRoaXMscnMsblswXXx8bnVsbCksdGhpcy5fc3RhdGUuaW5pdGlhbGl6ZWQpKXtjb25zdCBlPVsuLi5uXTt0aGlzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIixlKX19X2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCh7YWNjb3VudHM6ZSxpc1VubG9ja2VkOnR9PXt9KXtcImJvb2xlYW5cIj09dHlwZW9mIHQ/dCE9PXRoaXMuX3N0YXRlLmlzVW5sb2NrZWQmJih0aGlzLl9zdGF0ZS5pc1VubG9ja2VkPXQsdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKGU/P1tdKSk6dGhpcy5fbG9nLmVycm9yKFwiTWV0YU1hc2s6IFJlY2VpdmVkIGludmFsaWQgaXNVbmxvY2tlZCBwYXJhbWV0ZXIuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIpfX07bnM9bmV3IFdlYWtNYXAscnM9bmV3IFdlYWtNYXAsc3MuX2RlZmF1bHRTdGF0ZT17YWNjb3VudHM6bnVsbCxpc0Nvbm5lY3RlZDohMSxpc1VubG9ja2VkOiExLGluaXRpYWxpemVkOiExLGlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6ITF9O3ZhciBhcyxjcyxkcyxscyx1cyxocyxmcz1zcyxwcz17ZXhwb3J0czp7fX07ZnVuY3Rpb24gbXMoKXtyZXR1cm4gY3M/YXM6KGNzPTEsYXM9Yyl9ZnVuY3Rpb24gZ3MoKXtpZihscylyZXR1cm4gZHM7ZnVuY3Rpb24gZShlLHQpe3ZhciBuPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKHI9ci5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksbi5wdXNoLmFwcGx5KG4scil9cmV0dXJuIG59ZnVuY3Rpb24gdCh0KXtmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXt2YXIgaT1udWxsIT1hcmd1bWVudHNbbl0/YXJndW1lbnRzW25dOnt9O24lMj9lKE9iamVjdChpKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cih0LGUsaVtlXSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhpKSk6ZShPYmplY3QoaSkpLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpLGUpKX0pKX1yZXR1cm4gdH1mdW5jdGlvbiByKGUsdCxuKXtyZXR1cm4odD1vKHQpKWluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09bixlfWZ1bmN0aW9uIGkoZSx0LG4pe3JldHVybiB0JiZmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvKHIua2V5KSxyKX19KGUucHJvdG90eXBlLHQpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZX1mdW5jdGlvbiBvKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciBuPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwoZSx0fHxcImRlZmF1bHRcIik7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHIpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybihcInN0cmluZ1wiPT09dD9TdHJpbmc6TnVtYmVyKShlKX0oZSxcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdD90OlN0cmluZyh0KX1scz0xO3ZhciBzPW4uQnVmZmVyLGE9ZC5pbnNwZWN0LGM9YSYmYS5jdXN0b218fFwiaW5zcGVjdFwiO3JldHVybiBkcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuaGVhZD1udWxsLHRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9cmV0dXJuIGkoZSxbe2tleTpcInB1c2hcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17ZGF0YTplLG5leHQ6bnVsbH07dGhpcy5sZW5ndGg+MD90aGlzLnRhaWwubmV4dD10OnRoaXMuaGVhZD10LHRoaXMudGFpbD10LCsrdGhpcy5sZW5ndGh9fSx7a2V5OlwidW5zaGlmdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXtkYXRhOmUsbmV4dDp0aGlzLmhlYWR9OzA9PT10aGlzLmxlbmd0aCYmKHRoaXMudGFpbD10KSx0aGlzLmhlYWQ9dCwrK3RoaXMubGVuZ3RofX0se2tleTpcInNoaWZ0XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZigwIT09dGhpcy5sZW5ndGgpe3ZhciBlPXRoaXMuaGVhZC5kYXRhO3JldHVybiAxPT09dGhpcy5sZW5ndGg/dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsOnRoaXMuaGVhZD10aGlzLmhlYWQubmV4dCwtLXRoaXMubGVuZ3RoLGV9fX0se2tleTpcImNsZWFyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmhlYWQ9dGhpcy50YWlsPW51bGwsdGhpcy5sZW5ndGg9MH19LHtrZXk6XCJqb2luXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoMD09PXRoaXMubGVuZ3RoKXJldHVyblwiXCI7Zm9yKHZhciB0PXRoaXMuaGVhZCxuPVwiXCIrdC5kYXRhO3Q9dC5uZXh0OyluKz1lK3QuZGF0YTtyZXR1cm4gbn19LHtrZXk6XCJjb25jYXRcIix2YWx1ZTpmdW5jdGlvbihlKXtpZigwPT09dGhpcy5sZW5ndGgpcmV0dXJuIHMuYWxsb2MoMCk7Zm9yKHZhciB0LG4scixpPXMuYWxsb2NVbnNhZmUoZT4+PjApLG89dGhpcy5oZWFkLGE9MDtvOyl0PW8uZGF0YSxuPWkscj1hLHMucHJvdG90eXBlLmNvcHkuY2FsbCh0LG4sciksYSs9by5kYXRhLmxlbmd0aCxvPW8ubmV4dDtyZXR1cm4gaX19LHtrZXk6XCJjb25zdW1lXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gZTx0aGlzLmhlYWQuZGF0YS5sZW5ndGg/KG49dGhpcy5oZWFkLmRhdGEuc2xpY2UoMCxlKSx0aGlzLmhlYWQuZGF0YT10aGlzLmhlYWQuZGF0YS5zbGljZShlKSk6bj1lPT09dGhpcy5oZWFkLmRhdGEubGVuZ3RoP3RoaXMuc2hpZnQoKTp0P3RoaXMuX2dldFN0cmluZyhlKTp0aGlzLl9nZXRCdWZmZXIoZSksbn19LHtrZXk6XCJmaXJzdFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGVhZC5kYXRhfX0se2tleTpcIl9nZXRTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmhlYWQsbj0xLHI9dC5kYXRhO2ZvcihlLT1yLmxlbmd0aDt0PXQubmV4dDspe3ZhciBpPXQuZGF0YSxvPWU+aS5sZW5ndGg/aS5sZW5ndGg6ZTtpZihvPT09aS5sZW5ndGg/cis9aTpyKz1pLnNsaWNlKDAsZSksMD09PShlLT1vKSl7bz09PWkubGVuZ3RoPygrK24sdC5uZXh0P3RoaXMuaGVhZD10Lm5leHQ6dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsKToodGhpcy5oZWFkPXQsdC5kYXRhPWkuc2xpY2UobykpO2JyZWFrfSsrbn1yZXR1cm4gdGhpcy5sZW5ndGgtPW4scn19LHtrZXk6XCJfZ2V0QnVmZmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9cy5hbGxvY1Vuc2FmZShlKSxuPXRoaXMuaGVhZCxyPTE7Zm9yKG4uZGF0YS5jb3B5KHQpLGUtPW4uZGF0YS5sZW5ndGg7bj1uLm5leHQ7KXt2YXIgaT1uLmRhdGEsbz1lPmkubGVuZ3RoP2kubGVuZ3RoOmU7aWYoaS5jb3B5KHQsdC5sZW5ndGgtZSwwLG8pLDA9PT0oZS09bykpe289PT1pLmxlbmd0aD8oKytyLG4ubmV4dD90aGlzLmhlYWQ9bi5uZXh0OnRoaXMuaGVhZD10aGlzLnRhaWw9bnVsbCk6KHRoaXMuaGVhZD1uLG4uZGF0YT1pLnNsaWNlKG8pKTticmVha30rK3J9cmV0dXJuIHRoaXMubGVuZ3RoLT1yLHR9fSx7a2V5OmMsdmFsdWU6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gYSh0aGlzLHQodCh7fSxuKSx7fSx7ZGVwdGg6MCxjdXN0b21JbnNwZWN0OiExfSkpfX1dKSxlfSgpLGRzfWZ1bmN0aW9uIHZzKCl7aWYoaHMpcmV0dXJuIHVzO2Z1bmN0aW9uIGUoZSxyKXtuKGUsciksdChlKX1mdW5jdGlvbiB0KGUpe2UuX3dyaXRhYmxlU3RhdGUmJiFlLl93cml0YWJsZVN0YXRlLmVtaXRDbG9zZXx8ZS5fcmVhZGFibGVTdGF0ZSYmIWUuX3JlYWRhYmxlU3RhdGUuZW1pdENsb3NlfHxlLmVtaXQoXCJjbG9zZVwiKX1mdW5jdGlvbiBuKGUsdCl7ZS5lbWl0KFwiZXJyb3JcIix0KX1yZXR1cm4gaHM9MSx1cz17ZGVzdHJveTpmdW5jdGlvbihyLGkpe3ZhciBvPXRoaXMscz10aGlzLl9yZWFkYWJsZVN0YXRlJiZ0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCxhPXRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO3JldHVybiBzfHxhPyhpP2kocik6ciYmKHRoaXMuX3dyaXRhYmxlU3RhdGU/dGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWR8fCh0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMCxwcm9jZXNzLm5leHRUaWNrKG4sdGhpcyxyKSk6cHJvY2Vzcy5uZXh0VGljayhuLHRoaXMscikpLHRoaXMpOih0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9ITApLHRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD0hMCksdGhpcy5fZGVzdHJveShyfHxudWxsLChmdW5jdGlvbihuKXshaSYmbj9vLl93cml0YWJsZVN0YXRlP28uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkP3Byb2Nlc3MubmV4dFRpY2sodCxvKTooby5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQ9ITAscHJvY2Vzcy5uZXh0VGljayhlLG8sbikpOnByb2Nlc3MubmV4dFRpY2soZSxvLG4pOmk/KHByb2Nlc3MubmV4dFRpY2sodCxvKSxpKG4pKTpwcm9jZXNzLm5leHRUaWNrKHQsbyl9KSksdGhpcyl9LHVuZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD0hMSx0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmc9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZD0hMSx0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ9ITEpLHRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQ9ITEsdGhpcy5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSExKX0sZXJyb3JPckRlc3Ryb3k6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLl9yZWFkYWJsZVN0YXRlLHI9ZS5fd3JpdGFibGVTdGF0ZTtuJiZuLmF1dG9EZXN0cm95fHxyJiZyLmF1dG9EZXN0cm95P2UuZGVzdHJveSh0KTplLmVtaXQoXCJlcnJvclwiLHQpfX0sdXN9dmFyIHlzLEVzLGJzLHdzPXt9O2Z1bmN0aW9uIFNzKCl7aWYoeXMpcmV0dXJuIHdzO3lzPTE7Y29uc3QgZT17fTtmdW5jdGlvbiB0KHQsbixyKXtyfHwocj1FcnJvcik7Y2xhc3MgaSBleHRlbmRzIHJ7Y29uc3RydWN0b3IoZSx0LHIpe3N1cGVyKGZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygbj9uOm4oZSx0LHIpfShlLHQscikpfX1pLnByb3RvdHlwZS5uYW1lPXIubmFtZSxpLnByb3RvdHlwZS5jb2RlPXQsZVt0XT1pfWZ1bmN0aW9uIG4oZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKXtjb25zdCBuPWUubGVuZ3RoO3JldHVybiBlPWUubWFwKChlPT5TdHJpbmcoZSkpKSxuPjI/YG9uZSBvZiAke3R9ICR7ZS5zbGljZSgwLG4tMSkuam9pbihcIiwgXCIpfSwgb3IgYCtlW24tMV06Mj09PW4/YG9uZSBvZiAke3R9ICR7ZVswXX0gb3IgJHtlWzFdfWA6YG9mICR7dH0gJHtlWzBdfWB9cmV0dXJuYG9mICR7dH0gJHtTdHJpbmcoZSl9YH1yZXR1cm4gdChcIkVSUl9JTlZBTElEX09QVF9WQUxVRVwiLChmdW5jdGlvbihlLHQpe3JldHVybidUaGUgdmFsdWUgXCInK3QrJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcIicrZSsnXCInfSksVHlwZUVycm9yKSx0KFwiRVJSX0lOVkFMSURfQVJHX1RZUEVcIiwoZnVuY3Rpb24oZSx0LHIpe2xldCBpO3ZhciBvO2xldCBzO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYobz1cIm5vdCBcIix0LnN1YnN0cigwLG8ubGVuZ3RoKT09PW8pPyhpPVwibXVzdCBub3QgYmVcIix0PXQucmVwbGFjZSgvXm5vdCAvLFwiXCIpKTppPVwibXVzdCBiZVwiLGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4odm9pZCAwPT09bnx8bj5lLmxlbmd0aCkmJihuPWUubGVuZ3RoKSxlLnN1YnN0cmluZyhuLXQubGVuZ3RoLG4pPT09dH0oZSxcIiBhcmd1bWVudFwiKSlzPWBUaGUgJHtlfSAke2l9ICR7bih0LFwidHlwZVwiKX1gO2Vsc2V7Y29uc3Qgcj1mdW5jdGlvbihlLHQsbil7cmV0dXJuXCJudW1iZXJcIiE9dHlwZW9mIG4mJihuPTApLCEobit0Lmxlbmd0aD5lLmxlbmd0aCkmJi0xIT09ZS5pbmRleE9mKHQsbil9KGUsXCIuXCIpP1wicHJvcGVydHlcIjpcImFyZ3VtZW50XCI7cz1gVGhlIFwiJHtlfVwiICR7cn0gJHtpfSAke24odCxcInR5cGVcIil9YH1yZXR1cm4gcys9XCIuIFJlY2VpdmVkIHR5cGUgXCIrdHlwZW9mIHIsc30pLFR5cGVFcnJvciksdChcIkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0ZcIixcInN0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GXCIpLHQoXCJFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRFwiLChmdW5jdGlvbihlKXtyZXR1cm5cIlRoZSBcIitlK1wiIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWRcIn0pKSx0KFwiRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0VcIixcIlByZW1hdHVyZSBjbG9zZVwiKSx0KFwiRVJSX1NUUkVBTV9ERVNUUk9ZRURcIiwoZnVuY3Rpb24oZSl7cmV0dXJuXCJDYW5ub3QgY2FsbCBcIitlK1wiIGFmdGVyIGEgc3RyZWFtIHdhcyBkZXN0cm95ZWRcIn0pKSx0KFwiRVJSX01VTFRJUExFX0NBTExCQUNLXCIsXCJDYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXNcIiksdChcIkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEVcIixcIkNhbm5vdCBwaXBlLCBub3QgcmVhZGFibGVcIiksdChcIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EXCIsXCJ3cml0ZSBhZnRlciBlbmRcIiksdChcIkVSUl9TVFJFQU1fTlVMTF9WQUxVRVNcIixcIk1heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtXCIsVHlwZUVycm9yKSx0KFwiRVJSX1VOS05PV05fRU5DT0RJTkdcIiwoZnVuY3Rpb24oZSl7cmV0dXJuXCJVbmtub3duIGVuY29kaW5nOiBcIitlfSksVHlwZUVycm9yKSx0KFwiRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVFwiLFwic3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnRcIiksd3MuY29kZXM9ZSx3c31mdW5jdGlvbiBfcygpe2lmKGJzKXJldHVybiBFczticz0xO3ZhciBlPVNzKCkuY29kZXMuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO3JldHVybiBFcz17Z2V0SGlnaFdhdGVyTWFyazpmdW5jdGlvbih0LG4scixpKXt2YXIgbz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGwhPWUuaGlnaFdhdGVyTWFyaz9lLmhpZ2hXYXRlck1hcms6dD9lW25dOm51bGx9KG4saSxyKTtpZihudWxsIT1vKXtpZighaXNGaW5pdGUobyl8fE1hdGguZmxvb3IobykhPT1vfHxvPDApdGhyb3cgbmV3IGUoaT9yOlwiaGlnaFdhdGVyTWFya1wiLG8pO3JldHVybiBNYXRoLmZsb29yKG8pfXJldHVybiB0Lm9iamVjdE1vZGU/MTY6MTYzODR9fX12YXIgQ3MseHMsa3MsTXMsQXMsVHMsSXMsUHMsUnM9e2V4cG9ydHM6e319LE9zPXtleHBvcnRzOnt9fTtmdW5jdGlvbiBOcygpe2lmKHhzKXJldHVybiBScy5leHBvcnRzO3hzPTE7dHJ5e3ZhciBlPXJlcXVpcmUoXCJ1dGlsXCIpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUuaW5oZXJpdHMpdGhyb3dcIlwiO1JzLmV4cG9ydHM9ZS5pbmhlcml0c31jYXRjaChlKXtScy5leHBvcnRzPShDc3x8KENzPTEsXCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmNyZWF0ZT9Pcy5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dCYmKGUuc3VwZXJfPXQsZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSkpfTpPcy5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYodCl7ZS5zdXBlcl89dDt2YXIgbj1mdW5jdGlvbigpe307bi5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IG4sZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZX19KSxPcy5leHBvcnRzKX1yZXR1cm4gUnMuZXhwb3J0c31mdW5jdGlvbiBEcygpe2lmKFRzKXJldHVybiBBcztmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXM7dGhpcy5uZXh0PW51bGwsdGhpcy5lbnRyeT1udWxsLHRoaXMuZmluaXNoPWZ1bmN0aW9uKCl7IWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLmVudHJ5O2UuZW50cnk9bnVsbDtmb3IoO3I7KXt2YXIgaT1yLmNhbGxiYWNrO3QucGVuZGluZ2NiLS0saShuKSxyPXIubmV4dH10LmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0PWV9KHQsZSl9fXZhciB0O1RzPTEsQXM9QyxDLldyaXRhYmxlU3RhdGU9Xzt2YXIgcj17ZGVwcmVjYXRlOk1zP2tzOihNcz0xLGtzPWQuZGVwcmVjYXRlKX0saT1tcygpLG89bi5CdWZmZXIscz0odm9pZCAwIT09dT91OlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6e30pLlVpbnQ4QXJyYXl8fGZ1bmN0aW9uKCl7fTt2YXIgYSxjPXZzKCksbD1fcygpLmdldEhpZ2hXYXRlck1hcmssaD1TcygpLmNvZGVzLGY9aC5FUlJfSU5WQUxJRF9BUkdfVFlQRSxwPWguRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsbT1oLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxnPWguRVJSX1NUUkVBTV9DQU5OT1RfUElQRSx2PWguRVJSX1NUUkVBTV9ERVNUUk9ZRUQseT1oLkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMsRT1oLkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5ELGI9aC5FUlJfVU5LTk9XTl9FTkNPRElORyx3PWMuZXJyb3JPckRlc3Ryb3k7ZnVuY3Rpb24gUygpe31mdW5jdGlvbiBfKG4scixpKXt0PXR8fExzKCksbj1ufHx7fSxcImJvb2xlYW5cIiE9dHlwZW9mIGkmJihpPXIgaW5zdGFuY2VvZiB0KSx0aGlzLm9iamVjdE1vZGU9ISFuLm9iamVjdE1vZGUsaSYmKHRoaXMub2JqZWN0TW9kZT10aGlzLm9iamVjdE1vZGV8fCEhbi53cml0YWJsZU9iamVjdE1vZGUpLHRoaXMuaGlnaFdhdGVyTWFyaz1sKHRoaXMsbixcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLGkpLHRoaXMuZmluYWxDYWxsZWQ9ITEsdGhpcy5uZWVkRHJhaW49ITEsdGhpcy5lbmRpbmc9ITEsdGhpcy5lbmRlZD0hMSx0aGlzLmZpbmlzaGVkPSExLHRoaXMuZGVzdHJveWVkPSExO3ZhciBvPSExPT09bi5kZWNvZGVTdHJpbmdzO3RoaXMuZGVjb2RlU3RyaW5ncz0hbyx0aGlzLmRlZmF1bHRFbmNvZGluZz1uLmRlZmF1bHRFbmNvZGluZ3x8XCJ1dGY4XCIsdGhpcy5sZW5ndGg9MCx0aGlzLndyaXRpbmc9ITEsdGhpcy5jb3JrZWQ9MCx0aGlzLnN5bmM9ITAsdGhpcy5idWZmZXJQcm9jZXNzaW5nPSExLHRoaXMub253cml0ZT1mdW5jdGlvbihlKXshZnVuY3Rpb24oZSx0KXt2YXIgbj1lLl93cml0YWJsZVN0YXRlLHI9bi5zeW5jLGk9bi53cml0ZWNiO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpdGhyb3cgbmV3IG07aWYoZnVuY3Rpb24oZSl7ZS53cml0aW5nPSExLGUud3JpdGVjYj1udWxsLGUubGVuZ3RoLT1lLndyaXRlbGVuLGUud3JpdGVsZW49MH0obiksdCkhZnVuY3Rpb24oZSx0LG4scixpKXstLXQucGVuZGluZ2NiLG4/KHByb2Nlc3MubmV4dFRpY2soaSxyKSxwcm9jZXNzLm5leHRUaWNrKEksZSx0KSxlLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMCx3KGUscikpOihpKHIpLGUuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLHcoZSxyKSxJKGUsdCkpfShlLG4scix0LGkpO2Vsc2V7dmFyIG89QShuKXx8ZS5kZXN0cm95ZWQ7b3x8bi5jb3JrZWR8fG4uYnVmZmVyUHJvY2Vzc2luZ3x8IW4uYnVmZmVyZWRSZXF1ZXN0fHxNKGUsbikscj9wcm9jZXNzLm5leHRUaWNrKGssZSxuLG8saSk6ayhlLG4sbyxpKX19KHIsZSl9LHRoaXMud3JpdGVjYj1udWxsLHRoaXMud3JpdGVsZW49MCx0aGlzLmJ1ZmZlcmVkUmVxdWVzdD1udWxsLHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsLHRoaXMucGVuZGluZ2NiPTAsdGhpcy5wcmVmaW5pc2hlZD0hMSx0aGlzLmVycm9yRW1pdHRlZD0hMSx0aGlzLmVtaXRDbG9zZT0hMSE9PW4uZW1pdENsb3NlLHRoaXMuYXV0b0Rlc3Ryb3k9ISFuLmF1dG9EZXN0cm95LHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQ9MCx0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZT1uZXcgZSh0aGlzKX1mdW5jdGlvbiBDKGUpe3ZhciBuPXRoaXMgaW5zdGFuY2VvZih0PXR8fExzKCkpO2lmKCFuJiYhYS5jYWxsKEMsdGhpcykpcmV0dXJuIG5ldyBDKGUpO3RoaXMuX3dyaXRhYmxlU3RhdGU9bmV3IF8oZSx0aGlzLG4pLHRoaXMud3JpdGFibGU9ITAsZSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUud3JpdGUmJih0aGlzLl93cml0ZT1lLndyaXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLndyaXRldiYmKHRoaXMuX3dyaXRldj1lLndyaXRldiksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5kZXN0cm95JiYodGhpcy5fZGVzdHJveT1lLmRlc3Ryb3kpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZmluYWwmJih0aGlzLl9maW5hbD1lLmZpbmFsKSksaS5jYWxsKHRoaXMpfWZ1bmN0aW9uIHgoZSx0LG4scixpLG8scyl7dC53cml0ZWxlbj1yLHQud3JpdGVjYj1zLHQud3JpdGluZz0hMCx0LnN5bmM9ITAsdC5kZXN0cm95ZWQ/dC5vbndyaXRlKG5ldyB2KFwid3JpdGVcIikpOm4/ZS5fd3JpdGV2KGksdC5vbndyaXRlKTplLl93cml0ZShpLG8sdC5vbndyaXRlKSx0LnN5bmM9ITF9ZnVuY3Rpb24gayhlLHQsbixyKXtufHxmdW5jdGlvbihlLHQpezA9PT10Lmxlbmd0aCYmdC5uZWVkRHJhaW4mJih0Lm5lZWREcmFpbj0hMSxlLmVtaXQoXCJkcmFpblwiKSl9KGUsdCksdC5wZW5kaW5nY2ItLSxyKCksSShlLHQpfWZ1bmN0aW9uIE0odCxuKXtuLmJ1ZmZlclByb2Nlc3Npbmc9ITA7dmFyIHI9bi5idWZmZXJlZFJlcXVlc3Q7aWYodC5fd3JpdGV2JiZyJiZyLm5leHQpe3ZhciBpPW4uYnVmZmVyZWRSZXF1ZXN0Q291bnQsbz1uZXcgQXJyYXkoaSkscz1uLmNvcmtlZFJlcXVlc3RzRnJlZTtzLmVudHJ5PXI7Zm9yKHZhciBhPTAsYz0hMDtyOylvW2FdPXIsci5pc0J1Znx8KGM9ITEpLHI9ci5uZXh0LGErPTE7by5hbGxCdWZmZXJzPWMseCh0LG4sITAsbi5sZW5ndGgsbyxcIlwiLHMuZmluaXNoKSxuLnBlbmRpbmdjYisrLG4ubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsLHMubmV4dD8obi5jb3JrZWRSZXF1ZXN0c0ZyZWU9cy5uZXh0LHMubmV4dD1udWxsKTpuLmNvcmtlZFJlcXVlc3RzRnJlZT1uZXcgZShuKSxuLmJ1ZmZlcmVkUmVxdWVzdENvdW50PTB9ZWxzZXtmb3IoO3I7KXt2YXIgZD1yLmNodW5rLGw9ci5lbmNvZGluZyx1PXIuY2FsbGJhY2s7aWYoeCh0LG4sITEsbi5vYmplY3RNb2RlPzE6ZC5sZW5ndGgsZCxsLHUpLHI9ci5uZXh0LG4uYnVmZmVyZWRSZXF1ZXN0Q291bnQtLSxuLndyaXRpbmcpYnJlYWt9bnVsbD09PXImJihuLmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCl9bi5idWZmZXJlZFJlcXVlc3Q9cixuLmJ1ZmZlclByb2Nlc3Npbmc9ITF9ZnVuY3Rpb24gQShlKXtyZXR1cm4gZS5lbmRpbmcmJjA9PT1lLmxlbmd0aCYmbnVsbD09PWUuYnVmZmVyZWRSZXF1ZXN0JiYhZS5maW5pc2hlZCYmIWUud3JpdGluZ31mdW5jdGlvbiBUKGUsdCl7ZS5fZmluYWwoKGZ1bmN0aW9uKG4pe3QucGVuZGluZ2NiLS0sbiYmdyhlLG4pLHQucHJlZmluaXNoZWQ9ITAsZS5lbWl0KFwicHJlZmluaXNoXCIpLEkoZSx0KX0pKX1mdW5jdGlvbiBJKGUsdCl7dmFyIG49QSh0KTtpZihuJiYoZnVuY3Rpb24oZSx0KXt0LnByZWZpbmlzaGVkfHx0LmZpbmFsQ2FsbGVkfHwoXCJmdW5jdGlvblwiIT10eXBlb2YgZS5fZmluYWx8fHQuZGVzdHJveWVkPyh0LnByZWZpbmlzaGVkPSEwLGUuZW1pdChcInByZWZpbmlzaFwiKSk6KHQucGVuZGluZ2NiKyssdC5maW5hbENhbGxlZD0hMCxwcm9jZXNzLm5leHRUaWNrKFQsZSx0KSkpfShlLHQpLDA9PT10LnBlbmRpbmdjYiYmKHQuZmluaXNoZWQ9ITAsZS5lbWl0KFwiZmluaXNoXCIpLHQuYXV0b0Rlc3Ryb3kpKSl7dmFyIHI9ZS5fcmVhZGFibGVTdGF0ZTsoIXJ8fHIuYXV0b0Rlc3Ryb3kmJnIuZW5kRW1pdHRlZCkmJmUuZGVzdHJveSgpfXJldHVybiBufXJldHVybiBOcygpKEMsaSksXy5wcm90b3R5cGUuZ2V0QnVmZmVyPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuYnVmZmVyZWRSZXF1ZXN0LHQ9W107ZTspdC5wdXNoKGUpLGU9ZS5uZXh0O3JldHVybiB0fSxmdW5jdGlvbigpe3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoXy5wcm90b3R5cGUsXCJidWZmZXJcIix7Z2V0OnIuZGVwcmVjYXRlKChmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEJ1ZmZlcigpfSksXCJfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciBpbnN0ZWFkLlwiLFwiREVQMDAwM1wiKX0pfWNhdGNoKGUpe319KCksXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaGFzSW5zdGFuY2UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdPyhhPUZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLFN5bWJvbC5oYXNJbnN0YW5jZSx7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuISFhLmNhbGwodGhpcyxlKXx8dGhpcz09PUMmJihlJiZlLl93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgXyl9fSkpOmE9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0aGlzfSxDLnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKCl7dyh0aGlzLG5ldyBnKX0sQy5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9dGhpcy5fd3JpdGFibGVTdGF0ZSxhPSExLGM9IWkub2JqZWN0TW9kZSYmKHI9ZSxvLmlzQnVmZmVyKHIpfHxyIGluc3RhbmNlb2Ygcyk7cmV0dXJuIGMmJiFvLmlzQnVmZmVyKGUpJiYoZT1mdW5jdGlvbihlKXtyZXR1cm4gby5mcm9tKGUpfShlKSksXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG49dCx0PW51bGwpLGM/dD1cImJ1ZmZlclwiOnR8fCh0PWkuZGVmYXVsdEVuY29kaW5nKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiYobj1TKSxpLmVuZGluZz9mdW5jdGlvbihlLHQpe3ZhciBuPW5ldyBFO3coZSxuKSxwcm9jZXNzLm5leHRUaWNrKHQsbil9KHRoaXMsbik6KGN8fGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpO3JldHVybiBudWxsPT09bj9pPW5ldyB5Olwic3RyaW5nXCI9PXR5cGVvZiBufHx0Lm9iamVjdE1vZGV8fChpPW5ldyBmKFwiY2h1bmtcIixbXCJzdHJpbmdcIixcIkJ1ZmZlclwiXSxuKSksIWl8fCh3KGUsaSkscHJvY2Vzcy5uZXh0VGljayhyLGkpLCExKX0odGhpcyxpLGUsbikpJiYoaS5wZW5kaW5nY2IrKyxhPWZ1bmN0aW9uKGUsdCxuLHIsaSxzKXtpZighbil7dmFyIGE9ZnVuY3Rpb24oZSx0LG4pe2Uub2JqZWN0TW9kZXx8ITE9PT1lLmRlY29kZVN0cmluZ3N8fFwic3RyaW5nXCIhPXR5cGVvZiB0fHwodD1vLmZyb20odCxuKSk7cmV0dXJuIHR9KHQscixpKTtyIT09YSYmKG49ITAsaT1cImJ1ZmZlclwiLHI9YSl9dmFyIGM9dC5vYmplY3RNb2RlPzE6ci5sZW5ndGg7dC5sZW5ndGgrPWM7dmFyIGQ9dC5sZW5ndGg8dC5oaWdoV2F0ZXJNYXJrO2R8fCh0Lm5lZWREcmFpbj0hMCk7aWYodC53cml0aW5nfHx0LmNvcmtlZCl7dmFyIGw9dC5sYXN0QnVmZmVyZWRSZXF1ZXN0O3QubGFzdEJ1ZmZlcmVkUmVxdWVzdD17Y2h1bms6cixlbmNvZGluZzppLGlzQnVmOm4sY2FsbGJhY2s6cyxuZXh0Om51bGx9LGw/bC5uZXh0PXQubGFzdEJ1ZmZlcmVkUmVxdWVzdDp0LmJ1ZmZlcmVkUmVxdWVzdD10Lmxhc3RCdWZmZXJlZFJlcXVlc3QsdC5idWZmZXJlZFJlcXVlc3RDb3VudCs9MX1lbHNlIHgoZSx0LCExLGMscixpLHMpO3JldHVybiBkfSh0aGlzLGksYyxlLHQsbikpLGF9LEMucHJvdG90eXBlLmNvcms9ZnVuY3Rpb24oKXt0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrfSxDLnByb3RvdHlwZS51bmNvcms9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl93cml0YWJsZVN0YXRlO2UuY29ya2VkJiYoZS5jb3JrZWQtLSxlLndyaXRpbmd8fGUuY29ya2VkfHxlLmJ1ZmZlclByb2Nlc3Npbmd8fCFlLmJ1ZmZlcmVkUmVxdWVzdHx8TSh0aGlzLGUpKX0sQy5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1lLnRvTG93ZXJDYXNlKCkpLCEoW1wiaGV4XCIsXCJ1dGY4XCIsXCJ1dGYtOFwiLFwiYXNjaWlcIixcImJpbmFyeVwiLFwiYmFzZTY0XCIsXCJ1Y3MyXCIsXCJ1Y3MtMlwiLFwidXRmMTZsZVwiLFwidXRmLTE2bGVcIixcInJhd1wiXS5pbmRleE9mKChlK1wiXCIpLnRvTG93ZXJDYXNlKCkpPi0xKSl0aHJvdyBuZXcgYihlKTtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2Rpbmc9ZSx0aGlzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsXCJ3cml0YWJsZUJ1ZmZlclwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLnByb3RvdHlwZSxcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksQy5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKGUsdCxuKXtuKG5ldyBwKFwiX3dyaXRlKClcIikpfSxDLnByb3RvdHlwZS5fd3JpdGV2PW51bGwsQy5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLl93cml0YWJsZVN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGU/KG49ZSxlPW51bGwsdD1udWxsKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYobj10LHQ9bnVsbCksbnVsbCE9ZSYmdGhpcy53cml0ZShlLHQpLHIuY29ya2VkJiYoci5jb3JrZWQ9MSx0aGlzLnVuY29yaygpKSxyLmVuZGluZ3x8ZnVuY3Rpb24oZSx0LG4pe3QuZW5kaW5nPSEwLEkoZSx0KSxuJiYodC5maW5pc2hlZD9wcm9jZXNzLm5leHRUaWNrKG4pOmUub25jZShcImZpbmlzaFwiLG4pKTt0LmVuZGVkPSEwLGUud3JpdGFibGU9ITF9KHRoaXMscixuKSx0aGlzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsXCJ3cml0YWJsZUxlbmd0aFwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmxlbmd0aH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsXCJkZXN0cm95ZWRcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fd3JpdGFibGVTdGF0ZSYmdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9ZSl9fSksQy5wcm90b3R5cGUuZGVzdHJveT1jLmRlc3Ryb3ksQy5wcm90b3R5cGUuX3VuZGVzdHJveT1jLnVuZGVzdHJveSxDLnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbihlLHQpe3QoZSl9LEFzfWZ1bmN0aW9uIExzKCl7aWYoUHMpcmV0dXJuIElzO1BzPTE7dmFyIGU9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgbiBpbiBlKXQucHVzaChuKTtyZXR1cm4gdH07SXM9czt2YXIgdD1vYSgpLG49RHMoKTtOcygpKHMsdCk7Zm9yKHZhciByPWUobi5wcm90b3R5cGUpLGk9MDtpPHIubGVuZ3RoO2krKyl7dmFyIG89cltpXTtzLnByb3RvdHlwZVtvXXx8KHMucHJvdG90eXBlW29dPW4ucHJvdG90eXBlW29dKX1mdW5jdGlvbiBzKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHMpKXJldHVybiBuZXcgcyhlKTt0LmNhbGwodGhpcyxlKSxuLmNhbGwodGhpcyxlKSx0aGlzLmFsbG93SGFsZk9wZW49ITAsZSYmKCExPT09ZS5yZWFkYWJsZSYmKHRoaXMucmVhZGFibGU9ITEpLCExPT09ZS53cml0YWJsZSYmKHRoaXMud3JpdGFibGU9ITEpLCExPT09ZS5hbGxvd0hhbGZPcGVuJiYodGhpcy5hbGxvd0hhbGZPcGVuPSExLHRoaXMub25jZShcImVuZFwiLGEpKSl9ZnVuY3Rpb24gYSgpe3RoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWR8fHByb2Nlc3MubmV4dFRpY2soYyx0aGlzKX1mdW5jdGlvbiBjKGUpe2UuZW5kKCl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSxcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHMucHJvdG90eXBlLFwid3JpdGFibGVCdWZmZXJcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSYmdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocy5wcm90b3R5cGUsXCJ3cml0YWJsZUxlbmd0aFwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmxlbmd0aH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocy5wcm90b3R5cGUsXCJkZXN0cm95ZWRcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fcmVhZGFibGVTdGF0ZSYmdm9pZCAwIT09dGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkJiZ0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCl9LHNldDpmdW5jdGlvbihlKXt2b2lkIDAhPT10aGlzLl9yZWFkYWJsZVN0YXRlJiZ2b2lkIDAhPT10aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9ZSx0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD1lKX19KSxJc312YXIgQnMsS3MsanMsJHMsSHMsVXMsRnMscXMsenMsV3MsVnMsR3MsWXMsWnMsSnMsUXMsWHM9e30sZWE9e2V4cG9ydHM6e319O2Z1bmN0aW9uIHRhKCl7aWYoS3MpcmV0dXJuIFhzO0tzPTE7dmFyIGU9KEJzfHwoQnM9MSxmdW5jdGlvbihlLHQpe3ZhciByPW4saT1yLkJ1ZmZlcjtmdW5jdGlvbiBvKGUsdCl7Zm9yKHZhciBuIGluIGUpdFtuXT1lW25dfWZ1bmN0aW9uIHMoZSx0LG4pe3JldHVybiBpKGUsdCxuKX1pLmZyb20mJmkuYWxsb2MmJmkuYWxsb2NVbnNhZmUmJmkuYWxsb2NVbnNhZmVTbG93P2UuZXhwb3J0cz1yOihvKHIsdCksdC5CdWZmZXI9cykscy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShpLnByb3RvdHlwZSksbyhpLHMpLHMuZnJvbT1mdW5jdGlvbihlLHQsbil7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyXCIpO3JldHVybiBpKGUsdCxuKX0scy5hbGxvYz1mdW5jdGlvbihlLHQsbil7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7dmFyIHI9aShlKTtyZXR1cm4gdm9pZCAwIT09dD9cInN0cmluZ1wiPT10eXBlb2Ygbj9yLmZpbGwodCxuKTpyLmZpbGwodCk6ci5maWxsKDApLHJ9LHMuYWxsb2NVbnNhZmU9ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7cmV0dXJuIGkoZSl9LHMuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyXCIpO3JldHVybiByLlNsb3dCdWZmZXIoZSl9fShlYSxlYS5leHBvcnRzKSksZWEuZXhwb3J0cykuQnVmZmVyLHQ9ZS5pc0VuY29kaW5nfHxmdW5jdGlvbihlKXtzd2l0Y2goKGU9XCJcIitlKSYmZS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJoZXhcIjpjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlXCJhc2NpaVwiOmNhc2VcImJpbmFyeVwiOmNhc2VcImJhc2U2NFwiOmNhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOmNhc2VcInJhd1wiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fTtmdW5jdGlvbiByKG4pe3ZhciByO3N3aXRjaCh0aGlzLmVuY29kaW5nPWZ1bmN0aW9uKG4pe3ZhciByPWZ1bmN0aW9uKGUpe2lmKCFlKXJldHVyblwidXRmOFwiO2Zvcih2YXIgdDs7KXN3aXRjaChlKXtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm5cInV0ZjhcIjtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm5cInV0ZjE2bGVcIjtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm5cImxhdGluMVwiO2Nhc2VcImJhc2U2NFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwiaGV4XCI6cmV0dXJuIGU7ZGVmYXVsdDppZih0KXJldHVybjtlPShcIlwiK2UpLnRvTG93ZXJDYXNlKCksdD0hMH19KG4pO2lmKFwic3RyaW5nXCIhPXR5cGVvZiByJiYoZS5pc0VuY29kaW5nPT09dHx8IXQobikpKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK24pO3JldHVybiByfHxufShuKSx0aGlzLmVuY29kaW5nKXtjYXNlXCJ1dGYxNmxlXCI6dGhpcy50ZXh0PXMsdGhpcy5lbmQ9YSxyPTQ7YnJlYWs7Y2FzZVwidXRmOFwiOnRoaXMuZmlsbExhc3Q9byxyPTQ7YnJlYWs7Y2FzZVwiYmFzZTY0XCI6dGhpcy50ZXh0PWMsdGhpcy5lbmQ9ZCxyPTM7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gdGhpcy53cml0ZT1sLHZvaWQodGhpcy5lbmQ9dSl9dGhpcy5sYXN0TmVlZD0wLHRoaXMubGFzdFRvdGFsPTAsdGhpcy5sYXN0Q2hhcj1lLmFsbG9jVW5zYWZlKHIpfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIGU8PTEyNz8wOmU+PjU9PTY/MjplPj40PT0xND8zOmU+PjM9PTMwPzQ6ZT4+Nj09Mj8tMTotMn1mdW5jdGlvbiBvKGUpe3ZhciB0PXRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQsbj1mdW5jdGlvbihlLHQsbil7aWYoMTI4IT0oMTkyJnRbMF0pKXJldHVybiBlLmxhc3ROZWVkPTAsXCLvv71cIjtpZihlLmxhc3ROZWVkPjEmJnQubGVuZ3RoPjEpe2lmKDEyOCE9KDE5MiZ0WzFdKSlyZXR1cm4gZS5sYXN0TmVlZD0xLFwi77+9XCI7aWYoZS5sYXN0TmVlZD4yJiZ0Lmxlbmd0aD4yJiYxMjghPSgxOTImdFsyXSkpcmV0dXJuIGUubGFzdE5lZWQ9MixcIu+/vVwifX0odGhpcyxlKTtyZXR1cm4gdm9pZCAwIT09bj9uOnRoaXMubGFzdE5lZWQ8PWUubGVuZ3RoPyhlLmNvcHkodGhpcy5sYXN0Q2hhcix0LDAsdGhpcy5sYXN0TmVlZCksdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLDAsdGhpcy5sYXN0VG90YWwpKTooZS5jb3B5KHRoaXMubGFzdENoYXIsdCwwLGUubGVuZ3RoKSx2b2lkKHRoaXMubGFzdE5lZWQtPWUubGVuZ3RoKSl9ZnVuY3Rpb24gcyhlLHQpe2lmKChlLmxlbmd0aC10KSUyPT0wKXt2YXIgbj1lLnRvU3RyaW5nKFwidXRmMTZsZVwiLHQpO2lmKG4pe3ZhciByPW4uY2hhckNvZGVBdChuLmxlbmd0aC0xKTtpZihyPj01NTI5NiYmcjw9NTYzMTkpcmV0dXJuIHRoaXMubGFzdE5lZWQ9Mix0aGlzLmxhc3RUb3RhbD00LHRoaXMubGFzdENoYXJbMF09ZVtlLmxlbmd0aC0yXSx0aGlzLmxhc3RDaGFyWzFdPWVbZS5sZW5ndGgtMV0sbi5zbGljZSgwLC0xKX1yZXR1cm4gbn1yZXR1cm4gdGhpcy5sYXN0TmVlZD0xLHRoaXMubGFzdFRvdGFsPTIsdGhpcy5sYXN0Q2hhclswXT1lW2UubGVuZ3RoLTFdLGUudG9TdHJpbmcoXCJ1dGYxNmxlXCIsdCxlLmxlbmd0aC0xKX1mdW5jdGlvbiBhKGUpe3ZhciB0PWUmJmUubGVuZ3RoP3RoaXMud3JpdGUoZSk6XCJcIjtpZih0aGlzLmxhc3ROZWVkKXt2YXIgbj10aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkO3JldHVybiB0K3RoaXMubGFzdENoYXIudG9TdHJpbmcoXCJ1dGYxNmxlXCIsMCxuKX1yZXR1cm4gdH1mdW5jdGlvbiBjKGUsdCl7dmFyIG49KGUubGVuZ3RoLXQpJTM7cmV0dXJuIDA9PT1uP2UudG9TdHJpbmcoXCJiYXNlNjRcIix0KToodGhpcy5sYXN0TmVlZD0zLW4sdGhpcy5sYXN0VG90YWw9MywxPT09bj90aGlzLmxhc3RDaGFyWzBdPWVbZS5sZW5ndGgtMV06KHRoaXMubGFzdENoYXJbMF09ZVtlLmxlbmd0aC0yXSx0aGlzLmxhc3RDaGFyWzFdPWVbZS5sZW5ndGgtMV0pLGUudG9TdHJpbmcoXCJiYXNlNjRcIix0LGUubGVuZ3RoLW4pKX1mdW5jdGlvbiBkKGUpe3ZhciB0PWUmJmUubGVuZ3RoP3RoaXMud3JpdGUoZSk6XCJcIjtyZXR1cm4gdGhpcy5sYXN0TmVlZD90K3RoaXMubGFzdENoYXIudG9TdHJpbmcoXCJiYXNlNjRcIiwwLDMtdGhpcy5sYXN0TmVlZCk6dH1mdW5jdGlvbiBsKGUpe3JldHVybiBlLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIGUmJmUubGVuZ3RoP3RoaXMud3JpdGUoZSk6XCJcIn1yZXR1cm4gWHMuU3RyaW5nRGVjb2Rlcj1yLHIucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKGUpe2lmKDA9PT1lLmxlbmd0aClyZXR1cm5cIlwiO3ZhciB0LG47aWYodGhpcy5sYXN0TmVlZCl7aWYodm9pZCAwPT09KHQ9dGhpcy5maWxsTGFzdChlKSkpcmV0dXJuXCJcIjtuPXRoaXMubGFzdE5lZWQsdGhpcy5sYXN0TmVlZD0wfWVsc2Ugbj0wO3JldHVybiBuPGUubGVuZ3RoP3Q/dCt0aGlzLnRleHQoZSxuKTp0aGlzLnRleHQoZSxuKTp0fHxcIlwifSxyLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5sZW5ndGg/dGhpcy53cml0ZShlKTpcIlwiO3JldHVybiB0aGlzLmxhc3ROZWVkP3QrXCLvv71cIjp0fSxyLnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQubGVuZ3RoLTE7aWYocjxuKXJldHVybiAwO3ZhciBvPWkodFtyXSk7aWYobz49MClyZXR1cm4gbz4wJiYoZS5sYXN0TmVlZD1vLTEpLG87aWYoLS1yPG58fC0yPT09bylyZXR1cm4gMDtpZihvPWkodFtyXSksbz49MClyZXR1cm4gbz4wJiYoZS5sYXN0TmVlZD1vLTIpLG87aWYoLS1yPG58fC0yPT09bylyZXR1cm4gMDtpZihvPWkodFtyXSksbz49MClyZXR1cm4gbz4wJiYoMj09PW8/bz0wOmUubGFzdE5lZWQ9by0zKSxvO3JldHVybiAwfSh0aGlzLGUsdCk7aWYoIXRoaXMubGFzdE5lZWQpcmV0dXJuIGUudG9TdHJpbmcoXCJ1dGY4XCIsdCk7dGhpcy5sYXN0VG90YWw9bjt2YXIgcj1lLmxlbmd0aC0obi10aGlzLmxhc3ROZWVkKTtyZXR1cm4gZS5jb3B5KHRoaXMubGFzdENoYXIsMCxyKSxlLnRvU3RyaW5nKFwidXRmOFwiLHQscil9LHIucHJvdG90eXBlLmZpbGxMYXN0PWZ1bmN0aW9uKGUpe2lmKHRoaXMubGFzdE5lZWQ8PWUubGVuZ3RoKXJldHVybiBlLmNvcHkodGhpcy5sYXN0Q2hhcix0aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkLDAsdGhpcy5sYXN0TmVlZCksdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLDAsdGhpcy5sYXN0VG90YWwpO2UuY29weSh0aGlzLmxhc3RDaGFyLHRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQsMCxlLmxlbmd0aCksdGhpcy5sYXN0TmVlZC09ZS5sZW5ndGh9LFhzfWZ1bmN0aW9uIG5hKCl7aWYoJHMpcmV0dXJuIGpzOyRzPTE7dmFyIGU9U3MoKS5jb2Rlcy5FUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRTtmdW5jdGlvbiB0KCl7fXJldHVybiBqcz1mdW5jdGlvbiBuKHIsaSxvKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBpKXJldHVybiBuKHIsbnVsbCxpKTtpfHwoaT17fSksbz1mdW5jdGlvbihlKXt2YXIgdD0hMTtyZXR1cm4gZnVuY3Rpb24oKXtpZighdCl7dD0hMDtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShuKSxpPTA7aTxuO2krKylyW2ldPWFyZ3VtZW50c1tpXTtlLmFwcGx5KHRoaXMscil9fX0ob3x8dCk7dmFyIHM9aS5yZWFkYWJsZXx8ITEhPT1pLnJlYWRhYmxlJiZyLnJlYWRhYmxlLGE9aS53cml0YWJsZXx8ITEhPT1pLndyaXRhYmxlJiZyLndyaXRhYmxlLGM9ZnVuY3Rpb24oKXtyLndyaXRhYmxlfHxsKCl9LGQ9ci5fd3JpdGFibGVTdGF0ZSYmci5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCxsPWZ1bmN0aW9uKCl7YT0hMSxkPSEwLHN8fG8uY2FsbChyKX0sdT1yLl9yZWFkYWJsZVN0YXRlJiZyLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQsaD1mdW5jdGlvbigpe3M9ITEsdT0hMCxhfHxvLmNhbGwocil9LGY9ZnVuY3Rpb24oZSl7by5jYWxsKHIsZSl9LHA9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcyYmIXU/KHIuX3JlYWRhYmxlU3RhdGUmJnIuX3JlYWRhYmxlU3RhdGUuZW5kZWR8fCh0PW5ldyBlKSxvLmNhbGwocix0KSk6YSYmIWQ/KHIuX3dyaXRhYmxlU3RhdGUmJnIuX3dyaXRhYmxlU3RhdGUuZW5kZWR8fCh0PW5ldyBlKSxvLmNhbGwocix0KSk6dm9pZCAwfSxtPWZ1bmN0aW9uKCl7ci5yZXEub24oXCJmaW5pc2hcIixsKX07cmV0dXJuIWZ1bmN0aW9uKGUpe3JldHVybiBlLnNldEhlYWRlciYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5hYm9ydH0ocik/YSYmIXIuX3dyaXRhYmxlU3RhdGUmJihyLm9uKFwiZW5kXCIsYyksci5vbihcImNsb3NlXCIsYykpOihyLm9uKFwiY29tcGxldGVcIixsKSxyLm9uKFwiYWJvcnRcIixwKSxyLnJlcT9tKCk6ci5vbihcInJlcXVlc3RcIixtKSksci5vbihcImVuZFwiLGgpLHIub24oXCJmaW5pc2hcIixsKSwhMSE9PWkuZXJyb3ImJnIub24oXCJlcnJvclwiLGYpLHIub24oXCJjbG9zZVwiLHApLGZ1bmN0aW9uKCl7ci5yZW1vdmVMaXN0ZW5lcihcImNvbXBsZXRlXCIsbCksci5yZW1vdmVMaXN0ZW5lcihcImFib3J0XCIscCksci5yZW1vdmVMaXN0ZW5lcihcInJlcXVlc3RcIixtKSxyLnJlcSYmci5yZXEucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixsKSxyLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsYyksci5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsYyksci5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLGwpLHIucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixoKSxyLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixmKSxyLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixwKX19LGpzfWZ1bmN0aW9uIHJhKCl7aWYoVXMpcmV0dXJuIEhzO3ZhciBlO2Z1bmN0aW9uIHQoZSx0LG4pe3JldHVybih0PWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciBuPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwoZSx0fHxcImRlZmF1bHRcIik7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHIpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybihcInN0cmluZ1wiPT09dD9TdHJpbmc6TnVtYmVyKShlKX0oZSxcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdD90OlN0cmluZyh0KX0odCkpaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1uLGV9VXM9MTt2YXIgbj1uYSgpLHI9U3ltYm9sKFwibGFzdFJlc29sdmVcIiksaT1TeW1ib2woXCJsYXN0UmVqZWN0XCIpLG89U3ltYm9sKFwiZXJyb3JcIikscz1TeW1ib2woXCJlbmRlZFwiKSxhPVN5bWJvbChcImxhc3RQcm9taXNlXCIpLGM9U3ltYm9sKFwiaGFuZGxlUHJvbWlzZVwiKSxkPVN5bWJvbChcInN0cmVhbVwiKTtmdW5jdGlvbiBsKGUsdCl7cmV0dXJue3ZhbHVlOmUsZG9uZTp0fX1mdW5jdGlvbiB1KGUpe3ZhciB0PWVbcl07aWYobnVsbCE9PXQpe3ZhciBuPWVbZF0ucmVhZCgpO251bGwhPT1uJiYoZVthXT1udWxsLGVbcl09bnVsbCxlW2ldPW51bGwsdChsKG4sITEpKSl9fWZ1bmN0aW9uIGgoZSl7cHJvY2Vzcy5uZXh0VGljayh1LGUpfXZhciBmPU9iamVjdC5nZXRQcm90b3R5cGVPZigoZnVuY3Rpb24oKXt9KSkscD1PYmplY3Quc2V0UHJvdG90eXBlT2YoKHQoZT17Z2V0IHN0cmVhbSgpe3JldHVybiB0aGlzW2RdfSxuZXh0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXNbb107aWYobnVsbCE9PXQpcmV0dXJuIFByb21pc2UucmVqZWN0KHQpO2lmKHRoaXNbc10pcmV0dXJuIFByb21pc2UucmVzb2x2ZShsKHZvaWQgMCwhMCkpO2lmKHRoaXNbZF0uZGVzdHJveWVkKXJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxuKXtwcm9jZXNzLm5leHRUaWNrKChmdW5jdGlvbigpe2Vbb10/bihlW29dKTp0KGwodm9pZCAwLCEwKSl9KSl9KSk7dmFyIG4scj10aGlzW2FdO2lmKHIpbj1uZXcgUHJvbWlzZShmdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihuLHIpe2UudGhlbigoZnVuY3Rpb24oKXt0W3NdP24obCh2b2lkIDAsITApKTp0W2NdKG4scil9KSxyKX19KHIsdGhpcykpO2Vsc2V7dmFyIGk9dGhpc1tkXS5yZWFkKCk7aWYobnVsbCE9PWkpcmV0dXJuIFByb21pc2UucmVzb2x2ZShsKGksITEpKTtuPW5ldyBQcm9taXNlKHRoaXNbY10pfXJldHVybiB0aGlzW2FdPW4sbn19LFN5bWJvbC5hc3luY0l0ZXJhdG9yLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpLHQoZSxcInJldHVyblwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LG4pe2VbZF0uZGVzdHJveShudWxsLChmdW5jdGlvbihlKXtlP24oZSk6dChsKHZvaWQgMCwhMCkpfSkpfSkpfSkpLGUpLGYpO3JldHVybiBIcz1mdW5jdGlvbihlKXt2YXIgdSxmPU9iamVjdC5jcmVhdGUocCwodCh1PXt9LGQse3ZhbHVlOmUsd3JpdGFibGU6ITB9KSx0KHUscix7dmFsdWU6bnVsbCx3cml0YWJsZTohMH0pLHQodSxpLHt2YWx1ZTpudWxsLHdyaXRhYmxlOiEwfSksdCh1LG8se3ZhbHVlOm51bGwsd3JpdGFibGU6ITB9KSx0KHUscyx7dmFsdWU6ZS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkLHdyaXRhYmxlOiEwfSksdCh1LGMse3ZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZltkXS5yZWFkKCk7bj8oZlthXT1udWxsLGZbcl09bnVsbCxmW2ldPW51bGwsZShsKG4sITEpKSk6KGZbcl09ZSxmW2ldPXQpfSx3cml0YWJsZTohMH0pLHUpKTtyZXR1cm4gZlthXT1udWxsLG4oZSwoZnVuY3Rpb24oZSl7aWYoZSYmXCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRVwiIT09ZS5jb2RlKXt2YXIgdD1mW2ldO3JldHVybiBudWxsIT09dCYmKGZbYV09bnVsbCxmW3JdPW51bGwsZltpXT1udWxsLHQoZSkpLHZvaWQoZltvXT1lKX12YXIgbj1mW3JdO251bGwhPT1uJiYoZlthXT1udWxsLGZbcl09bnVsbCxmW2ldPW51bGwsbihsKHZvaWQgMCwhMCkpKSxmW3NdPSEwfSkpLGUub24oXCJyZWFkYWJsZVwiLGguYmluZChudWxsLGYpKSxmfSxIc31mdW5jdGlvbiBpYSgpe2lmKHFzKXJldHVybiBGcztmdW5jdGlvbiBlKGUsdCxuLHIsaSxvLHMpe3RyeXt2YXIgYT1lW29dKHMpLGM9YS52YWx1ZX1jYXRjaChlKXtyZXR1cm4gdm9pZCBuKGUpfWEuZG9uZT90KGMpOlByb21pc2UucmVzb2x2ZShjKS50aGVuKHIsaSl9ZnVuY3Rpb24gdChlLHQpe3ZhciBuPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKHI9ci5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksbi5wdXNoLmFwcGx5KG4scil9cmV0dXJuIG59ZnVuY3Rpb24gbihlLHQsbil7cmV0dXJuKHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuIGU7dmFyIG49ZVtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbChlLHR8fFwiZGVmYXVsdFwiKTtpZihcIm9iamVjdFwiIT10eXBlb2YgcilyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuKFwic3RyaW5nXCI9PT10P1N0cmluZzpOdW1iZXIpKGUpfShlLFwic3RyaW5nXCIpO3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0P3Q6U3RyaW5nKHQpfSh0KSlpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOm4sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPW4sZX1xcz0xO3ZhciByPVNzKCkuY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEU7cmV0dXJuIEZzPWZ1bmN0aW9uKGksbyxzKXt2YXIgYTtpZihvJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLm5leHQpYT1vO2Vsc2UgaWYobyYmb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0pYT1vW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO2Vsc2V7aWYoIW98fCFvW1N5bWJvbC5pdGVyYXRvcl0pdGhyb3cgbmV3IHIoXCJpdGVyYWJsZVwiLFtcIkl0ZXJhYmxlXCJdLG8pO2E9b1tTeW1ib2wuaXRlcmF0b3JdKCl9dmFyIGM9bmV3IGkoZnVuY3Rpb24oZSl7Zm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dmFyIGk9bnVsbCE9YXJndW1lbnRzW3JdP2FyZ3VtZW50c1tyXTp7fTtyJTI/dChPYmplY3QoaSksITApLmZvckVhY2goKGZ1bmN0aW9uKHQpe24oZSx0LGlbdF0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoaSkpOnQoT2JqZWN0KGkpKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaSx0KSl9KSl9cmV0dXJuIGV9KHtvYmplY3RNb2RlOiEwfSxzKSksZD0hMTtmdW5jdGlvbiBsKCl7cmV0dXJuIHUuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIHUoKXt2YXIgdDtyZXR1cm4gdD1mdW5jdGlvbiooKXt0cnl7dmFyIGU9eWllbGQgYS5uZXh0KCksdD1lLnZhbHVlO2UuZG9uZT9jLnB1c2gobnVsbCk6Yy5wdXNoKHlpZWxkIHQpP2woKTpkPSExfWNhdGNoKGUpe2MuZGVzdHJveShlKX19LHU9ZnVuY3Rpb24oKXt2YXIgbj10aGlzLHI9YXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oaSxvKXt2YXIgcz10LmFwcGx5KG4scik7ZnVuY3Rpb24gYSh0KXtlKHMsaSxvLGEsYyxcIm5leHRcIix0KX1mdW5jdGlvbiBjKHQpe2UocyxpLG8sYSxjLFwidGhyb3dcIix0KX1hKHZvaWQgMCl9KSl9LHUuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBjLl9yZWFkPWZ1bmN0aW9uKCl7ZHx8KGQ9ITAsbCgpKX0sY30sRnN9ZnVuY3Rpb24gb2EoKXtpZihXcylyZXR1cm4genM7dmFyIGU7V3M9MSx6cz14LHguUmVhZGFibGVTdGF0ZT1DLGEuRXZlbnRFbWl0dGVyO3ZhciB0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUubGlzdGVuZXJzKHQpLmxlbmd0aH0scj1tcygpLGk9bi5CdWZmZXIsbz0odm9pZCAwIT09dT91OlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6e30pLlVpbnQ4QXJyYXl8fGZ1bmN0aW9uKCl7fTt2YXIgcyxjPWQ7cz1jJiZjLmRlYnVnbG9nP2MuZGVidWdsb2coXCJzdHJlYW1cIik6ZnVuY3Rpb24oKXt9O3ZhciBsLGgsZixwPWdzKCksbT12cygpLGc9X3MoKS5nZXRIaWdoV2F0ZXJNYXJrLHY9U3MoKS5jb2Rlcyx5PXYuRVJSX0lOVkFMSURfQVJHX1RZUEUsRT12LkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YsYj12LkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELHc9di5FUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UO05zKCkoeCxyKTt2YXIgUz1tLmVycm9yT3JEZXN0cm95LF89W1wiZXJyb3JcIixcImNsb3NlXCIsXCJkZXN0cm95XCIsXCJwYXVzZVwiLFwicmVzdW1lXCJdO2Z1bmN0aW9uIEModCxuLHIpe2U9ZXx8THMoKSx0PXR8fHt9LFwiYm9vbGVhblwiIT10eXBlb2YgciYmKHI9biBpbnN0YW5jZW9mIGUpLHRoaXMub2JqZWN0TW9kZT0hIXQub2JqZWN0TW9kZSxyJiYodGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISF0LnJlYWRhYmxlT2JqZWN0TW9kZSksdGhpcy5oaWdoV2F0ZXJNYXJrPWcodGhpcyx0LFwicmVhZGFibGVIaWdoV2F0ZXJNYXJrXCIsciksdGhpcy5idWZmZXI9bmV3IHAsdGhpcy5sZW5ndGg9MCx0aGlzLnBpcGVzPW51bGwsdGhpcy5waXBlc0NvdW50PTAsdGhpcy5mbG93aW5nPW51bGwsdGhpcy5lbmRlZD0hMSx0aGlzLmVuZEVtaXR0ZWQ9ITEsdGhpcy5yZWFkaW5nPSExLHRoaXMuc3luYz0hMCx0aGlzLm5lZWRSZWFkYWJsZT0hMSx0aGlzLmVtaXR0ZWRSZWFkYWJsZT0hMSx0aGlzLnJlYWRhYmxlTGlzdGVuaW5nPSExLHRoaXMucmVzdW1lU2NoZWR1bGVkPSExLHRoaXMucGF1c2VkPSEwLHRoaXMuZW1pdENsb3NlPSExIT09dC5lbWl0Q2xvc2UsdGhpcy5hdXRvRGVzdHJveT0hIXQuYXV0b0Rlc3Ryb3ksdGhpcy5kZXN0cm95ZWQ9ITEsdGhpcy5kZWZhdWx0RW5jb2Rpbmc9dC5kZWZhdWx0RW5jb2Rpbmd8fFwidXRmOFwiLHRoaXMuYXdhaXREcmFpbj0wLHRoaXMucmVhZGluZ01vcmU9ITEsdGhpcy5kZWNvZGVyPW51bGwsdGhpcy5lbmNvZGluZz1udWxsLHQuZW5jb2RpbmcmJihsfHwobD10YSgpLlN0cmluZ0RlY29kZXIpLHRoaXMuZGVjb2Rlcj1uZXcgbCh0LmVuY29kaW5nKSx0aGlzLmVuY29kaW5nPXQuZW5jb2RpbmcpfWZ1bmN0aW9uIHgodCl7aWYoZT1lfHxMcygpLCEodGhpcyBpbnN0YW5jZW9mIHgpKXJldHVybiBuZXcgeCh0KTt2YXIgbj10aGlzIGluc3RhbmNlb2YgZTt0aGlzLl9yZWFkYWJsZVN0YXRlPW5ldyBDKHQsdGhpcyxuKSx0aGlzLnJlYWRhYmxlPSEwLHQmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnJlYWQmJih0aGlzLl9yZWFkPXQucmVhZCksXCJmdW5jdGlvblwiPT10eXBlb2YgdC5kZXN0cm95JiYodGhpcy5fZGVzdHJveT10LmRlc3Ryb3kpKSxyLmNhbGwodGhpcyl9ZnVuY3Rpb24gayhlLHQsbixyLGEpe3MoXCJyZWFkYWJsZUFkZENodW5rXCIsdCk7dmFyIGMsZD1lLl9yZWFkYWJsZVN0YXRlO2lmKG51bGw9PT10KWQucmVhZGluZz0hMSxmdW5jdGlvbihlLHQpe2lmKHMoXCJvbkVvZkNodW5rXCIpLHQuZW5kZWQpcmV0dXJuO2lmKHQuZGVjb2Rlcil7dmFyIG49dC5kZWNvZGVyLmVuZCgpO24mJm4ubGVuZ3RoJiYodC5idWZmZXIucHVzaChuKSx0Lmxlbmd0aCs9dC5vYmplY3RNb2RlPzE6bi5sZW5ndGgpfXQuZW5kZWQ9ITAsdC5zeW5jP0koZSk6KHQubmVlZFJlYWRhYmxlPSExLHQuZW1pdHRlZFJlYWRhYmxlfHwodC5lbWl0dGVkUmVhZGFibGU9ITAsUChlKSkpfShlLGQpO2Vsc2UgaWYoYXx8KGM9ZnVuY3Rpb24oZSx0KXt2YXIgbjtyPXQsaS5pc0J1ZmZlcihyKXx8ciBpbnN0YW5jZW9mIG98fFwic3RyaW5nXCI9PXR5cGVvZiB0fHx2b2lkIDA9PT10fHxlLm9iamVjdE1vZGV8fChuPW5ldyB5KFwiY2h1bmtcIixbXCJzdHJpbmdcIixcIkJ1ZmZlclwiLFwiVWludDhBcnJheVwiXSx0KSk7dmFyIHI7cmV0dXJuIG59KGQsdCkpLGMpUyhlLGMpO2Vsc2UgaWYoZC5vYmplY3RNb2RlfHx0JiZ0Lmxlbmd0aD4wKWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0fHxkLm9iamVjdE1vZGV8fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KT09PWkucHJvdG90eXBlfHwodD1mdW5jdGlvbihlKXtyZXR1cm4gaS5mcm9tKGUpfSh0KSkscilkLmVuZEVtaXR0ZWQ/UyhlLG5ldyB3KTpNKGUsZCx0LCEwKTtlbHNlIGlmKGQuZW5kZWQpUyhlLG5ldyBFKTtlbHNle2lmKGQuZGVzdHJveWVkKXJldHVybiExO2QucmVhZGluZz0hMSxkLmRlY29kZXImJiFuPyh0PWQuZGVjb2Rlci53cml0ZSh0KSxkLm9iamVjdE1vZGV8fDAhPT10Lmxlbmd0aD9NKGUsZCx0LCExKTpSKGUsZCkpOk0oZSxkLHQsITEpfWVsc2Ugcnx8KGQucmVhZGluZz0hMSxSKGUsZCkpO3JldHVybiFkLmVuZGVkJiYoZC5sZW5ndGg8ZC5oaWdoV2F0ZXJNYXJrfHwwPT09ZC5sZW5ndGgpfWZ1bmN0aW9uIE0oZSx0LG4scil7dC5mbG93aW5nJiYwPT09dC5sZW5ndGgmJiF0LnN5bmM/KHQuYXdhaXREcmFpbj0wLGUuZW1pdChcImRhdGFcIixuKSk6KHQubGVuZ3RoKz10Lm9iamVjdE1vZGU/MTpuLmxlbmd0aCxyP3QuYnVmZmVyLnVuc2hpZnQobik6dC5idWZmZXIucHVzaChuKSx0Lm5lZWRSZWFkYWJsZSYmSShlKSksUihlLHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh4LnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLl9yZWFkYWJsZVN0YXRlJiZ0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD1lKX19KSx4LnByb3RvdHlwZS5kZXN0cm95PW0uZGVzdHJveSx4LnByb3RvdHlwZS5fdW5kZXN0cm95PW0udW5kZXN0cm95LHgucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKGUsdCl7dChlKX0seC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3ZhciBuLHI9dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gci5vYmplY3RNb2RlP249ITA6XCJzdHJpbmdcIj09dHlwZW9mIGUmJigodD10fHxyLmRlZmF1bHRFbmNvZGluZykhPT1yLmVuY29kaW5nJiYoZT1pLmZyb20oZSx0KSx0PVwiXCIpLG49ITApLGsodGhpcyxlLHQsITEsbil9LHgucHJvdG90eXBlLnVuc2hpZnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGsodGhpcyxlLG51bGwsITAsITEpfSx4LnByb3RvdHlwZS5pc1BhdXNlZD1mdW5jdGlvbigpe3JldHVybiExPT09dGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nfSx4LnByb3RvdHlwZS5zZXRFbmNvZGluZz1mdW5jdGlvbihlKXtsfHwobD10YSgpLlN0cmluZ0RlY29kZXIpO3ZhciB0PW5ldyBsKGUpO3RoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlcj10LHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2Rpbmc9dGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyLmVuY29kaW5nO2Zvcih2YXIgbj10aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5oZWFkLHI9XCJcIjtudWxsIT09bjspcis9dC53cml0ZShuLmRhdGEpLG49bi5uZXh0O3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5jbGVhcigpLFwiXCIhPT1yJiZ0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5wdXNoKHIpLHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoPXIubGVuZ3RoLHRoaXN9O3ZhciBBPTEwNzM3NDE4MjQ7ZnVuY3Rpb24gVChlLHQpe3JldHVybiBlPD0wfHwwPT09dC5sZW5ndGgmJnQuZW5kZWQ/MDp0Lm9iamVjdE1vZGU/MTplIT1lP3QuZmxvd2luZyYmdC5sZW5ndGg/dC5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDp0Lmxlbmd0aDooZT50LmhpZ2hXYXRlck1hcmsmJih0LmhpZ2hXYXRlck1hcms9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PUE/ZT1BOihlLS0sZXw9ZT4+PjEsZXw9ZT4+PjIsZXw9ZT4+PjQsZXw9ZT4+PjgsZXw9ZT4+PjE2LGUrKyksZX0oZSkpLGU8PXQubGVuZ3RoP2U6dC5lbmRlZD90Lmxlbmd0aDoodC5uZWVkUmVhZGFibGU9ITAsMCkpfWZ1bmN0aW9uIEkoZSl7dmFyIHQ9ZS5fcmVhZGFibGVTdGF0ZTtzKFwiZW1pdFJlYWRhYmxlXCIsdC5uZWVkUmVhZGFibGUsdC5lbWl0dGVkUmVhZGFibGUpLHQubmVlZFJlYWRhYmxlPSExLHQuZW1pdHRlZFJlYWRhYmxlfHwocyhcImVtaXRSZWFkYWJsZVwiLHQuZmxvd2luZyksdC5lbWl0dGVkUmVhZGFibGU9ITAscHJvY2Vzcy5uZXh0VGljayhQLGUpKX1mdW5jdGlvbiBQKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7cyhcImVtaXRSZWFkYWJsZV9cIix0LmRlc3Ryb3llZCx0Lmxlbmd0aCx0LmVuZGVkKSx0LmRlc3Ryb3llZHx8IXQubGVuZ3RoJiYhdC5lbmRlZHx8KGUuZW1pdChcInJlYWRhYmxlXCIpLHQuZW1pdHRlZFJlYWRhYmxlPSExKSx0Lm5lZWRSZWFkYWJsZT0hdC5mbG93aW5nJiYhdC5lbmRlZCYmdC5sZW5ndGg8PXQuaGlnaFdhdGVyTWFyayxCKGUpfWZ1bmN0aW9uIFIoZSx0KXt0LnJlYWRpbmdNb3JlfHwodC5yZWFkaW5nTW9yZT0hMCxwcm9jZXNzLm5leHRUaWNrKE8sZSx0KSl9ZnVuY3Rpb24gTyhlLHQpe2Zvcig7IXQucmVhZGluZyYmIXQuZW5kZWQmJih0Lmxlbmd0aDx0LmhpZ2hXYXRlck1hcmt8fHQuZmxvd2luZyYmMD09PXQubGVuZ3RoKTspe3ZhciBuPXQubGVuZ3RoO2lmKHMoXCJtYXliZVJlYWRNb3JlIHJlYWQgMFwiKSxlLnJlYWQoMCksbj09PXQubGVuZ3RoKWJyZWFrfXQucmVhZGluZ01vcmU9ITF9ZnVuY3Rpb24gTihlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO3QucmVhZGFibGVMaXN0ZW5pbmc9ZS5saXN0ZW5lckNvdW50KFwicmVhZGFibGVcIik+MCx0LnJlc3VtZVNjaGVkdWxlZCYmIXQucGF1c2VkP3QuZmxvd2luZz0hMDplLmxpc3RlbmVyQ291bnQoXCJkYXRhXCIpPjAmJmUucmVzdW1lKCl9ZnVuY3Rpb24gRChlKXtzKFwicmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwXCIpLGUucmVhZCgwKX1mdW5jdGlvbiBMKGUsdCl7cyhcInJlc3VtZVwiLHQucmVhZGluZyksdC5yZWFkaW5nfHxlLnJlYWQoMCksdC5yZXN1bWVTY2hlZHVsZWQ9ITEsZS5lbWl0KFwicmVzdW1lXCIpLEIoZSksdC5mbG93aW5nJiYhdC5yZWFkaW5nJiZlLnJlYWQoMCl9ZnVuY3Rpb24gQihlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO2ZvcihzKFwiZmxvd1wiLHQuZmxvd2luZyk7dC5mbG93aW5nJiZudWxsIT09ZS5yZWFkKCk7KTt9ZnVuY3Rpb24gSyhlLHQpe3JldHVybiAwPT09dC5sZW5ndGg/bnVsbDoodC5vYmplY3RNb2RlP249dC5idWZmZXIuc2hpZnQoKTohZXx8ZT49dC5sZW5ndGg/KG49dC5kZWNvZGVyP3QuYnVmZmVyLmpvaW4oXCJcIik6MT09PXQuYnVmZmVyLmxlbmd0aD90LmJ1ZmZlci5maXJzdCgpOnQuYnVmZmVyLmNvbmNhdCh0Lmxlbmd0aCksdC5idWZmZXIuY2xlYXIoKSk6bj10LmJ1ZmZlci5jb25zdW1lKGUsdC5kZWNvZGVyKSxuKTt2YXIgbn1mdW5jdGlvbiBqKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7cyhcImVuZFJlYWRhYmxlXCIsdC5lbmRFbWl0dGVkKSx0LmVuZEVtaXR0ZWR8fCh0LmVuZGVkPSEwLHByb2Nlc3MubmV4dFRpY2soJCx0LGUpKX1mdW5jdGlvbiAkKGUsdCl7aWYocyhcImVuZFJlYWRhYmxlTlRcIixlLmVuZEVtaXR0ZWQsZS5sZW5ndGgpLCFlLmVuZEVtaXR0ZWQmJjA9PT1lLmxlbmd0aCYmKGUuZW5kRW1pdHRlZD0hMCx0LnJlYWRhYmxlPSExLHQuZW1pdChcImVuZFwiKSxlLmF1dG9EZXN0cm95KSl7dmFyIG49dC5fd3JpdGFibGVTdGF0ZTsoIW58fG4uYXV0b0Rlc3Ryb3kmJm4uZmluaXNoZWQpJiZ0LmRlc3Ryb3koKX19ZnVuY3Rpb24gSChlLHQpe2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihlW25dPT09dClyZXR1cm4gbjtyZXR1cm4tMX1yZXR1cm4geC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbihlKXtzKFwicmVhZFwiLGUpLGU9cGFyc2VJbnQoZSwxMCk7dmFyIHQ9dGhpcy5fcmVhZGFibGVTdGF0ZSxuPWU7aWYoMCE9PWUmJih0LmVtaXR0ZWRSZWFkYWJsZT0hMSksMD09PWUmJnQubmVlZFJlYWRhYmxlJiYoKDAhPT10LmhpZ2hXYXRlck1hcms/dC5sZW5ndGg+PXQuaGlnaFdhdGVyTWFyazp0Lmxlbmd0aD4wKXx8dC5lbmRlZCkpcmV0dXJuIHMoXCJyZWFkOiBlbWl0UmVhZGFibGVcIix0Lmxlbmd0aCx0LmVuZGVkKSwwPT09dC5sZW5ndGgmJnQuZW5kZWQ/aih0aGlzKTpJKHRoaXMpLG51bGw7aWYoMD09PShlPVQoZSx0KSkmJnQuZW5kZWQpcmV0dXJuIDA9PT10Lmxlbmd0aCYmaih0aGlzKSxudWxsO3ZhciByLGk9dC5uZWVkUmVhZGFibGU7cmV0dXJuIHMoXCJuZWVkIHJlYWRhYmxlXCIsaSksKDA9PT10Lmxlbmd0aHx8dC5sZW5ndGgtZTx0LmhpZ2hXYXRlck1hcmspJiZzKFwibGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmtcIixpPSEwKSx0LmVuZGVkfHx0LnJlYWRpbmc/cyhcInJlYWRpbmcgb3IgZW5kZWRcIixpPSExKTppJiYocyhcImRvIHJlYWRcIiksdC5yZWFkaW5nPSEwLHQuc3luYz0hMCwwPT09dC5sZW5ndGgmJih0Lm5lZWRSZWFkYWJsZT0hMCksdGhpcy5fcmVhZCh0LmhpZ2hXYXRlck1hcmspLHQuc3luYz0hMSx0LnJlYWRpbmd8fChlPVQobix0KSkpLG51bGw9PT0ocj1lPjA/SyhlLHQpOm51bGwpPyh0Lm5lZWRSZWFkYWJsZT10Lmxlbmd0aDw9dC5oaWdoV2F0ZXJNYXJrLGU9MCk6KHQubGVuZ3RoLT1lLHQuYXdhaXREcmFpbj0wKSwwPT09dC5sZW5ndGgmJih0LmVuZGVkfHwodC5uZWVkUmVhZGFibGU9ITApLG4hPT1lJiZ0LmVuZGVkJiZqKHRoaXMpKSxudWxsIT09ciYmdGhpcy5lbWl0KFwiZGF0YVwiLHIpLHJ9LHgucHJvdG90eXBlLl9yZWFkPWZ1bmN0aW9uKGUpe1ModGhpcyxuZXcgYihcIl9yZWFkKClcIikpfSx4LnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKGUsbil7dmFyIHI9dGhpcyxpPXRoaXMuX3JlYWRhYmxlU3RhdGU7c3dpdGNoKGkucGlwZXNDb3VudCl7Y2FzZSAwOmkucGlwZXM9ZTticmVhaztjYXNlIDE6aS5waXBlcz1baS5waXBlcyxlXTticmVhaztkZWZhdWx0OmkucGlwZXMucHVzaChlKX1pLnBpcGVzQ291bnQrPTEscyhcInBpcGUgY291bnQ9JWQgb3B0cz0lalwiLGkucGlwZXNDb3VudCxuKTt2YXIgbz0oIW58fCExIT09bi5lbmQpJiZlIT09cHJvY2Vzcy5zdGRvdXQmJmUhPT1wcm9jZXNzLnN0ZGVycj9jOm07ZnVuY3Rpb24gYSh0LG4pe3MoXCJvbnVucGlwZVwiKSx0PT09ciYmbiYmITE9PT1uLmhhc1VucGlwZWQmJihuLmhhc1VucGlwZWQ9ITAscyhcImNsZWFudXBcIiksZS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsZiksZS5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLHApLGUucmVtb3ZlTGlzdGVuZXIoXCJkcmFpblwiLGQpLGUucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGgpLGUucmVtb3ZlTGlzdGVuZXIoXCJ1bnBpcGVcIixhKSxyLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsYyksci5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLG0pLHIucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsdSksbD0hMCwhaS5hd2FpdERyYWlufHxlLl93cml0YWJsZVN0YXRlJiYhZS5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW58fGQoKSl9ZnVuY3Rpb24gYygpe3MoXCJvbmVuZFwiKSxlLmVuZCgpfWkuZW5kRW1pdHRlZD9wcm9jZXNzLm5leHRUaWNrKG8pOnIub25jZShcImVuZFwiLG8pLGUub24oXCJ1bnBpcGVcIixhKTt2YXIgZD1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj1lLl9yZWFkYWJsZVN0YXRlO3MoXCJwaXBlT25EcmFpblwiLG4uYXdhaXREcmFpbiksbi5hd2FpdERyYWluJiZuLmF3YWl0RHJhaW4tLSwwPT09bi5hd2FpdERyYWluJiZ0KGUsXCJkYXRhXCIpJiYobi5mbG93aW5nPSEwLEIoZSkpfX0ocik7ZS5vbihcImRyYWluXCIsZCk7dmFyIGw9ITE7ZnVuY3Rpb24gdSh0KXtzKFwib25kYXRhXCIpO3ZhciBuPWUud3JpdGUodCk7cyhcImRlc3Qud3JpdGVcIixuKSwhMT09PW4mJigoMT09PWkucGlwZXNDb3VudCYmaS5waXBlcz09PWV8fGkucGlwZXNDb3VudD4xJiYtMSE9PUgoaS5waXBlcyxlKSkmJiFsJiYocyhcImZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZVwiLGkuYXdhaXREcmFpbiksaS5hd2FpdERyYWluKyspLHIucGF1c2UoKSl9ZnVuY3Rpb24gaChuKXtzKFwib25lcnJvclwiLG4pLG0oKSxlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixoKSwwPT09dChlLFwiZXJyb3JcIikmJlMoZSxuKX1mdW5jdGlvbiBmKCl7ZS5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLHApLG0oKX1mdW5jdGlvbiBwKCl7cyhcIm9uZmluaXNoXCIpLGUucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGYpLG0oKX1mdW5jdGlvbiBtKCl7cyhcInVucGlwZVwiKSxyLnVucGlwZShlKX1yZXR1cm4gci5vbihcImRhdGFcIix1KSxmdW5jdGlvbihlLHQsbil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5wcmVwZW5kTGlzdGVuZXIpcmV0dXJuIGUucHJlcGVuZExpc3RlbmVyKHQsbik7ZS5fZXZlbnRzJiZlLl9ldmVudHNbdF0/QXJyYXkuaXNBcnJheShlLl9ldmVudHNbdF0pP2UuX2V2ZW50c1t0XS51bnNoaWZ0KG4pOmUuX2V2ZW50c1t0XT1bbixlLl9ldmVudHNbdF1dOmUub24odCxuKX0oZSxcImVycm9yXCIsaCksZS5vbmNlKFwiY2xvc2VcIixmKSxlLm9uY2UoXCJmaW5pc2hcIixwKSxlLmVtaXQoXCJwaXBlXCIsciksaS5mbG93aW5nfHwocyhcInBpcGUgcmVzdW1lXCIpLHIucmVzdW1lKCkpLGV9LHgucHJvdG90eXBlLnVucGlwZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9yZWFkYWJsZVN0YXRlLG49e2hhc1VucGlwZWQ6ITF9O2lmKDA9PT10LnBpcGVzQ291bnQpcmV0dXJuIHRoaXM7aWYoMT09PXQucGlwZXNDb3VudClyZXR1cm4gZSYmZSE9PXQucGlwZXN8fChlfHwoZT10LnBpcGVzKSx0LnBpcGVzPW51bGwsdC5waXBlc0NvdW50PTAsdC5mbG93aW5nPSExLGUmJmUuZW1pdChcInVucGlwZVwiLHRoaXMsbikpLHRoaXM7aWYoIWUpe3ZhciByPXQucGlwZXMsaT10LnBpcGVzQ291bnQ7dC5waXBlcz1udWxsLHQucGlwZXNDb3VudD0wLHQuZmxvd2luZz0hMTtmb3IodmFyIG89MDtvPGk7bysrKXJbb10uZW1pdChcInVucGlwZVwiLHRoaXMse2hhc1VucGlwZWQ6ITF9KTtyZXR1cm4gdGhpc312YXIgcz1IKHQucGlwZXMsZSk7cmV0dXJuLTE9PT1zfHwodC5waXBlcy5zcGxpY2UocywxKSx0LnBpcGVzQ291bnQtPTEsMT09PXQucGlwZXNDb3VudCYmKHQucGlwZXM9dC5waXBlc1swXSksZS5lbWl0KFwidW5waXBlXCIsdGhpcyxuKSksdGhpc30seC5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0KXt2YXIgbj1yLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsZSx0KSxpPXRoaXMuX3JlYWRhYmxlU3RhdGU7cmV0dXJuXCJkYXRhXCI9PT1lPyhpLnJlYWRhYmxlTGlzdGVuaW5nPXRoaXMubGlzdGVuZXJDb3VudChcInJlYWRhYmxlXCIpPjAsITEhPT1pLmZsb3dpbmcmJnRoaXMucmVzdW1lKCkpOlwicmVhZGFibGVcIj09PWUmJihpLmVuZEVtaXR0ZWR8fGkucmVhZGFibGVMaXN0ZW5pbmd8fChpLnJlYWRhYmxlTGlzdGVuaW5nPWkubmVlZFJlYWRhYmxlPSEwLGkuZmxvd2luZz0hMSxpLmVtaXR0ZWRSZWFkYWJsZT0hMSxzKFwib24gcmVhZGFibGVcIixpLmxlbmd0aCxpLnJlYWRpbmcpLGkubGVuZ3RoP0kodGhpcyk6aS5yZWFkaW5nfHxwcm9jZXNzLm5leHRUaWNrKEQsdGhpcykpKSxufSx4LnByb3RvdHlwZS5hZGRMaXN0ZW5lcj14LnByb3RvdHlwZS5vbix4LnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBuPXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLmNhbGwodGhpcyxlLHQpO3JldHVyblwicmVhZGFibGVcIj09PWUmJnByb2Nlc3MubmV4dFRpY2soTix0aGlzKSxufSx4LnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQ9ci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm5cInJlYWRhYmxlXCIhPT1lJiZ2b2lkIDAhPT1lfHxwcm9jZXNzLm5leHRUaWNrKE4sdGhpcyksdH0seC5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gZS5mbG93aW5nfHwocyhcInJlc3VtZVwiKSxlLmZsb3dpbmc9IWUucmVhZGFibGVMaXN0ZW5pbmcsZnVuY3Rpb24oZSx0KXt0LnJlc3VtZVNjaGVkdWxlZHx8KHQucmVzdW1lU2NoZWR1bGVkPSEwLHByb2Nlc3MubmV4dFRpY2soTCxlLHQpKX0odGhpcyxlKSksZS5wYXVzZWQ9ITEsdGhpc30seC5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXtyZXR1cm4gcyhcImNhbGwgcGF1c2UgZmxvd2luZz0lalwiLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyksITEhPT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcmJihzKFwicGF1c2VcIiksdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPSExLHRoaXMuZW1pdChcInBhdXNlXCIpKSx0aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZD0hMCx0aGlzfSx4LnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10aGlzLl9yZWFkYWJsZVN0YXRlLHI9ITE7Zm9yKHZhciBpIGluIGUub24oXCJlbmRcIiwoZnVuY3Rpb24oKXtpZihzKFwid3JhcHBlZCBlbmRcIiksbi5kZWNvZGVyJiYhbi5lbmRlZCl7dmFyIGU9bi5kZWNvZGVyLmVuZCgpO2UmJmUubGVuZ3RoJiZ0LnB1c2goZSl9dC5wdXNoKG51bGwpfSkpLGUub24oXCJkYXRhXCIsKGZ1bmN0aW9uKGkpeyhzKFwid3JhcHBlZCBkYXRhXCIpLG4uZGVjb2RlciYmKGk9bi5kZWNvZGVyLndyaXRlKGkpKSxuLm9iamVjdE1vZGUmJm51bGw9PWkpfHwobi5vYmplY3RNb2RlfHxpJiZpLmxlbmd0aCkmJih0LnB1c2goaSl8fChyPSEwLGUucGF1c2UoKSkpfSkpLGUpdm9pZCAwPT09dGhpc1tpXSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZVtpXSYmKHRoaXNbaV09ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGVbdF0uYXBwbHkoZSxhcmd1bWVudHMpfX0oaSkpO2Zvcih2YXIgbz0wO288Xy5sZW5ndGg7bysrKWUub24oX1tvXSx0aGlzLmVtaXQuYmluZCh0aGlzLF9bb10pKTtyZXR1cm4gdGhpcy5fcmVhZD1mdW5jdGlvbih0KXtzKFwid3JhcHBlZCBfcmVhZFwiLHQpLHImJihyPSExLGUucmVzdW1lKCkpfSx0aGlzfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJih4LnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09aCYmKGg9cmEoKSksaCh0aGlzKX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh4LnByb3RvdHlwZSxcInJlYWRhYmxlSGlnaFdhdGVyTWFya1wiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHgucHJvdG90eXBlLFwicmVhZGFibGVCdWZmZXJcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZSYmdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXJ9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHgucHJvdG90eXBlLFwicmVhZGFibGVGbG93aW5nXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZ30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmc9ZSl9fSkseC5fZnJvbUxpc3Q9SyxPYmplY3QuZGVmaW5lUHJvcGVydHkoeC5wcm90b3R5cGUsXCJyZWFkYWJsZUxlbmd0aFwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmxlbmd0aH19KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJih4LmZyb209ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09ZiYmKGY9aWEoKSksZih4LGUsdCl9KSx6c31mdW5jdGlvbiBzYSgpe2lmKEdzKXJldHVybiBWcztHcz0xLFZzPWE7dmFyIGU9U3MoKS5jb2Rlcyx0PWUuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsbj1lLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxyPWUuRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyxpPWUuRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wLG89THMoKTtmdW5jdGlvbiBzKGUsdCl7dmFyIHI9dGhpcy5fdHJhbnNmb3JtU3RhdGU7ci50cmFuc2Zvcm1pbmc9ITE7dmFyIGk9ci53cml0ZWNiO2lmKG51bGw9PT1pKXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBuKTtyLndyaXRlY2h1bms9bnVsbCxyLndyaXRlY2I9bnVsbCxudWxsIT10JiZ0aGlzLnB1c2godCksaShlKTt2YXIgbz10aGlzLl9yZWFkYWJsZVN0YXRlO28ucmVhZGluZz0hMSwoby5uZWVkUmVhZGFibGV8fG8ubGVuZ3RoPG8uaGlnaFdhdGVyTWFyaykmJnRoaXMuX3JlYWQoby5oaWdoV2F0ZXJNYXJrKX1mdW5jdGlvbiBhKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGEpKXJldHVybiBuZXcgYShlKTtvLmNhbGwodGhpcyxlKSx0aGlzLl90cmFuc2Zvcm1TdGF0ZT17YWZ0ZXJUcmFuc2Zvcm06cy5iaW5kKHRoaXMpLG5lZWRUcmFuc2Zvcm06ITEsdHJhbnNmb3JtaW5nOiExLHdyaXRlY2I6bnVsbCx3cml0ZWNodW5rOm51bGwsd3JpdGVlbmNvZGluZzpudWxsfSx0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZT0hMCx0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmM9ITEsZSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudHJhbnNmb3JtJiYodGhpcy5fdHJhbnNmb3JtPWUudHJhbnNmb3JtKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmZsdXNoJiYodGhpcy5fZmx1c2g9ZS5mbHVzaCkpLHRoaXMub24oXCJwcmVmaW5pc2hcIixjKX1mdW5jdGlvbiBjKCl7dmFyIGU9dGhpcztcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzLl9mbHVzaHx8dGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ/ZCh0aGlzLG51bGwsbnVsbCk6dGhpcy5fZmx1c2goKGZ1bmN0aW9uKHQsbil7ZChlLHQsbil9KSl9ZnVuY3Rpb24gZChlLHQsbil7aWYodClyZXR1cm4gZS5lbWl0KFwiZXJyb3JcIix0KTtpZihudWxsIT1uJiZlLnB1c2gobiksZS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpdGhyb3cgbmV3IGk7aWYoZS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKXRocm93IG5ldyByO3JldHVybiBlLnB1c2gobnVsbCl9cmV0dXJuIE5zKCkoYSxvKSxhLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm09ITEsby5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsZSx0KX0sYS5wcm90b3R5cGUuX3RyYW5zZm9ybT1mdW5jdGlvbihlLG4scil7cihuZXcgdChcIl90cmFuc2Zvcm0oKVwiKSl9LGEucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5fdHJhbnNmb3JtU3RhdGU7aWYoci53cml0ZWNiPW4sci53cml0ZWNodW5rPWUsci53cml0ZWVuY29kaW5nPXQsIXIudHJhbnNmb3JtaW5nKXt2YXIgaT10aGlzLl9yZWFkYWJsZVN0YXRlOyhyLm5lZWRUcmFuc2Zvcm18fGkubmVlZFJlYWRhYmxlfHxpLmxlbmd0aDxpLmhpZ2hXYXRlck1hcmspJiZ0aGlzLl9yZWFkKGkuaGlnaFdhdGVyTWFyayl9fSxhLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl90cmFuc2Zvcm1TdGF0ZTtudWxsPT09dC53cml0ZWNodW5rfHx0LnRyYW5zZm9ybWluZz90Lm5lZWRUcmFuc2Zvcm09ITA6KHQudHJhbnNmb3JtaW5nPSEwLHRoaXMuX3RyYW5zZm9ybSh0LndyaXRlY2h1bmssdC53cml0ZWVuY29kaW5nLHQuYWZ0ZXJUcmFuc2Zvcm0pKX0sYS5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24oZSx0KXtvLnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsZSwoZnVuY3Rpb24oZSl7dChlKX0pKX0sVnN9ZnVuY3Rpb24gYWEoKXtpZihRcylyZXR1cm4gSnM7dmFyIGU7UXM9MTt2YXIgdD1TcygpLmNvZGVzLG49dC5FUlJfTUlTU0lOR19BUkdTLHI9dC5FUlJfU1RSRUFNX0RFU1RST1lFRDtmdW5jdGlvbiBpKGUpe2lmKGUpdGhyb3cgZX1mdW5jdGlvbiBvKGUpe2UoKX1mdW5jdGlvbiBzKGUsdCl7cmV0dXJuIGUucGlwZSh0KX1yZXR1cm4gSnM9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxhPW5ldyBBcnJheSh0KSxjPTA7Yzx0O2MrKylhW2NdPWFyZ3VtZW50c1tjXTt2YXIgZCxsPWZ1bmN0aW9uKGUpe3JldHVybiBlLmxlbmd0aD9cImZ1bmN0aW9uXCIhPXR5cGVvZiBlW2UubGVuZ3RoLTFdP2k6ZS5wb3AoKTppfShhKTtpZihBcnJheS5pc0FycmF5KGFbMF0pJiYoYT1hWzBdKSxhLmxlbmd0aDwyKXRocm93IG5ldyBuKFwic3RyZWFtc1wiKTt2YXIgdT1hLm1hcCgoZnVuY3Rpb24odCxuKXt2YXIgaT1uPGEubGVuZ3RoLTE7cmV0dXJuIGZ1bmN0aW9uKHQsbixpLG8pe289ZnVuY3Rpb24oZSl7dmFyIHQ9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7dHx8KHQ9ITAsZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9fShvKTt2YXIgcz0hMTt0Lm9uKFwiY2xvc2VcIiwoZnVuY3Rpb24oKXtzPSEwfSkpLHZvaWQgMD09PWUmJihlPW5hKCkpLGUodCx7cmVhZGFibGU6bix3cml0YWJsZTppfSwoZnVuY3Rpb24oZSl7aWYoZSlyZXR1cm4gbyhlKTtzPSEwLG8oKX0pKTt2YXIgYT0hMTtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoIXMmJiFhKXJldHVybiBhPSEwLGZ1bmN0aW9uKGUpe3JldHVybiBlLnNldEhlYWRlciYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5hYm9ydH0odCk/dC5hYm9ydCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZGVzdHJveT90LmRlc3Ryb3koKTp2b2lkIG8oZXx8bmV3IHIoXCJwaXBlXCIpKX19KHQsaSxuPjAsKGZ1bmN0aW9uKGUpe2R8fChkPWUpLGUmJnUuZm9yRWFjaChvKSxpfHwodS5mb3JFYWNoKG8pLGwoZCkpfSkpfSkpO3JldHVybiBhLnJlZHVjZShzKX0sSnN9IWZ1bmN0aW9uKGUsdCl7dmFyIG49YztcImRpc2FibGVcIj09PXByb2Nlc3MuZW52LlJFQURBQkxFX1NUUkVBTSYmbj8oZS5leHBvcnRzPW4uUmVhZGFibGUsT2JqZWN0LmFzc2lnbihlLmV4cG9ydHMsbiksZS5leHBvcnRzLlN0cmVhbT1uKTooKHQ9ZS5leHBvcnRzPW9hKCkpLlN0cmVhbT1ufHx0LHQuUmVhZGFibGU9dCx0LldyaXRhYmxlPURzKCksdC5EdXBsZXg9THMoKSx0LlRyYW5zZm9ybT1zYSgpLHQuUGFzc1Rocm91Z2g9ZnVuY3Rpb24oKXtpZihacylyZXR1cm4gWXM7WnM9MSxZcz10O3ZhciBlPXNhKCk7ZnVuY3Rpb24gdChuKXtpZighKHRoaXMgaW5zdGFuY2VvZiB0KSlyZXR1cm4gbmV3IHQobik7ZS5jYWxsKHRoaXMsbil9cmV0dXJuIE5zKCkodCxlKSx0LnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKGUsdCxuKXtuKG51bGwsZSl9LFlzfSgpLHQuZmluaXNoZWQ9bmEoKSx0LnBpcGVsaW5lPWFhKCkpfShwcyxwcy5leHBvcnRzKTt2YXIgY2E9cHMuZXhwb3J0cztmdW5jdGlvbiBkYShlPXt9KXtjb25zdCB0PXt9LG49bmV3IGNhLkR1cGxleCh7b2JqZWN0TW9kZTohMCxyZWFkOigpPT57fSx3cml0ZTpmdW5jdGlvbihuLG8scyl7bGV0IGE9bnVsbDt0cnl7IW4uaWQ/ZnVuY3Rpb24obil7ZT8ucmV0cnlPbk1lc3NhZ2UmJm4ubWV0aG9kPT09ZS5yZXRyeU9uTWVzc2FnZSYmT2JqZWN0LnZhbHVlcyh0KS5mb3JFYWNoKCgoe3JlcTplLHJldHJ5Q291bnQ6bj0wfSk9PntpZighZS5pZClyZXR1cm47aWYobj49Myl0aHJvdyBuZXcgRXJyb3IoYFN0cmVhbU1pZGRsZXdhcmUgLSBSZXRyeSBsaW1pdCBleGNlZWRlZCBmb3IgcmVxdWVzdCBpZCBcIiR7ZS5pZH1cImApO2NvbnN0IHI9dFtlLmlkXTtyJiYoci5yZXRyeUNvdW50PW4rMSksaShlKX0pKTtyLmVtaXQoXCJub3RpZmljYXRpb25cIixuKX0obik6ZnVuY3Rpb24oZSl7Y29uc3R7aWQ6bn09ZTtpZihudWxsPT09bilyZXR1cm47Y29uc3Qgcj10W25dO2lmKCFyKXJldHVybiB2b2lkIGNvbnNvbGUud2FybihgU3RyZWFtTWlkZGxld2FyZSAtIFVua25vd24gcmVzcG9uc2UgaWQgXCIke259XCJgKTtkZWxldGUgdFtuXSxPYmplY3QuYXNzaWduKHIucmVzLGUpLHNldFRpbWVvdXQoci5lbmQpfShuKX1jYXRjaChlKXthPWV9cyhhKX19KSxyPW5ldyBCbztyZXR1cm57ZXZlbnRzOnIsbWlkZGxld2FyZTooZSxuLHIsbyk9Pnt0W2UuaWRdPXtyZXE6ZSxyZXM6bixuZXh0OnIsZW5kOm99LGkoZSl9LHN0cmVhbTpufTtmdW5jdGlvbiBpKGUpe24ucHVzaChlKX19dmFyIGxhPXt9LHVhPXtleHBvcnRzOnt9fSxoYT1mdW5jdGlvbiBlKHQsbil7aWYodCYmbilyZXR1cm4gZSh0KShuKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJuZWVkIHdyYXBwZXIgZnVuY3Rpb25cIik7cmV0dXJuIE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JbZV09dFtlXX0pKSxyO2Z1bmN0aW9uIHIoKXtmb3IodmFyIGU9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLG49MDtuPGUubGVuZ3RoO24rKyllW25dPWFyZ3VtZW50c1tuXTt2YXIgcj10LmFwcGx5KHRoaXMsZSksaT1lW2UubGVuZ3RoLTFdO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHImJnIhPT1pJiZPYmplY3Qua2V5cyhpKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyW2VdPWlbZV19KSkscn19O3ZhciBmYT1oYTtmdW5jdGlvbiBwYShlKXt2YXIgdD1mdW5jdGlvbigpe3JldHVybiB0LmNhbGxlZD90LnZhbHVlOih0LmNhbGxlZD0hMCx0LnZhbHVlPWUuYXBwbHkodGhpcyxhcmd1bWVudHMpKX07cmV0dXJuIHQuY2FsbGVkPSExLHR9ZnVuY3Rpb24gbWEoZSl7dmFyIHQ9ZnVuY3Rpb24oKXtpZih0LmNhbGxlZCl0aHJvdyBuZXcgRXJyb3IodC5vbmNlRXJyb3IpO3JldHVybiB0LmNhbGxlZD0hMCx0LnZhbHVlPWUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxuPWUubmFtZXx8XCJGdW5jdGlvbiB3cmFwcGVkIHdpdGggYG9uY2VgXCI7cmV0dXJuIHQub25jZUVycm9yPW4rXCIgc2hvdWxkbid0IGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZVwiLHQuY2FsbGVkPSExLHR9dWEuZXhwb3J0cz1mYShwYSksdWEuZXhwb3J0cy5zdHJpY3Q9ZmEobWEpLHBhLnByb3RvPXBhKChmdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShGdW5jdGlvbi5wcm90b3R5cGUsXCJvbmNlXCIse3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHBhKHRoaXMpfSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLFwib25jZVN0cmljdFwiLHt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBtYSh0aGlzKX0sY29uZmlndXJhYmxlOiEwfSl9KSk7dmFyIGdhPXVhLmV4cG9ydHMsdmE9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KHZhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHZhLlN1YnN0cmVhbT12b2lkIDA7Y29uc3QgeWE9Y2E7Y2xhc3MgRWEgZXh0ZW5kcyB5YS5EdXBsZXh7Y29uc3RydWN0b3Ioe3BhcmVudDplLG5hbWU6dH0pe3N1cGVyKHtvYmplY3RNb2RlOiEwfSksdGhpcy5fcGFyZW50PWUsdGhpcy5fbmFtZT10fV9yZWFkKCl7fV93cml0ZShlLHQsbil7dGhpcy5fcGFyZW50LnB1c2goe25hbWU6dGhpcy5fbmFtZSxkYXRhOmV9KSxuKCl9fXZhLlN1YnN0cmVhbT1FYTt2YXIgYmE9dSYmdS5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGxhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGxhLk9iamVjdE11bHRpcGxleD12b2lkIDA7Y29uc3Qgd2E9Y2EsU2E9YmEoZ2EpLF9hPXZhLENhPVN5bWJvbChcIklHTk9SRV9TVUJTVFJFQU1cIik7bGV0IHhhPWNsYXNzIGV4dGVuZHMgd2EuRHVwbGV4e2NvbnN0cnVjdG9yKGU9e30pe3N1cGVyKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxlKSx7b2JqZWN0TW9kZTohMH0pKSx0aGlzLl9zdWJzdHJlYW1zPXt9fWNyZWF0ZVN0cmVhbShlKXtpZih0aGlzLmRlc3Ryb3llZCl0aHJvdyBuZXcgRXJyb3IoYE9iamVjdE11bHRpcGxleCAtIHBhcmVudCBzdHJlYW0gZm9yIG5hbWUgXCIke2V9XCIgYWxyZWFkeSBkZXN0cm95ZWRgKTtpZih0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkfHx0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKXRocm93IG5ldyBFcnJvcihgT2JqZWN0TXVsdGlwbGV4IC0gcGFyZW50IHN0cmVhbSBmb3IgbmFtZSBcIiR7ZX1cIiBhbHJlYWR5IGVuZGVkYCk7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiT2JqZWN0TXVsdGlwbGV4IC0gbmFtZSBtdXN0IG5vdCBiZSBlbXB0eVwiKTtpZih0aGlzLl9zdWJzdHJlYW1zW2VdKXRocm93IG5ldyBFcnJvcihgT2JqZWN0TXVsdGlwbGV4IC0gU3Vic3RyZWFtIGZvciBuYW1lIFwiJHtlfVwiIGFscmVhZHkgZXhpc3RzYCk7Y29uc3QgdD1uZXcgX2EuU3Vic3RyZWFtKHtwYXJlbnQ6dGhpcyxuYW1lOmV9KTtyZXR1cm4gdGhpcy5fc3Vic3RyZWFtc1tlXT10LGZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj0oMCxTYS5kZWZhdWx0KSh0KTsoMCx3YS5maW5pc2hlZCkoZSx7cmVhZGFibGU6ITF9LG4pLCgwLHdhLmZpbmlzaGVkKShlLHt3cml0YWJsZTohMX0sbil9KHRoaXMsKGU9PnQuZGVzdHJveShlfHx2b2lkIDApKSksdH1pZ25vcmVTdHJlYW0oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiT2JqZWN0TXVsdGlwbGV4IC0gbmFtZSBtdXN0IG5vdCBiZSBlbXB0eVwiKTtpZih0aGlzLl9zdWJzdHJlYW1zW2VdKXRocm93IG5ldyBFcnJvcihgT2JqZWN0TXVsdGlwbGV4IC0gU3Vic3RyZWFtIGZvciBuYW1lIFwiJHtlfVwiIGFscmVhZHkgZXhpc3RzYCk7dGhpcy5fc3Vic3RyZWFtc1tlXT1DYX1fcmVhZCgpe31fd3JpdGUoZSx0LG4pe2NvbnN0e25hbWU6cixkYXRhOml9PWU7aWYoIXIpcmV0dXJuIGNvbnNvbGUud2FybihgT2JqZWN0TXVsdGlwbGV4IC0gbWFsZm9ybWVkIGNodW5rIHdpdGhvdXQgbmFtZSBcIiR7ZX1cImApLG4oKTtjb25zdCBvPXRoaXMuX3N1YnN0cmVhbXNbcl07cmV0dXJuIG8/KG8hPT1DYSYmby5wdXNoKGkpLG4oKSk6KGNvbnNvbGUud2FybihgT2JqZWN0TXVsdGlwbGV4IC0gb3JwaGFuZWQgZGF0YSBmb3Igc3RyZWFtIFwiJHtyfVwiYCksbigpKX19O2xhLk9iamVjdE11bHRpcGxleD14YTt2YXIga2E9aChsYS5PYmplY3RNdWx0aXBsZXgpO2NvbnN0IE1hPWU9Pm51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5waXBlO01hLndyaXRhYmxlPWU9Pk1hKGUpJiYhMSE9PWUud3JpdGFibGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuX3dyaXRlJiZcIm9iamVjdFwiPT10eXBlb2YgZS5fd3JpdGFibGVTdGF0ZSxNYS5yZWFkYWJsZT1lPT5NYShlKSYmITEhPT1lLnJlYWRhYmxlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLl9yZWFkJiZcIm9iamVjdFwiPT10eXBlb2YgZS5fcmVhZGFibGVTdGF0ZSxNYS5kdXBsZXg9ZT0+TWEud3JpdGFibGUoZSkmJk1hLnJlYWRhYmxlKGUpLE1hLnRyYW5zZm9ybT1lPT5NYS5kdXBsZXgoZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuX3RyYW5zZm9ybTt2YXIgQWEsVGE9TWEsSWE9Y2xhc3MgZXh0ZW5kcyBmc3tjb25zdHJ1Y3RvcihlLHtqc29uUnBjU3RyZWFtTmFtZTp0LGxvZ2dlcjpuPWNvbnNvbGUsbWF4RXZlbnRMaXN0ZW5lcnM6cj0xMDAscnBjTWlkZGxld2FyZTppPVtdfSl7aWYoc3VwZXIoe2xvZ2dlcjpuLG1heEV2ZW50TGlzdGVuZXJzOnIscnBjTWlkZGxld2FyZTppfSksIVRhLmR1cGxleChlKSl0aHJvdyBuZXcgRXJyb3IoJHIuZXJyb3JzLmludmFsaWREdXBsZXhTdHJlYW0oKSk7dGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdD10aGlzLl9oYW5kbGVTdHJlYW1EaXNjb25uZWN0LmJpbmQodGhpcyk7Y29uc3Qgbz1uZXcga2E7Y2EucGlwZWxpbmUoZSxvLGUsdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdC5iaW5kKHRoaXMsXCJNZXRhTWFza1wiKSksdGhpcy5fanNvblJwY0Nvbm5lY3Rpb249ZGEoe3JldHJ5T25NZXNzYWdlOlwiTUVUQU1BU0tfRVhURU5TSU9OX0NPTk5FQ1RfQ0FOX1JFVFJZXCJ9KSxjYS5waXBlbGluZSh0aGlzLl9qc29uUnBjQ29ubmVjdGlvbi5zdHJlYW0sby5jcmVhdGVTdHJlYW0odCksdGhpcy5fanNvblJwY0Nvbm5lY3Rpb24uc3RyZWFtLHRoaXMuX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QuYmluZCh0aGlzLFwiTWV0YU1hc2sgUnBjUHJvdmlkZXJcIikpLHRoaXMuX3JwY0VuZ2luZS5wdXNoKHRoaXMuX2pzb25ScGNDb25uZWN0aW9uLm1pZGRsZXdhcmUpLHRoaXMuX2pzb25ScGNDb25uZWN0aW9uLmV2ZW50cy5vbihcIm5vdGlmaWNhdGlvblwiLCh0PT57Y29uc3R7bWV0aG9kOm4scGFyYW1zOnJ9PXQ7XCJtZXRhbWFza19hY2NvdW50c0NoYW5nZWRcIj09PW4/dGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKHIpOlwibWV0YW1hc2tfdW5sb2NrU3RhdGVDaGFuZ2VkXCI9PT1uP3RoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZChyKTpcIm1ldGFtYXNrX2NoYWluQ2hhbmdlZFwiPT09bj90aGlzLl9oYW5kbGVDaGFpbkNoYW5nZWQocik6SG8uaW5jbHVkZXMobik/dGhpcy5lbWl0KFwibWVzc2FnZVwiLHt0eXBlOm4sZGF0YTpyfSk6XCJNRVRBTUFTS19TVFJFQU1fRkFJTFVSRVwiPT09biYmZS5kZXN0cm95KG5ldyBFcnJvcigkci5lcnJvcnMucGVybWFuZW50bHlEaXNjb25uZWN0ZWQoKSkpfSkpfWFzeW5jIF9pbml0aWFsaXplU3RhdGVBc3luYygpe2xldCBlO3RyeXtlPWF3YWl0IHRoaXMucmVxdWVzdCh7bWV0aG9kOlwibWV0YW1hc2tfZ2V0UHJvdmlkZXJTdGF0ZVwifSl9Y2F0Y2goZSl7dGhpcy5fbG9nLmVycm9yKFwiTWV0YU1hc2s6IEZhaWxlZCB0byBnZXQgaW5pdGlhbCBzdGF0ZS4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIixlKX10aGlzLl9pbml0aWFsaXplU3RhdGUoZSl9X2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QoZSx0KXtsZXQgbj1gTWV0YU1hc2s6IExvc3QgY29ubmVjdGlvbiB0byBcIiR7ZX1cIi5gO3Q/LnN0YWNrJiYobis9YFxcbiR7dC5zdGFja31gKSx0aGlzLl9sb2cud2FybihuKSx0aGlzLmxpc3RlbmVyQ291bnQoXCJlcnJvclwiKT4wJiZ0aGlzLmVtaXQoXCJlcnJvclwiLG4pLHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QoITEsdD90Lm1lc3NhZ2U6dm9pZCAwKX1faGFuZGxlQ2hhaW5DaGFuZ2VkKHtjaGFpbklkOmUsbmV0d29ya1ZlcnNpb246dH09e30pe3FvKGUpJiYoZT0+Qm9vbGVhbihlKSYmXCJzdHJpbmdcIj09dHlwZW9mIGUpKHQpP1wibG9hZGluZ1wiPT09dD90aGlzLl9oYW5kbGVEaXNjb25uZWN0KCEwKTpzdXBlci5faGFuZGxlQ2hhaW5DaGFuZ2VkKHtjaGFpbklkOmV9KTp0aGlzLl9sb2cuZXJyb3IoJHIuZXJyb3JzLmludmFsaWROZXR3b3JrUGFyYW1zKCkse2NoYWluSWQ6ZSxuZXR3b3JrVmVyc2lvbjp0fSl9fSxQYT1jbGFzcyBleHRlbmRzIElhe2NvbnN0cnVjdG9yKGUse2pzb25ScGNTdHJlYW1OYW1lOnQ9XCJtZXRhbWFzay1wcm92aWRlclwiLGxvZ2dlcjpuPWNvbnNvbGUsbWF4RXZlbnRMaXN0ZW5lcnM6cj0xMDAsc2hvdWxkU2VuZE1ldGFkYXRhOml9PXt9KXtpZihzdXBlcihlLHtqc29uUnBjU3RyZWFtTmFtZTp0LGxvZ2dlcjpuLG1heEV2ZW50TGlzdGVuZXJzOnIscnBjTWlkZGxld2FyZTpVbyhuKX0pLHRoaXMuX3NlbnRXYXJuaW5ncz17Y2hhaW5JZDohMSxuZXR3b3JrVmVyc2lvbjohMSxzZWxlY3RlZEFkZHJlc3M6ITEsZW5hYmxlOiExLGV4cGVyaW1lbnRhbE1ldGhvZHM6ITEsc2VuZDohMSxldmVudHM6e2Nsb3NlOiExLGRhdGE6ITEsbmV0d29ya0NoYW5nZWQ6ITEsbm90aWZpY2F0aW9uOiExfX0sUW8odGhpcyxBYSx2b2lkIDApLHRoaXMuX2luaXRpYWxpemVTdGF0ZUFzeW5jKCksWG8odGhpcyxBYSxudWxsKSx0aGlzLmlzTWV0YU1hc2s9ITAsdGhpcy5fc2VuZFN5bmM9dGhpcy5fc2VuZFN5bmMuYmluZCh0aGlzKSx0aGlzLmVuYWJsZT10aGlzLmVuYWJsZS5iaW5kKHRoaXMpLHRoaXMuc2VuZD10aGlzLnNlbmQuYmluZCh0aGlzKSx0aGlzLnNlbmRBc3luYz10aGlzLnNlbmRBc3luYy5iaW5kKHRoaXMpLHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uPXRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uLmJpbmQodGhpcyksdGhpcy5fbWV0YW1hc2s9dGhpcy5fZ2V0RXhwZXJpbWVudGFsQXBpKCksdGhpcy5fanNvblJwY0Nvbm5lY3Rpb24uZXZlbnRzLm9uKFwibm90aWZpY2F0aW9uXCIsKGU9Pntjb25zdHttZXRob2Q6dH09ZTtIby5pbmNsdWRlcyh0KSYmKHRoaXMuZW1pdChcImRhdGFcIixlKSx0aGlzLmVtaXQoXCJub3RpZmljYXRpb25cIixlLnBhcmFtcy5yZXN1bHQpKX0pKSxpKWlmKFwiY29tcGxldGVcIj09PWRvY3VtZW50LnJlYWR5U3RhdGUpV28odGhpcy5fcnBjRW5naW5lLHRoaXMuX2xvZyk7ZWxzZXtjb25zdCBlPSgpPT57V28odGhpcy5fcnBjRW5naW5lLHRoaXMuX2xvZyksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZSl9O3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGUpfX1nZXQgY2hhaW5JZCgpe3JldHVybiB0aGlzLl9zZW50V2FybmluZ3MuY2hhaW5JZHx8KHRoaXMuX2xvZy53YXJuKCRyLndhcm5pbmdzLmNoYWluSWREZXByZWNhdGlvbiksdGhpcy5fc2VudFdhcm5pbmdzLmNoYWluSWQ9ITApLHN1cGVyLmNoYWluSWR9Z2V0IG5ldHdvcmtWZXJzaW9uKCl7cmV0dXJuIHRoaXMuX3NlbnRXYXJuaW5ncy5uZXR3b3JrVmVyc2lvbnx8KHRoaXMuX2xvZy53YXJuKCRyLndhcm5pbmdzLm5ldHdvcmtWZXJzaW9uRGVwcmVjYXRpb24pLHRoaXMuX3NlbnRXYXJuaW5ncy5uZXR3b3JrVmVyc2lvbj0hMCksSm8odGhpcyxBYSl9Z2V0IHNlbGVjdGVkQWRkcmVzcygpe3JldHVybiB0aGlzLl9zZW50V2FybmluZ3Muc2VsZWN0ZWRBZGRyZXNzfHwodGhpcy5fbG9nLndhcm4oJHIud2FybmluZ3Muc2VsZWN0ZWRBZGRyZXNzRGVwcmVjYXRpb24pLHRoaXMuX3NlbnRXYXJuaW5ncy5zZWxlY3RlZEFkZHJlc3M9ITApLHN1cGVyLnNlbGVjdGVkQWRkcmVzc31zZW5kQXN5bmMoZSx0KXt0aGlzLl9ycGNSZXF1ZXN0KGUsdCl9YWRkTGlzdGVuZXIoZSx0KXtyZXR1cm4gdGhpcy5fd2Fybk9mRGVwcmVjYXRpb24oZSksc3VwZXIuYWRkTGlzdGVuZXIoZSx0KX1vbihlLHQpe3JldHVybiB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbihlKSxzdXBlci5vbihlLHQpfW9uY2UoZSx0KXtyZXR1cm4gdGhpcy5fd2Fybk9mRGVwcmVjYXRpb24oZSksc3VwZXIub25jZShlLHQpfXByZXBlbmRMaXN0ZW5lcihlLHQpe3JldHVybiB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbihlKSxzdXBlci5wcmVwZW5kTGlzdGVuZXIoZSx0KX1wcmVwZW5kT25jZUxpc3RlbmVyKGUsdCl7cmV0dXJuIHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uKGUpLHN1cGVyLnByZXBlbmRPbmNlTGlzdGVuZXIoZSx0KX1faGFuZGxlRGlzY29ubmVjdChlLHQpe3N1cGVyLl9oYW5kbGVEaXNjb25uZWN0KGUsdCksSm8odGhpcyxBYSkmJiFlJiZYbyh0aGlzLEFhLG51bGwpfV93YXJuT2ZEZXByZWNhdGlvbihlKXshMT09PXRoaXMuX3NlbnRXYXJuaW5ncz8uZXZlbnRzW2VdJiYodGhpcy5fbG9nLndhcm4oJHIud2FybmluZ3MuZXZlbnRzW2VdKSx0aGlzLl9zZW50V2FybmluZ3MuZXZlbnRzW2VdPSEwKX1hc3luYyBlbmFibGUoKXtyZXR1cm4gdGhpcy5fc2VudFdhcm5pbmdzLmVuYWJsZXx8KHRoaXMuX2xvZy53YXJuKCRyLndhcm5pbmdzLmVuYWJsZURlcHJlY2F0aW9uKSx0aGlzLl9zZW50V2FybmluZ3MuZW5hYmxlPSEwKSxuZXcgUHJvbWlzZSgoKGUsdCk9Pnt0cnl7dGhpcy5fcnBjUmVxdWVzdCh7bWV0aG9kOlwiZXRoX3JlcXVlc3RBY2NvdW50c1wiLHBhcmFtczpbXX0sRm8oZSx0KSl9Y2F0Y2goZSl7dChlKX19KSl9c2VuZChlLHQpe3JldHVybiB0aGlzLl9zZW50V2FybmluZ3Muc2VuZHx8KHRoaXMuX2xvZy53YXJuKCRyLndhcm5pbmdzLnNlbmREZXByZWNhdGlvbiksdGhpcy5fc2VudFdhcm5pbmdzLnNlbmQ9ITApLFwic3RyaW5nXCIhPXR5cGVvZiBlfHx0JiYhQXJyYXkuaXNBcnJheSh0KT9lJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgdD90aGlzLl9ycGNSZXF1ZXN0KGUsdCk6dGhpcy5fc2VuZFN5bmMoZSk6bmV3IFByb21pc2UoKChuLHIpPT57dHJ5e3RoaXMuX3JwY1JlcXVlc3Qoe21ldGhvZDplLHBhcmFtczp0fSxGbyhuLHIsITEpKX1jYXRjaChlKXtyKGUpfX0pKX1fc2VuZFN5bmMoZSl7bGV0IHQ7c3dpdGNoKGUubWV0aG9kKXtjYXNlXCJldGhfYWNjb3VudHNcIjp0PXRoaXMuc2VsZWN0ZWRBZGRyZXNzP1t0aGlzLnNlbGVjdGVkQWRkcmVzc106W107YnJlYWs7Y2FzZVwiZXRoX2NvaW5iYXNlXCI6dD10aGlzLnNlbGVjdGVkQWRkcmVzcz8/bnVsbDticmVhaztjYXNlXCJldGhfdW5pbnN0YWxsRmlsdGVyXCI6dGhpcy5fcnBjUmVxdWVzdChlLHpvKSx0PSEwO2JyZWFrO2Nhc2VcIm5ldF92ZXJzaW9uXCI6dD1Kbyh0aGlzLEFhKT8/bnVsbDticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcigkci5lcnJvcnMudW5zdXBwb3J0ZWRTeW5jKGUubWV0aG9kKSl9cmV0dXJue2lkOmUuaWQsanNvbnJwYzplLmpzb25ycGMscmVzdWx0OnR9fV9nZXRFeHBlcmltZW50YWxBcGkoKXtyZXR1cm4gbmV3IFByb3h5KHtpc1VubG9ja2VkOmFzeW5jKCk9Pih0aGlzLl9zdGF0ZS5pbml0aWFsaXplZHx8YXdhaXQgbmV3IFByb21pc2UoKGU9Pnt0aGlzLm9uKFwiX2luaXRpYWxpemVkXCIsKCgpPT5lKCkpKX0pKSx0aGlzLl9zdGF0ZS5pc1VubG9ja2VkKSxyZXF1ZXN0QmF0Y2g6YXN5bmMgZT0+e2lmKCFBcnJheS5pc0FycmF5KGUpKXRocm93IGhvKHttZXNzYWdlOlwiQmF0Y2ggcmVxdWVzdHMgbXVzdCBiZSBtYWRlIHdpdGggYW4gYXJyYXkgb2YgcmVxdWVzdCBvYmplY3RzLlwiLGRhdGE6ZX0pO3JldHVybiBuZXcgUHJvbWlzZSgoKHQsbik9Pnt0aGlzLl9ycGNSZXF1ZXN0KGUsRm8odCxuKSl9KSl9fSx7Z2V0OihlLHQsLi4ubik9Pih0aGlzLl9zZW50V2FybmluZ3MuZXhwZXJpbWVudGFsTWV0aG9kc3x8KHRoaXMuX2xvZy53YXJuKCRyLndhcm5pbmdzLmV4cGVyaW1lbnRhbE1ldGhvZHMpLHRoaXMuX3NlbnRXYXJuaW5ncy5leHBlcmltZW50YWxNZXRob2RzPSEwKSxSZWZsZWN0LmdldChlLHQsLi4ubikpfSl9X2hhbmRsZUNoYWluQ2hhbmdlZCh7Y2hhaW5JZDplLG5ldHdvcmtWZXJzaW9uOnR9PXt9KXtzdXBlci5faGFuZGxlQ2hhaW5DaGFuZ2VkKHtjaGFpbklkOmUsbmV0d29ya1ZlcnNpb246dH0pLHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkJiZ0IT09Sm8odGhpcyxBYSkmJihYbyh0aGlzLEFhLHQpLHRoaXMuX3N0YXRlLmluaXRpYWxpemVkJiZ0aGlzLmVtaXQoXCJuZXR3b3JrQ2hhbmdlZFwiLEpvKHRoaXMsQWEpKSl9fTtBYT1uZXcgV2Vha01hcDtjb25zdCBSYT10KFwiTU1fU0RLXCIpO1JhLmNvbG9yPVwiI0ZGQUMxQ1wiO3ZhciBPYT17fSxOYT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTmEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksTmEuRXRoZXJldW1Qcm92aWRlckVycm9yPU5hLkV0aGVyZXVtUnBjRXJyb3I9dm9pZCAwO2NvbnN0IERhPVlpO2NsYXNzIExhIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoZSx0LG4pe2lmKCFOdW1iZXIuaXNJbnRlZ2VyKGUpKXRocm93IG5ldyBFcnJvcignXCJjb2RlXCIgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO2lmKCF0fHxcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoJ1wibWVzc2FnZVwiIG11c3QgYmUgYSBub25lbXB0eSBzdHJpbmcuJyk7c3VwZXIodCksdGhpcy5jb2RlPWUsdm9pZCAwIT09biYmKHRoaXMuZGF0YT1uKX1zZXJpYWxpemUoKXtjb25zdCBlPXtjb2RlOnRoaXMuY29kZSxtZXNzYWdlOnRoaXMubWVzc2FnZX07cmV0dXJuIHZvaWQgMCE9PXRoaXMuZGF0YSYmKGUuZGF0YT10aGlzLmRhdGEpLHRoaXMuc3RhY2smJihlLnN0YWNrPXRoaXMuc3RhY2spLGV9dG9TdHJpbmcoKXtyZXR1cm4gRGEuZGVmYXVsdCh0aGlzLnNlcmlhbGl6ZSgpLEJhLDIpfX1OYS5FdGhlcmV1bVJwY0Vycm9yPUxhO2Z1bmN0aW9uIEJhKGUsdCl7aWYoXCJbQ2lyY3VsYXJdXCIhPT10KXJldHVybiB0fU5hLkV0aGVyZXVtUHJvdmlkZXJFcnJvcj1jbGFzcyBleHRlbmRzIExhe2NvbnN0cnVjdG9yKGUsdCxuKXtpZighZnVuY3Rpb24oZSl7cmV0dXJuIE51bWJlci5pc0ludGVnZXIoZSkmJmU+PTFlMyYmZTw9NDk5OX0oZSkpdGhyb3cgbmV3IEVycm9yKCdcImNvZGVcIiBtdXN0IGJlIGFuIGludGVnZXIgc3VjaCB0aGF0OiAxMDAwIDw9IGNvZGUgPD0gNDk5OScpO3N1cGVyKGUsdCxuKX19O3ZhciBLYT17fSxqYT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoamEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksamEuZXJyb3JWYWx1ZXM9amEuZXJyb3JDb2Rlcz12b2lkIDAsamEuZXJyb3JDb2Rlcz17cnBjOntpbnZhbGlkSW5wdXQ6LTMyZTMscmVzb3VyY2VOb3RGb3VuZDotMzIwMDEscmVzb3VyY2VVbmF2YWlsYWJsZTotMzIwMDIsdHJhbnNhY3Rpb25SZWplY3RlZDotMzIwMDMsbWV0aG9kTm90U3VwcG9ydGVkOi0zMjAwNCxsaW1pdEV4Y2VlZGVkOi0zMjAwNSxwYXJzZTotMzI3MDAsaW52YWxpZFJlcXVlc3Q6LTMyNjAwLG1ldGhvZE5vdEZvdW5kOi0zMjYwMSxpbnZhbGlkUGFyYW1zOi0zMjYwMixpbnRlcm5hbDotMzI2MDN9LHByb3ZpZGVyOnt1c2VyUmVqZWN0ZWRSZXF1ZXN0OjQwMDEsdW5hdXRob3JpemVkOjQxMDAsdW5zdXBwb3J0ZWRNZXRob2Q6NDIwMCxkaXNjb25uZWN0ZWQ6NDkwMCxjaGFpbkRpc2Nvbm5lY3RlZDo0OTAxfX0samEuZXJyb3JWYWx1ZXM9e1wiLTMyNzAwXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIkludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci4gQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXCJ9LFwiLTMyNjAwXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIlRoZSBKU09OIHNlbnQgaXMgbm90IGEgdmFsaWQgUmVxdWVzdCBvYmplY3QuXCJ9LFwiLTMyNjAxXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIlRoZSBtZXRob2QgZG9lcyBub3QgZXhpc3QgLyBpcyBub3QgYXZhaWxhYmxlLlwifSxcIi0zMjYwMlwiOntzdGFuZGFyZDpcIkpTT04gUlBDIDIuMFwiLG1lc3NhZ2U6XCJJbnZhbGlkIG1ldGhvZCBwYXJhbWV0ZXIocykuXCJ9LFwiLTMyNjAzXCI6e3N0YW5kYXJkOlwiSlNPTiBSUEMgMi4wXCIsbWVzc2FnZTpcIkludGVybmFsIEpTT04tUlBDIGVycm9yLlwifSxcIi0zMjAwMFwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIkludmFsaWQgaW5wdXQuXCJ9LFwiLTMyMDAxXCI6e3N0YW5kYXJkOlwiRUlQLTE0NzRcIixtZXNzYWdlOlwiUmVzb3VyY2Ugbm90IGZvdW5kLlwifSxcIi0zMjAwMlwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlJlc291cmNlIHVuYXZhaWxhYmxlLlwifSxcIi0zMjAwM1wiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlRyYW5zYWN0aW9uIHJlamVjdGVkLlwifSxcIi0zMjAwNFwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIk1ldGhvZCBub3Qgc3VwcG9ydGVkLlwifSxcIi0zMjAwNVwiOntzdGFuZGFyZDpcIkVJUC0xNDc0XCIsbWVzc2FnZTpcIlJlcXVlc3QgbGltaXQgZXhjZWVkZWQuXCJ9LDQwMDE6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVXNlciByZWplY3RlZCB0aGUgcmVxdWVzdC5cIn0sNDEwMDp7c3RhbmRhcmQ6XCJFSVAtMTE5M1wiLG1lc3NhZ2U6XCJUaGUgcmVxdWVzdGVkIGFjY291bnQgYW5kL29yIG1ldGhvZCBoYXMgbm90IGJlZW4gYXV0aG9yaXplZCBieSB0aGUgdXNlci5cIn0sNDIwMDp7c3RhbmRhcmQ6XCJFSVAtMTE5M1wiLG1lc3NhZ2U6XCJUaGUgcmVxdWVzdGVkIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgRXRoZXJldW0gcHJvdmlkZXIuXCJ9LDQ5MDA6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIGFsbCBjaGFpbnMuXCJ9LDQ5MDE6e3N0YW5kYXJkOlwiRUlQLTExOTNcIixtZXNzYWdlOlwiVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBzcGVjaWZpZWQgY2hhaW4uXCJ9fSxmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLnNlcmlhbGl6ZUVycm9yPWUuaXNWYWxpZENvZGU9ZS5nZXRNZXNzYWdlRnJvbUNvZGU9ZS5KU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRT12b2lkIDA7Y29uc3QgdD1qYSxuPU5hLHI9dC5lcnJvckNvZGVzLnJwYy5pbnRlcm5hbCxpPVwiVW5zcGVjaWZpZWQgZXJyb3IgbWVzc2FnZS4gVGhpcyBpcyBhIGJ1ZywgcGxlYXNlIHJlcG9ydCBpdC5cIixvPXtjb2RlOnIsbWVzc2FnZTpzKHIpfTtmdW5jdGlvbiBzKG4scj1pKXtpZihOdW1iZXIuaXNJbnRlZ2VyKG4pKXtjb25zdCByPW4udG9TdHJpbmcoKTtpZihsKHQuZXJyb3JWYWx1ZXMscikpcmV0dXJuIHQuZXJyb3JWYWx1ZXNbcl0ubWVzc2FnZTtpZihjKG4pKXJldHVybiBlLkpTT05fUlBDX1NFUlZFUl9FUlJPUl9NRVNTQUdFfXJldHVybiByfWZ1bmN0aW9uIGEoZSl7aWYoIU51bWJlci5pc0ludGVnZXIoZSkpcmV0dXJuITE7Y29uc3Qgbj1lLnRvU3RyaW5nKCk7cmV0dXJuISF0LmVycm9yVmFsdWVzW25dfHwhIWMoZSl9ZnVuY3Rpb24gYyhlKXtyZXR1cm4gZT49LTMyMDk5JiZlPD0tMzJlM31mdW5jdGlvbiBkKGUpe3JldHVybiBlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmIUFycmF5LmlzQXJyYXkoZSk/T2JqZWN0LmFzc2lnbih7fSxlKTplfWZ1bmN0aW9uIGwoZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9ZS5KU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRT1cIlVuc3BlY2lmaWVkIHNlcnZlciBlcnJvci5cIixlLmdldE1lc3NhZ2VGcm9tQ29kZT1zLGUuaXNWYWxpZENvZGU9YSxlLnNlcmlhbGl6ZUVycm9yPWZ1bmN0aW9uKGUse2ZhbGxiYWNrRXJyb3I6dD1vLHNob3VsZEluY2x1ZGVTdGFjazpyPSExfT17fSl7dmFyIGksYztpZighdHx8IU51bWJlci5pc0ludGVnZXIodC5jb2RlKXx8XCJzdHJpbmdcIiE9dHlwZW9mIHQubWVzc2FnZSl0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IHByb3ZpZGUgZmFsbGJhY2sgZXJyb3Igd2l0aCBpbnRlZ2VyIG51bWJlciBjb2RlIGFuZCBzdHJpbmcgbWVzc2FnZS5cIik7aWYoZSBpbnN0YW5jZW9mIG4uRXRoZXJldW1ScGNFcnJvcilyZXR1cm4gZS5zZXJpYWxpemUoKTtjb25zdCB1PXt9O2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiYhQXJyYXkuaXNBcnJheShlKSYmbChlLFwiY29kZVwiKSYmYShlLmNvZGUpKXtjb25zdCB0PWU7dS5jb2RlPXQuY29kZSx0Lm1lc3NhZ2UmJlwic3RyaW5nXCI9PXR5cGVvZiB0Lm1lc3NhZ2U/KHUubWVzc2FnZT10Lm1lc3NhZ2UsbCh0LFwiZGF0YVwiKSYmKHUuZGF0YT10LmRhdGEpKToodS5tZXNzYWdlPXModS5jb2RlKSx1LmRhdGE9e29yaWdpbmFsRXJyb3I6ZChlKX0pfWVsc2V7dS5jb2RlPXQuY29kZTtjb25zdCBuPW51bGw9PT0oaT1lKXx8dm9pZCAwPT09aT92b2lkIDA6aS5tZXNzYWdlO3UubWVzc2FnZT1uJiZcInN0cmluZ1wiPT10eXBlb2Ygbj9uOnQubWVzc2FnZSx1LmRhdGE9e29yaWdpbmFsRXJyb3I6ZChlKX19Y29uc3QgaD1udWxsPT09KGM9ZSl8fHZvaWQgMD09PWM/dm9pZCAwOmMuc3RhY2s7cmV0dXJuIHImJmUmJmgmJlwic3RyaW5nXCI9PXR5cGVvZiBoJiYodS5zdGFjaz1oKSx1fX0oS2EpO3ZhciAkYT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoJGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksJGEuZXRoRXJyb3JzPXZvaWQgMDtjb25zdCBIYT1OYSxVYT1LYSxGYT1qYTtmdW5jdGlvbiBxYShlLHQpe2NvbnN0W24scl09V2EodCk7cmV0dXJuIG5ldyBIYS5FdGhlcmV1bVJwY0Vycm9yKGUsbnx8VWEuZ2V0TWVzc2FnZUZyb21Db2RlKGUpLHIpfWZ1bmN0aW9uIHphKGUsdCl7Y29uc3RbbixyXT1XYSh0KTtyZXR1cm4gbmV3IEhhLkV0aGVyZXVtUHJvdmlkZXJFcnJvcihlLG58fFVhLmdldE1lc3NhZ2VGcm9tQ29kZShlKSxyKX1mdW5jdGlvbiBXYShlKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm5bZV07aWYoXCJvYmplY3RcIj09dHlwZW9mIGUmJiFBcnJheS5pc0FycmF5KGUpKXtjb25zdHttZXNzYWdlOnQsZGF0YTpufT1lO2lmKHQmJlwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihcIk11c3Qgc3BlY2lmeSBzdHJpbmcgbWVzc2FnZS5cIik7cmV0dXJuW3R8fHZvaWQgMCxuXX19cmV0dXJuW119JGEuZXRoRXJyb3JzPXtycGM6e3BhcnNlOmU9PnFhKEZhLmVycm9yQ29kZXMucnBjLnBhcnNlLGUpLGludmFsaWRSZXF1ZXN0OmU9PnFhKEZhLmVycm9yQ29kZXMucnBjLmludmFsaWRSZXF1ZXN0LGUpLGludmFsaWRQYXJhbXM6ZT0+cWEoRmEuZXJyb3JDb2Rlcy5ycGMuaW52YWxpZFBhcmFtcyxlKSxtZXRob2ROb3RGb3VuZDplPT5xYShGYS5lcnJvckNvZGVzLnJwYy5tZXRob2ROb3RGb3VuZCxlKSxpbnRlcm5hbDplPT5xYShGYS5lcnJvckNvZGVzLnJwYy5pbnRlcm5hbCxlKSxzZXJ2ZXI6ZT0+e2lmKCFlfHxcIm9iamVjdFwiIT10eXBlb2YgZXx8QXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoXCJFdGhlcmV1bSBSUEMgU2VydmVyIGVycm9ycyBtdXN0IHByb3ZpZGUgc2luZ2xlIG9iamVjdCBhcmd1bWVudC5cIik7Y29uc3R7Y29kZTp0fT1lO2lmKCFOdW1iZXIuaXNJbnRlZ2VyKHQpfHx0Pi0zMjAwNXx8dDwtMzIwOTkpdGhyb3cgbmV3IEVycm9yKCdcImNvZGVcIiBtdXN0IGJlIGFuIGludGVnZXIgc3VjaCB0aGF0OiAtMzIwOTkgPD0gY29kZSA8PSAtMzIwMDUnKTtyZXR1cm4gcWEodCxlKX0saW52YWxpZElucHV0OmU9PnFhKEZhLmVycm9yQ29kZXMucnBjLmludmFsaWRJbnB1dCxlKSxyZXNvdXJjZU5vdEZvdW5kOmU9PnFhKEZhLmVycm9yQ29kZXMucnBjLnJlc291cmNlTm90Rm91bmQsZSkscmVzb3VyY2VVbmF2YWlsYWJsZTplPT5xYShGYS5lcnJvckNvZGVzLnJwYy5yZXNvdXJjZVVuYXZhaWxhYmxlLGUpLHRyYW5zYWN0aW9uUmVqZWN0ZWQ6ZT0+cWEoRmEuZXJyb3JDb2Rlcy5ycGMudHJhbnNhY3Rpb25SZWplY3RlZCxlKSxtZXRob2ROb3RTdXBwb3J0ZWQ6ZT0+cWEoRmEuZXJyb3JDb2Rlcy5ycGMubWV0aG9kTm90U3VwcG9ydGVkLGUpLGxpbWl0RXhjZWVkZWQ6ZT0+cWEoRmEuZXJyb3JDb2Rlcy5ycGMubGltaXRFeGNlZWRlZCxlKX0scHJvdmlkZXI6e3VzZXJSZWplY3RlZFJlcXVlc3Q6ZT0+emEoRmEuZXJyb3JDb2Rlcy5wcm92aWRlci51c2VyUmVqZWN0ZWRSZXF1ZXN0LGUpLHVuYXV0aG9yaXplZDplPT56YShGYS5lcnJvckNvZGVzLnByb3ZpZGVyLnVuYXV0aG9yaXplZCxlKSx1bnN1cHBvcnRlZE1ldGhvZDplPT56YShGYS5lcnJvckNvZGVzLnByb3ZpZGVyLnVuc3VwcG9ydGVkTWV0aG9kLGUpLGRpc2Nvbm5lY3RlZDplPT56YShGYS5lcnJvckNvZGVzLnByb3ZpZGVyLmRpc2Nvbm5lY3RlZCxlKSxjaGFpbkRpc2Nvbm5lY3RlZDplPT56YShGYS5lcnJvckNvZGVzLnByb3ZpZGVyLmNoYWluRGlzY29ubmVjdGVkLGUpLGN1c3RvbTplPT57aWYoIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlfHxBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBFcnJvcihcIkV0aGVyZXVtIFByb3ZpZGVyIGN1c3RvbSBlcnJvcnMgbXVzdCBwcm92aWRlIHNpbmdsZSBvYmplY3QgYXJndW1lbnQuXCIpO2NvbnN0e2NvZGU6dCxtZXNzYWdlOm4sZGF0YTpyfT1lO2lmKCFufHxcInN0cmluZ1wiIT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoJ1wibWVzc2FnZVwiIG11c3QgYmUgYSBub25lbXB0eSBzdHJpbmcnKTtyZXR1cm4gbmV3IEhhLkV0aGVyZXVtUHJvdmlkZXJFcnJvcih0LG4scil9fX0sZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5nZXRNZXNzYWdlRnJvbUNvZGU9ZS5zZXJpYWxpemVFcnJvcj1lLkV0aGVyZXVtUHJvdmlkZXJFcnJvcj1lLkV0aGVyZXVtUnBjRXJyb3I9ZS5ldGhFcnJvcnM9ZS5lcnJvckNvZGVzPXZvaWQgMDtjb25zdCB0PU5hO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRXRoZXJldW1ScGNFcnJvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0LkV0aGVyZXVtUnBjRXJyb3J9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJFdGhlcmV1bVByb3ZpZGVyRXJyb3JcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdC5FdGhlcmV1bVByb3ZpZGVyRXJyb3J9fSk7Y29uc3Qgbj1LYTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInNlcmlhbGl6ZUVycm9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4uc2VyaWFsaXplRXJyb3J9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJnZXRNZXNzYWdlRnJvbUNvZGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRNZXNzYWdlRnJvbUNvZGV9fSk7Y29uc3Qgcj0kYTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImV0aEVycm9yc1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByLmV0aEVycm9yc319KTtjb25zdCBpPWphO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZXJyb3JDb2Rlc1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpLmVycm9yQ29kZXN9fSl9KE9hKTtjb25zdCBWYT17XCJBbWF6b24gU2lsa1wiOlwiYW1hem9uX3NpbGtcIixcIkFuZHJvaWQgQnJvd3NlclwiOlwiYW5kcm9pZFwiLEJhZGE6XCJiYWRhXCIsQmxhY2tCZXJyeTpcImJsYWNrYmVycnlcIixDaHJvbWU6XCJjaHJvbWVcIixDaHJvbWl1bTpcImNocm9taXVtXCIsRWxlY3Ryb246XCJlbGVjdHJvblwiLEVwaXBoYW55OlwiZXBpcGhhbnlcIixGaXJlZm94OlwiZmlyZWZveFwiLEZvY3VzOlwiZm9jdXNcIixHZW5lcmljOlwiZ2VuZXJpY1wiLFwiR29vZ2xlIFNlYXJjaFwiOlwiZ29vZ2xlX3NlYXJjaFwiLEdvb2dsZWJvdDpcImdvb2dsZWJvdFwiLFwiSW50ZXJuZXQgRXhwbG9yZXJcIjpcImllXCIsXCJLLU1lbGVvblwiOlwia19tZWxlb25cIixNYXh0aG9uOlwibWF4dGhvblwiLFwiTWljcm9zb2Z0IEVkZ2VcIjpcImVkZ2VcIixcIk1aIEJyb3dzZXJcIjpcIm16XCIsXCJOQVZFUiBXaGFsZSBCcm93c2VyXCI6XCJuYXZlclwiLE9wZXJhOlwib3BlcmFcIixcIk9wZXJhIENvYXN0XCI6XCJvcGVyYV9jb2FzdFwiLFBoYW50b21KUzpcInBoYW50b21qc1wiLFB1ZmZpbjpcInB1ZmZpblwiLFF1cFppbGxhOlwicXVwemlsbGFcIixRUTpcInFxXCIsUVFMaXRlOlwicXFsaXRlXCIsU2FmYXJpOlwic2FmYXJpXCIsU2FpbGZpc2g6XCJzYWlsZmlzaFwiLFwiU2Ftc3VuZyBJbnRlcm5ldCBmb3IgQW5kcm9pZFwiOlwic2Ftc3VuZ19pbnRlcm5ldFwiLFNlYU1vbmtleTpcInNlYW1vbmtleVwiLFNsZWlwbmlyOlwic2xlaXBuaXJcIixTd2luZzpcInN3aW5nXCIsVGl6ZW46XCJ0aXplblwiLFwiVUMgQnJvd3NlclwiOlwidWNcIixWaXZhbGRpOlwidml2YWxkaVwiLFwiV2ViT1MgQnJvd3NlclwiOlwid2Vib3NcIixXZUNoYXQ6XCJ3ZWNoYXRcIixcIllhbmRleCBCcm93c2VyXCI6XCJ5YW5kZXhcIixSb2t1Olwicm9rdVwifSxHYT17YW1hem9uX3NpbGs6XCJBbWF6b24gU2lsa1wiLGFuZHJvaWQ6XCJBbmRyb2lkIEJyb3dzZXJcIixiYWRhOlwiQmFkYVwiLGJsYWNrYmVycnk6XCJCbGFja0JlcnJ5XCIsY2hyb21lOlwiQ2hyb21lXCIsY2hyb21pdW06XCJDaHJvbWl1bVwiLGVsZWN0cm9uOlwiRWxlY3Ryb25cIixlcGlwaGFueTpcIkVwaXBoYW55XCIsZmlyZWZveDpcIkZpcmVmb3hcIixmb2N1czpcIkZvY3VzXCIsZ2VuZXJpYzpcIkdlbmVyaWNcIixnb29nbGVib3Q6XCJHb29nbGVib3RcIixnb29nbGVfc2VhcmNoOlwiR29vZ2xlIFNlYXJjaFwiLGllOlwiSW50ZXJuZXQgRXhwbG9yZXJcIixrX21lbGVvbjpcIkstTWVsZW9uXCIsbWF4dGhvbjpcIk1heHRob25cIixlZGdlOlwiTWljcm9zb2Z0IEVkZ2VcIixtejpcIk1aIEJyb3dzZXJcIixuYXZlcjpcIk5BVkVSIFdoYWxlIEJyb3dzZXJcIixvcGVyYTpcIk9wZXJhXCIsb3BlcmFfY29hc3Q6XCJPcGVyYSBDb2FzdFwiLHBoYW50b21qczpcIlBoYW50b21KU1wiLHB1ZmZpbjpcIlB1ZmZpblwiLHF1cHppbGxhOlwiUXVwWmlsbGFcIixxcTpcIlFRIEJyb3dzZXJcIixxcWxpdGU6XCJRUSBCcm93c2VyIExpdGVcIixzYWZhcmk6XCJTYWZhcmlcIixzYWlsZmlzaDpcIlNhaWxmaXNoXCIsc2Ftc3VuZ19pbnRlcm5ldDpcIlNhbXN1bmcgSW50ZXJuZXQgZm9yIEFuZHJvaWRcIixzZWFtb25rZXk6XCJTZWFNb25rZXlcIixzbGVpcG5pcjpcIlNsZWlwbmlyXCIsc3dpbmc6XCJTd2luZ1wiLHRpemVuOlwiVGl6ZW5cIix1YzpcIlVDIEJyb3dzZXJcIix2aXZhbGRpOlwiVml2YWxkaVwiLHdlYm9zOlwiV2ViT1MgQnJvd3NlclwiLHdlY2hhdDpcIldlQ2hhdFwiLHlhbmRleDpcIllhbmRleCBCcm93c2VyXCJ9LFlhPXt0YWJsZXQ6XCJ0YWJsZXRcIixtb2JpbGU6XCJtb2JpbGVcIixkZXNrdG9wOlwiZGVza3RvcFwiLHR2OlwidHZcIn0sWmE9e1dpbmRvd3NQaG9uZTpcIldpbmRvd3MgUGhvbmVcIixXaW5kb3dzOlwiV2luZG93c1wiLE1hY09TOlwibWFjT1NcIixpT1M6XCJpT1NcIixBbmRyb2lkOlwiQW5kcm9pZFwiLFdlYk9TOlwiV2ViT1NcIixCbGFja0JlcnJ5OlwiQmxhY2tCZXJyeVwiLEJhZGE6XCJCYWRhXCIsVGl6ZW46XCJUaXplblwiLExpbnV4OlwiTGludXhcIixDaHJvbWVPUzpcIkNocm9tZSBPU1wiLFBsYXlTdGF0aW9uNDpcIlBsYXlTdGF0aW9uIDRcIixSb2t1OlwiUm9rdVwifSxKYT17RWRnZUhUTUw6XCJFZGdlSFRNTFwiLEJsaW5rOlwiQmxpbmtcIixUcmlkZW50OlwiVHJpZGVudFwiLFByZXN0bzpcIlByZXN0b1wiLEdlY2tvOlwiR2Vja29cIixXZWJLaXQ6XCJXZWJLaXRcIn07Y2xhc3MgUWF7c3RhdGljIGdldEZpcnN0TWF0Y2goZSx0KXtjb25zdCBuPXQubWF0Y2goZSk7cmV0dXJuIG4mJm4ubGVuZ3RoPjAmJm5bMV18fFwiXCJ9c3RhdGljIGdldFNlY29uZE1hdGNoKGUsdCl7Y29uc3Qgbj10Lm1hdGNoKGUpO3JldHVybiBuJiZuLmxlbmd0aD4xJiZuWzJdfHxcIlwifXN0YXRpYyBtYXRjaEFuZFJldHVybkNvbnN0KGUsdCxuKXtpZihlLnRlc3QodCkpcmV0dXJuIG59c3RhdGljIGdldFdpbmRvd3NWZXJzaW9uTmFtZShlKXtzd2l0Y2goZSl7Y2FzZVwiTlRcIjpyZXR1cm5cIk5UXCI7Y2FzZVwiWFBcIjpjYXNlXCJOVCA1LjFcIjpyZXR1cm5cIlhQXCI7Y2FzZVwiTlQgNS4wXCI6cmV0dXJuXCIyMDAwXCI7Y2FzZVwiTlQgNS4yXCI6cmV0dXJuXCIyMDAzXCI7Y2FzZVwiTlQgNi4wXCI6cmV0dXJuXCJWaXN0YVwiO2Nhc2VcIk5UIDYuMVwiOnJldHVyblwiN1wiO2Nhc2VcIk5UIDYuMlwiOnJldHVyblwiOFwiO2Nhc2VcIk5UIDYuM1wiOnJldHVyblwiOC4xXCI7Y2FzZVwiTlQgMTAuMFwiOnJldHVyblwiMTBcIjtkZWZhdWx0OnJldHVybn19c3RhdGljIGdldE1hY09TVmVyc2lvbk5hbWUoZSl7Y29uc3QgdD1lLnNwbGl0KFwiLlwiKS5zcGxpY2UoMCwyKS5tYXAoKGU9PnBhcnNlSW50KGUsMTApfHwwKSk7aWYodC5wdXNoKDApLDEwPT09dFswXSlzd2l0Y2godFsxXSl7Y2FzZSA1OnJldHVyblwiTGVvcGFyZFwiO2Nhc2UgNjpyZXR1cm5cIlNub3cgTGVvcGFyZFwiO2Nhc2UgNzpyZXR1cm5cIkxpb25cIjtjYXNlIDg6cmV0dXJuXCJNb3VudGFpbiBMaW9uXCI7Y2FzZSA5OnJldHVyblwiTWF2ZXJpY2tzXCI7Y2FzZSAxMDpyZXR1cm5cIllvc2VtaXRlXCI7Y2FzZSAxMTpyZXR1cm5cIkVsIENhcGl0YW5cIjtjYXNlIDEyOnJldHVyblwiU2llcnJhXCI7Y2FzZSAxMzpyZXR1cm5cIkhpZ2ggU2llcnJhXCI7Y2FzZSAxNDpyZXR1cm5cIk1vamF2ZVwiO2Nhc2UgMTU6cmV0dXJuXCJDYXRhbGluYVwiO2RlZmF1bHQ6cmV0dXJufX1zdGF0aWMgZ2V0QW5kcm9pZFZlcnNpb25OYW1lKGUpe2NvbnN0IHQ9ZS5zcGxpdChcIi5cIikuc3BsaWNlKDAsMikubWFwKChlPT5wYXJzZUludChlLDEwKXx8MCkpO2lmKHQucHVzaCgwKSwhKDE9PT10WzBdJiZ0WzFdPDUpKXJldHVybiAxPT09dFswXSYmdFsxXTw2P1wiQ3VwY2FrZVwiOjE9PT10WzBdJiZ0WzFdPj02P1wiRG9udXRcIjoyPT09dFswXSYmdFsxXTwyP1wiRWNsYWlyXCI6Mj09PXRbMF0mJjI9PT10WzFdP1wiRnJveW9cIjoyPT09dFswXSYmdFsxXT4yP1wiR2luZ2VyYnJlYWRcIjozPT09dFswXT9cIkhvbmV5Y29tYlwiOjQ9PT10WzBdJiZ0WzFdPDE/XCJJY2UgQ3JlYW0gU2FuZHdpY2hcIjo0PT09dFswXSYmdFsxXTw0P1wiSmVsbHkgQmVhblwiOjQ9PT10WzBdJiZ0WzFdPj00P1wiS2l0S2F0XCI6NT09PXRbMF0/XCJMb2xsaXBvcFwiOjY9PT10WzBdP1wiTWFyc2htYWxsb3dcIjo3PT09dFswXT9cIk5vdWdhdFwiOjg9PT10WzBdP1wiT3Jlb1wiOjk9PT10WzBdP1wiUGllXCI6dm9pZCAwfXN0YXRpYyBnZXRWZXJzaW9uUHJlY2lzaW9uKGUpe3JldHVybiBlLnNwbGl0KFwiLlwiKS5sZW5ndGh9c3RhdGljIGNvbXBhcmVWZXJzaW9ucyhlLHQsbj0hMSl7Y29uc3Qgcj1RYS5nZXRWZXJzaW9uUHJlY2lzaW9uKGUpLGk9UWEuZ2V0VmVyc2lvblByZWNpc2lvbih0KTtsZXQgbz1NYXRoLm1heChyLGkpLHM9MDtjb25zdCBhPVFhLm1hcChbZSx0XSwoZT0+e2NvbnN0IHQ9by1RYS5nZXRWZXJzaW9uUHJlY2lzaW9uKGUpLG49ZStuZXcgQXJyYXkodCsxKS5qb2luKFwiLjBcIik7cmV0dXJuIFFhLm1hcChuLnNwbGl0KFwiLlwiKSwoZT0+bmV3IEFycmF5KDIwLWUubGVuZ3RoKS5qb2luKFwiMFwiKStlKSkucmV2ZXJzZSgpfSkpO2ZvcihuJiYocz1vLU1hdGgubWluKHIsaSkpLG8tPTE7bz49czspe2lmKGFbMF1bb10+YVsxXVtvXSlyZXR1cm4gMTtpZihhWzBdW29dPT09YVsxXVtvXSl7aWYobz09PXMpcmV0dXJuIDA7by09MX1lbHNlIGlmKGFbMF1bb108YVsxXVtvXSlyZXR1cm4tMX19c3RhdGljIG1hcChlLHQpe2NvbnN0IG49W107bGV0IHI7aWYoQXJyYXkucHJvdG90eXBlLm1hcClyZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGUsdCk7Zm9yKHI9MDtyPGUubGVuZ3RoO3IrPTEpbi5wdXNoKHQoZVtyXSkpO3JldHVybiBufXN0YXRpYyBmaW5kKGUsdCl7bGV0IG4scjtpZihBcnJheS5wcm90b3R5cGUuZmluZClyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChlLHQpO2ZvcihuPTAscj1lLmxlbmd0aDtuPHI7bis9MSl7Y29uc3Qgcj1lW25dO2lmKHQocixuKSlyZXR1cm4gcn19c3RhdGljIGFzc2lnbihlLC4uLnQpe2NvbnN0IG49ZTtsZXQgcixpO2lmKE9iamVjdC5hc3NpZ24pcmV0dXJuIE9iamVjdC5hc3NpZ24oZSwuLi50KTtmb3Iocj0wLGk9dC5sZW5ndGg7cjxpO3IrPTEpe2NvbnN0IGU9dFtyXTtpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUpe09iamVjdC5rZXlzKGUpLmZvckVhY2goKHQ9PntuW3RdPWVbdF19KSl9fXJldHVybiBlfXN0YXRpYyBnZXRCcm93c2VyQWxpYXMoZSl7cmV0dXJuIFZhW2VdfXN0YXRpYyBnZXRCcm93c2VyVHlwZUJ5QWxpYXMoZSl7cmV0dXJuIEdhW2VdfHxcIlwifX1jb25zdCBYYT0vdmVyc2lvblxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlYz1be3Rlc3Q6Wy9nb29nbGVib3QvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIkdvb2dsZWJvdFwifSxuPVFhLmdldEZpcnN0TWF0Y2goL2dvb2dsZWJvdFxcLyhcXGQrKFxcLlxcZCspKS9pLGUpfHxRYS5nZXRGaXJzdE1hdGNoKFhhLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL29wZXJhL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJPcGVyYVwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSl8fFFhLmdldEZpcnN0TWF0Y2goLyg/Om9wZXJhKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9vcHJcXC98b3Bpb3MvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIk9wZXJhXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvKD86b3ByfG9waW9zKVtcXHMvXShcXFMrKS9pLGUpfHxRYS5nZXRGaXJzdE1hdGNoKFhhLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL1NhbXN1bmdCcm93c2VyL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaChYYSxlKXx8UWEuZ2V0Rmlyc3RNYXRjaCgvKD86U2Ftc3VuZ0Jyb3dzZXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL1doYWxlL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJOQVZFUiBXaGFsZSBCcm93c2VyXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaChYYSxlKXx8UWEuZ2V0Rmlyc3RNYXRjaCgvKD86d2hhbGUpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvTVpCcm93c2VyL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJNWiBCcm93c2VyXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvKD86TVpCcm93c2VyKVtcXHMvXShcXGQrKD86XFwuXFxkKykrKS9pLGUpfHxRYS5nZXRGaXJzdE1hdGNoKFhhLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2ZvY3VzL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJGb2N1c1wifSxuPVFhLmdldEZpcnN0TWF0Y2goLyg/OmZvY3VzKVtcXHMvXShcXGQrKD86XFwuXFxkKykrKS9pLGUpfHxRYS5nZXRGaXJzdE1hdGNoKFhhLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3N3aW5nL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJTd2luZ1wifSxuPVFhLmdldEZpcnN0TWF0Y2goLyg/OnN3aW5nKVtcXHMvXShcXGQrKD86XFwuXFxkKykrKS9pLGUpfHxRYS5nZXRGaXJzdE1hdGNoKFhhLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2NvYXN0L2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJPcGVyYSBDb2FzdFwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSl8fFFhLmdldEZpcnN0TWF0Y2goLyg/OmNvYXN0KVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9vcHRcXC9cXGQrKD86Lj9fP1xcZCspKy9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiT3BlcmEgVG91Y2hcIn0sbj1RYS5nZXRGaXJzdE1hdGNoKC8oPzpvcHQpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpfHxRYS5nZXRGaXJzdE1hdGNoKFhhLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3lhYnJvd3Nlci9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiWWFuZGV4IEJyb3dzZXJcIn0sbj1RYS5nZXRGaXJzdE1hdGNoKC8oPzp5YWJyb3dzZXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpfHxRYS5nZXRGaXJzdE1hdGNoKFhhLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3VjYnJvd3Nlci9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiVUMgQnJvd3NlclwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSl8fFFhLmdldEZpcnN0TWF0Y2goLyg/OnVjYnJvd3NlcilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvTWF4dGhvbnxteGlvcy9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiTWF4dGhvblwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSl8fFFhLmdldEZpcnN0TWF0Y2goLyg/Ok1heHRob258bXhpb3MpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2VwaXBoYW55L2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJFcGlwaGFueVwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSl8fFFhLmdldEZpcnN0TWF0Y2goLyg/OmVwaXBoYW55KVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9wdWZmaW4vaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIlB1ZmZpblwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSl8fFFhLmdldEZpcnN0TWF0Y2goLyg/OnB1ZmZpbilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0Olsvc2xlaXBuaXIvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIlNsZWlwbmlyXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaChYYSxlKXx8UWEuZ2V0Rmlyc3RNYXRjaCgvKD86c2xlaXBuaXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2stbWVsZW9uL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJLLU1lbGVvblwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSl8fFFhLmdldEZpcnN0TWF0Y2goLyg/OmstbWVsZW9uKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9taWNyb21lc3Nlbmdlci9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiV2VDaGF0XCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvKD86bWljcm9tZXNzZW5nZXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpfHxRYS5nZXRGaXJzdE1hdGNoKFhhLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3FxYnJvd3Nlci9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOi9xcWJyb3dzZXJsaXRlL2kudGVzdChlKT9cIlFRIEJyb3dzZXIgTGl0ZVwiOlwiUVEgQnJvd3NlclwifSxuPVFhLmdldEZpcnN0TWF0Y2goLyg/OnFxYnJvd3NlcmxpdGV8cXFicm93c2VyKVsvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKXx8UWEuZ2V0Rmlyc3RNYXRjaChYYSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9tc2llfHRyaWRlbnQvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIkludGVybmV0IEV4cGxvcmVyXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvKD86bXNpZSB8cnY6KShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9cXHNlZGdcXC8vaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIk1pY3Jvc29mdCBFZGdlXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvXFxzZWRnXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2VkZyhbZWFdfGlvcykvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIk1pY3Jvc29mdCBFZGdlXCJ9LG49UWEuZ2V0U2Vjb25kTWF0Y2goL2VkZyhbZWFdfGlvcylcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0Olsvdml2YWxkaS9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiVml2YWxkaVwifSxuPVFhLmdldEZpcnN0TWF0Y2goL3ZpdmFsZGlcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0Olsvc2VhbW9ua2V5L2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJTZWFNb25rZXlcIn0sbj1RYS5nZXRGaXJzdE1hdGNoKC9zZWFtb25rZXlcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0Olsvc2FpbGZpc2gvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIlNhaWxmaXNoXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvc2FpbGZpc2hcXHM/YnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9zaWxrL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJBbWF6b24gU2lsa1wifSxuPVFhLmdldEZpcnN0TWF0Y2goL3NpbGtcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvcGhhbnRvbS9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiUGhhbnRvbUpTXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvcGhhbnRvbWpzXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3NsaW1lcmpzL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJTbGltZXJKU1wifSxuPVFhLmdldEZpcnN0TWF0Y2goL3NsaW1lcmpzXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2JsYWNrYmVycnl8XFxiYmJcXGQrL2ksL3JpbVxcc3RhYmxldC9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiQmxhY2tCZXJyeVwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSl8fFFhLmdldEZpcnN0TWF0Y2goL2JsYWNrYmVycnlbXFxkXStcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvKHdlYnxocHcpW28wXXMvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIldlYk9TIEJyb3dzZXJcIn0sbj1RYS5nZXRGaXJzdE1hdGNoKFhhLGUpfHxRYS5nZXRGaXJzdE1hdGNoKC93KD86ZWIpP1tvMF1zYnJvd3NlclxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9iYWRhL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJCYWRhXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvZG9sZmluXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3RpemVuL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJUaXplblwifSxuPVFhLmdldEZpcnN0TWF0Y2goLyg/OnRpemVuXFxzPyk/YnJvd3NlclxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKXx8UWEuZ2V0Rmlyc3RNYXRjaChYYSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9xdXB6aWxsYS9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiUXVwWmlsbGFcIn0sbj1RYS5nZXRGaXJzdE1hdGNoKC8oPzpxdXB6aWxsYSlbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSl8fFFhLmdldEZpcnN0TWF0Y2goWGEsZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvZmlyZWZveHxpY2V3ZWFzZWx8Znhpb3MvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIkZpcmVmb3hcIn0sbj1RYS5nZXRGaXJzdE1hdGNoKC8oPzpmaXJlZm94fGljZXdlYXNlbHxmeGlvcylbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvZWxlY3Ryb24vaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIkVsZWN0cm9uXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvKD86ZWxlY3Ryb24pXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL01pdWlCcm93c2VyL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJNaXVpXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvKD86TWl1aUJyb3dzZXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2Nocm9taXVtL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJDaHJvbWl1bVwifSxuPVFhLmdldEZpcnN0TWF0Y2goLyg/OmNocm9taXVtKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKXx8UWEuZ2V0Rmlyc3RNYXRjaChYYSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9jaHJvbWV8Y3Jpb3N8Y3Jtby9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiQ2hyb21lXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21lfGNyaW9zfGNybW8pXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL0dTQS9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiR29vZ2xlIFNlYXJjaFwifSxuPVFhLmdldEZpcnN0TWF0Y2goLyg/OkdTQSlcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0KGUpe2NvbnN0IHQ9IWUudGVzdCgvbGlrZSBhbmRyb2lkL2kpLG49ZS50ZXN0KC9hbmRyb2lkL2kpO3JldHVybiB0JiZufSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiQW5kcm9pZCBCcm93c2VyXCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaChYYSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9wbGF5c3RhdGlvbiA0L2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJQbGF5U3RhdGlvbiA0XCJ9LG49UWEuZ2V0Rmlyc3RNYXRjaChYYSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9zYWZhcml8YXBwbGV3ZWJraXQvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIlNhZmFyaVwifSxuPVFhLmdldEZpcnN0TWF0Y2goWGEsZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvLiovaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD0tMSE9PWUuc2VhcmNoKFwiXFxcXChcIik/L14oLiopXFwvKC4qKVsgXFx0XVxcKCguKikvOi9eKC4qKVxcLyguKikgLztyZXR1cm57bmFtZTpRYS5nZXRGaXJzdE1hdGNoKHQsZSksdmVyc2lvbjpRYS5nZXRTZWNvbmRNYXRjaCh0LGUpfX19XTt2YXIgdGM9W3t0ZXN0OlsvUm9rdVxcL0RWUC9dLGRlc2NyaWJlKGUpe2NvbnN0IHQ9UWEuZ2V0Rmlyc3RNYXRjaCgvUm9rdVxcL0RWUC0oXFxkK1xcLlxcZCspL2ksZSk7cmV0dXJue25hbWU6WmEuUm9rdSx2ZXJzaW9uOnR9fX0se3Rlc3Q6Wy93aW5kb3dzIHBob25lL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9UWEuZ2V0Rmlyc3RNYXRjaCgvd2luZG93cyBwaG9uZSAoPzpvcyk/XFxzPyhcXGQrKFxcLlxcZCspKikvaSxlKTtyZXR1cm57bmFtZTpaYS5XaW5kb3dzUGhvbmUsdmVyc2lvbjp0fX19LHt0ZXN0Olsvd2luZG93cyAvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD1RYS5nZXRGaXJzdE1hdGNoKC9XaW5kb3dzICgoTlR8WFApKCBcXGRcXGQ/LlxcZCk/KS9pLGUpLG49UWEuZ2V0V2luZG93c1ZlcnNpb25OYW1lKHQpO3JldHVybntuYW1lOlphLldpbmRvd3MsdmVyc2lvbjp0LHZlcnNpb25OYW1lOm59fX0se3Rlc3Q6Wy9NYWNpbnRvc2goLio/KSBGeGlPUyguKj8pXFwvL10sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpaYS5pT1N9LG49UWEuZ2V0U2Vjb25kTWF0Y2goLyhWZXJzaW9uXFwvKShcXGRbXFxkLl0rKS8sZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvbWFjaW50b3NoL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9UWEuZ2V0Rmlyc3RNYXRjaCgvbWFjIG9zIHggKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpLnJlcGxhY2UoL1tfXFxzXS9nLFwiLlwiKSxuPVFhLmdldE1hY09TVmVyc2lvbk5hbWUodCkscj17bmFtZTpaYS5NYWNPUyx2ZXJzaW9uOnR9O3JldHVybiBuJiYoci52ZXJzaW9uTmFtZT1uKSxyfX0se3Rlc3Q6Wy8oaXBvZHxpcGhvbmV8aXBhZCkvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD1RYS5nZXRGaXJzdE1hdGNoKC9vcyAoXFxkKyhbX1xcc11cXGQrKSopIGxpa2UgbWFjIG9zIHgvaSxlKS5yZXBsYWNlKC9bX1xcc10vZyxcIi5cIik7cmV0dXJue25hbWU6WmEuaU9TLHZlcnNpb246dH19fSx7dGVzdChlKXtjb25zdCB0PSFlLnRlc3QoL2xpa2UgYW5kcm9pZC9pKSxuPWUudGVzdCgvYW5kcm9pZC9pKTtyZXR1cm4gdCYmbn0sZGVzY3JpYmUoZSl7Y29uc3QgdD1RYS5nZXRGaXJzdE1hdGNoKC9hbmRyb2lkW1xccy8tXShcXGQrKFxcLlxcZCspKikvaSxlKSxuPVFhLmdldEFuZHJvaWRWZXJzaW9uTmFtZSh0KSxyPXtuYW1lOlphLkFuZHJvaWQsdmVyc2lvbjp0fTtyZXR1cm4gbiYmKHIudmVyc2lvbk5hbWU9bikscn19LHt0ZXN0OlsvKHdlYnxocHcpW28wXXMvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD1RYS5nZXRGaXJzdE1hdGNoKC8oPzp3ZWJ8aHB3KVtvMF1zXFwvKFxcZCsoXFwuXFxkKykqKS9pLGUpLG49e25hbWU6WmEuV2ViT1N9O3JldHVybiB0JiZ0Lmxlbmd0aCYmKG4udmVyc2lvbj10KSxufX0se3Rlc3Q6Wy9ibGFja2JlcnJ5fFxcYmJiXFxkKy9pLC9yaW1cXHN0YWJsZXQvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD1RYS5nZXRGaXJzdE1hdGNoKC9yaW1cXHN0YWJsZXRcXHNvc1xccyhcXGQrKFxcLlxcZCspKikvaSxlKXx8UWEuZ2V0Rmlyc3RNYXRjaCgvYmxhY2tiZXJyeVxcZCtcXC8oXFxkKyhbX1xcc11cXGQrKSopL2ksZSl8fFFhLmdldEZpcnN0TWF0Y2goL1xcYmJiKFxcZCspL2ksZSk7cmV0dXJue25hbWU6WmEuQmxhY2tCZXJyeSx2ZXJzaW9uOnR9fX0se3Rlc3Q6Wy9iYWRhL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9UWEuZ2V0Rmlyc3RNYXRjaCgvYmFkYVxcLyhcXGQrKFxcLlxcZCspKikvaSxlKTtyZXR1cm57bmFtZTpaYS5CYWRhLHZlcnNpb246dH19fSx7dGVzdDpbL3RpemVuL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9UWEuZ2V0Rmlyc3RNYXRjaCgvdGl6ZW5bL1xcc10oXFxkKyhcXC5cXGQrKSopL2ksZSk7cmV0dXJue25hbWU6WmEuVGl6ZW4sdmVyc2lvbjp0fX19LHt0ZXN0OlsvbGludXgvaV0sZGVzY3JpYmU6KCk9Pih7bmFtZTpaYS5MaW51eH0pfSx7dGVzdDpbL0NyT1MvXSxkZXNjcmliZTooKT0+KHtuYW1lOlphLkNocm9tZU9TfSl9LHt0ZXN0OlsvUGxheVN0YXRpb24gNC9dLGRlc2NyaWJlKGUpe2NvbnN0IHQ9UWEuZ2V0Rmlyc3RNYXRjaCgvUGxheVN0YXRpb24gNFsvXFxzXShcXGQrKFxcLlxcZCspKikvaSxlKTtyZXR1cm57bmFtZTpaYS5QbGF5U3RhdGlvbjQsdmVyc2lvbjp0fX19XSxuYz1be3Rlc3Q6Wy9nb29nbGVib3QvaV0sZGVzY3JpYmU6KCk9Pih7dHlwZTpcImJvdFwiLHZlbmRvcjpcIkdvb2dsZVwifSl9LHt0ZXN0OlsvaHVhd2VpL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9UWEuZ2V0Rmlyc3RNYXRjaCgvKGNhbi1sMDEpL2ksZSkmJlwiTm92YVwiLG49e3R5cGU6WWEubW9iaWxlLHZlbmRvcjpcIkh1YXdlaVwifTtyZXR1cm4gdCYmKG4ubW9kZWw9dCksbn19LHt0ZXN0OlsvbmV4dXNcXHMqKD86N3w4fDl8MTApLiovaV0sZGVzY3JpYmU6KCk9Pih7dHlwZTpZYS50YWJsZXQsdmVuZG9yOlwiTmV4dXNcIn0pfSx7dGVzdDpbL2lwYWQvaV0sZGVzY3JpYmU6KCk9Pih7dHlwZTpZYS50YWJsZXQsdmVuZG9yOlwiQXBwbGVcIixtb2RlbDpcImlQYWRcIn0pfSx7dGVzdDpbL01hY2ludG9zaCguKj8pIEZ4aU9TKC4qPylcXC8vXSxkZXNjcmliZTooKT0+KHt0eXBlOllhLnRhYmxldCx2ZW5kb3I6XCJBcHBsZVwiLG1vZGVsOlwiaVBhZFwifSl9LHt0ZXN0Olsva2Z0dCBidWlsZC9pXSxkZXNjcmliZTooKT0+KHt0eXBlOllhLnRhYmxldCx2ZW5kb3I6XCJBbWF6b25cIixtb2RlbDpcIktpbmRsZSBGaXJlIEhEIDdcIn0pfSx7dGVzdDpbL3NpbGsvaV0sZGVzY3JpYmU6KCk9Pih7dHlwZTpZYS50YWJsZXQsdmVuZG9yOlwiQW1hem9uXCJ9KX0se3Rlc3Q6Wy90YWJsZXQoPyEgcGMpL2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6WWEudGFibGV0fSl9LHt0ZXN0KGUpe2NvbnN0IHQ9ZS50ZXN0KC9pcG9kfGlwaG9uZS9pKSxuPWUudGVzdCgvbGlrZSAoaXBvZHxpcGhvbmUpL2kpO3JldHVybiB0JiYhbn0sZGVzY3JpYmUoZSl7Y29uc3QgdD1RYS5nZXRGaXJzdE1hdGNoKC8oaXBvZHxpcGhvbmUpL2ksZSk7cmV0dXJue3R5cGU6WWEubW9iaWxlLHZlbmRvcjpcIkFwcGxlXCIsbW9kZWw6dH19fSx7dGVzdDpbL25leHVzXFxzKlswLTZdLiovaSwvZ2FsYXh5IG5leHVzL2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6WWEubW9iaWxlLHZlbmRvcjpcIk5leHVzXCJ9KX0se3Rlc3Q6Wy9bXi1dbW9iaS9pXSxkZXNjcmliZTooKT0+KHt0eXBlOllhLm1vYmlsZX0pfSx7dGVzdDplPT5cImJsYWNrYmVycnlcIj09PWUuZ2V0QnJvd3Nlck5hbWUoITApLGRlc2NyaWJlOigpPT4oe3R5cGU6WWEubW9iaWxlLHZlbmRvcjpcIkJsYWNrQmVycnlcIn0pfSx7dGVzdDplPT5cImJhZGFcIj09PWUuZ2V0QnJvd3Nlck5hbWUoITApLGRlc2NyaWJlOigpPT4oe3R5cGU6WWEubW9iaWxlfSl9LHt0ZXN0OmU9Plwid2luZG93cyBwaG9uZVwiPT09ZS5nZXRCcm93c2VyTmFtZSgpLGRlc2NyaWJlOigpPT4oe3R5cGU6WWEubW9iaWxlLHZlbmRvcjpcIk1pY3Jvc29mdFwifSl9LHt0ZXN0KGUpe2NvbnN0IHQ9TnVtYmVyKFN0cmluZyhlLmdldE9TVmVyc2lvbigpKS5zcGxpdChcIi5cIilbMF0pO3JldHVyblwiYW5kcm9pZFwiPT09ZS5nZXRPU05hbWUoITApJiZ0Pj0zfSxkZXNjcmliZTooKT0+KHt0eXBlOllhLnRhYmxldH0pfSx7dGVzdDplPT5cImFuZHJvaWRcIj09PWUuZ2V0T1NOYW1lKCEwKSxkZXNjcmliZTooKT0+KHt0eXBlOllhLm1vYmlsZX0pfSx7dGVzdDplPT5cIm1hY29zXCI9PT1lLmdldE9TTmFtZSghMCksZGVzY3JpYmU6KCk9Pih7dHlwZTpZYS5kZXNrdG9wLHZlbmRvcjpcIkFwcGxlXCJ9KX0se3Rlc3Q6ZT0+XCJ3aW5kb3dzXCI9PT1lLmdldE9TTmFtZSghMCksZGVzY3JpYmU6KCk9Pih7dHlwZTpZYS5kZXNrdG9wfSl9LHt0ZXN0OmU9PlwibGludXhcIj09PWUuZ2V0T1NOYW1lKCEwKSxkZXNjcmliZTooKT0+KHt0eXBlOllhLmRlc2t0b3B9KX0se3Rlc3Q6ZT0+XCJwbGF5c3RhdGlvbiA0XCI9PT1lLmdldE9TTmFtZSghMCksZGVzY3JpYmU6KCk9Pih7dHlwZTpZYS50dn0pfSx7dGVzdDplPT5cInJva3VcIj09PWUuZ2V0T1NOYW1lKCEwKSxkZXNjcmliZTooKT0+KHt0eXBlOllhLnR2fSl9XSxyYz1be3Rlc3Q6ZT0+XCJtaWNyb3NvZnQgZWRnZVwiPT09ZS5nZXRCcm93c2VyTmFtZSghMCksZGVzY3JpYmUoZSl7aWYoL1xcc2VkZ1xcLy9pLnRlc3QoZSkpcmV0dXJue25hbWU6SmEuQmxpbmt9O2NvbnN0IHQ9UWEuZ2V0Rmlyc3RNYXRjaCgvZWRnZVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm57bmFtZTpKYS5FZGdlSFRNTCx2ZXJzaW9uOnR9fX0se3Rlc3Q6Wy90cmlkZW50L2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6SmEuVHJpZGVudH0sbj1RYS5nZXRGaXJzdE1hdGNoKC90cmlkZW50XFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDplPT5lLnRlc3QoL3ByZXN0by9pKSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOkphLlByZXN0b30sbj1RYS5nZXRGaXJzdE1hdGNoKC9wcmVzdG9cXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0KGUpe2NvbnN0IHQ9ZS50ZXN0KC9nZWNrby9pKSxuPWUudGVzdCgvbGlrZSBnZWNrby9pKTtyZXR1cm4gdCYmIW59LGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6SmEuR2Vja299LG49UWEuZ2V0Rmlyc3RNYXRjaCgvZ2Vja29cXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvKGFwcGxlKT93ZWJraXRcXC81MzdcXC4zNi9pXSxkZXNjcmliZTooKT0+KHtuYW1lOkphLkJsaW5rfSl9LHt0ZXN0OlsvKGFwcGxlKT93ZWJraXQvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpKYS5XZWJLaXR9LG49UWEuZ2V0Rmlyc3RNYXRjaCgvd2Via2l0XFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fV07Y2xhc3MgaWN7Y29uc3RydWN0b3IoZSx0PSExKXtpZihudWxsPT1lfHxcIlwiPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJVc2VyQWdlbnQgcGFyYW1ldGVyIGNhbid0IGJlIGVtcHR5XCIpO3RoaXMuX3VhPWUsdGhpcy5wYXJzZWRSZXN1bHQ9e30sITAhPT10JiZ0aGlzLnBhcnNlKCl9Z2V0VUEoKXtyZXR1cm4gdGhpcy5fdWF9dGVzdChlKXtyZXR1cm4gZS50ZXN0KHRoaXMuX3VhKX1wYXJzZUJyb3dzZXIoKXt0aGlzLnBhcnNlZFJlc3VsdC5icm93c2VyPXt9O2NvbnN0IGU9UWEuZmluZChlYywoZT0+e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudGVzdClyZXR1cm4gZS50ZXN0KHRoaXMpO2lmKGUudGVzdCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiBlLnRlc3Quc29tZSgoZT0+dGhpcy50ZXN0KGUpKSk7dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkXCIpfSkpO3JldHVybiBlJiYodGhpcy5wYXJzZWRSZXN1bHQuYnJvd3Nlcj1lLmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSkpLHRoaXMucGFyc2VkUmVzdWx0LmJyb3dzZXJ9Z2V0QnJvd3Nlcigpe3JldHVybiB0aGlzLnBhcnNlZFJlc3VsdC5icm93c2VyP3RoaXMucGFyc2VkUmVzdWx0LmJyb3dzZXI6dGhpcy5wYXJzZUJyb3dzZXIoKX1nZXRCcm93c2VyTmFtZShlKXtyZXR1cm4gZT9TdHJpbmcodGhpcy5nZXRCcm93c2VyKCkubmFtZSkudG9Mb3dlckNhc2UoKXx8XCJcIjp0aGlzLmdldEJyb3dzZXIoKS5uYW1lfHxcIlwifWdldEJyb3dzZXJWZXJzaW9uKCl7cmV0dXJuIHRoaXMuZ2V0QnJvd3NlcigpLnZlcnNpb259Z2V0T1MoKXtyZXR1cm4gdGhpcy5wYXJzZWRSZXN1bHQub3M/dGhpcy5wYXJzZWRSZXN1bHQub3M6dGhpcy5wYXJzZU9TKCl9cGFyc2VPUygpe3RoaXMucGFyc2VkUmVzdWx0Lm9zPXt9O2NvbnN0IGU9UWEuZmluZCh0YywoZT0+e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudGVzdClyZXR1cm4gZS50ZXN0KHRoaXMpO2lmKGUudGVzdCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiBlLnRlc3Quc29tZSgoZT0+dGhpcy50ZXN0KGUpKSk7dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkXCIpfSkpO3JldHVybiBlJiYodGhpcy5wYXJzZWRSZXN1bHQub3M9ZS5kZXNjcmliZSh0aGlzLmdldFVBKCkpKSx0aGlzLnBhcnNlZFJlc3VsdC5vc31nZXRPU05hbWUoZSl7Y29uc3R7bmFtZTp0fT10aGlzLmdldE9TKCk7cmV0dXJuIGU/U3RyaW5nKHQpLnRvTG93ZXJDYXNlKCl8fFwiXCI6dHx8XCJcIn1nZXRPU1ZlcnNpb24oKXtyZXR1cm4gdGhpcy5nZXRPUygpLnZlcnNpb259Z2V0UGxhdGZvcm0oKXtyZXR1cm4gdGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm0/dGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm06dGhpcy5wYXJzZVBsYXRmb3JtKCl9Z2V0UGxhdGZvcm1UeXBlKGU9ITEpe2NvbnN0e3R5cGU6dH09dGhpcy5nZXRQbGF0Zm9ybSgpO3JldHVybiBlP1N0cmluZyh0KS50b0xvd2VyQ2FzZSgpfHxcIlwiOnR8fFwiXCJ9cGFyc2VQbGF0Zm9ybSgpe3RoaXMucGFyc2VkUmVzdWx0LnBsYXRmb3JtPXt9O2NvbnN0IGU9UWEuZmluZChuYywoZT0+e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudGVzdClyZXR1cm4gZS50ZXN0KHRoaXMpO2lmKGUudGVzdCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiBlLnRlc3Quc29tZSgoZT0+dGhpcy50ZXN0KGUpKSk7dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkXCIpfSkpO3JldHVybiBlJiYodGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm09ZS5kZXNjcmliZSh0aGlzLmdldFVBKCkpKSx0aGlzLnBhcnNlZFJlc3VsdC5wbGF0Zm9ybX1nZXRFbmdpbmUoKXtyZXR1cm4gdGhpcy5wYXJzZWRSZXN1bHQuZW5naW5lP3RoaXMucGFyc2VkUmVzdWx0LmVuZ2luZTp0aGlzLnBhcnNlRW5naW5lKCl9Z2V0RW5naW5lTmFtZShlKXtyZXR1cm4gZT9TdHJpbmcodGhpcy5nZXRFbmdpbmUoKS5uYW1lKS50b0xvd2VyQ2FzZSgpfHxcIlwiOnRoaXMuZ2V0RW5naW5lKCkubmFtZXx8XCJcIn1wYXJzZUVuZ2luZSgpe3RoaXMucGFyc2VkUmVzdWx0LmVuZ2luZT17fTtjb25zdCBlPVFhLmZpbmQocmMsKGU9PntpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRlc3QpcmV0dXJuIGUudGVzdCh0aGlzKTtpZihlLnRlc3QgaW5zdGFuY2VvZiBBcnJheSlyZXR1cm4gZS50ZXN0LnNvbWUoKGU9PnRoaXMudGVzdChlKSkpO3Rocm93IG5ldyBFcnJvcihcIkJyb3dzZXIncyB0ZXN0IGZ1bmN0aW9uIGlzIG5vdCB2YWxpZFwiKX0pKTtyZXR1cm4gZSYmKHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZT1lLmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSkpLHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZX1wYXJzZSgpe3JldHVybiB0aGlzLnBhcnNlQnJvd3NlcigpLHRoaXMucGFyc2VPUygpLHRoaXMucGFyc2VQbGF0Zm9ybSgpLHRoaXMucGFyc2VFbmdpbmUoKSx0aGlzfWdldFJlc3VsdCgpe3JldHVybiBRYS5hc3NpZ24oe30sdGhpcy5wYXJzZWRSZXN1bHQpfXNhdGlzZmllcyhlKXtjb25zdCB0PXt9O2xldCBuPTA7Y29uc3Qgcj17fTtsZXQgaT0wO2lmKE9iamVjdC5rZXlzKGUpLmZvckVhY2goKG89Pntjb25zdCBzPWVbb107XCJzdHJpbmdcIj09dHlwZW9mIHM/KHJbb109cyxpKz0xKTpcIm9iamVjdFwiPT10eXBlb2YgcyYmKHRbb109cyxuKz0xKX0pKSxuPjApe2NvbnN0IGU9T2JqZWN0LmtleXModCksbj1RYS5maW5kKGUsKGU9PnRoaXMuaXNPUyhlKSkpO2lmKG4pe2NvbnN0IGU9dGhpcy5zYXRpc2ZpZXModFtuXSk7aWYodm9pZCAwIT09ZSlyZXR1cm4gZX1jb25zdCByPVFhLmZpbmQoZSwoZT0+dGhpcy5pc1BsYXRmb3JtKGUpKSk7aWYocil7Y29uc3QgZT10aGlzLnNhdGlzZmllcyh0W3JdKTtpZih2b2lkIDAhPT1lKXJldHVybiBlfX1pZihpPjApe2NvbnN0IGU9T2JqZWN0LmtleXMociksdD1RYS5maW5kKGUsKGU9PnRoaXMuaXNCcm93c2VyKGUsITApKSk7aWYodm9pZCAwIT09dClyZXR1cm4gdGhpcy5jb21wYXJlVmVyc2lvbihyW3RdKX19aXNCcm93c2VyKGUsdD0hMSl7Y29uc3Qgbj10aGlzLmdldEJyb3dzZXJOYW1lKCkudG9Mb3dlckNhc2UoKTtsZXQgcj1lLnRvTG93ZXJDYXNlKCk7Y29uc3QgaT1RYS5nZXRCcm93c2VyVHlwZUJ5QWxpYXMocik7cmV0dXJuIHQmJmkmJihyPWkudG9Mb3dlckNhc2UoKSkscj09PW59Y29tcGFyZVZlcnNpb24oZSl7bGV0IHQ9WzBdLG49ZSxyPSExO2NvbnN0IGk9dGhpcy5nZXRCcm93c2VyVmVyc2lvbigpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpKXJldHVyblwiPlwiPT09ZVswXXx8XCI8XCI9PT1lWzBdPyhuPWUuc3Vic3RyKDEpLFwiPVwiPT09ZVsxXT8ocj0hMCxuPWUuc3Vic3RyKDIpKTp0PVtdLFwiPlwiPT09ZVswXT90LnB1c2goMSk6dC5wdXNoKC0xKSk6XCI9XCI9PT1lWzBdP249ZS5zdWJzdHIoMSk6XCJ+XCI9PT1lWzBdJiYocj0hMCxuPWUuc3Vic3RyKDEpKSx0LmluZGV4T2YoUWEuY29tcGFyZVZlcnNpb25zKGksbixyKSk+LTF9aXNPUyhlKXtyZXR1cm4gdGhpcy5nZXRPU05hbWUoITApPT09U3RyaW5nKGUpLnRvTG93ZXJDYXNlKCl9aXNQbGF0Zm9ybShlKXtyZXR1cm4gdGhpcy5nZXRQbGF0Zm9ybVR5cGUoITApPT09U3RyaW5nKGUpLnRvTG93ZXJDYXNlKCl9aXNFbmdpbmUoZSl7cmV0dXJuIHRoaXMuZ2V0RW5naW5lTmFtZSghMCk9PT1TdHJpbmcoZSkudG9Mb3dlckNhc2UoKX1pcyhlLHQ9ITEpe3JldHVybiB0aGlzLmlzQnJvd3NlcihlLHQpfHx0aGlzLmlzT1MoZSl8fHRoaXMuaXNQbGF0Zm9ybShlKX1zb21lKGU9W10pe3JldHVybiBlLnNvbWUoKGU9PnRoaXMuaXMoZSkpKX19Y2xhc3Mgb2N7c3RhdGljIGdldFBhcnNlcihlLHQ9ITEpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIlVzZXJBZ2VudCBzaG91bGQgYmUgYSBzdHJpbmdcIik7cmV0dXJuIG5ldyBpYyhlLHQpfXN0YXRpYyBwYXJzZShlKXtyZXR1cm4gbmV3IGljKGUpLmdldFJlc3VsdCgpfXN0YXRpYyBnZXQgQlJPV1NFUl9NQVAoKXtyZXR1cm4gR2F9c3RhdGljIGdldCBFTkdJTkVfTUFQKCl7cmV0dXJuIEphfXN0YXRpYyBnZXQgT1NfTUFQKCl7cmV0dXJuIFphfXN0YXRpYyBnZXQgUExBVEZPUk1TX01BUCgpe3JldHVybiBZYX19Y29uc3Qgc2M9e0luaXRpYWxpemVkOlwiaW5pdGlhbGl6ZWRcIixEaXNwbGF5VVJJOlwiZGlzcGxheV91cmlcIixQcm92aWRlclVwZGF0ZTpcInByb3ZpZGVyX3VwZGF0ZVwiLENvbm5lY3RXaXRoUmVzcG9uc2U6XCJjb25uZWN0V2l0aFJlc3BvbnNlXCIsQ29ubmVjdGlvblN0YXR1czpcImNvbm5lY3Rpb25fc3RhdHVzXCIsU2VydmljZVN0YXR1czpcInNlcnZpY2Vfc3RhdHVzXCJ9O2NsYXNzIGFje2NvbnN0cnVjdG9yKHtzaG91bGRTZXRPbldpbmRvdzplLGNvbm5lY3Rpb25TdHJlYW06dCxzaG91bGRTZW5kTWV0YWRhdGE6bj0hMSxzaG91bGRTaGltV2ViMzpyLHNka0luc3RhbmNlOml9KXtjb25zdCBvPW5ldyBsYyh7Y29ubmVjdGlvblN0cmVhbTp0LHNob3VsZFNlbmRNZXRhZGF0YTpuLHNob3VsZFNldE9uV2luZG93OmUsc2hvdWxkU2hpbVdlYjM6cixhdXRvUmVxdWVzdEFjY291bnRzOiExfSkscz1uZXcgUHJveHkobyx7ZGVsZXRlUHJvcGVydHk6KCk9PiEwfSk7aWYodGhpcy5wcm92aWRlcj1zLHRoaXMuc2RrSW5zdGFuY2U9aSxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXRyeXthPW8sd2luZG93LmV0aGVyZXVtPWEsd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiZXRoZXJldW0jaW5pdGlhbGl6ZWRcIikpfWNhdGNoKGUpe1JhKFwiW0V0aGVyZXVtXSBVbmFibGUgdG8gc2V0IGdsb2JhbCBwcm92aWRlciAtIHdpbmRvdy5ldGhlcmV1bSBtYXkgYmUgcmVhZC1vbmx5XCIsZSl9dmFyIGE7aWYociYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyl0cnl7IWZ1bmN0aW9uKGUsdD1jb25zb2xlKXtsZXQgbj0hMSxyPSExO2lmKCF3aW5kb3cud2ViMyl7Y29uc3QgaT1cIl9faXNNZXRhTWFza1NoaW1fX1wiO2xldCBvPXtjdXJyZW50UHJvdmlkZXI6ZX07T2JqZWN0LmRlZmluZVByb3BlcnR5KG8saSx7dmFsdWU6ITAsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsd3JpdGFibGU6ITF9KSxvPW5ldyBQcm94eShvLHtnZXQ6KG8scywuLi5hKT0+KFwiY3VycmVudFByb3ZpZGVyXCIhPT1zfHxuP1wiY3VycmVudFByb3ZpZGVyXCI9PT1zfHxzPT09aXx8cnx8KHI9ITAsdC5lcnJvcihcIk1ldGFNYXNrIG5vIGxvbmdlciBpbmplY3RzIHdlYjMuIEZvciBkZXRhaWxzLCBzZWU6IGh0dHBzOi8vZG9jcy5tZXRhbWFzay5pby9ndWlkZS9wcm92aWRlci1taWdyYXRpb24uaHRtbCNyZXBsYWNpbmctd2luZG93LXdlYjNcIiksZS5yZXF1ZXN0KHttZXRob2Q6XCJtZXRhbWFza19sb2dXZWIzU2hpbVVzYWdlXCJ9KS5jYXRjaCgoZT0+e3QuZGVidWcoXCJNZXRhTWFzazogRmFpbGVkIHRvIGxvZyB3ZWIzIHNoaW0gdXNhZ2UuXCIsZSl9KSkpOihuPSEwLHQud2FybihcIllvdSBhcmUgYWNjZXNzaW5nIHRoZSBNZXRhTWFzayB3aW5kb3cud2ViMy5jdXJyZW50UHJvdmlkZXIgc2hpbS4gVGhpcyBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkOyB1c2Ugd2luZG93LmV0aGVyZXVtIGluc3RlYWQuIEZvciBkZXRhaWxzLCBzZWU6IGh0dHBzOi8vZG9jcy5tZXRhbWFzay5pby9ndWlkZS9wcm92aWRlci1taWdyYXRpb24uaHRtbCNyZXBsYWNpbmctd2luZG93LXdlYjNcIikpLFJlZmxlY3QuZ2V0KG8scywuLi5hKSksc2V0OiguLi5lKT0+KHQud2FybihcIllvdSBhcmUgYWNjZXNzaW5nIHRoZSBNZXRhTWFzayB3aW5kb3cud2ViMyBzaGltLiBUaGlzIG9iamVjdCBpcyBkZXByZWNhdGVkOyB1c2Ugd2luZG93LmV0aGVyZXVtIGluc3RlYWQuIEZvciBkZXRhaWxzLCBzZWU6IGh0dHBzOi8vZG9jcy5tZXRhbWFzay5pby9ndWlkZS9wcm92aWRlci1taWdyYXRpb24uaHRtbCNyZXBsYWNpbmctd2luZG93LXdlYjNcIiksUmVmbGVjdC5zZXQoLi4uZSkpfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdyxcIndlYjNcIix7dmFsdWU6byxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pfX0odGhpcy5wcm92aWRlcil9Y2F0Y2goZSl7UmEoXCJbRXRoZXJldW1dIFVuYWJsZSB0byBzaGltIHdlYjMgLSB3aW5kb3cud2ViMyBtYXkgYmUgcmVhZC1vbmx5XCIsZSl9dGhpcy5wcm92aWRlci5vbihcImRpc3BsYXlfdXJpXCIsKGU9Pnt0aGlzLnNka0luc3RhbmNlLmVtaXQoc2MuRGlzcGxheVVSSSxlKX0pKSx0aGlzLnByb3ZpZGVyLm9uKFwiX2luaXRpYWxpemVkXCIsKCgpPT57Y29uc3QgZT17Y2hhaW5JZDp0aGlzLnByb3ZpZGVyLmdldENoYWluSWQoKSxpc0Nvbm5lY3RlZDp0aGlzLnByb3ZpZGVyLmlzQ29ubmVjdGVkKCksaXNNZXRhTWFzazp0aGlzLnByb3ZpZGVyLmlzTWV0YU1hc2ssc2VsZWN0ZWRBZGRyZXNzOnRoaXMucHJvdmlkZXIuZ2V0U2VsZWN0ZWRBZGRyZXNzKCksbmV0d29ya1ZlcnNpb246dGhpcy5wcm92aWRlci5nZXROZXR3b3JrVmVyc2lvbigpfTt0aGlzLnNka0luc3RhbmNlLmVtaXQoc2MuSW5pdGlhbGl6ZWQsZSksUmEoXCJbRXRoZXJldW06IGNvbnN0cnVjdG9yKCldIHByb3ZpZGVyIGluaXRpYWxpemVkXCIsZSl9KSl9c3RhdGljIGluaXQoZSl7dmFyIHQ7cmV0dXJuIFJhKFwiW0V0aGVyZXVtOiBpbml0KCldIEluaXRpYWxpemluZyBFdGhlcmV1bSBzZXJ2aWNlXCIpLHRoaXMuaW5zdGFuY2U9bmV3IGFjKGUpLG51bGw9PT0odD10aGlzLmluc3RhbmNlKXx8dm9pZCAwPT09dD92b2lkIDA6dC5wcm92aWRlcn1zdGF0aWMgZGVzdHJveSgpe31zdGF0aWMgZ2V0SW5zdGFuY2UoKXt2YXIgZTtpZighKG51bGw9PT0oZT10aGlzLmluc3RhbmNlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5wcm92aWRlcikpdGhyb3cgbmV3IEVycm9yKFwiRXRoZXJldW0gaW5zdGFuY2Ugbm90IGludGlpYWxpemVkIC0gY2FsbCBFdGhlcmV1bS5mYWN0b3J5IGZpcnN0LlwiKTtyZXR1cm4gdGhpcy5pbnN0YW5jZX1zdGF0aWMgZ2V0UHJvdmlkZXIoKXt2YXIgZTtpZighKG51bGw9PT0oZT10aGlzLmluc3RhbmNlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5wcm92aWRlcikpdGhyb3cgbmV3IEVycm9yKFwiRXRoZXJldW0gaW5zdGFuY2Ugbm90IGludGlpYWxpemVkIC0gY2FsbCBFdGhlcmV1bS5mYWN0b3J5IGZpcnN0LlwiKTtyZXR1cm4gdGhpcy5pbnN0YW5jZS5wcm92aWRlcn19Y2xhc3MgY2N7Y29uc3RydWN0b3Ioe3VzZURlZXBMaW5rOmUscHJlZmVycmVkT3Blbkxpbms6dCxkZWJ1ZzpuPSExfSl7dGhpcy5zdGF0ZT17cGxhdGZvcm1UeXBlOnZvaWQgMCx1c2VEZWVwbGluazohMSxwcmVmZXJyZWRPcGVuTGluazp2b2lkIDAsZGVidWc6ITF9LHRoaXMuc3RhdGUucGxhdGZvcm1UeXBlPXRoaXMuZ2V0UGxhdGZvcm1UeXBlKCksdGhpcy5zdGF0ZS51c2VEZWVwbGluaz1lLHRoaXMuc3RhdGUucHJlZmVycmVkT3Blbkxpbms9dCx0aGlzLnN0YXRlLmRlYnVnPW59b3BlbkRlZXBsaW5rKGUsdCxuKXtyZXR1cm4gZnVuY3Rpb24oZSx0LG4scil7Y29uc3R7c3RhdGU6aX09ZTtSYShgW1BsYXRmZm9ybU1hbmFnZXI6IG9wZW5EZWVwbGluaygpXSB1bml2ZXJzYWxMaW5rIC0tXFx4M2UgJHt0fWApLFJhKGBbUGxhdGZmb3JtTWFuYWdlcjogb3BlbkRlZXBsaW5rKCldIGRlZXBMaW5rIC0tXFx4M2UgJHtufWApO3RyeXtpZihpLnByZWZlcnJlZE9wZW5MaW5rKXJldHVybiB2b2lkIGkucHJlZmVycmVkT3BlbkxpbmsoaS51c2VEZWVwbGluaz9uOnQscik7aWYoUmEoYFtQbGF0ZmZvcm1NYW5hZ2VyOiBvcGVuRGVlcGxpbmsoKV0gb3BlbiBsaW5rIG5vdyB1c2VEZWVwTGluaz0ke2kudXNlRGVlcGxpbmt9IGxpbms9JHtpLnVzZURlZXBsaW5rP246dH1gKSxpLnVzZURlZXBsaW5rKVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3cubG9jYXRpb24uaHJlZj1uKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCl7Y29uc3QgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtlLmhyZWY9dCxlLnRhcmdldD1cIl9zZWxmXCIsZS5yZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCIsZS5jbGljaygpfX1jYXRjaChlKXtjb25zb2xlLmxvZyhcIltQbGF0ZmZvcm1NYW5hZ2VyOiBvcGVuRGVlcGxpbmsoKV0gY2FuJ3Qgb3BlbiBsaW5rXCIsZSl9fSh0aGlzLGUsdCxuKX1pc1JlYWN0TmF0aXZlKCl7dmFyIGU7cmV0dXJuIHRoaXMuaXNOb3RCcm93c2VyKCkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJihudWxsPT09d2luZG93fHx2b2lkIDA9PT13aW5kb3c/dm9pZCAwOndpbmRvdy5uYXZpZ2F0b3IpJiZcIlJlYWN0TmF0aXZlXCI9PT0obnVsbD09PShlPXdpbmRvdy5uYXZpZ2F0b3IpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnByb2R1Y3QpfWlzTWV0YU1hc2tJbnN0YWxsZWQoKXtyZXR1cm4gZnVuY3Rpb24oKXtjb25zdCBlPWFjLmdldFByb3ZpZGVyKCl8fChudWxsPT09d2luZG93fHx2b2lkIDA9PT13aW5kb3c/dm9pZCAwOndpbmRvdy5ldGhlcmV1bSk7cmV0dXJuIFJhKGBbUGxhdGZmb3JtTWFuYWdlcjogaXNNZXRhTWFza0luc3RhbGxlZCgpXSBpc01ldGFNYXNrPSR7bnVsbD09ZT92b2lkIDA6ZS5pc01ldGFNYXNrfSBpc0Nvbm5lY3RlZD0ke251bGw9PWU/dm9pZCAwOmUuaXNDb25uZWN0ZWQoKX1gKSwobnVsbD09ZT92b2lkIDA6ZS5pc01ldGFNYXNrKSYmKG51bGw9PWU/dm9pZCAwOmUuaXNDb25uZWN0ZWQoKSl9KCl9aXNEZXNrdG9wV2ViKCl7cmV0dXJuIHRoaXMuaXNCcm93c2VyKCkmJiF0aGlzLmlzTW9iaWxlV2ViKCl9aXNNb2JpbGUoKXt2YXIgZSx0O2NvbnN0IG49b2MucGFyc2Uod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO3JldHVyblwibW9iaWxlXCI9PT0obnVsbD09PShlPW51bGw9PW4/dm9pZCAwOm4ucGxhdGZvcm0pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnR5cGUpfHxcInRhYmxldFwiPT09KG51bGw9PT0odD1udWxsPT1uP3ZvaWQgMDpuLnBsYXRmb3JtKXx8dm9pZCAwPT09dD92b2lkIDA6dC50eXBlKX1pc1NlY3VyZSgpe3JldHVybiB0aGlzLmlzUmVhY3ROYXRpdmUoKXx8dGhpcy5pc01vYmlsZVdlYigpfWlzTWV0YU1hc2tNb2JpbGVXZWJWaWV3KCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKEJvb2xlYW4od2luZG93LlJlYWN0TmF0aXZlV2ViVmlldykmJkJvb2xlYW4obmF2aWdhdG9yLnVzZXJBZ2VudC5lbmRzV2l0aChcIk1ldGFNYXNrTW9iaWxlXCIpKSl9aXNNb2JpbGVXZWIoKXtyZXR1cm4gdGhpcy5zdGF0ZS5wbGF0Zm9ybVR5cGU9PT1leHBvcnRzLlBsYXRmb3JtVHlwZS5Nb2JpbGVXZWJ9c3RhdGljIGlzTm90QnJvd3Nlcigpe3ZhciBlO3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fCEobnVsbD09PXdpbmRvd3x8dm9pZCAwPT09d2luZG93P3ZvaWQgMDp3aW5kb3cubmF2aWdhdG9yKXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmXCJSZWFjdE5hdGl2ZVwiPT09KG51bGw9PT0oZT1udWxsPT09Z2xvYmFsfHx2b2lkIDA9PT1nbG9iYWw/dm9pZCAwOmdsb2JhbC5uYXZpZ2F0b3IpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnByb2R1Y3QpfHxcIlJlYWN0TmF0aXZlXCI9PT0obnVsbD09PW5hdmlnYXRvcnx8dm9pZCAwPT09bmF2aWdhdG9yP3ZvaWQgMDpuYXZpZ2F0b3IucHJvZHVjdCl9aXNOb3RCcm93c2VyKCl7cmV0dXJuIGNjLmlzTm90QnJvd3NlcigpfXN0YXRpYyBpc0Jyb3dzZXIoKXtyZXR1cm4hdGhpcy5pc05vdEJyb3dzZXIoKX1pc0Jyb3dzZXIoKXtyZXR1cm4gY2MuaXNCcm93c2VyKCl9aXNOb2RlSlMoKXtyZXR1cm4gdGhpcy5pc05vdEJyb3dzZXIoKSYmIXRoaXMuaXNSZWFjdE5hdGl2ZSgpfWlzVXNlRGVlcExpbmsoKXtyZXR1cm4gdGhpcy5zdGF0ZS51c2VEZWVwbGlua31nZXRQbGF0Zm9ybVR5cGUoKXtyZXR1cm4gZnVuY3Rpb24oZSl7Y29uc3R7c3RhdGU6dH09ZTtyZXR1cm4gdC5wbGF0Zm9ybVR5cGU/dC5wbGF0Zm9ybVR5cGU6ZS5pc1JlYWN0TmF0aXZlKCk/ZXhwb3J0cy5QbGF0Zm9ybVR5cGUuUmVhY3ROYXRpdmU6ZS5pc05vdEJyb3dzZXIoKT9leHBvcnRzLlBsYXRmb3JtVHlwZS5Ob25Ccm93c2VyOmUuaXNNZXRhTWFza01vYmlsZVdlYlZpZXcoKT9leHBvcnRzLlBsYXRmb3JtVHlwZS5NZXRhTWFza01vYmlsZVdlYnZpZXc6ZS5pc01vYmlsZSgpP2V4cG9ydHMuUGxhdGZvcm1UeXBlLk1vYmlsZVdlYjpleHBvcnRzLlBsYXRmb3JtVHlwZS5EZXNrdG9wV2VifSh0aGlzKX19Y29uc3QgZGM9ZT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7aWYoY2MuaXNCcm93c2VyKCkpe2NvbnN0e1N0b3JhZ2VNYW5hZ2VyV2ViOnR9PXlpZWxkIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIEtkfSkpO3JldHVybiBuZXcgdChlKX1jb25zdCB0PXtwZXJzaXN0Q2hhbm5lbENvbmZpZzooKT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7fSkpLGdldFBlcnNpc3RlZENoYW5uZWxDb25maWc6KCk9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe30pKSxwZXJzaXN0QWNjb3VudHM6KCk9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe30pKSxnZXRDYWNoZWRBY2NvdW50czooKT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuW119KSkscGVyc2lzdENoYWluSWQ6KCk9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe30pKSxnZXRDYWNoZWRDaGFpbklkOigpPT5sKHZvaWQgMCx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt9KSksdGVybWluYXRlOigpPT5sKHZvaWQgMCx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt9KSl9O3JldHVybiBQcm9taXNlLnJlc29sdmUodCl9KSk7Y2xhc3MgbGMgZXh0ZW5kcyBQYXtjb25zdHJ1Y3Rvcih7Y29ubmVjdGlvblN0cmVhbTplLHNob3VsZFNlbmRNZXRhZGF0YTp0LGF1dG9SZXF1ZXN0QWNjb3VudHM6bj0hMX0pe3N1cGVyKGUse2xvZ2dlcjpjb25zb2xlLG1heEV2ZW50TGlzdGVuZXJzOjEwMCxzaG91bGRTZW5kTWV0YWRhdGE6dH0pLHRoaXMuc3RhdGU9e2FjY291bnRzOm51bGwsYXV0b1JlcXVlc3RBY2NvdW50czohMSxwcm92aWRlclN0YXRlUmVxdWVzdGVkOiExLGNoYWluSWQ6XCJcIixuZXR3b3JrVmVyc2lvbjpcIlwifSxSYShgW1NES1Byb3ZpZGVyOiBjb25zdHJ1Y3RvcigpXSBhdXRvUmVxdWVzdEFjY291bnRzPSR7bn1gKSx0aGlzLnN0YXRlLmF1dG9SZXF1ZXN0QWNjb3VudHM9bn1mb3JjZUluaXRpYWxpemVTdGF0ZSgpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIFJhKGBbU0RLUHJvdmlkZXI6IGZvcmNlSW5pdGlhbGl6ZVN0YXRlKCldIGF1dG9SZXF1ZXN0QWNjb3VudHM9JHt0aGlzLnN0YXRlLmF1dG9SZXF1ZXN0QWNjb3VudHN9YCksdGhpcy5faW5pdGlhbGl6ZVN0YXRlQXN5bmMoKX0pKX1fc2V0Q29ubmVjdGVkKCl7UmEoXCJbU0RLUHJvdmlkZXI6IF9zZXRDb25uZWN0ZWQoKV0gU2V0dGluZyBjb25uZWN0ZWQgc3RhdGVcIiksdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQ9ITB9Z2V0U3RhdGUoKXtyZXR1cm4gdGhpcy5fc3RhdGV9Z2V0U0RLUHJvdmlkZXJTdGF0ZSgpe3JldHVybiB0aGlzLnN0YXRlfWdldFNlbGVjdGVkQWRkcmVzcygpe3ZhciBlO2NvbnN0e2FjY291bnRzOnR9PXRoaXMuX3N0YXRlO3JldHVybiB0JiYwIT09dC5sZW5ndGg/KG51bGw9PT0oZT10WzBdKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS50b0xvd2VyQ2FzZSgpKXx8XCJcIjooUmEoXCJbU0RLUHJvdmlkZXI6IGdldFNlbGVjdGVkQWRkcmVzc10gTm8gYWNjb3VudHMgZm91bmRcIiksbnVsbCl9Z2V0Q2hhaW5JZCgpe3JldHVybiB0aGlzLnN0YXRlLmNoYWluSWR9Z2V0TmV0d29ya1ZlcnNpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZS5uZXR3b3JrVmVyc2lvbn1zZXRTREtQcm92aWRlclN0YXRlKGUpe3RoaXMuc3RhdGU9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHRoaXMuc3RhdGUpLGUpfWhhbmRsZUFjY291bnRzQ2hhbmdlZChlLHQpe3JldHVybiB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQoZSx0KX1oYW5kbGVEaXNjb25uZWN0KHt0ZXJtaW5hdGU6ZT0hMX0peyFmdW5jdGlvbih7dGVybWluYXRlOmU9ITEsaW5zdGFuY2U6dH0pe2NvbnN0e3N0YXRlOm59PXQ7UmEoYFtTREtQcm92aWRlcjogaGFuZGxlRGlzY29ubmVjdCgpXSBjbGVhbmluZyB1cCBwcm92aWRlciBzdGF0ZSB0ZXJtaW5hdGU9JHtlfWAsdCksZSYmKHQuX3N0YXRlLmFjY291bnRzPW51bGwsdC5fc3RhdGUuaXNVbmxvY2tlZD0hMSx0Ll9zdGF0ZS5pc1Blcm1hbmVudGx5RGlzY29ubmVjdGVkPSEwLHQuX3N0YXRlLmluaXRpYWxpemVkPSExKSx0Ll9oYW5kbGVBY2NvdW50c0NoYW5nZWQoW10pLHQuX3N0YXRlLmlzQ29ubmVjdGVkPSExLHQuZW1pdChcImRpc2Nvbm5lY3RcIixPYS5ldGhFcnJvcnMucHJvdmlkZXIuZGlzY29ubmVjdGVkKCkpLG4ucHJvdmlkZXJTdGF0ZVJlcXVlc3RlZD0hMX0oe3Rlcm1pbmF0ZTplLGluc3RhbmNlOnRoaXN9KX1faW5pdGlhbGl6ZVN0YXRlQXN5bmMoKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdCxuO3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dm9pZCAwPT09ZS5zdGF0ZSYmKGUuc3RhdGU9e2FjY291bnRzOm51bGwsYXV0b1JlcXVlc3RBY2NvdW50czohMSxwcm92aWRlclN0YXRlUmVxdWVzdGVkOiExLGNoYWluSWQ6XCJcIn0pO2NvbnN0e3N0YXRlOnJ9PWU7bGV0IGk7aWYoci5wcm92aWRlclN0YXRlUmVxdWVzdGVkKVJhKFwiW1NES1Byb3ZpZGVyOiBpbml0aWFsaXplU3RhdGVBc3luYygpXSBpbml0aWFsaXphdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzXCIpO2Vsc2V7bGV0IG87ci5wcm92aWRlclN0YXRlUmVxdWVzdGVkPSEwO2xldCBzPW51bGwsYT0hMSxjPSExO2NvbnN0IGQ9eWllbGQgZGMoe2VuYWJsZWQ6ITB9KTtpZihkKXtjb25zdCBlPXlpZWxkIGQuZ2V0UGVyc2lzdGVkQ2hhbm5lbENvbmZpZyh7fSk7YT1udWxsIT09KHQ9bnVsbD09ZT92b2lkIDA6ZS5yZWxheVBlcnNpc3RlbmNlKSYmdm9pZCAwIT09dCYmdCxvPXlpZWxkIGQuZ2V0Q2FjaGVkQ2hhaW5JZCgpO2NvbnN0IG49eWllbGQgZC5nZXRDYWNoZWRBY2NvdW50cygpO24ubGVuZ3RoPjAmJihzPW5bMF0pfWlmKFJhKGBbU0RLUHJvdmlkZXI6IGluaXRpYWxpemVTdGF0ZUFzeW5jKCldIHJlbGF5UGVyc2lzdGVuY2U9JHthfWAse3JlbGF5UGVyc2lzdGVuY2U6YSxjYWNoZWRDaGFpbklkOm8sY2FjaGVkU2VsZWN0ZWRBZGRyZXNzOnN9KSxhKWlmKG8mJnMpaT17YWNjb3VudHM6W3NdLGNoYWluSWQ6byxpc1VubG9ja2VkOiExfSxjPSEwO2Vsc2UgdHJ5e2k9eWllbGQgZS5yZXF1ZXN0KHttZXRob2Q6XCJtZXRhbWFza19nZXRQcm92aWRlclN0YXRlXCJ9KX1jYXRjaCh0KXtyZXR1cm4gZS5fbG9nLmVycm9yKFwiTWV0YU1hc2s6IEZhaWxlZCB0byBnZXQgaW5pdGlhbCBzdGF0ZS4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIix0KSx2b2lkKHIucHJvdmlkZXJTdGF0ZVJlcXVlc3RlZD0hMSl9aWYoMD09PShudWxsPT09KG49bnVsbD09aT92b2lkIDA6aS5hY2NvdW50cyl8fHZvaWQgMD09PW4/dm9pZCAwOm4ubGVuZ3RoKSlpZihlLmdldFNlbGVjdGVkQWRkcmVzcygpKWkuYWNjb3VudHM9W2UuZ2V0U2VsZWN0ZWRBZGRyZXNzKCldO2Vsc2V7UmEoXCJbU0RLUHJvdmlkZXI6IGluaXRpYWxpemVTdGF0ZUFzeW5jKCldIEZldGNoIGFjY291bnRzIHJlbW90ZWx5LlwiKTtjb25zdCB0PXlpZWxkIGUucmVxdWVzdCh7bWV0aG9kOlwiZXRoX3JlcXVlc3RBY2NvdW50c1wiLHBhcmFtczpbXX0pO2kuYWNjb3VudHM9dH1lLl9pbml0aWFsaXplU3RhdGUoaSksci5wcm92aWRlclN0YXRlUmVxdWVzdGVkPSExLGMmJihlLl9zdGF0ZS5pc0Nvbm5lY3RlZD0hMCxlLmVtaXQoXCJjb25uZWN0XCIse2NoYWluSWQ6bnVsbD09aT92b2lkIDA6aS5jaGFpbklkfSkpfX0pKX0odGhpcyl9KSl9X2luaXRpYWxpemVTdGF0ZShlKXtyZXR1cm4gUmEoXCJbU0RLUHJvdmlkZXI6IF9pbml0aWFsaXplU3RhdGUoKV1cIixlKSxmdW5jdGlvbihlLHQsbil7cmV0dXJuIFJhKFwiW1NES1Byb3ZpZGVyOiBpbml0aWFsaXplU3RhdGUoKV0gc2V0IHN0YXRlLl9pbml0aWFsaXplZCB0byBmYWxzZVwiKSxlLl9zdGF0ZS5pbml0aWFsaXplZD0hMSx0KG4pfSh0aGlzLHN1cGVyLl9pbml0aWFsaXplU3RhdGUuYmluZCh0aGlzKSxlKX1faGFuZGxlQ2hhaW5DaGFuZ2VkKHtjaGFpbklkOmUsbmV0d29ya1ZlcnNpb246dH09e30pe3RoaXMuc3RhdGUuY2hhaW5JZD1lLHRoaXMuc3RhdGUubmV0d29ya1ZlcnNpb249dCxmdW5jdGlvbih7aW5zdGFuY2U6ZSxjaGFpbklkOnQsbmV0d29ya1ZlcnNpb246bixzdXBlckhhbmRsZUNoYWluQ2hhbmdlZDpyfSl7UmEoYFtTREtQcm92aWRlcjogaGFuZGxlQ2hhaW5DaGFuZ2VkKCldIGNoYWluSWQ9JHt0fSBuZXR3b3JrVmVyc2lvbj0ke259YCk7bGV0IGk9bjtufHwoUmEoXCJbU0RLUHJvdmlkZXI6IGhhbmRsZUNoYWluQ2hhbmdlZCgpXSBmb3JjZWQgbmV0d29yayB2ZXJzaW9uIHRvIHByZXZlbnQgcHJvdmlkZXIgZXJyb3JcIiksaT1cIjFcIiksZS5fc3RhdGUuaXNDb25uZWN0ZWQ9ITAsZS5lbWl0KFwiY29ubmVjdFwiLHtjaGFpbklkOnR9KSxyKHtjaGFpbklkOnQsbmV0d29ya1ZlcnNpb246aX0pfSh7aW5zdGFuY2U6dGhpcyxjaGFpbklkOmUsbmV0d29ya1ZlcnNpb246dCxzdXBlckhhbmRsZUNoYWluQ2hhbmdlZDpzdXBlci5faGFuZGxlQ2hhaW5DaGFuZ2VkLmJpbmQodGhpcyl9KX19dmFyIHVjLGhjPXtuYW1lOlwiQG1ldGFtYXNrL3Nka1wiLHZlcnNpb246XCIwLjMyLjBcIixkZXNjcmlwdGlvbjpcIlwiLGhvbWVwYWdlOlwiaHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL21ldGFtYXNrLXNkayNyZWFkbWVcIixidWdzOnt1cmw6XCJodHRwczovL2dpdGh1Yi5jb20vTWV0YU1hc2svbWV0YW1hc2stc2RrL2lzc3Vlc1wifSxyZXBvc2l0b3J5Ont0eXBlOlwiZ2l0XCIsdXJsOlwiaHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL21ldGFtYXNrLXNka1wiLGRpcmVjdG9yeTpcInBhY2thZ2VzL3Nka1wifSxtYWluOlwiZGlzdC9ub2RlL2Nqcy9tZXRhbWFzay1zZGsuanNcIixtb2R1bGU6XCJkaXN0L2Jyb3dzZXIvZXMvbWV0YW1hc2stc2RrLmpzXCIsYnJvd3NlcjpcImRpc3QvYnJvd3Nlci9lcy9tZXRhbWFzay1zZGsuanNcIix1bnBrZzpcImRpc3QvYnJvd3Nlci91bWQvbWV0YW1hc2stc2RrLmpzXCIsXCJyZWFjdC1uYXRpdmVcIjpcImRpc3QvcmVhY3QtbmF0aXZlL2VzL21ldGFtYXNrLXNkay5qc1wiLHR5cGVzOlwiZGlzdC90eXBlcy9zcmMvaW5kZXguZC50c1wiLHNpZGVFZmZlY3RzOiExLGZpbGVzOltcIi9kaXN0XCJdLHNjcmlwdHM6e1wiYnVpbGQ6dHlwZXNcIjpcInRzYyAtLXByb2plY3QgdHNjb25maWcuYnVpbGQuanNvbiAtLWVtaXREZWNsYXJhdGlvbk9ubHkgLS1vdXREaXIgZGlzdC90eXBlc1wiLGJ1aWxkOlwieWFybiBidWlsZDp0eXBlcyAmJiByb2xsdXAgLWMgLS1idW5kbGVDb25maWdBc0Nqc1wiLFwiYnVpbGQ6Y2xlYW5cIjpcInlhcm4gY2xlYW4gJiYgeWFybiBidWlsZFwiLFwiYnVpbGQ6cG9zdC10c2NcIjpcImVjaG8gJ04vQSdcIixcImJ1aWxkOnByZS10c2NcIjpcImVjaG8gJ04vQSdcIix0eXBlY2hlY2s6XCJ0c2MgLS1ub0VtaXRcIixjbGVhbjpcInJpbXJhZiAuL2Rpc3RcIixzaXplOlwibm9kZSBidW5kbGUtc2l6ZSAmJiBzaXplLWxpbWl0XCIsbGludDpcInlhcm4gbGludDplc2xpbnQgJiYgeWFybiBsaW50Om1pc2MgLS1jaGVja1wiLFwibGludDpjaGFuZ2Vsb2dcIjpcIi4uLy4uL3NjcmlwdHMvdmFsaWRhdGUtY2hhbmdlbG9nLnNoIEBtZXRhbWFzay9zZGtcIixcImxpbnQ6ZXNsaW50XCI6XCJlc2xpbnQgLiAtLWNhY2hlIC0tZXh0IGpzLHRzXCIsXCJsaW50OmZpeFwiOlwieWFybiBsaW50OmVzbGludCAtLWZpeCAmJiB5YXJuIGxpbnQ6bWlzYyAtLXdyaXRlXCIsXCJsaW50Om1pc2NcIjpcInByZXR0aWVyICcqKi8qLmpzb24nICcqKi8qLm1kJyAnIUNIQU5HRUxPRy5tZCcgLS1pZ25vcmUtcGF0aCAuLi8uLi8uZ2l0aWdub3JlXCIscHJlcGFjazpcIi4uLy4uL3NjcmlwdHMvcHJlcGFjay5zaFwiLFwicHVibGlzaDpwcmV2aWV3XCI6XCJ5YXJuIG5wbSBwdWJsaXNoIC0tdGFnIHByZXZpZXdcIixyZXNldDpcInlhcm4gY2xlYW4gJiYgcmltcmFmIC4vbm9kZV9tb2R1bGVzL1wiLHRlc3Q6J2plc3QgLS10ZXN0UGF0aElnbm9yZVBhdHRlcm5zIFwiL2UyZS9cIicsXCJ0ZXN0OmNvdmVyYWdlXCI6J2plc3QgLS1jb3ZlcmFnZSAtLXRlc3RQYXRoSWdub3JlUGF0dGVybnMgXCIvZTJlL1wiJyxcInRlc3Q6ZTJlXCI6J2plc3QgLS10ZXN0UGF0aFBhdHRlcm4gXCIvZTJlL1wiJyxcInRlc3Q6Y2lcIjonamVzdCAtLWNvdmVyYWdlIC0tcGFzc1dpdGhOb1Rlc3RzIC0tc2V0dXBGaWxlc0FmdGVyRW52IC4vamVzdC1wcmVsb2FkLmpzIC0tdGVzdFBhdGhJZ25vcmVQYXR0ZXJucyBcIi9lMmUvXCInLFwidGVzdDpkZXZcIjonamVzdCAtYyAuL2plc3QuY29uZmlnLnRzIC0tZGV0ZWN0T3BlbkhhbmRsZXMgIC0tdGVzdFBhdGhJZ25vcmVQYXR0ZXJucyBcIi9lMmUvXCInLHdhdGNoOlwicm9sbHVwIC1jIC13XCIsZGV2Oidjb25jdXJyZW50bHkgXCJ0c2MgLS13YXRjaFwiIFwicm9sbHVwIC1jIC13IC0tYnVuZGxlQ29uZmlnQXNDanNcIicsXCJidWlsZDpkZXZcIjpcInlhcm4gYnVpbGQ6dHlwZXMgJiYgTk9ERV9FTlY9ZGV2IHJvbGx1cCAtYyAtLWJ1bmRsZUNvbmZpZ0FzQ2pzXCJ9LGRlcGVuZGVuY2llczp7XCJAYmFiZWwvcnVudGltZVwiOlwiXjcuMjYuMFwiLFwiQG1ldGFtYXNrL29uYm9hcmRpbmdcIjpcIl4xLjAuMVwiLFwiQG1ldGFtYXNrL3Byb3ZpZGVyc1wiOlwiMTYuMS4wXCIsXCJAbWV0YW1hc2svc2RrLWNvbW11bmljYXRpb24tbGF5ZXJcIjpcIndvcmtzcGFjZToqXCIsXCJAbWV0YW1hc2svc2RrLWluc3RhbGwtbW9kYWwtd2ViXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHBhdWxtaWxsci9xclwiOlwiXjAuMi4xXCIsYm93c2VyOlwiXjIuOS4wXCIsXCJjcm9zcy1mZXRjaFwiOlwiXjQuMC4wXCIsZGVidWc6XCJeNC4zLjRcIixlY2llc2pzOlwiXjAuNC4xMVwiLFwiZXRoLXJwYy1lcnJvcnNcIjpcIl40LjAuM1wiLGV2ZW50ZW1pdHRlcjI6XCJeNi40LjlcIixcIm9iai1tdWx0aXBsZXhcIjpcIl4xLjAuMFwiLHB1bXA6XCJeMy4wLjBcIixcInJlYWRhYmxlLXN0cmVhbVwiOlwiXjMuNi4yXCIsXCJzb2NrZXQuaW8tY2xpZW50XCI6XCJeNC41LjFcIix0c2xpYjpcIl4yLjYuMFwiLHV0aWw6XCJeMC4xMi40XCIsdXVpZDpcIl44LjMuMlwifSxkZXZEZXBlbmRlbmNpZXM6e1wiQGplc3QvZ2xvYmFsc1wiOlwiXjI5LjMuMVwiLFwiQGxhdmFtb2F0L2FsbG93LXNjcmlwdHNcIjpcIl4yLjMuMVwiLFwiQG1ldGFtYXNrL2F1dG8tY2hhbmdlbG9nXCI6XCIzLjEuMFwiLFwiQG1ldGFtYXNrL2VzbGludC1jb25maWdcIjpcIl42LjAuMFwiLFwiQG1ldGFtYXNrL2VzbGludC1jb25maWctbm9kZWpzXCI6XCJeNi4wLjBcIixcIkBtZXRhbWFzay9lc2xpbnQtY29uZmlnLXR5cGVzY3JpcHRcIjpcIl42LjAuMFwiLFwiQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2VcIjpcIl4xLjE5LjZcIixcIkByb2xsdXAvcGx1Z2luLWFsaWFzXCI6XCJeNS4xLjFcIixcIkByb2xsdXAvcGx1Z2luLWNvbW1vbmpzXCI6XCJeMjUuMC43XCIsXCJAcm9sbHVwL3BsdWdpbi1qc29uXCI6XCJeNi4wLjBcIixcIkByb2xsdXAvcGx1Z2luLW5vZGUtcmVzb2x2ZVwiOlwiXjE1LjAuMlwiLFwiQHJvbGx1cC9wbHVnaW4tcmVwbGFjZVwiOlwiXjYuMC4xXCIsXCJAcm9sbHVwL3BsdWdpbi10ZXJzZXJcIjpcIl4wLjQuMVwiLFwiQHNpemUtbGltaXQvcHJlc2V0LWJpZy1saWJcIjpcIl4xMS4wLjJcIixcIkB0eXBlcy9kb20tc2NyZWVuLXdha2UtbG9ja1wiOlwiXjEuMC4yXCIsXCJAdHlwZXMvbm9kZVwiOlwiXjIwLjEuM1wiLFwiQHR5cGVzL3B1bXBcIjpcIl4xLjEuMVwiLFwiQHR5cGVzL3FyY29kZS10ZXJtaW5hbFwiOlwiXjAuMTIuMFwiLFwiQHR5cGVzL3V1aWRcIjpcIl4xMC4wLjBcIixcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6XCJeNC4yNi4wXCIsXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6XCJeNC4yNi4wXCIsXCJicm93c2VyaWZ5LXpsaWJcIjpcIl4wLjIuMFwiLGJ1ZmZlcjpcIl42LjAuM1wiLGNvbmN1cnJlbnRseTpcIl45LjEuMlwiLFwiY3J5cHRvLWJyb3dzZXJpZnlcIjpcIl4zLjEyLjBcIixlc2xpbnQ6XCJeNy4zMC4wXCIsXCJlc2xpbnQtY29uZmlnLXByZXR0aWVyXCI6XCJeOC4zLjBcIixcImVzbGludC1wbHVnaW4taW1wb3J0XCI6XCJeMi4yMy40XCIsXCJlc2xpbnQtcGx1Z2luLWplc3RcIjpcIl4yNC40LjBcIixcImVzbGludC1wbHVnaW4tanNkb2NcIjpcIl4zNi4xLjBcIixcImVzbGludC1wbHVnaW4tbm9kZVwiOlwiXjExLjEuMFwiLFwiZXNsaW50LXBsdWdpbi1wcmV0dGllclwiOlwiXjMuNC4wXCIsXCJodHRwcy1icm93c2VyaWZ5XCI6XCJeMS4wLjBcIixqZXN0OlwiXjI5LjMuMVwiLFwiamVzdC1lbnZpcm9ubWVudC1qc2RvbVwiOlwiXjI5LjMuMVwiLHByZXR0aWVyOlwiXjIuMy4wXCIscHJvY2VzczpcIl4wLjExLjEwXCIscmltcmFmOlwiXjQuNC4wXCIscm9sbHVwOlwiXjQuMjYuMFwiLFwicm9sbHVwLXBsdWdpbi1hbmFseXplclwiOlwiXjQuMC4wXCIsXCJyb2xsdXAtcGx1Z2luLWpzY2NcIjpcIl4yLjAuMFwiLFwicm9sbHVwLXBsdWdpbi1uYXRpdmVzXCI6XCJeMC43LjVcIixcInJvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGluc1wiOlwiXjIuMS4yXCIsXCJyb2xsdXAtcGx1Z2luLXBvbHlmaWxsLW5vZGVcIjpcIl4wLjEzLjBcIixcInJvbGx1cC1wbHVnaW4tc2l6ZXNcIjpcIl4xLjAuNlwiLFwicm9sbHVwLXBsdWdpbi10eXBlc2NyaXB0MlwiOlwiXjAuMzEuMlwiLFwicm9sbHVwLXBsdWdpbi12aXN1YWxpemVyXCI6XCJeNS4xMi4wXCIsXCJzaXplLWxpbWl0XCI6XCJeMTEuMC4yXCIsXCJzdHJlYW0tYnJvd3NlcmlmeVwiOlwiXjMuMC4wXCIsXCJzdHJlYW0taHR0cFwiOlwiXjMuMi4wXCIsXCJ0cy1qZXN0XCI6XCJeMjkuMC4zXCIsXCJ0cy1ub2RlXCI6XCJeMTAuOS4xXCIsdHlwZXNjcmlwdDpcIl40LjMuMlwiLHVybDpcIl4wLjExLjBcIix3ZWJwYWNrOlwiXjUuMC4wXCJ9LHB1Ymxpc2hDb25maWc6e2FjY2VzczpcInB1YmxpY1wiLHJlZ2lzdHJ5OlwiaHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcvXCJ9LGxhdmFtb2F0OnthbGxvd1NjcmlwdHM6e1wiZWNpZXNqcz5zZWNwMjU2azFcIjohMSxcInNvY2tldC5pby1jbGllbnQ+ZW5naW5lLmlvLWNsaWVudD53cz5idWZmZXJ1dGlsXCI6ITEsXCJzb2NrZXQuaW8tY2xpZW50PmVuZ2luZS5pby1jbGllbnQ+d3M+dXRmLTgtdmFsaWRhdGVcIjohMSxcIkBtZXRhbWFzay9zZGstY29tbXVuaWNhdGlvbi1sYXllcj5idWZmZXJ1dGlsXCI6ITEsXCJAbWV0YW1hc2svc2RrLWNvbW11bmljYXRpb24tbGF5ZXI+ZWNpZXNqcz5zZWNwMjU2azFcIjohMSxcIkBtZXRhbWFzay9zZGstY29tbXVuaWNhdGlvbi1sYXllcj51dGYtOC12YWxpZGF0ZVwiOiExfX19OyFmdW5jdGlvbihlKXtlLklOUEFHRT1cIm1ldGFtYXNrLWlucGFnZVwiLGUuQ09OVEVOVF9TQ1JJUFQ9XCJtZXRhbWFzay1jb250ZW50c2NyaXB0XCIsZS5QUk9WSURFUj1cIm1ldGFtYXNrLXByb3ZpZGVyXCJ9KHVjfHwodWM9e30pKTtjb25zdCBmYz1cImRpcmVjdFwiLHBjPVwiaHR0cHM6Ly9tZXRhbWFzay5hcHAubGluay9jb25uZWN0XCIsbWM9XCJtZXRhbWFzazovL2Nvbm5lY3RcIixnYz17TkFNRTpcIk1ldGFNYXNrXCIsUkROUzpbXCJpby5tZXRhbWFza1wiLFwiaW8ubWV0YW1hc2suZmxhc2tcIl19LHZjPS8oPzpeW2EtZjAtOV17OH0tW2EtZjAtOV17NH0tNFthLWYwLTldezN9LVthLWYwLTldezR9LVthLWYwLTldezEyfSQpfCg/Ol4wezh9LTB7NH0tMHs0fS0wezR9LTB7MTJ9JCkvdSx5Yz17TUVUQU1BU0tfR0VUUFJPVklERVJTVEFURTpcIm1ldGFtYXNrX2dldFByb3ZpZGVyU3RhdGVcIixNRVRBTUFTS19DT05ORUNUU0lHTjpcIm1ldGFtYXNrX2Nvbm5lY3RTaWduXCIsTUVUQU1BU0tfQ09OTkVDVFdJVEg6XCJtZXRhbWFza19jb25uZWN0V2l0aFwiLE1FVEFNQVNLX09QRU46XCJtZXRhbWFza19vcGVuXCIsTUVUQU1BU0tfQkFUQ0g6XCJtZXRhbWFza19iYXRjaFwiLFBFUlNPTkFMX1NJR046XCJwZXJzb25hbF9zaWduXCIsV0FMTEVUX1JFUVVFU1RQRVJNSVNTSU9OUzpcIndhbGxldF9yZXF1ZXN0UGVybWlzc2lvbnNcIixXQUxMRVRfUkVWT0tFUEVSTUlTU0lPTlM6XCJ3YWxsZXRfcmV2b2tlUGVybWlzc2lvbnNcIixXQUxMRVRfR0VUUEVSTUlTU0lPTlM6XCJ3YWxsZXRfZ2V0UGVybWlzc2lvbnNcIixXQUxMRVRfV0FUQ0hBU1NFVDpcIndhbGxldF93YXRjaEFzc2V0XCIsV0FMTEVUX0FEREVUSEVSRVVNQ0hBSU46XCJ3YWxsZXRfYWRkRXRoZXJldW1DaGFpblwiLFdBTExFVF9TV0lUQ0hFVEhFVEhFUkVVTUNIQUlOOlwid2FsbGV0X3N3aXRjaEV0aGVyZXVtQ2hhaW5cIixFVEhfUkVRVUVTVEFDQ09VTlRTOlwiZXRoX3JlcXVlc3RBY2NvdW50c1wiLEVUSF9BQ0NPVU5UUzpcImV0aF9hY2NvdW50c1wiLEVUSF9DSEFJTklEOlwiZXRoX2NoYWluSWRcIixFVEhfU0VORFRSQU5TQUNUSU9OOlwiZXRoX3NlbmRUcmFuc2FjdGlvblwiLEVUSF9TSUdOVFlQRUREQVRBOlwiZXRoX3NpZ25UeXBlZERhdGFcIixFVEhfU0lHTlRZUEVEREFUQV9WMzpcImV0aF9zaWduVHlwZWREYXRhX3YzXCIsRVRIX1NJR05UWVBFRERBVEFfVjQ6XCJldGhfc2lnblR5cGVkRGF0YV92NFwiLEVUSF9TSUdOVFJBTlNBQ1RJT046XCJldGhfc2lnblRyYW5zYWN0aW9uXCIsRVRIX1NJR046XCJldGhfc2lnblwiLFBFUlNPTkFMX0VDX1JFQ09WRVI6XCJwZXJzb25hbF9lY1JlY292ZXJcIn0sRWM9e1t5Yy5FVEhfUkVRVUVTVEFDQ09VTlRTXTohMCxbeWMuRVRIX1NFTkRUUkFOU0FDVElPTl06ITAsW3ljLkVUSF9TSUdOVFJBTlNBQ1RJT05dOiEwLFt5Yy5FVEhfU0lHTl06ITAsW3ljLlBFUlNPTkFMX1NJR05dOiEwLFt5Yy5FVEhfQUNDT1VOVFNdOiExLFt5Yy5FVEhfQ0hBSU5JRF06ITEsW3ljLlBFUlNPTkFMX1NJR05dOiEwLFt5Yy5FVEhfU0lHTlRZUEVEREFUQV06ITAsW3ljLkVUSF9TSUdOVFlQRUREQVRBX1YzXTohMCxbeWMuRVRIX1NJR05UWVBFRERBVEFfVjRdOiEwLFt5Yy5XQUxMRVRfUkVRVUVTVFBFUk1JU1NJT05TXTohMCxbeWMuV0FMTEVUX0dFVFBFUk1JU1NJT05TXTohMCxbeWMuV0FMTEVUX1dBVENIQVNTRVRdOiEwLFt5Yy5XQUxMRVRfQURERVRIRVJFVU1DSEFJTl06ITAsW3ljLldBTExFVF9TV0lUQ0hFVEhFVEhFUkVVTUNIQUlOXTohMCxbeWMuTUVUQU1BU0tfQ09OTkVDVFNJR05dOiEwLFt5Yy5NRVRBTUFTS19DT05ORUNUV0lUSF06ITAsW3ljLlBFUlNPTkFMX0VDX1JFQ09WRVJdOiEwLFt5Yy5NRVRBTUFTS19CQVRDSF06ITAsW3ljLk1FVEFNQVNLX09QRU5dOiEwfSxiYz1PYmplY3Qua2V5cyhFYykubWFwKChlPT5lLnRvTG93ZXJDYXNlKCkpKSx3Yz1bXCJldGhfc2lnblR5cGVkRGF0YVwiLFwiZXRoX3NpZ25UeXBlZERhdGFfdjNcIixcImV0aF9zaWduVHlwZWREYXRhX3Y0XCIsXCJldGhfc2lnblwiXS5tYXAoKGU9PmUudG9Mb3dlckNhc2UoKSkpLFNjPVwiLnNkay1jb21tXCIsX2M9XCJwcm92aWRlclR5cGVcIixDYz1cIi5NTVNES19jYWNoZWRfYWRkcmVzc1wiLHhjPVwiLk1NU0RLX2NhY2hlZF9jaGFpbklkXCIsa2M9e0NIQUlOX0NIQU5HRUQ6XCJjaGFpbkNoYW5nZWRcIixBQ0NPVU5UU19DSEFOR0VEOlwiYWNjb3VudHNDaGFuZ2VkXCIsRElTQ09OTkVDVDpcImRpc2Nvbm5lY3RcIixDT05ORUNUOlwiY29ubmVjdFwiLENPTk5FQ1RFRDpcImNvbm5lY3RlZFwifSxNYz0xZTY7dmFyIEFjO2V4cG9ydHMuUFJPVklERVJfVVBEQVRFX1RZUEU9dm9pZCAwLChBYz1leHBvcnRzLlBST1ZJREVSX1VQREFURV9UWVBFfHwoZXhwb3J0cy5QUk9WSURFUl9VUERBVEVfVFlQRT17fSkpLlRFUk1JTkFURT1cInRlcm1pbmF0ZVwiLEFjLkVYVEVOU0lPTj1cImV4dGVuc2lvblwiLEFjLklOSVRJQUxJWkVEPVwiaW5pdGlhbGl6ZWRcIjtjb25zdCBUYz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYWxTdG9yYWdlO2Z1bmN0aW9uIEljKHtpbnN0YW5jZTplLG1zZzp0fSl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtpZihlLl9pbml0aWFsaXplZHx8KFJhKFwiW01ldGFNYXNrU0RLOiBjb25uZWN0QW5kU2lnbigpXSBwcm92aWRlciBub3QgcmVhZHkgLS0gd2FpdCBmb3IgaW5pdCgpXCIpLHlpZWxkIGUuaW5pdCgpKSxSYShgW01ldGFNYXNrU0RLOiBjb25uZWN0QW5kU2lnbigpXSBhY3RpdmVQcm92aWRlcj0ke2UuYWN0aXZlUHJvdmlkZXJ9YCksIWUuYWN0aXZlUHJvdmlkZXIpdGhyb3cgbmV3IEVycm9yKFwiU0RLIHN0YXRlIGludmFsaWQgLS0gdW5kZWZpbmVkIHByb3ZpZGVyXCIpO2NvbnN0IG49L14weChbMC05QS1GYS1mXXsyfSkqJC91LnRlc3QodCk/dDpmdW5jdGlvbihlKXtsZXQgdDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyKXQ9QnVmZmVyLmZyb20oZSxcInV0ZjhcIikudG9TdHJpbmcoXCJoZXhcIik7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dEVuY29kZXIpe2NvbnN0IG49KG5ldyBUZXh0RW5jb2RlcikuZW5jb2RlKGUpO3Q9QXJyYXkuZnJvbShuKS5tYXAoKGU9PmUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsXCIwXCIpKSkuam9pbihcIlwiKX1lbHNle2lmKFwib2JqZWN0XCIhPXR5cGVvZiBnbG9iYWx8fCEoXCJCdWZmZXJcImluIGdsb2JhbCkpdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNvbnZlcnQgc3RyaW5nIHRvIGhleDogTm8gYXZhaWxhYmxlIG1ldGhvZC5cIik7dD1nbG9iYWwuQnVmZmVyLmZyb20oZSxcInV0ZjhcIikudG9TdHJpbmcoXCJoZXhcIil9cmV0dXJuYDB4JHt0fWB9KHQpO3JldHVybiBlLmFjdGl2ZVByb3ZpZGVyLnJlcXVlc3Qoe21ldGhvZDp5Yy5NRVRBTUFTS19DT05ORUNUV0lUSCxwYXJhbXM6W3ttZXRob2Q6eWMuUEVSU09OQUxfU0lHTixwYXJhbXM6W25dfV19KX0pKX1mdW5jdGlvbiBQYyhlKXt2YXIgdCxuO3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7UmEoXCJbTWV0YU1hc2tTREs6IGNvbm5lY3RXaXRoRXh0ZW5zaW9uUHJvdmlkZXIoKV0gXCIsZSksZS5zZGtQcm92aWRlcj1lLmFjdGl2ZVByb3ZpZGVyLGUuYWN0aXZlUHJvdmlkZXI9d2luZG93LmV4dGVuc2lvbix3aW5kb3cuZXRoZXJldW09d2luZG93LmV4dGVuc2lvbjt0cnl7Y29uc3QgZT15aWVsZCBudWxsPT09KHQ9d2luZG93LmV4dGVuc2lvbil8fHZvaWQgMD09PXQ/dm9pZCAwOnQucmVxdWVzdCh7bWV0aG9kOlwiZXRoX3JlcXVlc3RBY2NvdW50c1wifSk7UmEoYFtNZXRhTWFza1NESzogY29ubmVjdFdpdGhFeHRlbnNpb25Qcm92aWRlcigpXSBhY2NvdW50cz0ke2V9YCl9Y2F0Y2goZSl7cmV0dXJuIHZvaWQgY29uc29sZS53YXJuKFwiW01ldGFNYXNrU0RLOiBjb25uZWN0V2l0aEV4dGVuc2lvblByb3ZpZGVyKCldIGNhbid0IHJlcXVlc3QgYWNjb3VudHMgZXJyb3JcIixlKX1sb2NhbFN0b3JhZ2Uuc2V0SXRlbShfYyxcImV4dGVuc2lvblwiKSxlLmV4dGVuc2lvbkFjdGl2ZT0hMCxlLmVtaXQoc2MuUHJvdmlkZXJVcGRhdGUsZXhwb3J0cy5QUk9WSURFUl9VUERBVEVfVFlQRS5FWFRFTlNJT04pLGUub3B0aW9ucy5lbmFibGVBbmFseXRpY3MmJihudWxsPT09KG49ZS5hbmFseXRpY3MpfHx2b2lkIDA9PT1ufHxuLnNlbmQoe2V2ZW50OmxyLlNES19VU0VfRVhURU5TSU9OfSkpfSkpfWZ1bmN0aW9uIFJjKGUpe2xldCB0O2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIpdD1CdWZmZXIuZnJvbShlLFwidXRmOFwiKS50b1N0cmluZyhcImJhc2U2NFwiKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2EpdD1idG9hKGVuY29kZVVSSUNvbXBvbmVudChlKS5yZXBsYWNlKC8lKFswLTlBLUZdezJ9KS9ndSwoKGUsdCk9PlN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQodCwxNikpKSkpO2Vsc2V7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGdsb2JhbHx8IShcIkJ1ZmZlclwiaW4gZ2xvYmFsKSl0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gYmFzZTY0IGVuY29kZTogTm8gYXZhaWxhYmxlIG1ldGhvZC5cIik7dD1nbG9iYWwuQnVmZmVyLmZyb20oZSxcInV0ZjhcIikudG9TdHJpbmcoXCJiYXNlNjRcIil9cmV0dXJuIHR9ZnVuY3Rpb24gT2MoZSx0LHIsaSl7dmFyIG8scyxhLGMsZCx1LGgsZixwLG0sZyx2LHksRSxiLHcsUyxfLEMseDtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0IHI9bnVsbD09PShvPWUuc3RhdGUucmVtb3RlKXx8dm9pZCAwPT09bz92b2lkIDA6by5pc1JlYWR5KCksbD1udWxsPT09KHM9ZS5zdGF0ZS5yZW1vdGUpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLmlzQ29ubmVjdGVkKCksaz1udWxsPT09KGE9ZS5zdGF0ZS5yZW1vdGUpfHx2b2lkIDA9PT1hP3ZvaWQgMDphLmlzUGF1c2VkKCksTT1hYy5nZXRQcm92aWRlcigpLEE9bnVsbD09PShjPWUuc3RhdGUucmVtb3RlKXx8dm9pZCAwPT09Yz92b2lkIDA6Yy5nZXRDaGFubmVsSWQoKSxUPW51bGw9PT0oZD1lLnN0YXRlLnJlbW90ZSl8fHZvaWQgMD09PWQ/dm9pZCAwOmQuaXNBdXRob3JpemVkKCkse2RlZXBsaW5rUHJvdG9jb2w6SX09ZS5zdGF0ZSx7bWV0aG9kOlAsZGF0YTpSLHRyaWdnZXJlZEluc3RhbGxlcjpPfT0oZT0+e3ZhciB0LHIsaSxvO2xldCBzO24uQnVmZmVyLmlzQnVmZmVyKGUpPyhzPWUudG9KU09OKCkscy5faXNCdWZmZXI9ITApOnM9ZTtjb25zdCBhPW51bGw9PT0odD1udWxsPT1zP3ZvaWQgMDpzLmRhdGEpfHx2b2lkIDA9PT10P3ZvaWQgMDp0Lm1ldGhvZDtsZXQgYz0hMTtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YobnVsbD09PShyPW51bGw9PXM/dm9pZCAwOnMuZGF0YSl8fHZvaWQgMD09PXI/dm9pZCAwOnIucGFyYW1zKSYmITA9PT0obnVsbD09PShvPW51bGw9PT0oaT1udWxsPT1zP3ZvaWQgMDpzLmRhdGEpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLnBhcmFtcyl8fHZvaWQgMD09PW8/dm9pZCAwOm8uX190cmlnZ2VyZWRJbnN0YWxsZXIpJiYoYz0hMCxzLmRhdGEucGFyYW1zPXMuZGF0YS5wYXJhbXMud3JhcHBlZFBhcmFtcykse21ldGhvZDphLGRhdGE6cyx0cmlnZ2VyZWRJbnN0YWxsZXI6Y319KSh0KTtpZihSYShgW1JDUE1TOiB3cml0ZSgpXSBtZXRob2Q9JyR7UH0nIGlzUmVtb3RlUmVhZHk9JHtyfSBjaGFubmVsSWQ9JHtBfSBpc1NvY2tldENvbm5lY3RlZD0ke2x9IGlzUmVtb3RlUGF1c2VkPSR7a30gcHJvdmlkZXJDb25uZWN0ZWQ9JHtNLmlzQ29ubmVjdGVkKCl9YCx0KSwhQSlyZXR1cm4gUCE9PXljLk1FVEFNQVNLX0dFVFBST1ZJREVSU1RBVEUmJlJhKGBbUkNQTVM6IHdyaXRlKCldICR7UH0gLS1cXHgzZSBjaGFubmVsSWQgaXMgdW5kZWZpbmVkYCksaShuZXcgRXJyb3IoXCJkaXNjb25uZWN0ZWRcIikpO1JhKGBbUkNQTVM6IHdyaXRlKCldIHJlbW90ZS5pc1BhdXNlZCgpPSR7bnVsbD09PSh1PWUuc3RhdGUucmVtb3RlKXx8dm9pZCAwPT09dT92b2lkIDA6dS5pc1BhdXNlZCgpfSBhdXRob3JpemVkPSR7VH0gcmVhZHk9JHtyfSBzb2NrZXRDb25uZWN0ZWQ9JHtsfWAsdCk7Y29uc3QgTj1udWxsPT09KGg9ZS5zdGF0ZS5wbGF0Zm9ybU1hbmFnZXIpfHx2b2lkIDA9PT1oP3ZvaWQgMDpoLmlzU2VjdXJlKCksRD1udWxsIT09KHA9bnVsbD09PShmPWUuc3RhdGUucGxhdGZvcm1NYW5hZ2VyKXx8dm9pZCAwPT09Zj92b2lkIDA6Zi5pc01vYmlsZVdlYigpKSYmdm9pZCAwIT09cCYmcCxMPW51bGwhPT0oZz1udWxsPT09KG09ZS5zdGF0ZS5yZW1vdGUpfHx2b2lkIDA9PT1tP3ZvaWQgMDptLmhhc0RlZXBsaW5rUHJvdG9jb2woKSkmJnZvaWQgMCE9PWcmJmcmJkQmJlQ7dHJ5e2lmKCFPKXtjb25zdCB0PUpTT04uc3RyaW5naWZ5KG51bGw9PVI/dm9pZCAwOlIuZGF0YSk7aWYodC5sZW5ndGg+TWMpcmV0dXJuIGkobmV3IEVycm9yKGBNZXNzYWdlIHNpemUgJHt0Lmxlbmd0aH0gZXhjZWVkcyBtYXhpbXVtIGFsbG93ZWQgc2l6ZSBvZiAxMDAwMDAwIGJ5dGVzYCkpO251bGw9PT0odj1lLnN0YXRlLnJlbW90ZSl8fHZvaWQgMD09PXZ8fHYuc2VuZE1lc3NhZ2UobnVsbD09Uj92b2lkIDA6Ui5kYXRhKS50aGVuKCgoKT0+e1JhKGBbUkNQTVM6IF93cml0ZSgpXSAke1B9IHNlbnQgc3VjY2Vzc2Z1bGx5YCl9KSkuY2F0Y2goKGU9PntSYShcIltSQ1BNUzogX3dyaXRlKCldIGVycm9yIHNlbmRpbmcgbWVzc2FnZVwiLGUpfSkpfWlmKCFOKXJldHVybiBSYShgW1JDUE1TOiBfd3JpdGUoKV0gdW5zZWN1cmUgcGxhdGZvcm0gZm9yIG1ldGhvZCAke1B9IC0tIHJldHVybiBjYWxsYmFja2ApLGkoKTtpZihPKXJldHVybiBSYShcIltSQ1BNUzogX3dyaXRlKCldIHByZXZlbnQgZGVlcGxpbmsgLS0gaW5zdGFsbGF0aW9uIGNvbXBsZXRlZCBzZXBhcmF0ZWx5LlwiKSxpKCk7Y29uc3QgdD1udWxsIT09KGI9bnVsbD09PShFPW51bGw9PT0oeT1lLnN0YXRlLnJlbW90ZSl8fHZvaWQgMD09PXk/dm9pZCAwOnkuZ2V0S2V5SW5mbygpKXx8dm9pZCAwPT09RT92b2lkIDA6RS5lY2llcy5wdWJsaWMpJiZ2b2lkIDAhPT1iP2I6XCJcIjtsZXQgbj1lbmNvZGVVUkkoYGNoYW5uZWxJZD0ke0F9JnB1YmtleT0ke3R9JmNvbW09c29ja2V0JnQ9ZCZ2PTJgKTtpZihMKXtjb25zdCB0PUpTT04uc3RyaW5naWZ5KG51bGw9PVI/dm9pZCAwOlIuZGF0YSkscj1udWxsPT09KHc9ZS5zdGF0ZS5yZW1vdGUpfHx2b2lkIDA9PT13P3ZvaWQgMDp3LmVuY3J5cHQodCk7aWYoIXIpcmV0dXJuIFJhKFwiW1JDUE1TOiBfd3JpdGUoKV0gZXJyb3IgZW5jcnlwdGluZyBtZXNzYWdlXCIpLGkobmV3IEVycm9yKFwiUmVtb3RlQ29tbXVuaWNhdGlvblBvc3RNZXNzYWdlU3RyZWFtIC0gZGlzY29ubmVjdGVkXCIpKTtuKz1gJnNjaGVtZT0ke0l9JnJwYz0ke1JjKHIpfWB9aWYoIShudWxsPT09KFM9ZS5zdGF0ZS5wbGF0Zm9ybU1hbmFnZXIpfHx2b2lkIDA9PT1TP3ZvaWQgMDpTLmlzTWV0YU1hc2tJbnN0YWxsZWQoKSkpcmV0dXJuIFJhKFwiW1JDUE1TOiBfd3JpdGUoKV0gcHJldmVudCBkZWVwbGluayB1bnRpbCBpbnN0YWxsYXRpb24gaXMgY29tcGxldGVkLlwiKSxpKCk7RWNbUF0/KFJhKGBbUkNQTVM6IF93cml0ZSgpXSByZWRpcmVjdCBsaW5rIGZvciAnJHtQfScgc29ja2V0Q29ubmVjdGVkPSR7bH0gY29ubmVjdD8ke259YCksbnVsbD09PShfPWUuc3RhdGUucGxhdGZvcm1NYW5hZ2VyKXx8dm9pZCAwPT09X3x8Xy5vcGVuRGVlcGxpbmsoYCR7cGN9PyR7bn1gLGAke21jfT8ke259YCxcIl9zZWxmXCIpKToobnVsbD09PShDPWUuc3RhdGUucmVtb3RlKXx8dm9pZCAwPT09Qz92b2lkIDA6Qy5pc1BhdXNlZCgpKT8oUmEoYFtSQ1BNUzogX3dyaXRlKCldIE1NIGlzIFBBVVNFRCEgZGVlcGxpbmsgd2l0aCBjb25uZWN0ISB0YXJnZXRNZXRob2Q9JHtQfWApLG51bGw9PT0oeD1lLnN0YXRlLnBsYXRmb3JtTWFuYWdlcil8fHZvaWQgMD09PXh8fHgub3BlbkRlZXBsaW5rKGAke3BjfT9yZWRpcmVjdD10cnVlJiR7bn1gLGAke21jfT9yZWRpcmVjdD10cnVlJiR7bn1gLFwiX3NlbGZcIikpOlJhKGBbUkNQTVM6IF93cml0ZSgpXSBtZXRob2QgJHtQfSBkb2Vzbid0IG5lZWQgcmVkaXJlY3QuYCl9Y2F0Y2goZSl7cmV0dXJuIFJhKFwiW1JDUE1TOiBfd3JpdGUoKV0gZXJyb3Igc2VuZGluZyBtZXNzYWdlXCIsZSksaShuZXcgRXJyb3IoXCJSZW1vdGVDb21tdW5pY2F0aW9uUG9zdE1lc3NhZ2VTdHJlYW0gLSBkaXNjb25uZWN0ZWRcIikpfXJldHVybiBpKCl9KSl9Y2xhc3MgTmMgZXh0ZW5kcyBjYS5EdXBsZXh7Y29uc3RydWN0b3Ioe25hbWU6ZSxyZW1vdGU6dCxkZWVwbGlua1Byb3RvY29sOm4scGxhdGZvcm1NYW5hZ2VyOnJ9KXtzdXBlcih7b2JqZWN0TW9kZTohMH0pLHRoaXMuc3RhdGU9e19uYW1lOm51bGwscmVtb3RlOm51bGwsZGVlcGxpbmtQcm90b2NvbDohMSxwbGF0Zm9ybU1hbmFnZXI6bnVsbH0sdGhpcy5zdGF0ZS5fbmFtZT1lLHRoaXMuc3RhdGUucmVtb3RlPXQsdGhpcy5zdGF0ZS5kZWVwbGlua1Byb3RvY29sPW4sdGhpcy5zdGF0ZS5wbGF0Zm9ybU1hbmFnZXI9cix0aGlzLl9vbk1lc3NhZ2U9dGhpcy5fb25NZXNzYWdlLmJpbmQodGhpcyksdGhpcy5zdGF0ZS5yZW1vdGUub24oZXhwb3J0cy5FdmVudFR5cGUuTUVTU0FHRSx0aGlzLl9vbk1lc3NhZ2UpfV93cml0ZShlLHQsbil7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtyZXR1cm4gT2ModGhpcyxlLDAsbil9KSl9X3JlYWQoKXt9X29uTWVzc2FnZShlKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXt0cnl7aWYoUmEoXCJbUkNQTVM6IG9uTWVzc2FnZSgpXSBtZXNzYWdlXCIsdCksIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0KXJldHVybjtpZihcIm9iamVjdFwiIT10eXBlb2YobnVsbD09dD92b2lkIDA6dC5kYXRhKSlyZXR1cm47aWYoIShudWxsPT10P3ZvaWQgMDp0Lm5hbWUpKXJldHVybiB2b2lkIFJhKFwiW1JDUE1TOiBvbk1lc3NhZ2UoKV0gaWdub3JlIG1lc3NhZ2Ugd2l0aG91dCBuYW1lXCIsdCk7aWYoKG51bGw9PXQ/dm9pZCAwOnQubmFtZSkhPT11Yy5QUk9WSURFUilyZXR1cm4gdm9pZCBSYShgW1JDUE1TOiBvbk1lc3NhZ2UoKV0gaWdub3JlIG1lc3NhZ2Ugd2l0aCB3cm9uZyBuYW1lIG1lc3NhZ2U9JHt0fWApO2lmKG4uQnVmZmVyLmlzQnVmZmVyKHQpKXtjb25zdCByPW4uQnVmZmVyLmZyb20odCk7ZS5wdXNoKHIpfWVsc2UgZS5wdXNoKHQpfWNhdGNoKGUpe1JhKGBbUkNQTVM6IG9uTWVzc2FnZSgpXSBpZ25vcmUgbWVzc2FnZSBlcnJvciBlcnI9JHtlfWApfX0odGhpcyxlKX1zdGFydCgpe319bGV0IERjPTE7Y29uc3QgTGM9ZT0+bmV3IFByb21pc2UoKHQ9PntzZXRUaW1lb3V0KCgoKT0+e3QoITApfSksZSl9KSksQmM9KHtjaGVja0luc3RhbGxhdGlvbk9uQWxsQ2FsbHM6dD0hMSxjb21tdW5pY2F0aW9uTGF5ZXJQcmVmZXJlbmNlOm4saW5qZWN0UHJvdmlkZXI6cixzaG91bGRTaGltV2ViMzppLHBsYXRmb3JtTWFuYWdlcjpvLGluc3RhbGxlcjpzLHNkazphLHJlbW90ZUNvbm5lY3Rpb246YyxkZWJ1ZzpkfSk9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciB1LGg7Y29uc3QgZj0oKHtuYW1lOmUscmVtb3RlQ29ubmVjdGlvbjp0fSk9PntpZighdHx8IShudWxsPT10P3ZvaWQgMDp0LmdldENvbm5lY3RvcigpKSl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJlbW90ZSBjb25uZWN0aW9uIHBhcmFtZXRlclwiKTtyZXR1cm4gbmV3IE5jKHtuYW1lOmUscmVtb3RlOm51bGw9PXQ/dm9pZCAwOnQuZ2V0Q29ubmVjdG9yKCksZGVlcGxpbmtQcm90b2NvbDpudWxsPT10P3ZvaWQgMDp0LnN0YXRlLmRlZXBsaW5rUHJvdG9jb2wscGxhdGZvcm1NYW5hZ2VyOm51bGw9PXQ/dm9pZCAwOnQuZ2V0UGxhdGZvcm1NYW5hZ2VyKCl9KX0pKHtuYW1lOnVjLklOUEFHRSx0YXJnZXQ6dWMuQ09OVEVOVF9TQ1JJUFQscGxhdGZvcm1NYW5hZ2VyOm8sY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZTpuLHJlbW90ZUNvbm5lY3Rpb246Y30pLHA9by5nZXRQbGF0Zm9ybVR5cGUoKSxtPWEub3B0aW9ucy5kYXBwTWV0YWRhdGEsZz1gU2RrL0phdmFzY3JpcHQgU2RrVmVyc2lvbi8ke2hjLnZlcnNpb259IFBsYXRmb3JtLyR7cH0gZEFwcC8ke251bGwhPT0odT1tLnVybCkmJnZvaWQgMCE9PXU/dTptLm5hbWV9IGRBcHBUaXRsZS8ke20ubmFtZX1gO2xldCB2PW51bGwseT1udWxsO2NvbnN0IEU9bnVsbD09PShoPWEub3B0aW9ucy5zdG9yYWdlKXx8dm9pZCAwPT09aD92b2lkIDA6aC5zdG9yYWdlTWFuYWdlcjtpZihFKXt0cnl7Y29uc3QgZT15aWVsZCBFLmdldENhY2hlZEFjY291bnRzKCk7ZS5sZW5ndGg+MCYmKHY9ZVswXSl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcl0gZmFpbGVkIHRvIGdldCBjYWNoZWQgYWRkcmVzc2VzOiAke2V9YCl9dHJ5e2NvbnN0IGU9eWllbGQgRS5nZXRDYWNoZWRDaGFpbklkKCk7ZSYmKHk9ZSl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcl0gZmFpbGVkIHRvIHBhcnNlIGNhY2hlZCBjaGFpbklkOiAke2V9YCl9fVJhKGBbaW5pdGlhbGl6ZU1vYmlsZVByb3ZpZGVyXSBjYWNoZWRBY2NvdW50QWRkcmVzczogJHt2fSwgY2FjaGVkQ2hhaW5JZDogJHt5fWApO2NvbnN0IGI9ISghcnx8cD09PWV4cG9ydHMuUGxhdGZvcm1UeXBlLk5vbkJyb3dzZXJ8fHA9PT1leHBvcnRzLlBsYXRmb3JtVHlwZS5SZWFjdE5hdGl2ZSksdz1hYy5pbml0KHtzaG91bGRTZXRPbldpbmRvdzpiLGNvbm5lY3Rpb25TdHJlYW06ZixzaG91bGRTaGltV2ViMzppLHNka0luc3RhbmNlOmF9KTtsZXQgUz0hMTtjb25zdCBfPWU9PntTPWV9LEM9KCk9PlMseD0obixyLGksZCk9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciB1LGgsZixwLG0sYix3LHgsaztjb25zdCBNPWFjLmdldFByb3ZpZGVyKCk7aWYoUyl7TS5lbWl0KFwiZGlzcGxheV91cmlcIiwobnVsbD09Yz92b2lkIDA6Yy5zdGF0ZS5xcmNvZGVMaW5rKXx8XCJcIiksbnVsbD09Y3x8Yy5zaG93QWN0aXZlTW9kYWwoKTtsZXQgZT1DKCk7Zm9yKDtlOyl7Y29uc3QgdD1DKCksbj1udWxsPT1jP3ZvaWQgMDpjLmlzQXV0aG9yaXplZCgpO2U9dCYmIW4sUmEoYFtpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIHdhaXRpbmcgZm9yIGluaXRpYWxpemF0aW9uIHRvIGNvbXBsZXRlIC0gaW5pdGlhbGl6aW5nOiAke3R9IGF1dGhvcml6ZWQ6ICR7bn1gKSx5aWVsZCBMYygxZTMpfXJldHVybiBSYShcIltpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIGluaXRpYWwgbWV0aG9kIGNvbXBsZXRlZCAtLSBwcmV2ZW50IGluc3RhbGxhdGlvbiBhbmQgY2FsbCBwcm92aWRlclwiKSxpKC4uLnIpfWNvbnN0IEE9by5pc01ldGFNYXNrSW5zdGFsbGVkKCksVD1udWxsPT1jP3ZvaWQgMDpjLmlzQ29ubmVjdGVkKCk7bGV0IEk9bnVsbCxQPW51bGwsUj1udWxsO2lmKEk9bnVsbCE9PSh1PU0uZ2V0U2VsZWN0ZWRBZGRyZXNzKCkpJiZ2b2lkIDAhPT11P3U6dixSPU0uZ2V0Q2hhaW5JZCgpfHx5LEkmJkUmJkkhPT12JiZFLnBlcnNpc3RBY2NvdW50cyhbSV0pLmNhdGNoKChlPT57Y29uc29sZS5lcnJvcihgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcl0gZmFpbGVkIHRvIHBlcnNpc3QgYWNjb3VudDogJHtlfWApfSkpLFImJih5PVIsRSYmRS5wZXJzaXN0Q2hhaW5JZChSKS5jYXRjaCgoZT0+e2NvbnNvbGUuZXJyb3IoYFtpbml0aWFsaXplTW9iaWxlUHJvdmlkZXJdIGZhaWxlZCB0byBwZXJzaXN0IGNoYWluSWQ6ICR7ZX1gKX0pKSksUmEoXCJbaW5pdGlhbGl6ZU1vYmlsZVByb3ZpZGVyOiBzZW5kUmVxdWVzdCgpXVwiLHtzZWxlY3RlZEFkZHJlc3M6SSxjaGFpbklkOlJ9KSxkJiZSYShgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcjogc2VuZFJlcXVlc3QoKV0gbWV0aG9kPSR7bn0gb25nb2luZz0ke1N9IHNlbGVjdGVkQWRkcmVzcz0ke0l9IGlzSW5zdGFsbGVkPSR7QX0gY2hlY2tJbnN0YWxsYXRpb25PbkFsbENhbGxzPSR7dH0gc29ja2V0Q29ubmVjdGVkPSR7VH1gKSxJJiZuLnRvTG93ZXJDYXNlKCk9PT15Yy5FVEhfQUNDT1VOVFMudG9Mb3dlckNhc2UoKSlyZXR1cm5bSV07aWYoUiYmbi50b0xvd2VyQ2FzZSgpPT09eWMuRVRIX0NIQUlOSUQudG9Mb3dlckNhc2UoKSlyZXR1cm4gUjtjb25zdCBPPVt5Yy5FVEhfUkVRVUVTVEFDQ09VTlRTLHljLldBTExFVF9SRVFVRVNUUEVSTUlTU0lPTlMseWMuTUVUQU1BU0tfQ09OTkVDVFNJR04seWMuTUVUQU1BU0tfQ09OTkVDVFdJVEhdLE49IUVjW25dLEQ9bnVsbD09PShoPWEub3B0aW9ucy5yZWFkb25seVJQQ01hcCl8fHZvaWQgMD09PWg/dm9pZCAwOmhbUl07aWYoRCYmTil0cnl7Y29uc3QgdD1udWxsPT09KGY9bnVsbD09cj92b2lkIDA6clswXSl8fHZvaWQgMD09PWY/dm9pZCAwOmYucGFyYW1zLGk9eWllbGQoKHtycGNFbmRwb2ludDp0LG1ldGhvZDpuLHNka0luZm86cixwYXJhbXM6aX0pPT5sKHZvaWQgMCx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdCBvPUpTT04uc3RyaW5naWZ5KHtqc29ucnBjOlwiMi4wXCIsbWV0aG9kOm4scGFyYW1zOmksaWQ6KERjKz0xLERjKX0pLHM9e0FjY2VwdDpcImFwcGxpY2F0aW9uL2pzb25cIixcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvblwifTtsZXQgYTt0LmluY2x1ZGVzKFwiaW5mdXJhXCIpJiYoc1tcIk1ldGFtYXNrLVNkay1JbmZvXCJdPXIpO3RyeXthPXlpZWxkIGUodCx7bWV0aG9kOlwiUE9TVFwiLGhlYWRlcnM6cyxib2R5Om99KX1jYXRjaChlKXt0aHJvdyBlIGluc3RhbmNlb2YgRXJyb3I/bmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggZnJvbSBSUEM6ICR7ZS5tZXNzYWdlfWApOm5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIGZyb20gUlBDOiAke2V9YCl9aWYoIWEub2spdGhyb3cgbmV3IEVycm9yKGBTZXJ2ZXIgcmVzcG9uZGVkIHdpdGggYSBzdGF0dXMgb2YgJHthLnN0YXR1c31gKTtyZXR1cm4oeWllbGQgYS5qc29uKCkpLnJlc3VsdH0pKSkoe3JwY0VuZHBvaW50OkQsc2RrSW5mbzpnLG1ldGhvZDpuLHBhcmFtczp0fHxbXX0pO3JldHVybiBkJiZSYShgaW5pdGlhbGl6ZVByb3ZpZGVyOjpSZWFkT25seVJQQ1Jlc3BvbnNlICR7aX1gKSxpfWNhdGNoKGUpe2NvbnNvbGUud2FybihgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcjogc2VuZFJlcXVlc3QoKV0gbWV0aG9kPSR7bn0gcmVhZE9ubHlSUENSZXF1ZXN0IGZhaWxlZDpgLGUpfWlmKCghQXx8QSYmIVQpJiZuIT09eWMuTUVUQU1BU0tfR0VUUFJPVklERVJTVEFURSl7Y29uc3QgZT0obnVsbD09PShwPW51bGw9PXI/dm9pZCAwOnJbMF0pfHx2b2lkIDA9PT1wP3ZvaWQgMDpwLnBhcmFtcyl8fFtdO2lmKC0xIT09Ty5pbmRleE9mKG4pfHx0KXtfKCEwKTtjb25zdCB0PW49PT15Yy5NRVRBTUFTS19DT05ORUNUV0lUSCxvPWAke0RhdGUubm93KCl9YDt0cnl7eWllbGQgcy5zdGFydCh7d2FpdDohMSxjb25uZWN0V2l0aDp0P3ttZXRob2Q6bixpZDpvLHBhcmFtczplfTp2b2lkIDB9KSx5aWVsZCBuZXcgUHJvbWlzZSgoKGUsdCk9PnsobnVsbD09Yz92b2lkIDA6Yy5pc0F1dGhvcml6ZWQoKSkmJihSYShcIltpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIGFscmVhZHkgYXV0aG9yaXplZFwiKSxlKCEwKSksbnVsbD09Y3x8Yy5nZXRDb25uZWN0b3IoKS5vbmNlKGV4cG9ydHMuRXZlbnRUeXBlLkFVVEhPUklaRUQsKCgpPT57ZSghMCl9KSksYS5vbmNlKGV4cG9ydHMuRXZlbnRUeXBlLlBST1ZJREVSX1VQREFURSwoZT0+e1JhKGBbaW5pdGlhbGl6ZU1vYmlsZVByb3ZpZGVyOiBzZW5kUmVxdWVzdCgpXSBQUk9WSURFUl9VUERBVEUgLS0tIHJlbW90ZSBwcm92aWRlciByZXF1ZXN0IGludGVydXB0ZWQgdHlwZT0ke2V9YCksZT09PWV4cG9ydHMuUFJPVklERVJfVVBEQVRFX1RZUEUuRVhURU5TSU9OP3QoZXhwb3J0cy5FdmVudFR5cGUuUFJPVklERVJfVVBEQVRFKTp0KG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gVGVybWluYXRlZFwiKSl9KSl9KSl9Y2F0Y2godCl7aWYoZXhwb3J0cy5QUk9WSURFUl9VUERBVEVfVFlQRS5FWFRFTlNJT049PT10KXtpZihSYShgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcjogc2VuZFJlcXVlc3QoKV0gZXh0ZW5zaW9uIHByb3ZpZGVyIGRldGVjdDogcmUtY3JlYXRlICR7bn0gb24gdGhlIGFjdGl2ZSBwcm92aWRlcmApLG4udG9Mb3dlckNhc2UoKT09PXljLk1FVEFNQVNLX0NPTk5FQ1RTSUdOLnRvTG93ZXJDYXNlKCkpe2NvbnN0IHQ9eWllbGQgbnVsbD09PShtPWEuZ2V0UHJvdmlkZXIoKSl8fHZvaWQgMD09PW0/dm9pZCAwOm0ucmVxdWVzdCh7bWV0aG9kOnljLkVUSF9SRVFVRVNUQUNDT1VOVFMscGFyYW1zOltdfSk7aWYoIXQubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIlNESyBzdGF0ZSBpbnZhbGlkIC0tIHVuZGVmaW5lZCBhY2NvdW50c1wiKTtjb25zdCBuPXlpZWxkIG51bGw9PT0oYj1hLmdldFByb3ZpZGVyKCkpfHx2b2lkIDA9PT1iP3ZvaWQgMDpiLnJlcXVlc3Qoe21ldGhvZDp5Yy5QRVJTT05BTF9TSUdOLHBhcmFtczpbZVswXSx0WzBdXX0pO3JldHVybiBhLmVtaXQoc2MuQ29ubmVjdFdpdGhSZXNwb25zZSxuKSxufWlmKG4udG9Mb3dlckNhc2UoKT09PXljLk1FVEFNQVNLX0NPTk5FQ1RXSVRILnRvTG93ZXJDYXNlKCkpe2NvbnN0W3RdPWUsbj15aWVsZCgoe21ldGhvZDplLHNkazp0LHBhcmFtczpufSk9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3ZhciByLGksbyxzO2lmKCF0LmlzRXh0ZW5zaW9uQWN0aXZlKCkpdGhyb3cgbmV3IEVycm9yKFwiU0RLIHN0YXRlIGludmFsaWQgLS0gZXh0ZW5zaW9uIGlzIG5vdCBhY3RpdmVcIik7UmEoXCJbTWV0YU1hc2tQcm92aWRlcjogZXh0ZW5zaW9uQ29ubmVjdFdpdGhPdmVyd3JpdGUoKV0gT3ZlcndyaXRpbmcgcmVxdWVzdCBtZXRob2RcIixlLG4pO2NvbnN0IGE9eWllbGQgbnVsbD09PShyPXQuZ2V0UHJvdmlkZXIoKSl8fHZvaWQgMD09PXI/dm9pZCAwOnIucmVxdWVzdCh7bWV0aG9kOnljLkVUSF9SRVFVRVNUQUNDT1VOVFMscGFyYW1zOltdfSk7aWYoIWEubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIlNESyBzdGF0ZSBpbnZhbGlkIC0tIHVuZGVmaW5lZCBhY2NvdW50c1wiKTtpZigobnVsbD09ZT92b2lkIDA6ZS50b0xvd2VyQ2FzZSgpKT09PXljLlBFUlNPTkFMX1NJR04udG9Mb3dlckNhc2UoKSl7Y29uc3Qgcj17bWV0aG9kOmUscGFyYW1zOltuWzBdLGFbMF1dfTtyZXR1cm4geWllbGQgbnVsbD09PShpPXQuZ2V0UHJvdmlkZXIoKSl8fHZvaWQgMD09PWk/dm9pZCAwOmkucmVxdWVzdChyKX1pZigobnVsbD09ZT92b2lkIDA6ZS50b0xvd2VyQ2FzZSgpKT09PXljLkVUSF9TRU5EVFJBTlNBQ1RJT04udG9Mb3dlckNhc2UoKSl7Y29uc3Qgcj17bWV0aG9kOmUscGFyYW1zOltPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sblswXSkse2Zyb206YVswXX0pXX07cmV0dXJuIHlpZWxkIG51bGw9PT0obz10LmdldFByb3ZpZGVyKCkpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnJlcXVlc3Qocil9cmV0dXJuIHdjLmluY2x1ZGVzKGUudG9Mb3dlckNhc2UoKSk/KGNvbnNvbGUud2FybihgTWV0YU1hc2tTREsgY29ubmVjdFdpdGggbWV0aG9kPSR7ZX0gLS0gbm90IGhhbmRsZWQgYnkgdGhlIGV4dGVuc2lvbiAtLSBjYWxsIHNlcGFyYXRlbHlgKSxhKTp5aWVsZCBudWxsPT09KHM9dC5nZXRQcm92aWRlcigpKXx8dm9pZCAwPT09cz92b2lkIDA6cy5yZXF1ZXN0KHttZXRob2Q6ZSxwYXJhbXM6bn0pfSkpKSh7bWV0aG9kOnQubWV0aG9kLHNkazphLHBhcmFtczp0LnBhcmFtc30pO3JldHVybiBhLmVtaXQoc2MuQ29ubmVjdFdpdGhSZXNwb25zZSxuKSxufXJldHVybiBSYShgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcjogc2VuZFJlcXVlc3QoKV0gc2VuZGluZyAnJHtufScgb24gYWN0aXZlIHByb3ZpZGVyYCxlKSx5aWVsZCBudWxsPT09KHc9YS5nZXRQcm92aWRlcigpKXx8dm9pZCAwPT09dz92b2lkIDA6dy5yZXF1ZXN0KHttZXRob2Q6bixwYXJhbXM6ZX0pfWlmKHQ9PT1leHBvcnRzLkV2ZW50VHlwZS5SRUpFQ1RFRCl0aHJvdyBudWxsPT1jfHxjLmNsb3NlTW9kYWwoKSxudWxsPT09KHg9YS5nZXRQcm92aWRlcigpKXx8dm9pZCAwPT09eHx8eC5oYW5kbGVEaXNjb25uZWN0KHt0ZXJtaW5hdGU6ITF9KSxPYmplY3QuYXNzaWduKG5ldyBFcnJvcihcIlVzZXIgcmVqZWN0ZWQgY29ubmVjdGlvblwiKSx7Y29kZTo0MDAxfSk7dGhyb3cgUmEoYFtpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIGZhaWxlZCB0byBzdGFydCBpbnN0YWxsZXI6ICR7dH1gKSx0fWZpbmFsbHl7XyghMSl9aWYobj09PXljLkVUSF9SRVFVRVNUQUNDT1VOVFMpcmV0dXJuIFA9eWllbGQgbmV3IFByb21pc2UoKGU9Pntjb25zdCB0PXNldEludGVydmFsKCgoKT0+e2NvbnN0e2FjY291bnRzOm59PU0uZ2V0U3RhdGUoKTtuJiYoY2xlYXJJbnRlcnZhbCh0KSxlKG4pKX0pLDEwMCl9KSksUmEoYFtpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIHNlbGVjdGVkQWRkcmVzczogJHtJfSAtLS0gU0tJUCBycGMgY2FsbGApLFA7aWYobj09PXljLk1FVEFNQVNLX0NPTk5FQ1RXSVRIKXRyeXtsZXQgZT0wO2NvbnN0IHQ9NSxuPSh7cmVzb2x2ZTpuLHJlamVjdDpyfSk9PntlKz0xO2NvbnN0IGk9bnVsbD09Yz92b2lkIDA6Yy5nZXRDb25uZWN0b3IoKS5nZXRSUENNZXRob2RUcmFja2VyKCkscz1udWxsPT1pP3ZvaWQgMDppW29dO3JldHVybiBSYShgVFJBQ0tFUjogdXBkYXRlIG1ldGhvZCAke299YCxzKSwobnVsbD09cz92b2lkIDA6cy5yZXN1bHQpPyhSYShcIltpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIGZvdW5kIHJlc3VsdFwiLHMucmVzdWx0KSxhLmVtaXQoc2MuQ29ubmVjdFdpdGhSZXNwb25zZSxzLnJlc3VsdCksdm9pZCBuKHMucmVzdWx0KSk6KG51bGw9PXM/dm9pZCAwOnMuZXJyb3IpPyhSYShcIltpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIGZvdW5kIGVycm9yXCIscy5lcnJvciksdm9pZCByKHMuZXJyb3IpKTplPj10PyhSYShcIltpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIG1heCBtZXNzYWdlIGNvdW50IHJlYWNoZWQgd2l0aG91dCByZXN1bHRcIiksdm9pZCByKG5ldyBFcnJvcihcIk1heCBtZXNzYWdlIGNvdW50IHJlYWNoZWQgd2l0aG91dCByZXN1bHRcIikpKTp2b2lkIFJhKFwiW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcjogc2VuZFJlcXVlc3QoKV0gbm90IGZvdW5kIHlldCwgbmVlZCB0byB3YWl0IGZvciBuZXh0IHVwZGF0ZVwiKX07bGV0IHIsaTtjb25zdCBzPXlpZWxkIG5ldyBQcm9taXNlKCgoZSx0KT0+e2NvbnN0IHM9bnVsbD09Yz92b2lkIDA6Yy5nZXRDb25uZWN0b3IoKS5nZXRSUENNZXRob2RUcmFja2VyKCk7UmEoYFRSQUNLRVI6IG1ldGhvZCAke299YCxzKSwobnVsbD09cz92b2lkIDA6c1tvXS5yZXN1bHQpPyhSYShcIltpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIGZvdW5kIHJlc3VsdFwiLG51bGw9PXM/dm9pZCAwOnNbb10ucmVzdWx0KSxlKG51bGw9PXM/dm9pZCAwOnNbb10ucmVzdWx0KSk6KG51bGw9PXM/dm9pZCAwOnNbb10uZXJyb3IpJiYoUmEoXCJbaW5pdGlhbGl6ZU1vYmlsZVByb3ZpZGVyOiBzZW5kUmVxdWVzdCgpXSBmb3VuZCBlcnJvclwiLG51bGw9PXM/dm9pZCAwOnNbb10uZXJyb3IpLHQobnVsbD09cz92b2lkIDA6c1tvXS5lcnJvcikpLGk9KCk9Pm4oe3Jlc29sdmU6ZSxyZWplY3Q6dH0pLHI9bnVsbD09Yz92b2lkIDA6Yy5nZXRDb25uZWN0b3IoKS5vbihleHBvcnRzLkV2ZW50VHlwZS5SUENfVVBEQVRFLGkpfSkpO3JldHVybiBpJiYobnVsbD09cnx8ci5vZmYoZXhwb3J0cy5FdmVudFR5cGUuUlBDX1VQREFURSxpKSksUmEoXCJUUkFDS0VSOiByZXN1bHRcIixzKSxzfWNhdGNoKGUpe3Rocm93IFJhKFwiW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcjogc2VuZFJlcXVlc3QoKV0gZXJyb3I6XCIsZSksZX1yWzBdJiZcIm9iamVjdFwiPT10eXBlb2YgclswXSYmKHJbMF0ucGFyYW1zPXtfX3RyaWdnZXJlZEluc3RhbGxlcjohMCx3cmFwcGVkUGFyYW1zOnJbMF0ucGFyYW1zfSk7cmV0dXJuIGkoLi4ucil9aWYoby5pc1NlY3VyZSgpJiZFY1tuXSlyZXR1cm4gaSguLi5yKTtpZihhLmlzRXh0ZW5zaW9uQWN0aXZlKCkpcmV0dXJuIFJhKGBbaW5pdGlhbGl6ZU1vYmlsZVByb3ZpZGVyOiBzZW5kUmVxdWVzdCgpXSBFWFRFTlNJT04gYWN0aXZlIC0gcmVkaXJlY3QgcmVxdWVzdCAnJHtufScgdG8gaXRgLHIsZSkseWllbGQgbnVsbD09PShrPWEuZ2V0UHJvdmlkZXIoKSl8fHZvaWQgMD09PWs/dm9pZCAwOmsucmVxdWVzdCh7bWV0aG9kOm4scGFyYW1zOmV9KTt0aHJvdyBSYShgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcjogc2VuZFJlcXVlc3QoKV0gbWV0aG9kPSR7bn0gLS0tIHNraXAgLS0tIG5vdCBjb25uZWN0ZWQvaW5zdGFsbGVkYCksbmV3IEVycm9yKFwiTWV0YU1hc2sgaXMgbm90IGNvbm5lY3RlZC9pbnN0YWxsZWQsIHBsZWFzZSBjYWxsIGV0aF9yZXF1ZXN0QWNjb3VudHMgdG8gY29ubmVjdCBmaXJzdC5cIil9dHJ5e2NvbnN0IGU9eWllbGQgaSguLi5yKTtpZihSYShgW2luaXRpYWxpemVNb2JpbGVQcm92aWRlcjogc2VuZFJlcXVlc3QoKV0gbWV0aG9kPSR7bn0gcnBjUmVzcG9uc2VgLGUpLG49PT15Yy5XQUxMRVRfUkVRVUVTVFBFUk1JU1NJT05TKXtjb25zdCB0PWUucmVkdWNlKCgoZSx0KT0+e3ZhciBuO2lmKFwiZXRoX2FjY291bnRzXCI9PT10LnBhcmVudENhcGFiaWxpdHkpe2NvbnN0IHI9bnVsbD09PShuPXQuY2F2ZWF0cy5maW5kKChlPT5cInJlc3RyaWN0UmV0dXJuZWRBY2NvdW50c1wiPT09ZS50eXBlKSkpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnZhbHVlO3ImJmUucHVzaCguLi5yKX1yZXR1cm4gZX0pLFtdKTtSYShcIltpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIGFjY291bnRzVG9QZXJzaXN0OlwiLHQpLHQubGVuZ3RoPjAmJihNLmhhbmRsZUFjY291bnRzQ2hhbmdlZCh0LCExKSxudWxsPT1FfHxFLnBlcnNpc3RBY2NvdW50cyh0KSl9cmV0dXJuIGV9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5lcnJvcihcIltpbml0aWFsaXplTW9iaWxlUHJvdmlkZXI6IHNlbmRSZXF1ZXN0KCldIGVycm9yOlwiLGUpLGV9fSkpLHtyZXF1ZXN0Omt9PXc7dy5yZXF1ZXN0PSguLi5lKT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIHgobnVsbD09ZT92b2lkIDA6ZVswXS5tZXRob2QsZSxrLGQpfSkpO2NvbnN0e3NlbmQ6TX09dztyZXR1cm4gdy5zZW5kPSguLi5lKT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIHgobnVsbD09ZT92b2lkIDA6ZVswXSxlLE0sZCl9KSksUmEoXCJbaW5pdGlhbGl6ZU1vYmlsZVByb3ZpZGVyOiBzZW5kUmVxdWVzdCgpXSBtZXRhbWFza1N0cmVhbS5zdGFydCgpXCIpLGYuc3RhcnQoKSx3fSkpO2Z1bmN0aW9uIEtjKGUpe3ZhciB0LG4scixpO3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3R7b3B0aW9uczpvfT1lLHM9e2NvbW11bmljYXRpb25MYXllclByZWZlcmVuY2U6bnVsbCE9PSh0PW8uY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZSkmJnZvaWQgMCE9PXQ/dDpleHBvcnRzLkNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2UuU09DS0VULHBsYXRmb3JtTWFuYWdlcjplLnBsYXRmb3JtTWFuYWdlcixzZGs6ZSxjaGVja0luc3RhbGxhdGlvbk9uQWxsQ2FsbHM6by5jaGVja0luc3RhbGxhdGlvbk9uQWxsQ2FsbHMsaW5qZWN0UHJvdmlkZXI6bnVsbD09PShuPW8uaW5qZWN0UHJvdmlkZXIpfHx2b2lkIDA9PT1ufHxuLHNob3VsZFNoaW1XZWIzOm51bGw9PT0ocj1vLnNob3VsZFNoaW1XZWIzKXx8dm9pZCAwPT09cnx8cixleHRlbnNpb25Pbmx5Om51bGw9PT0oaT1vLmV4dGVuc2lvbk9ubHkpfHx2b2lkIDA9PT1pfHxpLGluc3RhbGxlcjplLmluc3RhbGxlcixyZW1vdGVDb25uZWN0aW9uOmUucmVtb3RlQ29ubmVjdGlvbixkZWJ1ZzplLmRlYnVnfSxhPXlpZWxkIEJjKHMpO2UuYWN0aXZlUHJvdmlkZXI9YSxmdW5jdGlvbihlKXt2YXIgdCxuLHIsaTtudWxsPT09KG49bnVsbD09PSh0PWUucmVtb3RlQ29ubmVjdGlvbil8fHZvaWQgMD09PXQ/dm9pZCAwOnQuZ2V0Q29ubmVjdG9yKCkpfHx2b2lkIDA9PT1ufHxuLm9uKHNjLkNvbm5lY3Rpb25TdGF0dXMsKHQ9PntlLmVtaXQoc2MuQ29ubmVjdGlvblN0YXR1cyx0KX0pKSxudWxsPT09KGk9bnVsbD09PShyPWUucmVtb3RlQ29ubmVjdGlvbil8fHZvaWQgMD09PXI/dm9pZCAwOnIuZ2V0Q29ubmVjdG9yKCkpfHx2b2lkIDA9PT1pfHxpLm9uKHNjLlNlcnZpY2VTdGF0dXMsKHQ9PntlLmVtaXQoc2MuU2VydmljZVN0YXR1cyx0KX0pKX0oZSl9KSl9Y29uc3QgamM9XCJzZGtcIjtjbGFzcyAkY3tjb25zdHJ1Y3Rvcih7c2VydmVyVXJsOmUsZW5hYmxlZDp0LG9yaWdpbmF0b3JJbmZvOm59KXt0aGlzLnNlcnZlclVSTD1ucix0aGlzLnNlcnZlclVSTD1lLHRoaXMub3JpZ2luYXRvckluZm89bix0aGlzLmVuYWJsZWQ9bnVsbD09dHx8dH1zZW5kKHtldmVudDplLHBhcmFtczp0fSl7aWYoIXRoaXMuZW5hYmxlZClyZXR1cm47Y29uc3Qgbj1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe2lkOmpjLGV2ZW50OmUsc2RrVmVyc2lvbjpoYy52ZXJzaW9ufSx0aGlzLm9yaWdpbmF0b3JJbmZvKSx7cGFyYW1zOnR9KTtSYShgW0FuYWx5dGljczogc2VuZCgpXSBldmVudDogJHtlfWAsbiksWG4obix0aGlzLnNlcnZlclVSTCkuY2F0Y2goKGU9PntSYShgW0FuYWx5dGljczogc2VuZCgpXSBlcnJvcjogJHtlfWApfSkpfX1jb25zdCBIYz0oKT0+e2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudClyZXR1cm47bGV0IGU7Y29uc3QgdD1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7Zm9yKGxldCBuPTA7bjx0Lmxlbmd0aDtuKyspXCJpY29uXCIhPT10W25dLmdldEF0dHJpYnV0ZShcInJlbFwiKSYmXCJzaG9ydGN1dCBpY29uXCIhPT10W25dLmdldEF0dHJpYnV0ZShcInJlbFwiKXx8KGU9dFtuXS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKTtyZXR1cm4gZX0sVWM9MTYzNDAwO2Z1bmN0aW9uIEZjKGUpe3ZhciB0LG4scjtjb25zdHtkYXBwTWV0YWRhdGE6aX09ZSxzPWZ1bmN0aW9uKHt1cmw6ZSxuYW1lOnR9KXt2YXIgbjtjb25zdCByPWUrdCxpPVJjKHIpO2lmKCFsb2NhbFN0b3JhZ2UpcmV0dXJuXCJcIjtsZXQgcz1udWxsIT09KG49bG9jYWxTdG9yYWdlLmdldEl0ZW0oaSkpJiZ2b2lkIDAhPT1uP246XCJcIjtpZighcyl7cz1vLnY0KCk7dHJ5e2xvY2FsU3RvcmFnZS5zZXRJdGVtKGkscyl9Y2F0Y2goZSl7cmV0dXJuXCJcIn19cmV0dXJuIHN9KHt1cmw6bnVsbCE9PSh0PW51bGw9PWk/dm9pZCAwOmkudXJsKSYmdm9pZCAwIT09dD90Olwibm9fdXJsXCIsbmFtZTpudWxsIT09KG49bnVsbD09aT92b2lkIDA6aS5uYW1lKSYmdm9pZCAwIT09bj9uOlwibm9fbmFtZVwifSksYT1udWxsPT09KHI9ZS5wbGF0Zm9ybU1hbmFnZXIpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmdldFBsYXRmb3JtVHlwZSgpLGM9YT09PWV4cG9ydHMuUGxhdGZvcm1UeXBlLkRlc2t0b3BXZWIsZD1hPT09ZXhwb3J0cy5QbGF0Zm9ybVR5cGUuTWV0YU1hc2tNb2JpbGVXZWJ2aWV3O2xldCBsPVwiTi9BXCI7cmV0dXJuIGM/bD1cImV4dGVuc2lvblwiOmQmJihsPVwibW9iaWxlXCIpLHtpZDpzLGZyb206bH19Y29uc3QgcWM9KHtwcm92aWRlcjplLHNka0luc3RhbmNlOnR9KT0+e2lmKFwic3RhdGVcImluIGUpdGhyb3cgbmV3IEVycm9yKFwiSU5WQUxJRCBFWFRFTlNJT04gUFJPVklERVJcIik7cmV0dXJuIG5ldyBQcm94eShlLHtnZXQ6KG4scik9PlwicmVxdWVzdFwiPT09cj9mdW5jdGlvbihlKXt2YXIgcixpO3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7UmEoXCJbd3JhcEV4dGVuc2lvblByb3ZpZGVyKCldIE92ZXJ3cml0aW5nIHJlcXVlc3QgbWV0aG9kXCIsZSk7Y29uc3R7bWV0aG9kOm8scGFyYW1zOnN9PWUsYT1iYy5pbmNsdWRlcyhvLnRvTG93ZXJDYXNlKCkpLHtpZDpjLGZyb206ZH09RmModCk7aWYoYSYmKG51bGw9PT0ocj10LmFuYWx5dGljcyl8fHZvaWQgMD09PXJ8fHIuc2VuZCh7ZXZlbnQ6bHIuU0RLX1JQQ19SRVFVRVNULHBhcmFtczp7bWV0aG9kOm8sZnJvbTpkLGlkOmN9fSkpLG89PT15Yy5NRVRBTUFTS19CQVRDSCYmQXJyYXkuaXNBcnJheShzKSlyZXR1cm4oKHt0YXJnZXQ6ZSxhcmdzOnQsdHJhY2tFdmVudDpuLHNka0luc3RhbmNlOnJ9KT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIGksbztpZihcIm1ldGFtYXNrX2JhdGNoXCIhPT10Lm1ldGhvZCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHVzYWdlXCIpO2NvbnN0IHM9W10sYT1udWxsIT09KGk9bnVsbD09dD92b2lkIDA6dC5wYXJhbXMpJiZ2b2lkIDAhPT1pP2k6W107Zm9yKGNvbnN0IHQgb2YgYSl7Y29uc3Qgbj15aWVsZCBudWxsPT1lP3ZvaWQgMDplLnJlcXVlc3Qoe21ldGhvZDp0Lm1ldGhvZCxwYXJhbXM6dC5wYXJhbXN9KTtzLnB1c2gobil9Y29uc3R7aWQ6Yyxmcm9tOmR9PUZjKHIpO3JldHVybiBuJiYobnVsbD09PShvPXIuYW5hbHl0aWNzKXx8dm9pZCAwPT09b3x8by5zZW5kKHtldmVudDpsci5TREtfUlBDX1JFUVVFU1RfRE9ORSxwYXJhbXM6e21ldGhvZDp0Lm1ldGhvZCxmcm9tOmQsaWQ6Y319KSksc30pKSkoe3RhcmdldDpuLGFyZ3M6ZSx0cmFja0V2ZW50OmEsc2RrSW5zdGFuY2U6dH0pO2lmKG8udG9Mb3dlckNhc2UoKT09PXljLk1FVEFNQVNLX0NPTk5FQ1RTSUdOLnRvTG93ZXJDYXNlKCkmJkFycmF5LmlzQXJyYXkocykpcmV0dXJuKCh7dGFyZ2V0OmUscGFyYW1zOnR9KT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3Qgbj15aWVsZCBlLnJlcXVlc3Qoe21ldGhvZDp5Yy5FVEhfUkVRVUVTVEFDQ09VTlRTLHBhcmFtczpbXX0pO2lmKCFuLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJTREsgc3RhdGUgaW52YWxpZCAtLSB1bmRlZmluZWQgYWNjb3VudHNcIik7cmV0dXJuIHlpZWxkIGUucmVxdWVzdCh7bWV0aG9kOnljLlBFUlNPTkFMX1NJR04scGFyYW1zOlt0WzBdLG5bMF1dfSl9KSkpKHt0YXJnZXQ6bixwYXJhbXM6c30pO2lmKG8udG9Mb3dlckNhc2UoKT09PXljLk1FVEFNQVNLX0NPTk5FQ1RXSVRILnRvTG93ZXJDYXNlKCkmJkFycmF5LmlzQXJyYXkocykpcmV0dXJuKCh7dGFyZ2V0OmUscGFyYW1zOnR9KT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3Rbbl09dCxyPW4ubWV0aG9kLGk9bi5wYXJhbXMsbz15aWVsZCBlLnJlcXVlc3Qoe21ldGhvZDp5Yy5FVEhfUkVRVUVTVEFDQ09VTlRTLHBhcmFtczpbXX0pO2lmKCFvLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJTREsgc3RhdGUgaW52YWxpZCAtLSB1bmRlZmluZWQgYWNjb3VudHNcIik7cmV0dXJuKG51bGw9PXI/dm9pZCAwOnIudG9Mb3dlckNhc2UoKSk9PT15Yy5QRVJTT05BTF9TSUdOLnRvTG93ZXJDYXNlKCk/eWllbGQgZS5yZXF1ZXN0KHttZXRob2Q6cixwYXJhbXM6W2lbMF0sb1swXV19KToobnVsbD09cj92b2lkIDA6ci50b0xvd2VyQ2FzZSgpKT09PXljLkVUSF9TRU5EVFJBTlNBQ1RJT04udG9Mb3dlckNhc2UoKT95aWVsZCBlLnJlcXVlc3Qoe21ldGhvZDpyLHBhcmFtczpbT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGlbMF0pLHtmcm9tOm9bMF19KV19KTp3Yy5pbmNsdWRlcyhyLnRvTG93ZXJDYXNlKCkpPyhjb25zb2xlLndhcm4oYE1ldGFNYXNrU0RLIGNvbm5lY3RXaXRoIG1ldGhvZD0ke3J9IC0tIG5vdCBoYW5kbGVkIGJ5IHRoZSBleHRlbnNpb24gLS0gY2FsbCBzZXBhcmF0ZWx5YCksbyk6eWllbGQgZS5yZXF1ZXN0KHttZXRob2Q6cixwYXJhbXM6aX0pfSkpKSh7dGFyZ2V0Om4scGFyYW1zOnN9KTtsZXQgdTt0cnl7cmV0dXJuIHU9eWllbGQgbi5yZXF1ZXN0KGUpLHV9ZmluYWxseXthJiYobnVsbD09PShpPXQuYW5hbHl0aWNzKXx8dm9pZCAwPT09aXx8aS5zZW5kKHtldmVudDpsci5TREtfUlBDX1JFUVVFU1RfRE9ORSxwYXJhbXM6e21ldGhvZDpvLGZyb206ZCxpZDpjfX0pKX19KSl9OlwiZ2V0Q2hhaW5JZFwiPT09cj9mdW5jdGlvbigpe3JldHVybiBlLmNoYWluSWR9OlwiZ2V0TmV0d29ya1ZlcnNpb25cIj09PXI/ZnVuY3Rpb24oKXtyZXR1cm4gZS5uZXR3b3JrVmVyc2lvbn06XCJnZXRTZWxlY3RlZEFkZHJlc3NcIj09PXI/ZnVuY3Rpb24oKXtyZXR1cm4gZS5zZWxlY3RlZEFkZHJlc3N9OlwiaXNDb25uZWN0ZWRcIj09PXI/ZnVuY3Rpb24oKXtyZXR1cm4gZS5fc3RhdGUuaXNDb25uZWN0ZWR9Om5bcl19KX07dmFyIHpjO2Z1bmN0aW9uIFdjKHttdXN0QmVNZXRhTWFzazplLHNka0luc3RhbmNlOnR9KXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3cpdGhyb3cgbmV3IEVycm9yKFwid2luZG93IG5vdCBhdmFpbGFibGVcIik7dHJ5e2NvbnN0IGU9eWllbGQgbmV3IFByb21pc2UoKChlLHQpPT57Y29uc3Qgbj1zZXRUaW1lb3V0KCgoKT0+e3QobmV3IEVycm9yKFwiZWlwNjk2M1JlcXVlc3RQcm92aWRlciB0aW1lZCBvdXRcIikpfSksNTAwKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcih6Yy5Bbm5vdW5jZSwodD0+e2NvbnN0IHI9dCx7ZGV0YWlsOntpbmZvOmkscHJvdmlkZXI6b309e319PXIse25hbWU6cyxyZG5zOmEsdXVpZDpjfT1udWxsIT1pP2k6e307dmMudGVzdChjKSYmcy5zdGFydHNXaXRoKGdjLk5BTUUpJiZnYy5SRE5TLmluY2x1ZGVzKGEpJiYoY2xlYXJUaW1lb3V0KG4pLGUobykpfSkpLHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCh6Yy5SZXF1ZXN0KSl9KSk7cmV0dXJuIHFjKHtwcm92aWRlcjplLHNka0luc3RhbmNlOnR9KX1jYXRjaChuKXtpZighZSYmd2luZG93LmV0aGVyZXVtKXJldHVybiBxYyh7cHJvdmlkZXI6d2luZG93LmV0aGVyZXVtLHNka0luc3RhbmNlOnR9KTt0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlciBub3QgZm91bmRcIil9fSkpfSFmdW5jdGlvbihlKXtlLkFubm91bmNlPVwiZWlwNjk2Mzphbm5vdW5jZVByb3ZpZGVyXCIsZS5SZXF1ZXN0PVwiZWlwNjk2MzpyZXF1ZXN0UHJvdmlkZXJcIn0oemN8fCh6Yz17fSkpO2NvbnN0IFZjPWU9Pmwodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0e29wdGlvbnM6dH09ZSx7aW5mdXJhQVBJS2V5Om59PXQ7aWYoIW4pcmV0dXJuO2NvbnN0IHI9e1wiMHgxXCI6YGh0dHBzOi8vbWFpbm5ldC5pbmZ1cmEuaW8vdjMvJHtufWAsXCIweDVcIjpgaHR0cHM6Ly9nb2VybGkuaW5mdXJhLmlvL3YzLyR7bn1gLFwiMHhhYTM2YTdcIjpgaHR0cHM6Ly9zZXBvbGlhLmluZnVyYS5pby92My8ke259YCxcIjB4ZTcwOFwiOmBodHRwczovL2xpbmVhLW1haW5uZXQuaW5mdXJhLmlvL3YzLyR7bn1gLFwiMHhlNzA0XCI6YGh0dHBzOi8vbGluZWEtZ29lcmxpLmluZnVyYS5pby92My8ke259YCxcIjB4ODlcIjpgaHR0cHM6Ly9wb2x5Z29uLW1haW5uZXQuaW5mdXJhLmlvL3YzLyR7bn1gLFwiMHgxMzg4MVwiOmBodHRwczovL3BvbHlnb24tbXVtYmFpLmluZnVyYS5pby92My8ke259YCxcIjB4NDVcIjpgaHR0cHM6Ly9vcHRpbWlzbS1tYWlubmV0LmluZnVyYS5pby92My8ke259YCxcIjB4MWE0XCI6YGh0dHBzOi8vb3B0aW1pc20tZ29lcmxpLmluZnVyYS5pby92My8ke259YCxcIjB4YTRiMVwiOmBodHRwczovL2FyYml0cnVtLW1haW5uZXQuaW5mdXJhLmlvL3YzLyR7bn1gLFwiMHg2NmVlZFwiOmBodHRwczovL2FyYml0cnVtLWdvZXJsaS5pbmZ1cmEuaW8vdjMvJHtufWAsXCIweDJhMTVjMzA4ZFwiOmBodHRwczovL3BhbG0tbWFpbm5ldC5pbmZ1cmEuaW8vdjMvJHtufWAsXCIweDJhMTVjMzA4M1wiOmBodHRwczovL3BhbG0tdGVzdG5ldC5pbmZ1cmEuaW8vdjMvJHtufWAsXCIweGE4NmFcIjpgaHR0cHM6Ly9hdmFsYW5jaGUtbWFpbm5ldC5pbmZ1cmEuaW8vdjMvJHtufWAsXCIweGE4NjlcIjpgaHR0cHM6Ly9hdmFsYW5jaGUtZnVqaS5pbmZ1cmEuaW8vdjMvJHtufWAsXCIweDRlNDU0MTUyXCI6YGh0dHBzOi8vYXVyb3JhLW1haW5uZXQuaW5mdXJhLmlvL3YzLyR7bn1gLFwiMHg0ZTQ1NDE1M1wiOmBodHRwczovL2F1cm9yYS10ZXN0bmV0LmluZnVyYS5pby92My8ke259YCxcIjB4NTM0ZTVmNGQ0MTQ5NGVcIjpgaHR0cHM6Ly9zdGFya25ldC1tYWlubmV0LmluZnVyYS5pby92My8ke259YCxcIjB4NTM0ZTVmNDc0ZjQ1NTI0YzQ5XCI6YGh0dHBzOi8vc3RhcmtuZXQtZ29lcmxpLmluZnVyYS5pby92My8ke259YCxcIjB4NTM0ZTVmNDc0ZjQ1NTI0YzQ5MzJcIjpgaHR0cHM6Ly9zdGFya25ldC1nb2VybGkyLmluZnVyYS5pby92My8ke259YCxcIjB4YTRlY1wiOmBodHRwczovL2NlbG8tbWFpbm5ldC5pbmZ1cmEuaW8vdjMvJHtufWAsXCIweGFlZjNcIjpgaHR0cHM6Ly9jZWxvLWFsZmFqb3Jlcy5pbmZ1cmEuaW8vdjMvJHtufWB9O2Uub3B0aW9ucy5yZWFkb25seVJQQ01hcD9lLm9wdGlvbnMucmVhZG9ubHlSUENNYXA9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGUub3B0aW9ucy5yZWFkb25seVJQQ01hcCkscik6ZS5vcHRpb25zLnJlYWRvbmx5UlBDTWFwPXJ9KSk7Y29uc3QgR2M9ZT0+bCh2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3R7b3B0aW9uczp0fT1lLHtyZWFkb25seVJQQ01hcDpufT10O2lmKG4pdHJ5e1JhKFwiW01ldGFNYXNrU0RLOiBzZXR1cFJlYWRPbmx5UlBDUHJvdmlkZXJzKCldIFNldHRpbmcgdXAgUmVhZG9ubHkgUlBDIFByb3ZpZGVyc1wiLG4pLGUuc2V0UmVhZE9ubHlSUENDYWxscyghMCl9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBJbmZ1cmEgU2V0dGluZ3NcIil9fSkpO2Z1bmN0aW9uIFljKGUsdCxuLHIpe3JldHVybiBuZXcobnx8KG49UHJvbWlzZSkpKChmdW5jdGlvbih0LGkpe2Z1bmN0aW9uIG8oZSl7dHJ5e2Eoci5uZXh0KGUpKX1jYXRjaChlKXtpKGUpfX1mdW5jdGlvbiBzKGUpe3RyeXthKHIudGhyb3coZSkpfWNhdGNoKGUpe2koZSl9fWZ1bmN0aW9uIGEoZSl7dmFyIHI7ZS5kb25lP3QoZS52YWx1ZSk6KHI9ZS52YWx1ZSxyIGluc3RhbmNlb2Ygbj9yOm5ldyBuKChmdW5jdGlvbihlKXtlKHIpfSkpKS50aGVuKG8scyl9YSgocj1yLmFwcGx5KGUsW10pKS5uZXh0KCkpfSkpfWZ1bmN0aW9uIFpjKGUsdCl7dmFyIG4scixpLG8scz17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZpWzBdKXRocm93IGlbMV07cmV0dXJuIGlbMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gbz17bmV4dDphKDApLHRocm93OmEoMSkscmV0dXJuOmEoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKG9bU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksbztmdW5jdGlvbiBhKG8pe3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24obyl7aWYobil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO3M7KXRyeXtpZihuPTEsciYmKGk9MiZvWzBdP3IucmV0dXJuOm9bMF0/ci50aHJvd3x8KChpPXIucmV0dXJuKSYmaS5jYWxsKHIpLDApOnIubmV4dCkmJiEoaT1pLmNhbGwocixvWzFdKSkuZG9uZSlyZXR1cm4gaTtzd2l0Y2gocj0wLGkmJihvPVsyJm9bMF0saS52YWx1ZV0pLG9bMF0pe2Nhc2UgMDpjYXNlIDE6aT1vO2JyZWFrO2Nhc2UgNDpyZXR1cm4gcy5sYWJlbCsrLHt2YWx1ZTpvWzFdLGRvbmU6ITF9O2Nhc2UgNTpzLmxhYmVsKysscj1vWzFdLG89WzBdO2NvbnRpbnVlO2Nhc2UgNzpvPXMub3BzLnBvcCgpLHMudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEoaT1zLnRyeXMsKGk9aS5sZW5ndGg+MCYmaVtpLmxlbmd0aC0xXSl8fDYhPT1vWzBdJiYyIT09b1swXSkpe3M9MDtjb250aW51ZX1pZigzPT09b1swXSYmKCFpfHxvWzFdPmlbMF0mJm9bMV08aVszXSkpe3MubGFiZWw9b1sxXTticmVha31pZig2PT09b1swXSYmcy5sYWJlbDxpWzFdKXtzLmxhYmVsPWlbMV0saT1vO2JyZWFrfWlmKGkmJnMubGFiZWw8aVsyXSl7cy5sYWJlbD1pWzJdLHMub3BzLnB1c2gobyk7YnJlYWt9aVsyXSYmcy5vcHMucG9wKCkscy50cnlzLnBvcCgpO2NvbnRpbnVlfW89dC5jYWxsKGUscyl9Y2F0Y2goZSl7bz1bNixlXSxyPTB9ZmluYWxseXtuPWk9MH1pZig1Jm9bMF0pdGhyb3cgb1sxXTtyZXR1cm57dmFsdWU6b1swXT9vWzFdOnZvaWQgMCxkb25lOiEwfX0oW28sYV0pfX19dmFyIEpjPVwiSU5TVEFMTEVEXCIsUWM9XCJOT1RfSU5TVEFMTEVEXCIsWGM9XCJSRUdJU1RFUkVEXCIsZWQ9XCJSRUdJU1RFUklOR1wiLHRkPVwiUkVMT0FESU5HXCIsbmQ9e0NIUk9NRTpcImh0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsL21ldGFtYXNrL25rYmloZmJlb2dhZWFvZWhsZWZua29kYmVmZ3Bna25uXCIsRklSRUZPWDpcImh0dHBzOi8vYWRkb25zLm1vemlsbGEub3JnL2ZpcmVmb3gvYWRkb24vZXRoZXItbWV0YW1hc2svXCIsREVGQVVMVDpcImh0dHBzOi8vbWV0YW1hc2suaW9cIn0scmQ9XCJSRUdJU1RSQVRJT05fSU5fUFJPR1JFU1NcIixpZD1cIkZPUldBUkRFUl9JRFwiLG9kPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgbj12b2lkIDA9PT10P3t9OnQscj1uLmZvcndhcmRlck9yaWdpbixpPXZvaWQgMD09PXI/XCJodHRwczovL2Z3ZC5tZXRhbWFzay5pb1wiOnIsbz1uLmZvcndhcmRlck1vZGUscz12b2lkIDA9PT1vP2UuRk9SV0FSREVSX01PREUuSU5KRUNUOm87dGhpcy5mb3J3YXJkZXJPcmlnaW49aSx0aGlzLmZvcndhcmRlck1vZGU9cyx0aGlzLnN0YXRlPWUuaXNNZXRhTWFza0luc3RhbGxlZCgpP0pjOlFjO3ZhciBhPWUuX2RldGVjdEJyb3dzZXIoKTt0aGlzLmRvd25sb2FkVXJsPWE/bmRbYV06bmQuREVGQVVMVCx0aGlzLl9vbk1lc3NhZ2U9dGhpcy5fb25NZXNzYWdlLmJpbmQodGhpcyksdGhpcy5fb25NZXNzYWdlRnJvbUZvcndhcmRlcj10aGlzLl9vbk1lc3NhZ2VGcm9tRm9yd2FyZGVyLmJpbmQodGhpcyksdGhpcy5fb3BlbkZvcndhcmRlcj10aGlzLl9vcGVuRm9yd2FyZGVyLmJpbmQodGhpcyksdGhpcy5fb3BlbkRvd25sb2FkUGFnZT10aGlzLl9vcGVuRG93bmxvYWRQYWdlLmJpbmQodGhpcyksdGhpcy5zdGFydE9uYm9hcmRpbmc9dGhpcy5zdGFydE9uYm9hcmRpbmcuYmluZCh0aGlzKSx0aGlzLnN0b3BPbmJvYXJkaW5nPXRoaXMuc3RvcE9uYm9hcmRpbmcuYmluZCh0aGlzKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIix0aGlzLl9vbk1lc3NhZ2UpLHM9PT1lLkZPUldBUkRFUl9NT0RFLklOSkVDVCYmXCJ0cnVlXCI9PT1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHJkKSYmZS5faW5qZWN0Rm9yd2FyZGVyKHRoaXMuZm9yd2FyZGVyT3JpZ2luKX1yZXR1cm4gZS5wcm90b3R5cGUuX29uTWVzc2FnZT1mdW5jdGlvbihlKXtpZihlLm9yaWdpbj09PXRoaXMuZm9yd2FyZGVyT3JpZ2luKXJldHVyblwibWV0YW1hc2s6cmVsb2FkXCI9PT1lLmRhdGEudHlwZT90aGlzLl9vbk1lc3NhZ2VGcm9tRm9yd2FyZGVyKGUpOnZvaWQgY29uc29sZS5kZWJ1ZyhcIlVua25vd24gbWVzc2FnZSBmcm9tICdcIitlLm9yaWdpbitcIicgd2l0aCBkYXRhIFwiK0pTT04uc3RyaW5naWZ5KGUuZGF0YSkpfSxlLnByb3RvdHlwZS5fb25NZXNzYWdlVW5rbm93blN0YXRlRXJyb3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBzdGF0ZTogJ1wiK2UrXCInXCIpfSxlLnByb3RvdHlwZS5fb25NZXNzYWdlRnJvbUZvcndhcmRlcj1mdW5jdGlvbih0KXtyZXR1cm4gWWModGhpcywwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gWmModGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpzd2l0Y2godGhpcy5zdGF0ZSl7Y2FzZSB0ZDpyZXR1cm5bMywxXTtjYXNlIFFjOnJldHVyblszLDJdO2Nhc2UgSmM6cmV0dXJuWzMsM107Y2FzZSBlZDpyZXR1cm5bMyw1XTtjYXNlIFhjOnJldHVyblszLDZdfXJldHVyblszLDddO2Nhc2UgMTpyZXR1cm4gY29uc29sZS5kZWJ1ZyhcIklnbm9yaW5nIG1lc3NhZ2Ugd2hpbGUgcmVsb2FkaW5nXCIpLFszLDhdO2Nhc2UgMjpyZXR1cm4gY29uc29sZS5kZWJ1ZyhcIlJlbG9hZGluZyBub3cgdG8gcmVnaXN0ZXIgd2l0aCBNZXRhTWFza1wiKSx0aGlzLnN0YXRlPXRkLGxvY2F0aW9uLnJlbG9hZCgpLFszLDhdO2Nhc2UgMzpyZXR1cm4gY29uc29sZS5kZWJ1ZyhcIlJlZ2lzdGVyaW5nIHdpdGggTWV0YU1hc2tcIiksdGhpcy5zdGF0ZT1lZCxbNCxlLl9yZWdpc3RlcigpXTtjYXNlIDQ6cmV0dXJuIG4uc2VudCgpLHRoaXMuc3RhdGU9WGMsdC5zb3VyY2UucG9zdE1lc3NhZ2Uoe3R5cGU6XCJtZXRhbWFzazpyZWdpc3RyYXRpb25Db21wbGV0ZWRcIn0sdC5vcmlnaW4pLHRoaXMuc3RvcE9uYm9hcmRpbmcoKSxbMyw4XTtjYXNlIDU6cmV0dXJuIGNvbnNvbGUuZGVidWcoXCJBbHJlYWR5IHJlZ2lzdGVyaW5nIC0gaWdub3JpbmcgcmVsb2FkIG1lc3NhZ2VcIiksWzMsOF07Y2FzZSA2OnJldHVybiBjb25zb2xlLmRlYnVnKFwiQWxyZWFkeSByZWdpc3RlcmVkIC0gaWdub3JpbmcgcmVsb2FkIG1lc3NhZ2VcIiksWzMsOF07Y2FzZSA3OnRoaXMuX29uTWVzc2FnZVVua25vd25TdGF0ZUVycm9yKHRoaXMuc3RhdGUpLG4ubGFiZWw9ODtjYXNlIDg6cmV0dXJuWzJdfX0pKX0pKX0sZS5wcm90b3R5cGUuc3RhcnRPbmJvYXJkaW5nPWZ1bmN0aW9uKCl7c2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShyZCxcInRydWVcIiksdGhpcy5fb3BlbkRvd25sb2FkUGFnZSgpLHRoaXMuX29wZW5Gb3J3YXJkZXIoKX0sZS5wcm90b3R5cGUuc3RvcE9uYm9hcmRpbmc9ZnVuY3Rpb24oKXtcInRydWVcIj09PXNlc3Npb25TdG9yYWdlLmdldEl0ZW0ocmQpJiYodGhpcy5mb3J3YXJkZXJNb2RlPT09ZS5GT1JXQVJERVJfTU9ERS5JTkpFQ1QmJihjb25zb2xlLmRlYnVnKFwiUmVtb3ZpbmcgZm9yd2FyZGVyXCIpLGUuX3JlbW92ZUZvcndhcmRlcigpKSxzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHJkLFwiZmFsc2VcIikpfSxlLnByb3RvdHlwZS5fb3BlbkZvcndhcmRlcj1mdW5jdGlvbigpe3RoaXMuZm9yd2FyZGVyTW9kZT09PWUuRk9SV0FSREVSX01PREUuT1BFTl9UQUI/d2luZG93Lm9wZW4odGhpcy5mb3J3YXJkZXJPcmlnaW4sXCJfYmxhbmtcIik6ZS5faW5qZWN0Rm9yd2FyZGVyKHRoaXMuZm9yd2FyZGVyT3JpZ2luKX0sZS5wcm90b3R5cGUuX29wZW5Eb3dubG9hZFBhZ2U9ZnVuY3Rpb24oKXt3aW5kb3cub3Blbih0aGlzLmRvd25sb2FkVXJsLFwiX2JsYW5rXCIpfSxlLmlzTWV0YU1hc2tJbnN0YWxsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbih3aW5kb3cuZXRoZXJldW0mJndpbmRvdy5ldGhlcmV1bS5pc01ldGFNYXNrKX0sZS5fcmVnaXN0ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LmV0aGVyZXVtLnJlcXVlc3Qoe21ldGhvZDpcIndhbGxldF9yZWdpc3Rlck9uYm9hcmRpbmdcIn0pfSxlLl9pbmplY3RGb3J3YXJkZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuYm9keSxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7bi5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIixcIjBcIiksbi5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLFwiMFwiKSxuLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsXCJkaXNwbGF5OiBub25lO1wiKSxuLnNldEF0dHJpYnV0ZShcInNyY1wiLGUpLG4uc2V0QXR0cmlidXRlKFwiaWRcIixpZCksdC5pbnNlcnRCZWZvcmUobix0LmNoaWxkcmVuWzBdKX0sZS5fcmVtb3ZlRm9yd2FyZGVyPWZ1bmN0aW9uKCl7dmFyIGU7bnVsbD09PShlPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSl8fHZvaWQgMD09PWV8fGUucmVtb3ZlKCl9LGUuX2RldGVjdEJyb3dzZXI9ZnVuY3Rpb24oKXt2YXIgZT1vYy5wYXJzZSh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7cmV0dXJuXCJGaXJlZm94XCI9PT1lLmJyb3dzZXIubmFtZT9cIkZJUkVGT1hcIjpbXCJDaHJvbWVcIixcIkNocm9taXVtXCJdLmluY2x1ZGVzKGUuYnJvd3Nlci5uYW1lfHxcIlwiKT9cIkNIUk9NRVwiOm51bGx9LGUuRk9SV0FSREVSX01PREU9e0lOSkVDVDpcIklOSkVDVFwiLE9QRU5fVEFCOlwiT1BFTl9UQUJcIn0sZX0oKTtmdW5jdGlvbiBzZChlLHt3YWl0OnQ9ITF9KXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiBSYShgW01ldGFtYXNrSW5zdGFsbGVyOiBzdGFydEluc3RhbGxlcigpXSB3YWl0PSR7dH1gKSx0JiYoeWllbGQgTGMoMWUzKSkseWllbGQgZS5jaGVja0luc3RhbGxhdGlvbigpfSkpfWNsYXNzIGFke2NvbnN0cnVjdG9yKHtyZW1vdGU6ZSxwcmVmZXJEZXNrdG9wOnQscGxhdGZvcm1NYW5hZ2VyOm4sZGVidWc6cj0hMX0pe3RoaXMuc3RhdGU9e2lzSW5zdGFsbGluZzohMSxoYXNJbnN0YWxsZWQ6ITEscmVzZW5kUmVxdWVzdDpudWxsLHByZWZlckRlc2t0b3A6ITEscGxhdGZvcm1NYW5hZ2VyOm51bGwscmVtb3RlOm51bGwsZGVidWc6ITEsY29ubmVjdFdpdGg6dm9pZCAwfSx0aGlzLnN0YXRlLnJlbW90ZT1lLHRoaXMuc3RhdGUucHJlZmVyRGVza3RvcD10LHRoaXMuc3RhdGUucGxhdGZvcm1NYW5hZ2VyPW4sdGhpcy5zdGF0ZS5kZWJ1Zz1yfXN0YXJ0RGVza3RvcE9uYm9hcmRpbmcoKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe1JhKFwiW01ldGFtYXNrSW5zdGFsbGVyOiBzdGFydERlc2t0b3BPbmJvYXJkaW5nKCkgc3RhcnRpbmcgZGVza3RvcCBvbmJvYXJkaW5nXCIpLHdpbmRvdy5ldGhlcmV1bSYmKHdpbmRvdy5ldGhlcmV1bT12b2lkIDApLChuZXcgb2QpLnN0YXJ0T25ib2FyZGluZygpfSkpfSgpfXJlZGlyZWN0VG9Qcm9wZXJJbnN0YWxsKCl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQsbjtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0e3N0YXRlOnJ9PWUsaT1udWxsPT09KHQ9ci5wbGF0Zm9ybU1hbmFnZXIpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmdldFBsYXRmb3JtVHlwZSgpO2lmKFJhKGBbTWV0YW1hc2tJbnN0YWxsZXI6IHJlZGlyZWN0VG9Qcm9wZXJJbnN0YWxsKCldIHBsYXRmb3JtPSR7aX1gKSxpPT09ZXhwb3J0cy5QbGF0Zm9ybVR5cGUuTWV0YU1hc2tNb2JpbGVXZWJ2aWV3KXJldHVybiExO3IuaXNJbnN0YWxsaW5nPSEwO3RyeXt5aWVsZCBudWxsPT09KG49ci5yZW1vdGUpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnN0YXJ0Q29ubmVjdGlvbih7Y29ubmVjdFdpdGg6ci5jb25uZWN0V2l0aH0pLHIuaXNJbnN0YWxsaW5nPSExLHIuaGFzSW5zdGFsbGVkPSEwfWNhdGNoKGUpe3Rocm93IHIuaXNJbnN0YWxsaW5nPSExLGV9cmV0dXJuITB9KSl9KHRoaXMpfSkpfWNoZWNrSW5zdGFsbGF0aW9uKCl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdHtzdGF0ZTpufT1lLHI9bnVsbD09PSh0PW4ucGxhdGZvcm1NYW5hZ2VyKXx8dm9pZCAwPT09dD92b2lkIDA6dC5pc01ldGFNYXNrSW5zdGFsbGVkKCk7cmV0dXJuIFJhKGBbTWV0YW1hc2tJbnN0YWxsZXI6IGNoZWNrSW5zdGFsbGF0aW9uKCldIGlzSW5zdGFsbGVkPSR7cn1gKSwhIXJ8fCh5aWVsZCBlLnJlZGlyZWN0VG9Qcm9wZXJJbnN0YWxsKCkpfSkpfSh0aGlzKX0pKX1zdGFydCh7d2FpdDplPSExLGNvbm5lY3RXaXRoOnR9KXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3RoaXMuc3RhdGUuY29ubmVjdFdpdGg9dCxSYShgW01ldGFNYXNrSW5zdGFsbGVyOiBzdGFydCgpXSB3YWl0PSR7ZX1gLHQpLHlpZWxkIHNkKHRoaXMse3dhaXQ6ZX0pfSkpfX1mdW5jdGlvbiBjZChlLHQpe3JldHVybiBlLnRvU3RyaW5nKDIpLnBhZFN0YXJ0KHQsXCIwXCIpfWZ1bmN0aW9uIGRkKGUsdCl7Y29uc3Qgbj1lJXQ7cmV0dXJuIG4+PTA/bjp0K259ZnVuY3Rpb24gbGQoZSx0KXtyZXR1cm4gbmV3IEFycmF5KGUpLmZpbGwodCl9ZnVuY3Rpb24gdWQoLi4uZSl7bGV0IHQ9MDtmb3IoY29uc3QgbiBvZiBlKXQ9TWF0aC5tYXgodCxuLmxlbmd0aCk7Y29uc3Qgbj1bXTtmb3IobGV0IHI9MDtyPHQ7cisrKWZvcihjb25zdCB0IG9mIGUpcj49dC5sZW5ndGh8fG4ucHVzaCh0W3JdKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkobil9ZnVuY3Rpb24gaGQoZSx0LG4pe2lmKG48MHx8bit0Lmxlbmd0aD5lLmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKylpZih0W3JdIT09ZVtuK3JdKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGZkKGUpe3JldHVybntoYXM6dD0+ZS5pbmNsdWRlcyh0KSxkZWNvZGU6dD0+e2lmKCFBcnJheS5pc0FycmF5KHQpfHx0Lmxlbmd0aCYmXCJzdHJpbmdcIiE9dHlwZW9mIHRbMF0pdGhyb3cgbmV3IEVycm9yKFwiYWxwaGFiZXQuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzXCIpO3JldHVybiB0Lm1hcCgodD0+e2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihgYWxwaGFiZXQuZGVjb2RlOiBub3Qgc3RyaW5nIGVsZW1lbnQ9JHt0fWApO2NvbnN0IG49ZS5pbmRleE9mKHQpO2lmKC0xPT09bil0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbGV0dGVyOiBcIiR7dH1cIi4gQWxsb3dlZDogJHtlfWApO3JldHVybiBufSkpfSxlbmNvZGU6dD0+e2lmKCFBcnJheS5pc0FycmF5KHQpfHx0Lmxlbmd0aCYmXCJudW1iZXJcIiE9dHlwZW9mIHRbMF0pdGhyb3cgbmV3IEVycm9yKFwiYWxwaGFiZXQuZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhbiBhcnJheSBvZiBudW1iZXJzXCIpO3JldHVybiB0Lm1hcCgodD0+e2lmKGZ1bmN0aW9uKGUpe2lmKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihlKSl0aHJvdyBuZXcgRXJyb3IoYFdyb25nIGludGVnZXI6ICR7ZX1gKX0odCksdDwwfHx0Pj1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoYERpZ2l0IGluZGV4IG91dHNpZGUgYWxwaGFiZXQ6ICR7dH0gKGFscGhhYmV0OiAke2UubGVuZ3RofSlgKTtyZXR1cm4gZVt0XX0pKX19fWNsYXNzIHBke3N0YXRpYyBzaXplKGUsdCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUmJihlPXtoZWlnaHQ6ZSx3aWR0aDplfSksIU51bWJlci5pc1NhZmVJbnRlZ2VyKGUuaGVpZ2h0KSYmZS5oZWlnaHQhPT0xLzApdGhyb3cgbmV3IEVycm9yKGBCaXRtYXA6IHdyb25nIGhlaWdodD0ke2UuaGVpZ2h0fSAoJHt0eXBlb2YgZS5oZWlnaHR9KWApO2lmKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihlLndpZHRoKSYmZS53aWR0aCE9PTEvMCl0aHJvdyBuZXcgRXJyb3IoYEJpdG1hcDogd3Jvbmcgd2lkdGg9JHtlLndpZHRofSAoJHt0eXBlb2YgZS53aWR0aH0pYCk7cmV0dXJuIHZvaWQgMCE9PXQmJihlPXt3aWR0aDpNYXRoLm1pbihlLndpZHRoLHQud2lkdGgpLGhlaWdodDpNYXRoLm1pbihlLmhlaWdodCx0LmhlaWdodCl9KSxlfXN0YXRpYyBmcm9tU3RyaW5nKGUpe2NvbnN0IHQ9KGU9ZS5yZXBsYWNlKC9eXFxuKy9nLFwiXCIpLnJlcGxhY2UoL1xcbiskL2csXCJcIikpLnNwbGl0KFwiXFxuXCIpLG49dC5sZW5ndGgscj1uZXcgQXJyYXkobik7bGV0IGk7Zm9yKGNvbnN0IGUgb2YgdCl7Y29uc3QgdD1lLnNwbGl0KFwiXCIpLm1hcCgoZT0+e2lmKFwiWFwiPT09ZSlyZXR1cm4hMDtpZihcIiBcIj09PWUpcmV0dXJuITE7aWYoXCI/XCIhPT1lKXRocm93IG5ldyBFcnJvcihgQml0bWFwLmZyb21TdHJpbmc6IHVua25vd24gc3ltYm9sPSR7ZX1gKX0pKTtpZihpJiZ0Lmxlbmd0aCE9PWkpdGhyb3cgbmV3IEVycm9yKGBCaXRtYXAuZnJvbVN0cmluZyBkaWZmZXJlbnQgcm93IHNpemVzOiB3aWR0aD0ke2l9IGN1cj0ke3QubGVuZ3RofWApO2k9dC5sZW5ndGgsci5wdXNoKHQpfXJldHVybiBpfHwoaT0wKSxuZXcgcGQoe2hlaWdodDpuLHdpZHRoOml9LHIpfWNvbnN0cnVjdG9yKGUsdCl7Y29uc3R7aGVpZ2h0Om4sd2lkdGg6cn09cGQuc2l6ZShlKTt0aGlzLmRhdGE9dHx8QXJyYXkuZnJvbSh7bGVuZ3RoOm59LCgoKT0+bGQocix2b2lkIDApKSksdGhpcy5oZWlnaHQ9bix0aGlzLndpZHRoPXJ9cG9pbnQoZSl7cmV0dXJuIHRoaXMuZGF0YVtlLnldW2UueF19aXNJbnNpZGUoZSl7cmV0dXJuIDA8PWUueCYmZS54PHRoaXMud2lkdGgmJjA8PWUueSYmZS55PHRoaXMuaGVpZ2h0fXNpemUoZSl7aWYoIWUpcmV0dXJue2hlaWdodDp0aGlzLmhlaWdodCx3aWR0aDp0aGlzLndpZHRofTtjb25zdHt4OnQseTpufT10aGlzLnh5KGUpO3JldHVybntoZWlnaHQ6dGhpcy5oZWlnaHQtbix3aWR0aDp0aGlzLndpZHRoLXR9fXh5KGUpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlJiYoZT17eDplLHk6ZX0pLCFOdW1iZXIuaXNTYWZlSW50ZWdlcihlLngpKXRocm93IG5ldyBFcnJvcihgQml0bWFwOiB3cm9uZyB4PSR7ZS54fWApO2lmKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihlLnkpKXRocm93IG5ldyBFcnJvcihgQml0bWFwOiB3cm9uZyB5PSR7ZS55fWApO3JldHVybiBlLng9ZGQoZS54LHRoaXMud2lkdGgpLGUueT1kZChlLnksdGhpcy5oZWlnaHQpLGV9cmVjdChlLHQsbil7Y29uc3R7eDpyLHk6aX09dGhpcy54eShlKSx7aGVpZ2h0Om8sd2lkdGg6c309cGQuc2l6ZSh0LHRoaXMuc2l6ZSh7eDpyLHk6aX0pKTtmb3IobGV0IGU9MDtlPG87ZSsrKWZvcihsZXQgdD0wO3Q8czt0KyspdGhpcy5kYXRhW2krZV1bcit0XT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBuP24oe3g6dCx5OmV9LHRoaXMuZGF0YVtpK2VdW3IrdF0pOm47cmV0dXJuIHRoaXN9cmVjdFJlYWQoZSx0LG4pe3JldHVybiB0aGlzLnJlY3QoZSx0LCgoZSx0KT0+KG4oZSx0KSx0KSkpfWhMaW5lKGUsdCxuKXtyZXR1cm4gdGhpcy5yZWN0KGUse3dpZHRoOnQsaGVpZ2h0OjF9LG4pfXZMaW5lKGUsdCxuKXtyZXR1cm4gdGhpcy5yZWN0KGUse3dpZHRoOjEsaGVpZ2h0OnR9LG4pfWJvcmRlcihlPTIsdCl7Y29uc3Qgbj10aGlzLmhlaWdodCsyKmUscj10aGlzLndpZHRoKzIqZSxpPWxkKGUsdCksbz1BcnJheS5mcm9tKHtsZW5ndGg6ZX0sKCgpPT5sZChyLHQpKSk7cmV0dXJuIG5ldyBwZCh7aGVpZ2h0Om4sd2lkdGg6cn0sWy4uLm8sLi4udGhpcy5kYXRhLm1hcCgoZT0+Wy4uLmksLi4uZSwuLi5pXSkpLC4uLm9dKX1lbWJlZChlLHQpe3JldHVybiB0aGlzLnJlY3QoZSx0LnNpemUoKSwoKHt4OmUseTpufSk9PnQuZGF0YVtuXVtlXSkpfXJlY3RTbGljZShlLHQ9dGhpcy5zaXplKCkpe2NvbnN0IG49bmV3IHBkKHBkLnNpemUodCx0aGlzLnNpemUodGhpcy54eShlKSkpKTtyZXR1cm4gdGhpcy5yZWN0KGUsdCwoKHt4OmUseTp0fSxyKT0+bi5kYXRhW3RdW2VdPXIpKSxufWludmVyc2UoKXtjb25zdHtoZWlnaHQ6ZSx3aWR0aDp0fT10aGlzO3JldHVybiBuZXcgcGQoe2hlaWdodDp0LHdpZHRoOmV9KS5yZWN0KHt4OjAseTowfSwxLzAsKCh7eDplLHk6dH0pPT50aGlzLmRhdGFbZV1bdF0pKX1zY2FsZShlKXtpZighTnVtYmVyLmlzU2FmZUludGVnZXIoZSl8fGU+MTAyNCl0aHJvdyBuZXcgRXJyb3IoYFdyb25nIHNjYWxlIGZhY3RvcjogJHtlfWApO2NvbnN0e2hlaWdodDp0LHdpZHRoOm59PXRoaXM7cmV0dXJuIG5ldyBwZCh7aGVpZ2h0OmUqdCx3aWR0aDplKm59KS5yZWN0KHt4OjAseTowfSwxLzAsKCh7eDp0LHk6bn0pPT50aGlzLmRhdGFbTWF0aC5mbG9vcihuL2UpXVtNYXRoLmZsb29yKHQvZSldKSl9Y2xvbmUoKXtyZXR1cm4gbmV3IHBkKHRoaXMuc2l6ZSgpKS5yZWN0KHt4OjAseTowfSx0aGlzLnNpemUoKSwoKHt4OmUseTp0fSk9PnRoaXMuZGF0YVt0XVtlXSkpfWFzc2VydERyYXduKCl7dGhpcy5yZWN0UmVhZCgwLDEvMCwoKGUsdCk9PntpZihcImJvb2xlYW5cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciB0eXBlPVwiK3R5cGVvZiB0KX0pKX10b1N0cmluZygpe3JldHVybiB0aGlzLmRhdGEubWFwKChlPT5lLm1hcCgoZT0+dm9pZCAwPT09ZT9cIj9cIjplP1wiWFwiOlwiIFwiKSkuam9pbihcIlwiKSkpLmpvaW4oXCJcXG5cIil9dG9BU0NJSSgpe2NvbnN0e2hlaWdodDplLHdpZHRoOnQsZGF0YTpufT10aGlzO2xldCByPVwiXCI7Zm9yKGxldCBpPTA7aTxlO2krPTIpe2ZvcihsZXQgbz0wO288dDtvKyspe2NvbnN0IHQ9bltpXVtvXSxzPWkrMT49ZXx8bltpKzFdW29dO3R8fHM/IXQmJnM/cis9XCLiloBcIjp0JiYhcz9yKz1cIuKWhFwiOnQmJnMmJihyKz1cIiBcIik6cis9XCLilohcIn1yKz1cIlxcblwifXJldHVybiByfXRvVGVybSgpe2NvbnN0IGU9XCJcdTAwMWJbMG1cIix0PWBcdTAwMWJbMTs0N20gICR7ZX1gLG49YFx1MDAxYls0MG0gICR7ZX1gO3JldHVybiB0aGlzLmRhdGEubWFwKChlPT5lLm1hcCgoZT0+ZT9uOnQpKS5qb2luKFwiXCIpKSkuam9pbihcIlxcblwiKX10b1NWRygpe2xldCBlPWA8c3ZnIHhtbG5zOnN2Zz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAke3RoaXMud2lkdGh9ICR7dGhpcy5oZWlnaHR9XCIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5gO3JldHVybiB0aGlzLnJlY3RSZWFkKDAsMS8wLCgoe3g6dCx5Om59LHIpPT57ciYmKGUrPWA8cmVjdCB4PVwiJHt0fVwiIHk9XCIke259XCIgd2lkdGg9XCIxXCIgaGVpZ2h0PVwiMVwiIC8+YCl9KSksZSs9XCI8L3N2Zz5cIixlfXRvR0lGKCl7Y29uc3QgZT1lPT5bMjU1JmUsZT4+PjgmMjU1XSx0PVsuLi5lKHRoaXMud2lkdGgpLC4uLmUodGhpcy5oZWlnaHQpXSxuPVtdO3RoaXMucmVjdFJlYWQoMCwxLzAsKChlLHQpPT5uLnB1c2goKyghMD09PXQpKSkpO2NvbnN0IHI9MTI2LGk9WzcxLDczLDcwLDU2LDU1LDk3LC4uLnQsMjQ2LDAsMCwyNTUsMjU1LDI1NSwuLi5sZCgzODEsMCksNDQsMCwwLDAsMCwuLi50LDAsN10sbz1NYXRoLmZsb29yKG4ubGVuZ3RoL3IpO2ZvcihsZXQgZT0wO2U8bztlKyspaS5wdXNoKDEyNywxMjgsLi4ubi5zbGljZShyKmUsciooZSsxKSkubWFwKChlPT4rZSkpKTtyZXR1cm4gaS5wdXNoKG4ubGVuZ3RoJXIrMSwxMjgsLi4ubi5zbGljZShvKnIpLm1hcCgoZT0+K2UpKSksaS5wdXNoKDEsMTI5LDAsNTkpLG5ldyBVaW50OEFycmF5KGkpfXRvSW1hZ2UoZT0hMSl7Y29uc3R7aGVpZ2h0OnQsd2lkdGg6bn09dGhpcy5zaXplKCkscj1uZXcgVWludDhBcnJheSh0Km4qKGU/Mzo0KSk7bGV0IGk9MDtmb3IobGV0IG89MDtvPHQ7bysrKWZvcihsZXQgdD0wO3Q8bjt0Kyspe2NvbnN0IG49dGhpcy5kYXRhW29dW3RdPzA6MjU1O3JbaSsrXT1uLHJbaSsrXT1uLHJbaSsrXT1uLGV8fChyW2krK109MjU1KX1yZXR1cm57aGVpZ2h0OnQsd2lkdGg6bixkYXRhOnJ9fX1jb25zdCBtZD1bXCJsb3dcIixcIm1lZGl1bVwiLFwicXVhcnRpbGVcIixcImhpZ2hcIl0sZ2Q9W1wibnVtZXJpY1wiLFwiYWxwaGFudW1lcmljXCIsXCJieXRlXCIsXCJrYW5qaVwiLFwiZWNpXCJdLHZkPVsyNiw0NCw3MCwxMDAsMTM0LDE3MiwxOTYsMjQyLDI5MiwzNDYsNDA0LDQ2Niw1MzIsNTgxLDY1NSw3MzMsODE1LDkwMSw5OTEsMTA4NSwxMTU2LDEyNTgsMTM2NCwxNDc0LDE1ODgsMTcwNiwxODI4LDE5MjEsMjA1MSwyMTg1LDIzMjMsMjQ2NSwyNjExLDI3NjEsMjg3NiwzMDM0LDMxOTYsMzM2MiwzNTMyLDM3MDZdLHlkPXtsb3c6WzcsMTAsMTUsMjAsMjYsMTgsMjAsMjQsMzAsMTgsMjAsMjQsMjYsMzAsMjIsMjQsMjgsMzAsMjgsMjgsMjgsMjgsMzAsMzAsMjYsMjgsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzBdLG1lZGl1bTpbMTAsMTYsMjYsMTgsMjQsMTYsMTgsMjIsMjIsMjYsMzAsMjIsMjIsMjQsMjQsMjgsMjgsMjYsMjYsMjYsMjYsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjhdLHF1YXJ0aWxlOlsxMywyMiwxOCwyNiwxOCwyNCwxOCwyMiwyMCwyNCwyOCwyNiwyNCwyMCwzMCwyNCwyOCwyOCwyNiwzMCwyOCwzMCwzMCwzMCwzMCwyOCwzMCwzMCwzMCwzMCwzMCwzMCwzMCwzMCwzMCwzMCwzMCwzMCwzMCwzMF0saGlnaDpbMTcsMjgsMjIsMTYsMjIsMjgsMjYsMjYsMjQsMjgsMjQsMjgsMjIsMjQsMjQsMzAsMjgsMjgsMjYsMjgsMzAsMjQsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzAsMzBdfSxFZD17bG93OlsxLDEsMSwxLDEsMiwyLDIsMiw0LDQsNCw0LDQsNiw2LDYsNiw3LDgsOCw5LDksMTAsMTIsMTIsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMTksMjAsMjEsMjIsMjQsMjVdLG1lZGl1bTpbMSwxLDEsMiwyLDQsNCw0LDUsNSw1LDgsOSw5LDEwLDEwLDExLDEzLDE0LDE2LDE3LDE3LDE4LDIwLDIxLDIzLDI1LDI2LDI4LDI5LDMxLDMzLDM1LDM3LDM4LDQwLDQzLDQ1LDQ3LDQ5XSxxdWFydGlsZTpbMSwxLDIsMiw0LDQsNiw2LDgsOCw4LDEwLDEyLDE2LDEyLDE3LDE2LDE4LDIxLDIwLDIzLDIzLDI1LDI3LDI5LDM0LDM0LDM1LDM4LDQwLDQzLDQ1LDQ4LDUxLDUzLDU2LDU5LDYyLDY1LDY4XSxoaWdoOlsxLDEsMiw0LDQsNCw1LDYsOCw4LDExLDExLDE2LDE2LDE4LDE2LDE5LDIxLDI1LDI1LDI1LDM0LDMwLDMyLDM1LDM3LDQwLDQyLDQ1LDQ4LDUxLDU0LDU3LDYwLDYzLDY2LDcwLDc0LDc3LDgxXX0sYmQ9e3NpemU6e2VuY29kZTplPT4yMSs0KihlLTEpLGRlY29kZTplPT4oZS0xNykvNH0sc2l6ZVR5cGU6ZT0+TWF0aC5mbG9vcigoZSs3KS8xNyksYWxpZ25tZW50UGF0dGVybnMoZSl7aWYoMT09PWUpcmV0dXJuW107Y29uc3QgdD1iZC5zaXplLmVuY29kZShlKS02LTEsbj10LTYscj1NYXRoLmNlaWwobi8yOCk7bGV0IGk9TWF0aC5mbG9vcihuL3IpO2klMj9pKz0xOm4lcioyPj1yJiYoaSs9Mik7Y29uc3Qgbz1bNl07Zm9yKGxldCBlPTE7ZTxyO2UrKylvLnB1c2godC0oci1lKSppKTtyZXR1cm4gby5wdXNoKHQpLG99LEVDQ29kZTp7bG93OjEsbWVkaXVtOjAscXVhcnRpbGU6MyxoaWdoOjJ9LGZvcm1hdE1hc2s6MjE1MjIsZm9ybWF0Qml0cyhlLHQpe2NvbnN0IG49YmQuRUNDb2RlW2VdPDwzfHQ7bGV0IHI9bjtmb3IobGV0IGU9MDtlPDEwO2UrKylyPXI8PDFeMTMzNSoocj4+OSk7cmV0dXJuKG48PDEwfHIpXmJkLmZvcm1hdE1hc2t9LHZlcnNpb25CaXRzKGUpe2xldCB0PWU7Zm9yKGxldCBlPTA7ZTwxMjtlKyspdD10PDwxXjc5NzMqKHQ+PjExKTtyZXR1cm4gZTw8MTJ8dH0sYWxwaGFiZXQ6e251bWVyaWM6ZmQoXCIwMTIzNDU2Nzg5XCIpLGFscGhhbnVtZXJjOmZkKFwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaICQlKistLi86XCIpfSxsZW5ndGhCaXRzOihlLHQpPT4oe251bWVyaWM6WzEwLDEyLDE0XSxhbHBoYW51bWVyaWM6WzksMTEsMTNdLGJ5dGU6WzgsMTYsMTZdLGthbmppOls4LDEwLDEyXSxlY2k6WzAsMCwwXX1bdF1bYmQuc2l6ZVR5cGUoZSldKSxtb2RlQml0czp7bnVtZXJpYzpcIjAwMDFcIixhbHBoYW51bWVyaWM6XCIwMDEwXCIsYnl0ZTpcIjAxMDBcIixrYW5qaTpcIjEwMDBcIixlY2k6XCIwMTExXCJ9LGNhcGFjaXR5KGUsdCl7Y29uc3Qgbj12ZFtlLTFdLHI9eWRbdF1bZS0xXSxpPUVkW3RdW2UtMV0sbz1NYXRoLmZsb29yKG4vaSktcixzPWktbiVpO3JldHVybnt3b3JkczpyLG51bUJsb2NrczppLHNob3J0QmxvY2tzOnMsYmxvY2tMZW46byxjYXBhY2l0eTo4KihuLXIqaSksdG90YWw6KHIrbykqaStpLXN9fX0sd2Q9WyhlLHQpPT4oZSt0KSUyPT0wLChlLHQpPT50JTI9PTAsKGUsdCk9PmUlMz09MCwoZSx0KT0+KGUrdCklMz09MCwoZSx0KT0+KE1hdGguZmxvb3IodC8yKStNYXRoLmZsb29yKGUvMykpJTI9PTAsKGUsdCk9PmUqdCUyK2UqdCUzPT0wLChlLHQpPT4oZSp0JTIrZSp0JTMpJTI9PTAsKGUsdCk9PigoZSt0KSUyK2UqdCUzKSUyPT0wXSxTZD17dGFibGVzOihlPT57Y29uc3QgdD1sZCgyNTYsMCksbj1sZCgyNTYsMCk7Zm9yKGxldCBlPTAscj0xO2U8MjU2O2UrKyl0W2VdPXIsbltyXT1lLHI8PD0xLDI1NiZyJiYocl49Mjg1KTtyZXR1cm57ZXhwOnQsbG9nOm59fSkoKSxleHA6ZT0+U2QudGFibGVzLmV4cFtlXSxsb2coZSl7aWYoMD09PWUpdGhyb3cgbmV3IEVycm9yKGBHRi5sb2c6IHdyb25nIGFyZz0ke2V9YCk7cmV0dXJuIFNkLnRhYmxlcy5sb2dbZV0lMjU1fSxtdWw6KGUsdCk9PjA9PT1lfHwwPT09dD8wOlNkLnRhYmxlcy5leHBbKFNkLnRhYmxlcy5sb2dbZV0rU2QudGFibGVzLmxvZ1t0XSklMjU1XSxhZGQ6KGUsdCk9PmVedCxwb3c6KGUsdCk9PlNkLnRhYmxlcy5leHBbU2QudGFibGVzLmxvZ1tlXSp0JTI1NV0saW52KGUpe2lmKDA9PT1lKXRocm93IG5ldyBFcnJvcihgR0YuaW52ZXJzZTogd3JvbmcgYXJnPSR7ZX1gKTtyZXR1cm4gU2QudGFibGVzLmV4cFsyNTUtU2QudGFibGVzLmxvZ1tlXV19LHBvbHlub21pYWwoZSl7aWYoMD09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiR0YucG9seW1vbWlhbDogd3JvbmcgbGVuZ3RoXCIpO2lmKDAhPT1lWzBdKXJldHVybiBlO2xldCB0PTA7Zm9yKDt0PGUubGVuZ3RoLTEmJjA9PWVbdF07dCsrKTtyZXR1cm4gZS5zbGljZSh0KX0sbW9ub21pYWwoZSx0KXtpZihlPDApdGhyb3cgbmV3IEVycm9yKGBHRi5tb25vbWlhbDogd3JvbmcgZGVncmVlPSR7ZX1gKTtpZigwPT10KXJldHVyblswXTtsZXQgbj1sZChlKzEsMCk7cmV0dXJuIG5bMF09dCxTZC5wb2x5bm9taWFsKG4pfSxkZWdyZWU6ZT0+ZS5sZW5ndGgtMSxjb2VmZmljaWVudDooZSx0KT0+ZVtTZC5kZWdyZWUoZSktdF0sbXVsUG9seShlLHQpe2lmKDA9PT1lWzBdfHwwPT09dFswXSlyZXR1cm5bMF07Y29uc3Qgbj1sZChlLmxlbmd0aCt0Lmxlbmd0aC0xLDApO2ZvcihsZXQgcj0wO3I8ZS5sZW5ndGg7cisrKWZvcihsZXQgaT0wO2k8dC5sZW5ndGg7aSsrKW5bcitpXT1TZC5hZGQobltyK2ldLFNkLm11bChlW3JdLHRbaV0pKTtyZXR1cm4gU2QucG9seW5vbWlhbChuKX0sbXVsUG9seVNjYWxhcihlLHQpe2lmKDA9PXQpcmV0dXJuWzBdO2lmKDE9PXQpcmV0dXJuIGU7Y29uc3Qgbj1sZChlLmxlbmd0aCwwKTtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyluW3JdPVNkLm11bChlW3JdLHQpO3JldHVybiBTZC5wb2x5bm9taWFsKG4pfSxtdWxQb2x5TW9ub21pYWwoZSx0LG4pe2lmKHQ8MCl0aHJvdyBuZXcgRXJyb3IoXCJHRi5tdWxQb2x5TW9ub21pYWw6IHdyb25nIGRlZ3JlZVwiKTtpZigwPT1uKXJldHVyblswXTtjb25zdCByPWxkKGUubGVuZ3RoK3QsMCk7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspclt0XT1TZC5tdWwoZVt0XSxuKTtyZXR1cm4gU2QucG9seW5vbWlhbChyKX0sYWRkUG9seShlLHQpe2lmKDA9PT1lWzBdKXJldHVybiB0O2lmKDA9PT10WzBdKXJldHVybiBlO2xldCBuPWUscj10O24ubGVuZ3RoPnIubGVuZ3RoJiYoW24scl09W3Isbl0pO2xldCBpPWxkKHIubGVuZ3RoLDApLG89ci5sZW5ndGgtbi5sZW5ndGgscz1yLnNsaWNlKDAsbyk7Zm9yKGxldCBlPTA7ZTxzLmxlbmd0aDtlKyspaVtlXT1zW2VdO2ZvcihsZXQgZT1vO2U8ci5sZW5ndGg7ZSsrKWlbZV09U2QuYWRkKG5bZS1vXSxyW2VdKTtyZXR1cm4gU2QucG9seW5vbWlhbChpKX0scmVtYWluZGVyUG9seShlLHQpe2NvbnN0IG49QXJyYXkuZnJvbShlKTtmb3IobGV0IHI9MDtyPGUubGVuZ3RoLXQubGVuZ3RoKzE7cisrKXtjb25zdCBlPW5bcl07aWYoMCE9PWUpZm9yKGxldCBpPTE7aTx0Lmxlbmd0aDtpKyspMCE9PXRbaV0mJihuW3IraV09U2QuYWRkKG5bcitpXSxTZC5tdWwodFtpXSxlKSkpfXJldHVybiBuLnNsaWNlKGUubGVuZ3RoLXQubGVuZ3RoKzEsbi5sZW5ndGgpfSxkaXZpc29yUG9seShlKXtsZXQgdD1bMV07Zm9yKGxldCBuPTA7bjxlO24rKyl0PVNkLm11bFBvbHkodCxbMSxTZC5wb3coMixuKV0pO3JldHVybiB0fSxldmFsUG9seShlLHQpe2lmKDA9PXQpcmV0dXJuIFNkLmNvZWZmaWNpZW50KGUsMCk7bGV0IG49ZVswXTtmb3IobGV0IHI9MTtyPGUubGVuZ3RoO3IrKyluPVNkLmFkZChTZC5tdWwodCxuKSxlW3JdKTtyZXR1cm4gbn0sZXVjbGlkaWFuKGUsdCxuKXtTZC5kZWdyZWUoZSk8U2QuZGVncmVlKHQpJiYoW2UsdF09W3QsZV0pO2xldCByPWUsaT10LG89WzBdLHM9WzFdO2Zvcig7MipTZC5kZWdyZWUoaSk+PW47KXtsZXQgZT1yLHQ9bztpZihyPWksbz1zLDA9PT1yWzBdKXRocm93IG5ldyBFcnJvcihcInJMYXN0WzBdID09PSAwXCIpO2k9ZTtsZXQgbj1bMF07Y29uc3QgYT1TZC5pbnYoclswXSk7Zm9yKDtTZC5kZWdyZWUoaSk+PVNkLmRlZ3JlZShyKSYmMCE9PWlbMF07KXtjb25zdCBlPVNkLmRlZ3JlZShpKS1TZC5kZWdyZWUociksdD1TZC5tdWwoaVswXSxhKTtuPVNkLmFkZFBvbHkobixTZC5tb25vbWlhbChlLHQpKSxpPVNkLmFkZFBvbHkoaSxTZC5tdWxQb2x5TW9ub21pYWwocixlLHQpKX1pZihuPVNkLm11bFBvbHkobixvKSxzPVNkLmFkZFBvbHkobix0KSxTZC5kZWdyZWUoaSk+PVNkLmRlZ3JlZShyKSl0aHJvdyBuZXcgRXJyb3IoYERpdmlzaW9uIGZhaWxlZCByOiAke2l9LCByTGFzdDogJHtyfWApfWNvbnN0IGE9U2QuY29lZmZpY2llbnQocywwKTtpZigwPT1hKXRocm93IG5ldyBFcnJvcihcInNpZ21hVGlsZGUoMCkgd2FzIHplcm9cIik7Y29uc3QgYz1TZC5pbnYoYSk7cmV0dXJuW1NkLm11bFBvbHlTY2FsYXIocyxjKSxTZC5tdWxQb2x5U2NhbGFyKGksYyldfX07ZnVuY3Rpb24gX2QoZSx0KXtjb25zdHt3b3JkczpuLHNob3J0QmxvY2tzOnIsbnVtQmxvY2tzOmksYmxvY2tMZW46byx0b3RhbDpzfT1iZC5jYXBhY2l0eShlLHQpLGE9KGM9bix7ZW5jb2RlKGUpe2NvbnN0IHQ9U2QuZGl2aXNvclBvbHkoYyksbj1BcnJheS5mcm9tKGUpO3JldHVybiBuLnB1c2goLi4udC5zbGljZSgwLC0xKS5maWxsKDApKSxVaW50OEFycmF5LmZyb20oU2QucmVtYWluZGVyUG9seShuLHQpKX0sZGVjb2RlKGUpe2NvbnN0IHQ9ZS5zbGljZSgpLG49U2QucG9seW5vbWlhbChBcnJheS5mcm9tKGUpKTtsZXQgcj1sZChjLDApLGk9ITE7Zm9yKGxldCBlPTA7ZTxjO2UrKyl7Y29uc3QgdD1TZC5ldmFsUG9seShuLFNkLmV4cChlKSk7cltyLmxlbmd0aC0xLWVdPXQsMCE9PXQmJihpPSEwKX1pZighaSlyZXR1cm4gdDtyPVNkLnBvbHlub21pYWwocik7Y29uc3Qgbz1TZC5tb25vbWlhbChjLDEpLFtzLGFdPVNkLmV1Y2xpZGlhbihvLHIsYyksZD1sZChTZC5kZWdyZWUocyksMCk7bGV0IGw9MDtmb3IobGV0IGU9MTtlPDI1NiYmbDxkLmxlbmd0aDtlKyspMD09PVNkLmV2YWxQb2x5KHMsZSkmJihkW2wrK109U2QuaW52KGUpKTtpZihsIT09ZC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiUlMuZGVjb2RlOiB3cm9uZyBlcnJvcnMgbnVtYmVyXCIpO2ZvcihsZXQgZT0wO2U8ZC5sZW5ndGg7ZSsrKXtjb25zdCBuPXQubGVuZ3RoLTEtU2QubG9nKGRbZV0pO2lmKG48MCl0aHJvdyBuZXcgRXJyb3IoXCJSUy5kZWNvZGU6IHdyb25nIGVycm9yIGxvY2F0aW9uXCIpO2NvbnN0IHI9U2QuaW52KGRbZV0pO2xldCBpPTE7Zm9yKGxldCB0PTA7dDxkLmxlbmd0aDt0KyspZSE9PXQmJihpPVNkLm11bChpLFNkLmFkZCgxLFNkLm11bChkW3RdLHIpKSkpO3Rbbl09U2QuYWRkKHRbbl0sU2QubXVsKFNkLmV2YWxQb2x5KGEsciksU2QuaW52KGkpKSl9cmV0dXJuIHR9fSk7dmFyIGM7cmV0dXJue2VuY29kZShlKXtjb25zdCB0PVtdLG49W107Zm9yKGxldCBzPTA7czxpO3MrKyl7Y29uc3QgaT1vKyhzPHI/MDoxKTt0LnB1c2goZS5zdWJhcnJheSgwLGkpKSxuLnB1c2goYS5lbmNvZGUoZS5zdWJhcnJheSgwLGkpKSksZT1lLnN1YmFycmF5KGkpfWNvbnN0IHM9dWQoLi4udCksYz11ZCguLi5uKSxkPW5ldyBVaW50OEFycmF5KHMubGVuZ3RoK2MubGVuZ3RoKTtyZXR1cm4gZC5zZXQocyksZC5zZXQoYyxzLmxlbmd0aCksZH0sZGVjb2RlKGUpe2lmKGUubGVuZ3RoIT09cyl0aHJvdyBuZXcgRXJyb3IoYGludGVybGVhdmUuZGVjb2RlOiBsZW4oZGF0YSk9JHtlLmxlbmd0aH0sIHRvdGFsPSR7c31gKTtjb25zdCB0PVtdO2ZvcihsZXQgZT0wO2U8aTtlKyspe2NvbnN0IGk9ZTxyO3QucHVzaChuZXcgVWludDhBcnJheShuK28rKGk/MDoxKSkpfWxldCBjPTA7Zm9yKGxldCBuPTA7bjxvO24rKylmb3IobGV0IHI9MDtyPGk7cisrKXRbcl1bbl09ZVtjKytdO2ZvcihsZXQgbj1yO248aTtuKyspdFtuXVtvXT1lW2MrK107Zm9yKGxldCBzPW87czxvK247cysrKWZvcihsZXQgbj0wO248aTtuKyspe2NvbnN0IGk9bjxyO3Rbbl1bcysoaT8wOjEpXT1lW2MrK119Y29uc3QgZD1bXTtmb3IoY29uc3QgZSBvZiB0KWQucHVzaCguLi5BcnJheS5mcm9tKGEuZGVjb2RlKGUpKS5zbGljZSgwLC1uKSk7cmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShkKX19fWZ1bmN0aW9uIENkKGUsdCxuLHIpe2xldCBpPVwiXCIsbz1uLmxlbmd0aDtpZihcIm51bWVyaWNcIj09PXIpe2NvbnN0IGU9YmQuYWxwaGFiZXQubnVtZXJpYy5kZWNvZGUobi5zcGxpdChcIlwiKSksdD1lLmxlbmd0aDtmb3IobGV0IG49MDtuPHQtMjtuKz0zKWkrPWNkKDEwMCplW25dKzEwKmVbbisxXStlW24rMl0sMTApO3QlMz09MT9pKz1jZChlW3QtMV0sNCk6dCUzPT0yJiYoaSs9Y2QoMTAqZVt0LTJdK2VbdC0xXSw3KSl9ZWxzZSBpZihcImFscGhhbnVtZXJpY1wiPT09cil7Y29uc3QgZT1iZC5hbHBoYWJldC5hbHBoYW51bWVyYy5kZWNvZGUobi5zcGxpdChcIlwiKSksdD1lLmxlbmd0aDtmb3IobGV0IG49MDtuPHQtMTtuKz0yKWkrPWNkKDQ1KmVbbl0rZVtuKzFdLDExKTt0JTI9PTEmJihpKz1jZChlW3QtMV0sNikpfWVsc2V7aWYoXCJieXRlXCIhPT1yKXRocm93IG5ldyBFcnJvcihcImVuY29kZTogdW5zdXBwb3J0ZWQgdHlwZVwiKTt7Y29uc3QgZT1mdW5jdGlvbihlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJ1dGY4VG9CeXRlcyBleHBlY3RlZCBzdHJpbmcsIGdvdCBcIit0eXBlb2YgZSk7cmV0dXJuIG5ldyBVaW50OEFycmF5KChuZXcgVGV4dEVuY29kZXIpLmVuY29kZShlKSl9KG4pO289ZS5sZW5ndGgsaT1BcnJheS5mcm9tKGUpLm1hcCgoZT0+Y2QoZSw4KSkpLmpvaW4oXCJcIil9fWNvbnN0e2NhcGFjaXR5OnN9PWJkLmNhcGFjaXR5KGUsdCksYT1jZChvLGJkLmxlbmd0aEJpdHMoZSxyKSk7bGV0IGM9YmQubW9kZUJpdHNbcl0rYStpO2lmKGMubGVuZ3RoPnMpdGhyb3cgbmV3IEVycm9yKFwiQ2FwYWNpdHkgb3ZlcmZsb3dcIik7Yys9XCIwXCIucmVwZWF0KE1hdGgubWluKDQsTWF0aC5tYXgoMCxzLWMubGVuZ3RoKSkpLGMubGVuZ3RoJTgmJihjKz1cIjBcIi5yZXBlYXQoOC1jLmxlbmd0aCU4KSk7Y29uc3QgZD1cIjExMTAxMTAwMDAwMTAwMDFcIjtmb3IobGV0IGU9MDtjLmxlbmd0aCE9PXM7ZSsrKWMrPWRbZSUxNl07Y29uc3QgbD1VaW50OEFycmF5LmZyb20oYy5tYXRjaCgvKC57OH0pL2cpLm1hcCgoZT0+TnVtYmVyKGAwYiR7ZX1gKSkpKTtyZXR1cm4gX2QoZSx0KS5lbmNvZGUobCl9ZnVuY3Rpb24geGQoZSx0LG4scixpPSExKXtjb25zdCBvPWZ1bmN0aW9uKGUsdCxuLHI9ITEpe2NvbnN0IGk9YmQuc2l6ZS5lbmNvZGUoZSk7bGV0IG89bmV3IHBkKGkrMik7Y29uc3Qgcz1uZXcgcGQoMykucmVjdCgwLDMsITApLmJvcmRlcigxLCExKS5ib3JkZXIoMSwhMCkuYm9yZGVyKDEsITEpO289by5lbWJlZCgwLHMpLmVtYmVkKHt4Oi1zLndpZHRoLHk6MH0scykuZW1iZWQoe3g6MCx5Oi1zLmhlaWdodH0scyksbz1vLnJlY3RTbGljZSgxLGkpO2NvbnN0IGE9bmV3IHBkKDEpLnJlY3QoMCwxLCEwKS5ib3JkZXIoMSwhMSkuYm9yZGVyKDEsITApLGM9YmQuYWxpZ25tZW50UGF0dGVybnMoZSk7Zm9yKGNvbnN0IGUgb2YgYylmb3IoY29uc3QgdCBvZiBjKXZvaWQgMD09PW8uZGF0YVtlXVt0XSYmby5lbWJlZCh7eDp0LTIseTplLTJ9LGEpO289by5oTGluZSh7eDowLHk6Nn0sMS8wLCgoe3g6ZX0sdCk9PnZvaWQgMD09PXQ/ZSUyPT0wOnQpKS52TGluZSh7eDo2LHk6MH0sMS8wLCgoe3k6ZX0sdCk9PnZvaWQgMD09PXQ/ZSUyPT0wOnQpKTt7Y29uc3QgZT1iZC5mb3JtYXRCaXRzKHQsbikscz10PT4hciYmMT09KGU+PnQmMSk7Zm9yKGxldCBlPTA7ZTw2O2UrKylvLmRhdGFbZV1bOF09cyhlKTtmb3IobGV0IGU9NjtlPDg7ZSsrKW8uZGF0YVtlKzFdWzhdPXMoZSk7Zm9yKGxldCBlPTg7ZTwxNTtlKyspby5kYXRhW2ktMTUrZV1bOF09cyhlKTtmb3IobGV0IGU9MDtlPDg7ZSsrKW8uZGF0YVs4XVtpLWUtMV09cyhlKTtmb3IobGV0IGU9ODtlPDk7ZSsrKW8uZGF0YVs4XVsxNS1lLTErMV09cyhlKTtmb3IobGV0IGU9OTtlPDE1O2UrKylvLmRhdGFbOF1bMTUtZS0xXT1zKGUpO28uZGF0YVtpLThdWzhdPSFyfWlmKGU+PTcpe2NvbnN0IHQ9YmQudmVyc2lvbkJpdHMoZSk7Zm9yKGxldCBlPTA7ZTwxODtlKz0xKXtjb25zdCBuPSFyJiYxPT0odD4+ZSYxKSxzPU1hdGguZmxvb3IoZS8zKSxhPWUlMytpLTgtMztvLmRhdGFbc11bYV09bixvLmRhdGFbYV1bc109bn19cmV0dXJuIG99KGUsdCxyLGkpO2xldCBzPTA7Y29uc3QgYT04Km4ubGVuZ3RoO2lmKGZ1bmN0aW9uKGUsdCxuKXtjb25zdCByPWUuaGVpZ2h0LGk9d2RbdF07bGV0IG89LTEscz1yLTE7Zm9yKGxldCB0PXItMTt0PjA7dC09Mil7Zm9yKDY9PXQmJih0PTUpOztzKz1vKXtmb3IobGV0IHI9MDtyPDI7cis9MSl7Y29uc3Qgbz10LXI7dm9pZCAwPT09ZS5kYXRhW3NdW29dJiZuKG8scyxpKG8scykpfWlmKHMrbzwwfHxzK28+PXIpYnJlYWt9bz0tb319KG8sciwoKGUsdCxyKT0+e2xldCBpPSExO3M8YSYmKGk9MCE9KG5bcz4+PjNdPj4oNy1zJjcpJjEpLHMrKyksby5kYXRhW3RdW2VdPWkhPT1yfSkpLHMhPT1hKXRocm93IG5ldyBFcnJvcihcIlFSOiBieXRlcyBsZWZ0IGFmdGVyIGRyYXdcIik7cmV0dXJuIG99ZnVuY3Rpb24ga2QoZSl7Y29uc3QgdD1lLmludmVyc2UoKSxuPWU9PntsZXQgdD0wO2ZvcihsZXQgbixyPTAsaT0xO3I8ZS5sZW5ndGg7cisrKW49PT1lW3JdJiYoaSsrLHIhPT1lLmxlbmd0aC0xKXx8KGk+PTUmJih0Kz1pLTUrMyksbj1lW3JdLGk9MSk7cmV0dXJuIHR9O2xldCByPTA7ZS5kYXRhLmZvckVhY2goKGU9PnIrPW4oZSkpKSx0LmRhdGEuZm9yRWFjaCgoZT0+cis9bihlKSkpO2xldCBpPTAsbz1lLmRhdGE7Y29uc3Qgcz1lLndpZHRoLTEsYT1lLmhlaWdodC0xO2ZvcihsZXQgZT0wO2U8cztlKyspZm9yKGxldCB0PTA7dDxhO3QrKyl7Y29uc3Qgbj1lKzEscj10KzE7b1tlXVt0XT09PW9bbl1bdF0mJm9bbl1bdF09PT1vW2VdW3JdJiZvW25dW3RdPT09b1tuXVtyXSYmKGkrPTMpfWNvbnN0IGM9ZT0+e2NvbnN0IHQ9WyEwLCExLCEwLCEwLCEwLCExLCEwXSxuPVshMSwhMSwhMSwhMV0scj1bLi4udCwuLi5uXSxpPVsuLi5uLC4uLnRdO2xldCBvPTA7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0KyspaGQoZSxyLHQpJiYobys9NDApLGhkKGUsaSx0KSYmKG8rPTQwKTtyZXR1cm4gb307bGV0IGQ9MDtmb3IoY29uc3QgdCBvZiBlLmRhdGEpZCs9Yyh0KTtmb3IoY29uc3QgZSBvZiB0LmRhdGEpZCs9YyhlKTtsZXQgbD0wO2UucmVjdFJlYWQoMCwxLzAsKChlLHQpPT5sKz10PzE6MCkpO2NvbnN0IHU9bC8oZS5oZWlnaHQqZS53aWR0aCkqMTAwLGg9MTAqTWF0aC5mbG9vcihNYXRoLmFicyh1LTUwKS81KTtyZXR1cm4gcitpK2QraH1mdW5jdGlvbiBNZChlLHQ9XCJyYXdcIixuPXt9KXtjb25zdCByPXZvaWQgMCE9PW4uZWNjP24uZWNjOlwibWVkaXVtXCI7IWZ1bmN0aW9uKGUpe2lmKCFtZC5pbmNsdWRlcyhlKSl0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZXJyb3IgY29ycmVjdGlvbiBtb2RlPSR7ZX0uIEV4cGVjdGVkOiAke21kfWApfShyKTtjb25zdCBpPXZvaWQgMCE9PW4uZW5jb2Rpbmc/bi5lbmNvZGluZzpmdW5jdGlvbihlKXtsZXQgdD1cIm51bWVyaWNcIjtmb3IobGV0IG4gb2YgZSlpZighYmQuYWxwaGFiZXQubnVtZXJpYy5oYXMobikmJih0PVwiYWxwaGFudW1lcmljXCIsIWJkLmFscGhhYmV0LmFscGhhbnVtZXJjLmhhcyhuKSkpcmV0dXJuXCJieXRlXCI7cmV0dXJuIHR9KGUpOyFmdW5jdGlvbihlKXtpZighZ2QuaW5jbHVkZXMoZSkpdGhyb3cgbmV3IEVycm9yKGBFbmNvZGluZzogaW52YWxpZCBtb2RlPSR7ZX0uIEV4cGVjdGVkOiAke2dkfWApO2lmKFwia2FuamlcIj09PWV8fFwiZWNpXCI9PT1lKXRocm93IG5ldyBFcnJvcihgRW5jb2Rpbmc6ICR7ZX0gaXMgbm90IHN1cHBvcnRlZCAoeWV0PykuYCl9KGkpLHZvaWQgMCE9PW4ubWFzayYmZnVuY3Rpb24oZSl7aWYoIVswLDEsMiwzLDQsNSw2LDddLmluY2x1ZGVzKGUpfHwhd2RbZV0pdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1hc2s9JHtlfS4gRXhwZWN0ZWQgbnVtYmVyIFswLi43XWApfShuLm1hc2spO2xldCBvLHM9bi52ZXJzaW9uLGE9bmV3IEVycm9yKFwiVW5rbm93biBlcnJvclwiKTtpZih2b2lkIDAhPT1zKSFmdW5jdGlvbihlKXtpZighTnVtYmVyLmlzU2FmZUludGVnZXIoZSl8fGU8MXx8ZT40MCl0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmVyc2lvbj0ke2V9LiBFeHBlY3RlZCBudW1iZXIgWzEuLjQwXWApfShzKSxvPUNkKHMscixlLGkpO2Vsc2UgZm9yKGxldCB0PTE7dDw9NDA7dCsrKXRyeXtvPUNkKHQscixlLGkpLHM9dDticmVha31jYXRjaChlKXthPWV9aWYoIXN8fCFvKXRocm93IGE7bGV0IGM9ZnVuY3Rpb24oZSx0LG4scil7aWYodm9pZCAwPT09cil7Y29uc3QgaT1mdW5jdGlvbigpe2xldCBlLHQ9MS8wO3JldHVybnthZGQobixyKXtuPj10fHwoZT1yLHQ9bil9LGdldDooKT0+ZSxzY29yZTooKT0+dH19KCk7Zm9yKGxldCByPTA7cjx3ZC5sZW5ndGg7cisrKWkuYWRkKGtkKHhkKGUsdCxuLHIsITApKSxyKTtyPWkuZ2V0KCl9aWYodm9pZCAwPT09cil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtYXNrXCIpO3JldHVybiB4ZChlLHQsbixyKX0ocyxyLG8sbi5tYXNrKTtjLmFzc2VydERyYXduKCk7Y29uc3QgZD12b2lkIDA9PT1uLmJvcmRlcj8yOm4uYm9yZGVyO2lmKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihkKSl0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBib3JkZXIgdHlwZT1cIit0eXBlb2YgZCk7aWYoYz1jLmJvcmRlcihkLCExKSx2b2lkIDAhPT1uLnNjYWxlJiYoYz1jLnNjYWxlKG4uc2NhbGUpKSxcInJhd1wiPT09dClyZXR1cm4gYy5kYXRhO2lmKFwiYXNjaWlcIj09PXQpcmV0dXJuIGMudG9BU0NJSSgpO2lmKFwic3ZnXCI9PT10KXJldHVybiBjLnRvU1ZHKCk7aWYoXCJnaWZcIj09PXQpcmV0dXJuIGMudG9HSUYoKTtpZihcInRlcm1cIj09PXQpcmV0dXJuIGMudG9UZXJtKCk7dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG91dHB1dDogJHt0fWApfWNvbnN0IEFkPSh7bGluazplfSk9Pntjb25zdCB0PU1kKGUsXCJhc2NpaVwiKTtyZXR1cm4gY29uc29sZS5sb2codCksUmEoYFtVSTogSW5zdGFsbE1vZGFsLW5vZGVqcygpXSBxcmNvZGUgdXJsOiAke2V9YCkse3VubW91bnQ6KCk9Pnt9fX0sVGQ9KCk9PihSYShcIltVSTogcGVuZGluZ01vZGFsLW5vZGVqczogUGVuZGluZ01vZGFsKCldIFBsZWFzZSBvcGVuIHRoZSBNZXRhTWFzayB3YWxsZXQgYXBwIGFuZCBjb25maXJtIHRoZSBjb25uZWN0aW9uLiBUaGFuayB5b3UhXCIpLHt1bm1vdW50OigpPT4hMSx1cGRhdGVPVFBWYWx1ZTplPT57XCJcIiE9PWUmJlJhKGBbVUk6IHBlbmRpbmdNb2RhbC1ub2RlanM6IFBlbmRpbmdNb2RhbCgpXSBDaG9vc2UgdGhlIGZvbGxvd2luZyB2YWx1ZSBvbiB5b3VyIG1ldGFtYXNrIG1vYmlsZSB3YWxsZXQ6ICR7ZX1gKX0sbW91bnQ6KCk9PiExfSk7ZnVuY3Rpb24gSWQoZSx0KXt2YXIgbixyLGksbztlLmNvbm5lY3Rvcnx8KFJhKFwiW1JlbW90ZUNvbm5lY3Rpb246IGluaXRpYWxpemVDb25uZWN0b3IoKV0gaW5pdGlhbGl6ZSBjb25uZWN0b3JcIiksZS5jb25uZWN0b3I9bmV3IEJyKHtwbGF0Zm9ybVR5cGU6dC5wbGF0Zm9ybU1hbmFnZXIuZ2V0UGxhdGZvcm1UeXBlKCksY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZTp0LmNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2UsdHJhbnNwb3J0czp0LnRyYW5zcG9ydHMsZGFwcE1ldGFkYXRhOk9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx0LmRhcHBNZXRhZGF0YSkse3NvdXJjZTp0Ll9zb3VyY2V9KSxhbmFseXRpY3M6dC5lbmFibGVBbmFseXRpY3MsY29tbXVuaWNhdGlvblNlcnZlclVybDp0LmNvbW11bmljYXRpb25TZXJ2ZXJVcmwsc2RrVmVyc2lvbjpoYy52ZXJzaW9uLGNvbnRleHQ6XCJkYXBwXCIsZWNpZXM6dC5lY2llcyxzdG9yYWdlOnQuc3RvcmFnZSxsb2dnaW5nOnQubG9nZ2luZ30pLHQudGltZXImJihSYShcIltSZW1vdGVDb25uZWN0aW9uOiBpbml0aWFsaXplQ29ubmVjdG9yKCldIHJlc2V0IGJhY2tncm91bmQgdGltZXJcIix0LnRpbWVyKSxudWxsPT09KHI9bnVsbD09PShuPXQudGltZXIpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnN0b3BCYWNrZ3JvdW5kVGltZXIpfHx2b2lkIDA9PT1yfHxyLmNhbGwobiksbnVsbD09PShvPW51bGw9PT0oaT10LnRpbWVyKXx8dm9pZCAwPT09aT92b2lkIDA6aS5ydW5CYWNrZ3JvdW5kVGltZXIpfHx2b2lkIDA9PT1vfHxvLmNhbGwoaSwoKCk9PiExKSwxZTQpKSl9ZnVuY3Rpb24gUGQoZSl7ZS5saXN0ZW5lcnMuZm9yRWFjaCgoKHtldmVudDp0LGhhbmRsZXI6bn0pPT57dmFyIHI7bnVsbD09PShyPWUuY29ubmVjdG9yKXx8dm9pZCAwPT09cnx8ci5vZmYodCxuKX0pKSxlLmxpc3RlbmVycz1bXX1mdW5jdGlvbiBSZChlLHQsbil7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtyZXR1cm4gbmV3IFByb21pc2UoKChyLGkpPT57aWYoIWUuY29ubmVjdG9yKXJldHVybiB2b2lkIGkobmV3IEVycm9yKFwiTm8gY29ubmVjdG9yIGF2YWlsYWJsZVwiKSk7UmEoXCJbUmVtb3RlQ29ubmVjdGlvbjogY29ubmVjdFdpdGhNb2RhbEluc3RhbGxlcigpXVwiLHtzdGF0ZTplLG9wdGlvbnM6dCxsaW5rUGFyYW1zOm59KTtjb25zdCBvPWAke2UudXNlRGVlcGxpbms/bWM6cGN9PyR7bn1gOyFmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLHM7ZS5pbnN0YWxsTW9kYWw9bnVsbD09PShpPShyPXQubW9kYWxzKS5pbnN0YWxsKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHIse2xpbms6bixwcmVmZXJEZXNrdG9wOmUucHJlZmVyRGVza3RvcCxpbnN0YWxsZXI6dC5nZXRNZXRhTWFza0luc3RhbGxlcigpLHRlcm1pbmF0ZTooKT0+e1JhKFwiW1JlbW90ZUNvbm5lY3Rpb246IHNob3dJbnN0YWxsTW9kYWwoKSA9PiB0ZXJtaW5hdGUoKV0gdGVybWluYXRlIGNvbm5lY3Rpb25cIiksdC5zZGsudGVybWluYXRlKCkuY2F0Y2goKGU9Pntjb25zb2xlLndhcm4oXCJbTU1TREtdIGZhaWxlZCB0byB0ZXJtaW5hdGUgY29ubmVjdGlvblwiLGUpfSkpfSxkZWJ1ZzplLmRldmVsb3Blck1vZGUsY29ubmVjdFdpdGhFeHRlbnNpb246KCk9Pnt2YXIgZTtyZXR1cm4gbnVsbD09PShlPXQuY29ubmVjdFdpdGhFeHRlbnNpb25Qcm92aWRlcil8fHZvaWQgMD09PWV8fGUuY2FsbCh0KSwhMX0sb25BbmFseXRpY3NFdmVudDooe2V2ZW50Om4scGFyYW1zOnJ9KT0+e3ZhciBpLG8scztjb25zdCBhPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxyKSx7c2RrVmVyc2lvbjp0LnNkay5nZXRWZXJzaW9uKCksZGFwcElkOm51bGw9PT0oaT10LmRhcHBNZXRhZGF0YSl8fHZvaWQgMD09PWk/dm9pZCAwOmkubmFtZSxzb3VyY2U6dC5fc291cmNlLHVybDpudWxsPT09KG89dC5kYXBwTWV0YWRhdGEpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnVybH0pO251bGw9PT0ocz1lLmFuYWx5dGljcyl8fHZvaWQgMD09PXN8fHMuc2VuZCh7ZXZlbnQ6bixwYXJhbXM6YX0pfX0pLG51bGw9PT0ocz1udWxsPT09KG89ZS5pbnN0YWxsTW9kYWwpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLm1vdW50KXx8dm9pZCAwPT09c3x8cy5jYWxsKG8sbil9KGUsdCxvKSx0LnNkay5vbmNlKGV4cG9ydHMuRXZlbnRUeXBlLlBST1ZJREVSX1VQREFURSwoZT0+bCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2lmKFJhKFwiW1JlbW90ZUNvbm5lY3Rpb246IGNvbm5lY3RXaXRoTW9kYWxJbnN0YWxsZXIoKV0gb25jZSBwcm92aWRlcl91cGRhdGUgLS0gcmVzb2x2aW5nIHN0YXJ0Q29ubmVjdGlvbiBwcm9taXNlXCIpLGUhPT1leHBvcnRzLlBST1ZJREVSX1VQREFURV9UWVBFLlRFUk1JTkFURSlpKGUpO2Vsc2V7aSh7Y29kZTo0MDAxLG1lc3NhZ2U6XCJVc2VyIHJlamVjdGVkIHRoZSByZXF1ZXN0LlwifSl9fSkpKSksZS5jb25uZWN0b3Iub25jZShleHBvcnRzLkV2ZW50VHlwZS5BVVRIT1JJWkVELCgoKT0+e3IoKX0pKSxlLmNvbm5lY3Rvci5vbmNlKGV4cG9ydHMuRXZlbnRUeXBlLlJFSkVDVEVELCgoKT0+e2koZXhwb3J0cy5FdmVudFR5cGUuUkVKRUNURUQpfSkpLGUuY29ubmVjdG9yLm9uY2UoZXhwb3J0cy5FdmVudFR5cGUuQ0xJRU5UU19SRUFEWSwoKCk9PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtSYShcIltSZW1vdGVDb25uZWN0aW9uOiBjb25uZWN0V2l0aE1vZGFsSW5zdGFsbGVyKCldIG9uY2UgY2xpZW50c19yZWFkeSAtLSByZXNvbHZpbmcgc3RhcnRDb25uZWN0aW9uIHByb21pc2VcIikscigpfSkpKSl9KSl9KSl9ZnVuY3Rpb24gT2QoZSx0KXtmdW5jdGlvbiBuKHQsbil7dmFyIHI7bnVsbD09PShyPWUuY29ubmVjdG9yKXx8dm9pZCAwPT09cnx8ci5vbih0LG4pLGUubGlzdGVuZXJzLnB1c2goe2V2ZW50OnQsaGFuZGxlcjpufSl9ZS5jb25uZWN0b3ImJihQZChlKSxuKGV4cG9ydHMuRXZlbnRUeXBlLldBTExFVF9JTklULCgoe2FjY291bnRzOmUsY2hhaW5JZDp0fSk9PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtSYShgW1JlbW90ZUNvbm5lY3Rpb246IHNldHVwTGlzdGVuZXJzKCkgPT4gRXZlbnRUeXBlLldBTExFVF9JTklUXSAnd2FsbGV0X2luaXQnIGFjY291bnRzPSR7ZX0gY2hhaW5JZD0ke3R9YCk7Y29uc3Qgbj1hYy5nZXRQcm92aWRlcigpO24uX3NldENvbm5lY3RlZCgpO2NvbnN0IHI9e2FjY291bnRzOmUsY2hhaW5JZDp0LGlzVW5sb2NrZWQ6ITF9O24uX2luaXRpYWxpemVTdGF0ZShyKSxuLmVtaXQoXCJjaGFpbkNoYW5nZWRcIix0KSxuLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIixlKX0pKSkpLG4oZXhwb3J0cy5FdmVudFR5cGUuQVVUSE9SSVpFRCwoKCk9PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt2YXIgdCxuLHIsaTt0cnl7UmEoXCJbUmVtb3RlQ29ubmVjdGlvbjogc2V0dXBMaXN0ZW5lcnMoKSA9PiBFdmVudFR5cGUuQVVUSE9SSVpFRF0gJ2F1dGhvcml6ZWQnIGNsb3NpbmcgbW9kYWxzXCIsZS5wZW5kaW5nTW9kYWwsZS5pbnN0YWxsTW9kYWwpO2NvbnN0IG89YWMuZ2V0UHJvdmlkZXIoKTtvLl9zZXRDb25uZWN0ZWQoKSxudWxsPT09KG49bnVsbD09PSh0PWUucGVuZGluZ01vZGFsKXx8dm9pZCAwPT09dD92b2lkIDA6dC51bm1vdW50KXx8dm9pZCAwPT09bnx8bi5jYWxsKHQpLG51bGw9PT0oaT1udWxsPT09KHI9ZS5pbnN0YWxsTW9kYWwpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnVubW91bnQpfHx2b2lkIDA9PT1pfHxpLmNhbGwociwhMSksZS5vdHBBbnN3ZXI9dm9pZCAwLGUuYXV0aG9yaXplZD0hMCxSYShcIltSZW1vdGVDb25uZWN0aW9uOiBzZXR1cExpc3RlbmVycygpID0+IEV2ZW50VHlwZS5BVVRIT1JJWkVEXSAnYXV0aG9yaXplZCcgcHJvdmlkZXIuc3RhdGVcIixvLmdldFN0YXRlKCkpLHlpZWxkIG8uZm9yY2VJbml0aWFsaXplU3RhdGUoKX1jYXRjaChlKXt9fSkpKSksbihleHBvcnRzLkV2ZW50VHlwZS5URVJNSU5BVEUsKCgpPT57dmFyIHQsbixyLGksbztudWxsPT09KG49bnVsbD09PSh0PWUucGVuZGluZ01vZGFsKXx8dm9pZCAwPT09dD92b2lkIDA6dC51bm1vdW50KXx8dm9pZCAwPT09bnx8bi5jYWxsKHQpLG51bGw9PT0oaT1udWxsPT09KHI9ZS5pbnN0YWxsTW9kYWwpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnVubW91bnQpfHx2b2lkIDA9PT1pfHxpLmNhbGwociwhMCksZS5wZW5kaW5nTW9kYWw9dm9pZCAwLGUuaW5zdGFsbE1vZGFsPXZvaWQgMCxlLm90cEFuc3dlcj12b2lkIDAsbnVsbD09PShvPWUuY29ubmVjdG9yKXx8dm9pZCAwPT09b3x8by5kaXNjb25uZWN0KHt0ZXJtaW5hdGU6ITB9KSxlLmF1dGhvcml6ZWQ9ITE7YWMuZ2V0UHJvdmlkZXIoKS5oYW5kbGVEaXNjb25uZWN0KHt0ZXJtaW5hdGU6ITB9KSxQZChlKSxSYShcIltSZW1vdGVDb25uZWN0aW9uOiBzZXR1cExpc3RlbmVycygpXSBBbGwgbGlzdGVuZXJzIGNsZWFuZWQgdXBcIil9KSkpfWZ1bmN0aW9uIE5kKGUsdCx7aW5pdGlhbENoZWNrOm4sY29ubmVjdFdpdGg6cn09e30pe3ZhciBpLG8scyxhLGMsZCx1LGgsZixwLG0sZyx2LHksRSxiLHcsUyxfO3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dHJ5e2lmKElkKGUsdCksIWUuY29ubmVjdG9yKXRocm93IG5ldyBFcnJvcihcIm5vIGNvbm5lY3RvciBkZWZpbmVkXCIpO09kKGUpO2NvbnN0IEM9YWMuZ2V0UHJvdmlkZXIoKTtlLmF1dGhvcml6ZWQ9ITEsQy5lbWl0KFwiY29ubmVjdGluZ1wiKTtjb25zdCB4PXlpZWxkIG51bGw9PT0oaT1lLmNvbm5lY3Rvcil8fHZvaWQgMD09PWk/dm9pZCAwOmkub3JpZ2luYXRvclNlc3Npb25Db25uZWN0KCk7UmEoYFtSZW1vdGVDb25uZWN0aW9uOiBzdGFydENvbm5lY3Rpb24oKV0gYWZ0ZXIgb3JpZ2luYXRvclNlc3Npb25Db25uZWN0IGluaXRpYWxDaGVjaz0ke259YCx4KTtsZXQgaz1udWxsIT09KG89bnVsbD09eD92b2lkIDA6eC5jaGFubmVsSWQpJiZ2b2lkIDAhPT1vP286XCJcIixNPW51bGwhPT0oYT1udWxsPT09KHM9ZS5jb25uZWN0b3IuZ2V0S2V5SW5mbygpKXx8dm9pZCAwPT09cz92b2lkIDA6cy5lY2llcy5wdWJsaWMpJiZ2b2lkIDAhPT1hP2E6XCJcIixBPW51bGwhPT0oZD1udWxsPT09KGM9ZS5jb25uZWN0b3IuZ2V0S2V5SW5mbygpKXx8dm9pZCAwPT09Yz92b2lkIDA6Yy5lY2llcy5wcml2YXRlKSYmdm9pZCAwIT09ZD9kOlwiXCI7aWYobiYmIXgpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO2lmKCF4JiYhbil7Y29uc3QgdD15aWVsZCBlLmNvbm5lY3Rvci5nZW5lcmF0ZUNoYW5uZWxJZENvbm5lY3QoKTtrPW51bGwhPT0odT10LmNoYW5uZWxJZCkmJnZvaWQgMCE9PXU/dTpcIlwiLE09bnVsbCE9PShoPXQucHViS2V5KSYmdm9pZCAwIT09aD9oOlwiXCIsQT1udWxsIT09KGY9dC5wcml2S2V5KSYmdm9pZCAwIT09Zj9mOlwiXCI7Y29uc3Qgbj1EYXRlLm5vdygpO251bGw9PT0ocD1lLmNvbm5lY3Rvci5zdGF0ZS5zdG9yYWdlTWFuYWdlcil8fHZvaWQgMD09PXB8fHAucGVyc2lzdENoYW5uZWxDb25maWcoe2NoYW5uZWxJZDprLGxvY2FsS2V5OkEsbGFzdEFjdGl2ZTpuLHZhbGlkVW50aWw6bitpcn0pfWlmKG4mJihudWxsPT14P3ZvaWQgMDp4LmNoYW5uZWxJZCkpcmV0dXJuKG51bGw9PT0obT1lLmNvbm5lY3Rvcil8fHZvaWQgMD09PW0/dm9pZCAwOm0uaXNDb25uZWN0ZWQoKSl8fChSYShgW1JlbW90ZUNvbm5lY3Rpb246IHN0YXJ0Q29ubmVjdGlvbigpXSByZWNvbm5lY3RpbmcgdG8gY2hhbm5lbCBpbml0aWFsQ2hlY2s9JHtufWAseCkseWllbGQgbnVsbD09PShnPWUuY29ubmVjdG9yKXx8dm9pZCAwPT09Zz92b2lkIDA6Zy5jb25uZWN0VG9DaGFubmVsKHtjaGFubmVsSWQ6a30pKSxQcm9taXNlLnJlc29sdmUoKTt4JiYhKG51bGw9PT0odj1lLmNvbm5lY3Rvcil8fHZvaWQgMD09PXY/dm9pZCAwOnYuaXNDb25uZWN0ZWQoKSkmJihSYShcIltSZW1vdGVDb25uZWN0aW9uOiBzdGFydENvbm5lY3Rpb24oKV0gcmVjb25uZWN0aW5nIHRvIGNoYW5uZWxcIix4KSx5aWVsZCBudWxsPT09KHk9ZS5jb25uZWN0b3IpfHx2b2lkIDA9PT15P3ZvaWQgMDp5LmNvbm5lY3RUb0NoYW5uZWwoe2NoYW5uZWxJZDprfSkpO2NvbnN0IFQ9KG51bGw9PT0oRT1lLnBsYXRmb3JtTWFuYWdlcil8fHZvaWQgMD09PUU/dm9pZCAwOkUuaXNTZWN1cmUoKSk/XCJcIjpcIiZ0PXFcIixJPWhjLnZlcnNpb24se2ljb25Vcmw6UCxuYW1lOlIsdXJsOk8sc2NoZW1lOk59PXQuZGFwcE1ldGFkYXRhfHx7fSxEPW51bGw9PT0oYj1lLnBsYXRmb3JtTWFuYWdlcil8fHZvaWQgMD09PWI/dm9pZCAwOmIuZ2V0UGxhdGZvcm1UeXBlKCk7bGV0IEw9XCJOL0FcIjtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYXRpb24mJndpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZT9MPXdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTp2b2lkIDAhPT1SP0w9Ujp2b2lkIDAhPT1PJiYoTD1PKTtjb25zdCBCPXt1cmw6bnVsbCE9Tz9POlwiXCIsdGl0bGU6bnVsbCE9Uj9SOlwiXCIsaWNvbjpQLHNjaGVtZTpudWxsIT1OP046XCJcIixhcGlWZXJzaW9uOkksZGFwcElkOkx8fE98fFwiTi9BXCIscGxhdGZvcm06bnVsbCE9RD9EOlwiXCIsc291cmNlOm51bGwhPT0odz10Ll9zb3VyY2UpJiZ2b2lkIDAhPT13P3c6XCJcIn0sSz1SYyhKU09OLnN0cmluZ2lmeShCKSk7bGV0IGo9YGNoYW5uZWxJZD0ke2t9JnY9MiZjb21tPSR7bnVsbCE9PShTPWUuY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZSkmJnZvaWQgMCE9PVM/UzpcIlwifSZwdWJrZXk9JHtNfSR7VH0mb3JpZ2luYXRvckluZm89JHtLfWA7aWYocil7ais9YCZycGM9JHtSYyhKU09OLnN0cmluZ2lmeShyKSl9YDtjb25zdCB0PWUuY29ubmVjdG9yLmdldFJQQ01ldGhvZFRyYWNrZXIoKTt0JiYodFtgJHtyLmlkfWBdPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxyKSx7aWQ6YCR7ci5pZH1gLHRpbWVzdGFtcDpEYXRlLm5vdygpfSkpfWNvbnN0ICQ9ZW5jb2RlVVJJKGopLEg9YCR7ZS51c2VEZWVwbGluaz9tYzpwY30/JHtqfWA7cmV0dXJuIGUucXJjb2RlTGluaz1ILGUuZGV2ZWxvcGVyTW9kZSYmUmEoYFtSZW1vdGVDb25uZWN0aW9uOiBzdGFydENvbm5lY3Rpb24oKV0gcXJjb2RlTGluaz0keyR9YCksQy5lbWl0KFwiZGlzcGxheV91cmlcIixIKSwobnVsbD09PShfPWUucGxhdGZvcm1NYW5hZ2VyKXx8dm9pZCAwPT09Xz92b2lkIDA6Xy5pc1NlY3VyZSgpKT8oeWllbGQgZnVuY3Rpb24oZSx0KXt2YXIgbixyO3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3QgaT1gJHtwY30/JHt0fWAsbz1gJHttY30/JHt0fWA7bnVsbD09PShyPW51bGw9PT0obj1lLnBsYXRmb3JtTWFuYWdlcil8fHZvaWQgMD09PW4/dm9pZCAwOm4ub3BlbkRlZXBsaW5rKXx8dm9pZCAwPT09cnx8ci5jYWxsKG4saSxvLFwiX3NlbGZcIil9KSl9KGUsJCksbmV3IFByb21pc2UoKCh0LG4pPT57dmFyIHIsaSxvOyhudWxsPT09KHI9ZS5jb25uZWN0b3IpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmlzQXV0aG9yaXplZCgpKT90KCk6KG51bGw9PT0oaT1lLmNvbm5lY3Rvcil8fHZvaWQgMD09PWl8fGkub25jZShleHBvcnRzLkV2ZW50VHlwZS5BVVRIT1JJWkVELCgoKT0+e3QoKX0pKSxudWxsPT09KG89ZS5jb25uZWN0b3IpfHx2b2lkIDA9PT1vfHxvLm9uY2UoZXhwb3J0cy5FdmVudFR5cGUuUkVKRUNURUQsKCgpPT57bihleHBvcnRzLkV2ZW50VHlwZS5SRUpFQ1RFRCl9KSkpfSkpKTpSZChlLHQsJCl9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5lcnJvcihcIltzdGFydENvbm5lY3Rpb25dIGVycm9yXCIsZSksZX19KSl9Y2xhc3MgRGR7Y29uc3RydWN0b3IoZSl7dmFyIHQsbixyO3RoaXMuc3RhdGU9e2Nvbm5lY3Rvcjp2b2lkIDAscXJjb2RlTGluazp2b2lkIDAsYW5hbHl0aWNzOnZvaWQgMCxkZXZlbG9wZXJNb2RlOiExLGF1dGhvcml6ZWQ6ITEscmVjb25uZWN0aW9uOiExLHByZWZlckRlc2t0b3A6ITEsZGVlcGxpbmtQcm90b2NvbDohMSxsaXN0ZW5lcnM6W10sY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZTp2b2lkIDAscGxhdGZvcm1NYW5hZ2VyOnZvaWQgMCxwZW5kaW5nTW9kYWw6dm9pZCAwLGluc3RhbGxNb2RhbDp2b2lkIDAsb3RwQW5zd2VyOnZvaWQgMH0sdGhpcy5vcHRpb25zPWU7Y29uc3QgaT0hMD09PShudWxsPT09KHQ9ZS5sb2dnaW5nKXx8dm9pZCAwPT09dD92b2lkIDA6dC5kZXZlbG9wZXJNb2RlKXx8ITA9PT0obnVsbD09PShuPWUubG9nZ2luZyl8fHZvaWQgMD09PW4/dm9pZCAwOm4uc2RrKTt0aGlzLnN0YXRlLmRldmVsb3Blck1vZGU9aSx0aGlzLnN0YXRlLmFuYWx5dGljcz1lLmFuYWx5dGljcyx0aGlzLnN0YXRlLnByZWZlckRlc2t0b3A9bnVsbCE9PShyPWUucHJlZmVyRGVza3RvcCkmJnZvaWQgMCE9PXImJnIsdGhpcy5zdGF0ZS51c2VEZWVwbGluaz1lLnNkay5vcHRpb25zLnVzZURlZXBsaW5rLHRoaXMuc3RhdGUuY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZT1lLmNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2UsdGhpcy5zdGF0ZS5wbGF0Zm9ybU1hbmFnZXI9ZS5wbGF0Zm9ybU1hbmFnZXIsZS5tb2RhbHMuaW5zdGFsbHx8KGUubW9kYWxzLmluc3RhbGw9QWQpLGUubW9kYWxzLm90cHx8KGUubW9kYWxzLm90cD1UZCl9c3RhcnRDb25uZWN0aW9uKGUpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIE5kKHRoaXMuc3RhdGUsdGhpcy5vcHRpb25zLGUpfSkpfWluaXRSZW1vdGVDb21tdW5pY2F0aW9uKHtzZGtJbnN0YW5jZTplfSl7dmFyIHQsbixyO3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3QgaT15aWVsZCBudWxsPT09KG49bnVsbD09PSh0PWUub3B0aW9ucy5zdG9yYWdlKXx8dm9pZCAwPT09dD92b2lkIDA6dC5zdG9yYWdlTWFuYWdlcil8fHZvaWQgMD09PW4/dm9pZCAwOm4uZ2V0UGVyc2lzdGVkQ2hhbm5lbENvbmZpZygpO2lmKCF0aGlzLm9wdGlvbnMuZWNpZXMpe2NvbnN0IGU9e3ByaXZhdGVLZXk6bnVsbD09aT92b2lkIDA6aS5sb2NhbEtleX07dGhpcy5vcHRpb25zLmVjaWVzPWV9SWQodGhpcy5zdGF0ZSx0aGlzLm9wdGlvbnMpLHlpZWxkIG51bGw9PT0ocj10aGlzLmdldENvbm5lY3RvcigpKXx8dm9pZCAwPT09cj92b2lkIDA6ci5pbml0RnJvbURhcHBTdG9yYWdlKCksT2QodGhpcy5zdGF0ZSx0aGlzLm9wdGlvbnMpfSkpfXNob3dBY3RpdmVNb2RhbCgpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdCxuLHIsaTtlLmF1dGhvcml6ZWQ/UmEoXCJbUmVtb3RlQ29ubmVjdGlvbjogc2hvd0FjdGl2ZU1vZGFsKCldIGFscmVhZHkgYXV0aG9yaXplZFwiKTplLnBlbmRpbmdNb2RhbD9udWxsPT09KG49KHQ9ZS5wZW5kaW5nTW9kYWwpLm1vdW50KXx8dm9pZCAwPT09bnx8bi5jYWxsKHQpOmUuaW5zdGFsbE1vZGFsJiYobnVsbD09PShpPShyPWUuaW5zdGFsbE1vZGFsKS5tb3VudCl8fHZvaWQgMD09PWl8fGkuY2FsbChyLGUucXJjb2RlTGlua3x8XCJcIikpfSh0aGlzLnN0YXRlKX1jbG9zZU1vZGFsKCl7dmFyIGUsdCxuLHI7bnVsbD09PSh0PW51bGw9PT0oZT10aGlzLnN0YXRlLnBlbmRpbmdNb2RhbCl8fHZvaWQgMD09PWU/dm9pZCAwOmUudW5tb3VudCl8fHZvaWQgMD09PXR8fHQuY2FsbChlKSxudWxsPT09KHI9bnVsbD09PShuPXRoaXMuc3RhdGUuaW5zdGFsbE1vZGFsKXx8dm9pZCAwPT09bj92b2lkIDA6bi51bm1vdW50KXx8dm9pZCAwPT09cnx8ci5jYWxsKG4sITEpfWdldFVuaXZlcnNhbExpbmsoKXtpZighdGhpcy5zdGF0ZS5xcmNvZGVMaW5rKXRocm93IG5ldyBFcnJvcihcImNvbm5lY3Rpb24gbm90IHN0YXJ0ZWQuIHJ1biBzdGFydENvbm5lY3Rpb24oKSBmaXJzdC5cIik7cmV0dXJuIHRoaXMuc3RhdGUucXJjb2RlTGlua31nZXRDaGFubmVsQ29uZmlnKCl7dmFyIGU7cmV0dXJuIG51bGw9PT0oZT10aGlzLnN0YXRlLmNvbm5lY3Rvcil8fHZvaWQgMD09PWU/dm9pZCAwOmUuZ2V0Q2hhbm5lbENvbmZpZygpfWdldEtleUluZm8oKXt2YXIgZTtyZXR1cm4gbnVsbD09PShlPXRoaXMuc3RhdGUuY29ubmVjdG9yKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5nZXRLZXlJbmZvKCl9Z2V0Q29ubmVjdG9yKCl7aWYoIXRoaXMuc3RhdGUuY29ubmVjdG9yKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgcmVtb3RlIGNvbm5lY3RvclwiKTtyZXR1cm4gdGhpcy5zdGF0ZS5jb25uZWN0b3J9Z2V0UGxhdGZvcm1NYW5hZ2VyKCl7aWYoIXRoaXMuc3RhdGUucGxhdGZvcm1NYW5hZ2VyKXRocm93IG5ldyBFcnJvcihcIlBsYXRmb3JtTWFuYWdlciBub3QgYXZhaWxhYmxlXCIpO3JldHVybiB0aGlzLnN0YXRlLnBsYXRmb3JtTWFuYWdlcn1pc0Nvbm5lY3RlZCgpe3ZhciBlO3JldHVybihudWxsPT09KGU9dGhpcy5zdGF0ZS5jb25uZWN0b3IpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmlzUmVhZHkoKSl8fCExfWlzQXV0aG9yaXplZCgpe3ZhciBlO3JldHVybihudWxsPT09KGU9dGhpcy5zdGF0ZS5jb25uZWN0b3IpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmlzQXV0aG9yaXplZCgpKXx8ITF9aXNQYXVzZWQoKXt2YXIgZTtyZXR1cm4gbnVsbD09PShlPXRoaXMuc3RhdGUuY29ubmVjdG9yKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5pc1BhdXNlZCgpfWRpc2Nvbm5lY3QoZSl7dmFyIHQsbixyO1JhKFwiW1JlbW90ZUNvbm5lY3Rpb246IGRpc2Nvbm5lY3QoKV1cIixlKSwobnVsbD09ZT92b2lkIDA6ZS50ZXJtaW5hdGUpJiYoYWMuZ2V0UHJvdmlkZXIoKS5oYW5kbGVEaXNjb25uZWN0KHt0ZXJtaW5hdGU6ITB9KSxudWxsPT09KG49bnVsbD09PSh0PXRoaXMuc3RhdGUucGVuZGluZ01vZGFsKXx8dm9pZCAwPT09dD92b2lkIDA6dC51bm1vdW50KXx8dm9pZCAwPT09bnx8bi5jYWxsKHQpLHRoaXMuc3RhdGUub3RwQW5zd2VyPXZvaWQgMCksbnVsbD09PShyPXRoaXMuc3RhdGUuY29ubmVjdG9yKXx8dm9pZCAwPT09cnx8ci5kaXNjb25uZWN0KGUpLGZ1bmN0aW9uKGUpe1JhKFwiW1JlbW90ZUNvbm5lY3Rpb246IGNsZWFudXBDb25uZWN0b3IoKV0gY2xlYW5pbmcgdXAgY29ubmVjdG9yXCIpLGUuY29ubmVjdG9yJiYoUGQoZSksZS5jb25uZWN0b3IuZGlzY29ubmVjdCh7dGVybWluYXRlOiEwfSkuY2F0Y2goKGU9PntSYShcIltSZW1vdGVDb25uZWN0aW9uOiBjbGVhbnVwQ29ubmVjdG9yKCldIGVycm9yIGRpc2Nvbm5lY3RpbmcgY29ubmVjdG9yXCIsZSl9KSkpfSh0aGlzLnN0YXRlKX19ZnVuY3Rpb24gTGQoZSl7dmFyIG4scixpLG8scyxhLGMsZCx1LGgsZjtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0e29wdGlvbnM6cH09ZTtpZihwLmxvZ2dpbmc9bnVsbCE9PShuPXAubG9nZ2luZykmJnZvaWQgMCE9PW4/bjp7fSxwLmNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2U9bnVsbCE9PShyPXAuY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZSkmJnZvaWQgMCE9PXI/cjpleHBvcnRzLkNvbW11bmljYXRpb25MYXllclByZWZlcmVuY2UuU09DS0VULHZvaWQgMCE9PXAuZW5hYmxlRGVidWcmJih0LmVuYWJsZShcIk1NX1NES1wiKSxjb25zb2xlLndhcm4oXCJlbmFibGVEZWJ1ZyBpcyByZW1vdmVkLiBQbGVhc2UgdXNlIGVuYWJsZUFuYWx5dGljcyBpbnN0ZWFkLlwiKSkscC5lbmFibGVBbmFseXRpY3M9bnVsbD09PShpPXAuZW5hYmxlQW5hbHl0aWNzKXx8dm9pZCAwPT09aXx8aSxwLmluamVjdFByb3ZpZGVyPW51bGw9PT0obz1wLmluamVjdFByb3ZpZGVyKXx8dm9pZCAwPT09b3x8byxwLnNob3VsZFNoaW1XZWIzPW51bGw9PT0ocz1wLnNob3VsZFNoaW1XZWIzKXx8dm9pZCAwPT09c3x8cyxwLmV4dGVuc2lvbk9ubHk9bnVsbD09PShhPXAuZXh0ZW5zaW9uT25seSl8fHZvaWQgMD09PWF8fGEscC51c2VEZWVwbGluaz1udWxsPT09KGM9cC51c2VEZWVwbGluayl8fHZvaWQgMD09PWN8fGMscC5zdG9yYWdlPW51bGwhPT0oZD1wLnN0b3JhZ2UpJiZ2b2lkIDAhPT1kP2Q6e2VuYWJsZWQ6ITB9LHAuaGVhZGxlc3Mpe3QoXCJbTWV0YU1hc2tTREs6IHBlcmZvcm1TREtJbml0aWFsaXphdGlvbigpXSBoZWFkbGVzcyBtb2RlIGVuYWJsZWRcIik7Y29uc3QgZT0oKT0+e30sbj17aW5zdGFsbDooKT0+KHttb3VudDplLHVubW91bnQ6ZX0pfSxyPXtpbnN0YWxsZXI6ZX07cC5tb2RhbHM9bixwLnVpPXJ9Y29uc3QgbT0hMD09PShudWxsPT09KHU9cC5sb2dnaW5nKXx8dm9pZCAwPT09dT92b2lkIDA6dS5kZXZlbG9wZXJNb2RlKTtlLmRlYnVnPShudWxsPT09KGg9cC5sb2dnaW5nKXx8dm9pZCAwPT09aD92b2lkIDA6aC5zZGspfHxtLFJhKFwiW01ldGFNYXNrU0RLOiBwZXJmb3JtU0RLSW5pdGlhbGl6YXRpb24oKV0gb3B0aW9uc1wiLGUub3B0aW9ucyk7Y29uc3QgZz1PYmplY3QuYXNzaWduKHt9LHAubG9nZ2luZyk7bSYmKGcuc2RrPSEwLGcuZWNpZXNMYXllcj0hMCxnLmtleUV4Y2hhbmdlTGF5ZXI9ITAsZy5yZW1vdGVMYXllcj0hMCxnLnNlcnZpY2VMYXllcj0hMCxnLnBsYWludGV4dD0hMCkseWllbGQgZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdHtvcHRpb25zOm59PWU7ZS5wbGF0Zm9ybU1hbmFnZXI9bmV3IGNjKHt1c2VEZWVwTGluazpudWxsIT09KHQ9bi51c2VEZWVwbGluaykmJnZvaWQgMCE9PXQmJnQscHJlZmVycmVkT3Blbkxpbms6bi5vcGVuRGVlcGxpbmssZGVidWc6ZS5kZWJ1Z30pfSkpfShlKSx5aWVsZCBmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLHMsYSxjLGQ7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdHtvcHRpb25zOmx9PWUsdT1udWxsPT09KHQ9ZS5wbGF0Zm9ybU1hbmFnZXIpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmdldFBsYXRmb3JtVHlwZSgpO2UuYW5hbHl0aWNzPW5ldyAkYyh7c2VydmVyVXJsOm51bGwhPT0obj1sLmNvbW11bmljYXRpb25TZXJ2ZXJVcmwpJiZ2b2lkIDAhPT1uP246bnIsZW5hYmxlZDpsLmVuYWJsZUFuYWx5dGljcyxvcmlnaW5hdG9ySW5mbzp7dXJsOm51bGwhPT0ocj1sLmRhcHBNZXRhZGF0YS51cmwpJiZ2b2lkIDAhPT1yP3I6XCJcIix0aXRsZTpudWxsIT09KGk9bC5kYXBwTWV0YWRhdGEubmFtZSkmJnZvaWQgMCE9PWk/aTpcIlwiLGRhcHBJZDpcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93fHx2b2lkIDA9PT13aW5kb3cubG9jYXRpb24/bnVsbCE9PShjPW51bGwhPT0ocz1udWxsPT09KG89bC5kYXBwTWV0YWRhdGEpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLm5hbWUpJiZ2b2lkIDAhPT1zP3M6bnVsbD09PShhPWwuZGFwcE1ldGFkYXRhKXx8dm9pZCAwPT09YT92b2lkIDA6YS51cmwpJiZ2b2lkIDAhPT1jP2M6XCJOL0FcIjp3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUscGxhdGZvcm06bnVsbCE9dT91OlwiXCIsc291cmNlOm51bGwhPT0oZD1sLl9zb3VyY2UpJiZ2b2lkIDAhPT1kP2Q6XCJcIn19KX0pKX0oZSkseWllbGQgZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdHtvcHRpb25zOm59PWU7ITAhPT0obnVsbD09PSh0PW4uc3RvcmFnZSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuZW5hYmxlZCl8fG4uc3RvcmFnZS5zdG9yYWdlTWFuYWdlcnx8KG4uc3RvcmFnZS5zdG9yYWdlTWFuYWdlcj15aWVsZCBkYyhuLnN0b3JhZ2UpKX0pKX0oZSkseWllbGQgZnVuY3Rpb24oZSl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdHtvcHRpb25zOnR9PWUsbj0vXihodHRwfGh0dHBzKTpcXC9cXC9bXlxcc10qJC87aWYodC5kYXBwTWV0YWRhdGEpe3QuZGFwcE1ldGFkYXRhLmljb25VcmwmJiFuLnRlc3QodC5kYXBwTWV0YWRhdGEuaWNvblVybCkmJihjb25zb2xlLndhcm4oXCJJbnZhbGlkIGRhcHBNZXRhZGF0YS5pY29uVXJsOiBVUkwgbXVzdCBzdGFydCB3aXRoIGh0dHA6Ly8gb3IgaHR0cHM6Ly9cIiksdC5kYXBwTWV0YWRhdGEuaWNvblVybD12b2lkIDApLHQuZGFwcE1ldGFkYXRhLmJhc2U2NEljb24mJnQuZGFwcE1ldGFkYXRhLmJhc2U2NEljb24ubGVuZ3RoPlVjJiYoY29uc29sZS53YXJuKFwiSW52YWxpZCBkYXBwTWV0YWRhdGEuYmFzZTY0SWNvbjogQmFzZTY0LWVuY29kZWQgaWNvbiBzdHJpbmcgbGVuZ3RoIG11c3QgYmUgbGVzcyB0aGFuIDE2MzQwMCBjaGFyYWN0ZXJzXCIpLHQuZGFwcE1ldGFkYXRhLmJhc2U2NEljb249dm9pZCAwKSx0LmRhcHBNZXRhZGF0YS51cmwmJiFuLnRlc3QodC5kYXBwTWV0YWRhdGEudXJsKSYmY29uc29sZS53YXJuKFwiSW52YWxpZCBkYXBwTWV0YWRhdGEudXJsOiBVUkwgbXVzdCBzdGFydCB3aXRoIGh0dHA6Ly8gb3IgaHR0cHM6Ly9cIik7Y29uc3QgZT1IYygpO2lmKGUmJiF0LmRhcHBNZXRhZGF0YS5pY29uVXJsJiYhdC5kYXBwTWV0YWRhdGEuYmFzZTY0SWNvbil7Y29uc3Qgbj1gJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fSR7ZX1gO3QuZGFwcE1ldGFkYXRhLmljb25Vcmw9bn19ZS5kYXBwTWV0YWRhdGE9dC5kYXBwTWV0YWRhdGF9KSl9KGUpLHlpZWxkIFZjKGUpLHlpZWxkIEdjKGUpO2NvbnN0e21ldGFtYXNrQnJvd3NlckV4dGVuc2lvbjp2LHByZWZlckV4dGVuc2lvbjp5LHNob3VsZFJldHVybjpFfT15aWVsZCBmdW5jdGlvbihlKXt2YXIgdCxuLHIsaTtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0e29wdGlvbnM6b309ZTtsZXQgcyxhPSExLGM9ITE7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmV0aGVyZXVtJiYhKG51bGw9PT0odD1lLnBsYXRmb3JtTWFuYWdlcil8fHZvaWQgMD09PXQ/dm9pZCAwOnQuaXNNZXRhTWFza01vYmlsZVdlYlZpZXcoKSkpe2E9XCJleHRlbnNpb25cIj09PWxvY2FsU3RvcmFnZS5nZXRJdGVtKF9jKTt0cnl7cz15aWVsZCBXYyh7bXVzdEJlTWV0YU1hc2s6ITAsc2RrSW5zdGFuY2U6ZX0pLHdpbmRvdy5leHRlbnNpb249cyxzLm9uKGtjLkNIQUlOX0NIQU5HRUQsKHQ9PntSYShgW01ldGFNYXNrU0RLOiBzZXR1cEV4dGVuc2lvblByZWZlcmVuY2VzKCldIFBST1BBR0FURSBjaGFpbkNoYW5nZWQgY2hhaW5JZD0ke3R9YCksQm9vbGVhbihlLnNka1Byb3ZpZGVyKSYmZS5nZXRNb2JpbGVQcm92aWRlcigpLmVtaXQoa2MuQ0hBSU5fQ0hBTkdFRCx0KX0pKSxzLm9uKGtjLkFDQ09VTlRTX0NIQU5HRUQsKHQ9PmwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt2YXIgbjtSYShgW01ldGFNYXNrU0RLOiBzZXR1cEV4dGVuc2lvblByZWZlcmVuY2VzKCldIFBST1BBR0FURSBhY2NvdW50c0NoYW5nZWQgYWNjb3VudHM9JHt0fWApO2NvbnN0IHI9Qm9vbGVhbihlLnNka1Byb3ZpZGVyKSxpPUJvb2xlYW4oZS5leHRlbnNpb25BY3RpdmUpO2lmKHImJmUuZ2V0TW9iaWxlUHJvdmlkZXIoKS5lbWl0KGtjLkFDQ09VTlRTX0NIQU5HRUQsdCksaSYmMD09PShudWxsPT10P3ZvaWQgMDp0Lmxlbmd0aCkmJjA9PT0oeWllbGQgbnVsbD09PShuPWUuZ2V0UHJvdmlkZXIoKSl8fHZvaWQgMD09PW4/dm9pZCAwOm4ucmVxdWVzdCh7bWV0aG9kOnljLldBTExFVF9HRVRQRVJNSVNTSU9OUyxwYXJhbXM6W119KSkubGVuZ3RoKXRyeXt5aWVsZCBlLnRlcm1pbmF0ZSgpfWNhdGNoKGUpe1JhKFwiW01ldGFNYXNrU0RLOiBzZXR1cEV4dGVuc2lvblByZWZlcmVuY2VzKCldIGVycm9yIHRlcm1pbmF0aW5nIG9uIHBlcm1pc3Npb25zIHJldm9rZWRcIixlKX19KSkpKSxzLm9uKGtjLkRJU0NPTk5FQ1QsKHQ9PntSYShgW01ldGFNYXNrU0RLOiBzZXR1cEV4dGVuc2lvblByZWZlcmVuY2VzKCldIFBST1BBR0FURSBkaXNjb25uZWN0IGVycm9yPSR7dH1gKSxCb29sZWFuKGUuc2RrUHJvdmlkZXIpJiZlLmdldE1vYmlsZVByb3ZpZGVyKCkuZW1pdChrYy5ESVNDT05ORUNULHQpfSkpLHMub24oa2MuQ09OTkVDVCwodD0+e1JhKGBbTWV0YU1hc2tTREs6IHNldHVwRXh0ZW5zaW9uUHJlZmVyZW5jZXMoKV0gUFJPUEFHQVRFIGNvbm5lY3QgYXJncz0ke3R9YCksQm9vbGVhbihlLnNka1Byb3ZpZGVyKSYmZS5nZXRNb2JpbGVQcm92aWRlcigpLmVtaXQoa2MuQ09OTkVDVCx0KX0pKSxzLm9uKGtjLkNPTk5FQ1RFRCwodD0+e1JhKFwiW01ldGFNYXNrU0RLOiBzZXR1cEV4dGVuc2lvblByZWZlcmVuY2VzKCldIFBST1BBR0FURSBjb25uZWN0ZWRcIix0KSxCb29sZWFuKGUuc2RrUHJvdmlkZXIpJiZlLmdldE1vYmlsZVByb3ZpZGVyKCkuZW1pdChrYy5DT05ORUNURUQsdCl9KSl9Y2F0Y2goZSl7d2luZG93LmV4dGVuc2lvbj12b2lkIDB9fWVsc2UobnVsbD09PShuPWUucGxhdGZvcm1NYW5hZ2VyKXx8dm9pZCAwPT09bj92b2lkIDA6bi5pc01ldGFNYXNrTW9iaWxlV2ViVmlldygpKSYmKG51bGw9PT0ocj1lLmFuYWx5dGljcyl8fHZvaWQgMD09PXJ8fHIuc2VuZCh7ZXZlbnQ6bHIuU0RLX1VTRV9JTkFQUF9CUk9XU0VSfSksZS5hY3RpdmVQcm92aWRlcj1xYyh7cHJvdmlkZXI6d2luZG93LmV0aGVyZXVtLHNka0luc3RhbmNlOmV9KSxlLl9pbml0aWFsaXplZD0hMCxjPSEwKTtyZXR1cm4gcyYmby5leHRlbnNpb25Pbmx5JiYoUmEoXCJbTWV0YU1hc2tTREs6IHNldHVwRXh0ZW5zaW9uUHJlZmVyZW5jZXMoKV0gRVhURU5TSU9OIE9OTFkgLS0tIHByZXZlbnQgc2RrIGluaXRpYWxpemF0aW9uXCIpLG51bGw9PT0oaT1lLmFuYWx5dGljcyl8fHZvaWQgMD09PWl8fGkuc2VuZCh7ZXZlbnQ6bHIuU0RLX1VTRV9FWFRFTlNJT059KSxlLmFjdGl2ZVByb3ZpZGVyPXMsZS5leHRlbnNpb25BY3RpdmU9ITAsZS5leHRlbnNpb249cyxlLl9pbml0aWFsaXplZD0hMCxjPSEwKSx7cHJlZmVyRXh0ZW5zaW9uOmEsc2hvdWxkUmV0dXJuOmMsbWV0YW1hc2tCcm93c2VyRXh0ZW5zaW9uOnN9fSkpfShlKTtpZihFKVJhKFwiW01ldGFNYXNrU0RLOiBwZXJmb3JtU0RLSW5pdGlhbGl6YXRpb24oKV0gc2hvdWxkUmV0dXJuPXRydWUgLS0tIHByZXZlbnQgc2RrIGluaXRpYWxpemF0aW9uXCIpO2Vsc2V7eWllbGQgZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxzO3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3R7b3B0aW9uczphfT1lLGM9T2JqZWN0LmFzc2lnbih7fSxhLmxvZ2dpbmcpO2UucmVtb3RlQ29ubmVjdGlvbj1uZXcgRGQoe3ByZWZlckRlc2t0b3A6bnVsbCE9PShuPWEucHJlZmVyRGVza3RvcCkmJnZvaWQgMCE9PW4mJm4sY29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZTpudWxsIT09KHI9YS5jb21tdW5pY2F0aW9uTGF5ZXJQcmVmZXJlbmNlKSYmdm9pZCAwIT09cj9yOmV4cG9ydHMuQ29tbXVuaWNhdGlvbkxheWVyUHJlZmVyZW5jZS5TT0NLRVQsYW5hbHl0aWNzOmUuYW5hbHl0aWNzLGRhcHBNZXRhZGF0YTphLmRhcHBNZXRhZGF0YSxfc291cmNlOmEuX3NvdXJjZSxlbmFibGVBbmFseXRpY3M6bnVsbD09PShpPWEuZW5hYmxlQW5hbHl0aWNzKXx8dm9pZCAwPT09aXx8aSx0aW1lcjphLnRpbWVyLHNkazplLHBsYXRmb3JtTWFuYWdlcjplLnBsYXRmb3JtTWFuYWdlcix0cmFuc3BvcnRzOmEudHJhbnNwb3J0cyxjb21tdW5pY2F0aW9uU2VydmVyVXJsOmEuY29tbXVuaWNhdGlvblNlcnZlclVybCxzdG9yYWdlOm51bGwhPT0obz1hLnN0b3JhZ2UpJiZ2b2lkIDAhPT1vP286e2VuYWJsZWQ6ITB9LGdldE1ldGFNYXNrSW5zdGFsbGVyOigpPT57aWYoIWUuaW5zdGFsbGVyKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgU0RLIHN0YXR1cyAtLSBpbnN0YWxsZXIgbm90IGluaXRpYWxpemVkXCIpO3JldHVybiBlLmluc3RhbGxlcn0sbG9nZ2luZzpjLGNvbm5lY3RXaXRoRXh0ZW5zaW9uUHJvdmlkZXI6dm9pZCAwPT09dD92b2lkIDA6KCk9PlBjKGUpLG1vZGFsczpPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sYS5tb2RhbHMpLHtvblBlbmRpbmdNb2RhbERpc2Nvbm5lY3Q6ZS50ZXJtaW5hdGUuYmluZChlKX0pfSkseWllbGQgZS5yZW1vdGVDb25uZWN0aW9uLmluaXRSZW1vdGVDb21tdW5pY2F0aW9uKHtzZGtJbnN0YW5jZTplfSksZS5pbnN0YWxsZXI9bmV3IGFkKHtyZW1vdGU6ZS5yZW1vdGVDb25uZWN0aW9uLHByZWZlckRlc2t0b3A6bnVsbCE9PShzPWEucHJlZmVyRGVza3RvcCkmJnZvaWQgMCE9PXMmJnMscGxhdGZvcm1NYW5hZ2VyOmUucGxhdGZvcm1NYW5hZ2VyLGRlYnVnOmUuZGVidWd9KX0pKX0oZSx2KSx5aWVsZCBLYyhlKSx5aWVsZCBmdW5jdGlvbihlLHQpe3ZhciBuLHI7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdHtvcHRpb25zOml9PWU7dD8oUmEoXCJbTWV0YU1hc2tTREs6IGhhbmRsZUF1dG9BbmRFeHRlbnNpb25Db25uZWN0aW9ucygpXSBwcmVmZXJFeHRlbnNpb24gaXMgZGV0ZWN0ZWQgLS0gY29ubmVjdCB3aXRoIGl0LlwiKSxudWxsPT09KG49ZS5hbmFseXRpY3MpfHx2b2lkIDA9PT1ufHxuLnNlbmQoe2V2ZW50OmxyLlNES19FWFRFTlNJT05fVVRJTElaRUR9KSxQYyhlKS5jYXRjaCgoZT0+e2NvbnNvbGUud2FybihcIkNhbid0IGNvbm5lY3Qgd2l0aCBNZXRhTWFzayBleHRlbnNpb24uLi5cIixlKSxsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShfYyl9KSkpOmkuY2hlY2tJbnN0YWxsYXRpb25JbW1lZGlhdGVseSYmKChudWxsPT09KHI9ZS5wbGF0Zm9ybU1hbmFnZXIpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmlzRGVza3RvcFdlYigpKT8oUmEoXCJbTWV0YU1hc2tTREs6IGhhbmRsZUF1dG9BbmRFeHRlbnNpb25Db25uZWN0aW9ucygpXSBjaGVja0luc3RhbGxhdGlvbkltbWVkaWF0ZWx5XCIpLGUuY29ubmVjdCgpLmNhdGNoKChlPT57UmEoYFtNZXRhTWFza1NESzogaGFuZGxlQXV0b0FuZEV4dGVuc2lvbkNvbm5lY3Rpb25zKCldIGNoZWNrSW5zdGFsbGF0aW9uSW1tZWRpYXRlbHkgLS0tIElHTk9SRUQgLS0tIGVycm9yIG9uIGF1dG9jb25uZWN0IF9lcnI9JHtlfWApfSkpKTpjb25zb2xlLndhcm4oXCJbaGFuZGxlQXV0b0FuZEV4dGVuc2lvbkNvbm5lY3Rpb25zKCldIGNoZWNrSW5zdGFsbGF0aW9uSW1tZWRpYXRlbHkgLS0tIElHTk9SRUQgLS0tIG9ubHkgZm9yIHdlYiBkZXNrdG9wXCIpKSxlLl9pbml0aWFsaXplZD0hMH0pKX0oZSx5KTt0cnl7eWllbGQgbnVsbD09PShmPWUucmVtb3RlQ29ubmVjdGlvbil8fHZvaWQgMD09PWY/dm9pZCAwOmYuc3RhcnRDb25uZWN0aW9uKHtpbml0aWFsQ2hlY2s6ITB9KX1jYXRjaChlKXtjb25zb2xlLmVycm9yKFwiW01ldGFNYXNrU0RLOiBzZXR1cFJlbW90ZUNvbm5lY3Rpb25BbmRJbnN0YWxsZXIoKV0gRXJyb3Igd2hpbGUgY2hlY2tpbmcgaW5zdGFsbGF0aW9uXCIsZSl9ZS5lbWl0KHNjLlByb3ZpZGVyVXBkYXRlLGV4cG9ydHMuUFJPVklERVJfVVBEQVRFX1RZUEUuSU5JVElBTElaRUQpfX0pKX1jbGFzcyBCZCBleHRlbmRzIGl7Y29uc3RydWN0b3IoZT17c3RvcmFnZTp7ZW5hYmxlZDohMH0saW5qZWN0UHJvdmlkZXI6ITAsZm9yY2VJbmplY3RQcm92aWRlcjohMSxlbmFibGVBbmFseXRpY3M6ITAsc2hvdWxkU2hpbVdlYjM6ITAsdXNlRGVlcGxpbms6ITAsZXh0ZW5zaW9uT25seTohMCxoZWFkbGVzczohMSxkYXBwTWV0YWRhdGE6e25hbWU6XCJcIix1cmw6XCJcIixpY29uVXJsOlwiXCJ9LF9zb3VyY2U6ZmMsaTE4bk9wdGlvbnM6e2VuYWJsZWQ6ITF9fSl7dmFyIG4scixpO3N1cGVyKCksdGhpcy5leHRlbnNpb25BY3RpdmU9ITEsdGhpcy5faW5pdGlhbGl6ZWQ9ITEsdGhpcy5zZGtJbml0UHJvbWlzZT12b2lkIDAsdGhpcy5kZWJ1Zz0hMSx0aGlzLnJlYWRvbmx5UlBDQ2FsbHM9ITEsdGhpcy5hdmFpbGFibGVMYW5ndWFnZXM9W1wiZW5cIl0sdC5kaXNhYmxlKCk7Y29uc3Qgbz0hMD09PShudWxsPT09KG49ZS5sb2dnaW5nKXx8dm9pZCAwPT09bj92b2lkIDA6bi5kZXZlbG9wZXJNb2RlKTtpZigoKG51bGw9PT0ocj1lLmxvZ2dpbmcpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnNkayl8fG8pJiZ0LmVuYWJsZShcIk1NX1NES1wiKSxSYShcIltNZXRhTWFza1NESzogY29uc3RydWN0b3IoKV06IGJlZ2luLlwiKSx0aGlzLnNldE1heExpc3RlbmVycyg1MCksIShudWxsPT09KGk9ZS5kYXBwTWV0YWRhdGEpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLnVybCkpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwcm92aWRlIGRBcHBNZXRhZGF0YSB1cmxcIik7ZS5kYXBwTWV0YWRhdGE9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGUuZGFwcE1ldGFkYXRhKSx7dXJsOmAke3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbH0vLyR7d2luZG93LmxvY2F0aW9uLmhvc3R9YH0pfXRoaXMub3B0aW9ucz1lLHRoaXMub3B0aW9ucy5fc291cmNlfHwoZS5fc291cmNlPWZjKSx0aGlzLmluaXQoKS50aGVuKCgoKT0+e1JhKFwiW01ldGFNYXNrU0RLOiBjb25zdHJ1Y3RvcigpXTogaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5LlwiKSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93Lm1tc2RrPXRoaXMpfSkpLmNhdGNoKChlPT57Y29uc29sZS5lcnJvcihcIltNZXRhTWFza1NESzogY29uc3RydWN0b3IoKV0gZXJyb3IgZHVyaW5nIGluaXRpYWxpemF0aW9uXCIsZSl9KSl9aW5pdCgpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKG51bGw9PT0odD13aW5kb3cubW1zZGspfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmlzSW5pdGlhbGl6ZWQoKSkpcmV0dXJuIFJhKFwiW01ldGFNYXNrU0RLOiBpbml0aWFsaXplTWV0YU1hc2tTREsoKV0gYWxyZWFkeSBpbml0aWFsaXplZFwiKSxQcm9taXNlLnJlc29sdmUod2luZG93Lm1tc2RrKTtpZihlLl9pbml0aWFsaXplZClyZXR1cm4gUmEoXCJbTWV0YU1hc2tTREs6IGluaXRpYWxpemVNZXRhTWFza1NESygpXSBhbHJlYWR5IGluaXRpYWxpemVkXCIpLGUuc2RrSW5pdFByb21pc2U7aWYoZS5zZGtJbml0UHJvbWlzZSlyZXR1cm4gUmEoXCJbTWV0YU1hc2tTREs6IGluaXRpYWxpemVNZXRhTWFza1NESygpXSBhbHJlYWR5IGluaXRpYWxpemluZ1wiKSxlLnNka0luaXRQcm9taXNlO3RyeXtlLnNka0luaXRQcm9taXNlPUxkKGUpLHlpZWxkIGUuc2RrSW5pdFByb21pc2V9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5lcnJvcihlKSxlfXJldHVybiBlLnNka0luaXRQcm9taXNlfSkpfSh0aGlzKX0pKX1pc0V4dGVuc2lvbkFjdGl2ZSgpe3JldHVybiB0aGlzLmV4dGVuc2lvbkFjdGl2ZX1jaGVja0V4dGVuc2lvbkF2YWlsYWJpbGl0eSgpe3ZhciBlO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJkJvb2xlYW4obnVsbD09PShlPXdpbmRvdy5ldGhlcmV1bSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuaXNNZXRhTWFzayl9Y29ubmVjdCgpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7aWYoZS5faW5pdGlhbGl6ZWR8fChSYShcIltNZXRhTWFza1NESzogY29ubmVjdCgpXSBwcm92aWRlciBub3QgcmVhZHkgLS0gd2FpdCBmb3IgaW5pdCgpXCIpLHlpZWxkIGUuaW5pdCgpKSxSYShgW01ldGFNYXNrU0RLOiBjb25uZWN0KCldIGlzRXh0ZW5zaW9uQWN0aXZlPSR7ZS5pc0V4dGVuc2lvbkFjdGl2ZSgpfSBhY3RpdmVQcm92aWRlcmAsZS5hY3RpdmVQcm92aWRlciksIWUuYWN0aXZlUHJvdmlkZXIpdGhyb3cgbmV3IEVycm9yKFwiU0RLIHN0YXRlIGludmFsaWQgLS0gdW5kZWZpbmVkIHByb3ZpZGVyXCIpO2NvbnN0IHQ9ZS5hY3RpdmVQcm92aWRlci5nZXRTZWxlY3RlZEFkZHJlc3MoKTtyZXR1cm4gdD9bdF06ZS5hY3RpdmVQcm92aWRlci5yZXF1ZXN0KHttZXRob2Q6eWMuRVRIX1JFUVVFU1RBQ0NPVU5UUyxwYXJhbXM6W119KX0pKX0odGhpcyl9KSl9Y29ubmVjdEFuZFNpZ24oe21zZzplfSl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtyZXR1cm4gSWMoe2luc3RhbmNlOnRoaXMsbXNnOmV9KX0pKX1jb25uZWN0V2l0aChlKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiBmdW5jdGlvbih7aW5zdGFuY2U6ZSxycGM6dH0pe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7aWYoZS5faW5pdGlhbGl6ZWR8fChSYShcIltNZXRhTWFza1NESzogY29ubmVjdFdpdGgoKV0gcHJvdmlkZXIgbm90IHJlYWR5IC0tIHdhaXQgZm9yIGluaXQoKVwiKSx5aWVsZCBlLmluaXQoKSksUmEoYFtNZXRhTWFza1NESzogY29ubmVjdFdpdGgoKV0gbWV0aG9kOiAke3QubWV0aG9kfSBycGM9JHt0fWApLCFlLmFjdGl2ZVByb3ZpZGVyKXRocm93IG5ldyBFcnJvcihcIlNESyBzdGF0ZSBpbnZhbGlkIC0tIHVuZGVmaW5lZCBwcm92aWRlclwiKTtyZXR1cm4gZS5hY3RpdmVQcm92aWRlci5yZXF1ZXN0KHttZXRob2Q6eWMuTUVUQU1BU0tfQ09OTkVDVFdJVEgscGFyYW1zOlt0XX0pfSkpfSh7aW5zdGFuY2U6dGhpcyxycGM6ZX0pfSkpfXJlc3VtZSgpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdCxuLHI7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtpZighKG51bGw9PT0obj1udWxsPT09KHQ9ZS5yZW1vdGVDb25uZWN0aW9uKXx8dm9pZCAwPT09dD92b2lkIDA6dC5nZXRDb25uZWN0b3IoKSl8fHZvaWQgMD09PW4/dm9pZCAwOm4uaXNSZWFkeSgpKSlyZXR1cm4gUmEoXCJbTWV0YU1hc2tTREs6IHJlc3VtZSgpXSBjaGFubmVsIGlzIG5vdCByZWFkeSAtLSBzdGFydGluZyBjb25uZWN0aW9uXCIpLHZvaWQobnVsbD09PShyPWUucmVtb3RlQ29ubmVjdGlvbil8fHZvaWQgMD09PXJ8fHIuc3RhcnRDb25uZWN0aW9uKCkpO1JhKFwiW01ldGFNYXNrU0RLOiByZXN1bWUoKV0gY2hhbm5lbCBpcyByZWFkeVwiKX0pKX0odGhpcyl9ZGlzY29ubmVjdCgpe3JldHVybiBjb25zb2xlLndhcm4oXCJNZXRhTWFza1NESy5kaXNjb25uZWN0KCkgaXMgZGVwcmVjYXRlZCwgdXNlIHRlcm1pbmF0ZSgpXCIpLHRoaXMudGVybWluYXRlKCl9aXNBdXRob3JpemVkKCl7dmFyIGU7bnVsbD09PShlPXRoaXMucmVtb3RlQ29ubmVjdGlvbil8fHZvaWQgMD09PWV8fGUuaXNBdXRob3JpemVkKCl9dGVybWluYXRlKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0LG4scjtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2lmKCEobnVsbD09PSh0PWUucGxhdGZvcm1NYW5hZ2VyKXx8dm9pZCAwPT09dD92b2lkIDA6dC5pc01ldGFNYXNrTW9iaWxlV2ViVmlldygpKSl7aWYoVGMmJih3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oX2MpLHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh4Yyksd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKENjKSksZS5leHRlbnNpb25BY3RpdmUpe3RyeXt5aWVsZCBudWxsPT09KG49ZS5hY3RpdmVQcm92aWRlcil8fHZvaWQgMD09PW4/dm9pZCAwOm4ucmVxdWVzdCh7bWV0aG9kOnljLldBTExFVF9SRVZPS0VQRVJNSVNTSU9OUyxwYXJhbXM6W3tldGhfYWNjb3VudHM6e319XX0pfWNhdGNoKGUpe1JhKFwiW01ldGFNYXNrU0RLOiB0ZXJtaW5hdGUoKV0gZXJyb3IgcmV2b2tpbmcgcGVybWlzc2lvbnNcIixlKX1yZXR1cm4gZS5vcHRpb25zLmV4dGVuc2lvbk9ubHk/KGUuZW1pdChzYy5Qcm92aWRlclVwZGF0ZSxleHBvcnRzLlBST1ZJREVSX1VQREFURV9UWVBFLlRFUk1JTkFURSksdm9pZCBSYShcIltNZXRhTWFza1NESzogdGVybWluYXRlKCldIGV4dGVuc2lvbk9ubHkgLS0tIHByZXZlbnQgc3dpdGNoaW5nIHByb3ZpZGVyc1wiKSk6KGUuYWN0aXZlUHJvdmlkZXI9ZS5zZGtQcm92aWRlcix3aW5kb3cuZXRoZXJldW09ZS5hY3RpdmVQcm92aWRlcixlLmV4dGVuc2lvbkFjdGl2ZT0hMSx2b2lkIGUuZW1pdChzYy5Qcm92aWRlclVwZGF0ZSxleHBvcnRzLlBST1ZJREVSX1VQREFURV9UWVBFLlRFUk1JTkFURSkpfWUuZW1pdChzYy5Qcm92aWRlclVwZGF0ZSxleHBvcnRzLlBST1ZJREVSX1VQREFURV9UWVBFLlRFUk1JTkFURSksUmEoYFtNZXRhTWFza1NESzogdGVybWluYXRlKCldIHJlbW90ZUNvbm5lY3Rpb249JHtlLnJlbW90ZUNvbm5lY3Rpb259YCksbnVsbD09PShyPWUucmVtb3RlQ29ubmVjdGlvbil8fHZvaWQgMD09PXJ8fHIuZGlzY29ubmVjdCh7dGVybWluYXRlOiEwLHNlbmRNZXNzYWdlOiEwfSl9fSkpfSh0aGlzKX1pc0luaXRpYWxpemVkKCl7cmV0dXJuIHRoaXMuX2luaXRpYWxpemVkfXNldFJlYWRPbmx5UlBDQ2FsbHMoZSl7dGhpcy5yZWFkb25seVJQQ0NhbGxzPWV9aGFzUmVhZE9ubHlSUENDYWxscygpe3JldHVybiB0aGlzLnJlYWRvbmx5UlBDQ2FsbHN9Z2V0UHJvdmlkZXIoKXtpZih0aGlzLmFjdGl2ZVByb3ZpZGVyKXJldHVybiB0aGlzLmFjdGl2ZVByb3ZpZGVyO2NvbnNvbGUud2FybihcIk1ldGFNYXNrU0RLOiBObyBhY3RpdmUgcHJvdmlkZXIgZm91bmRcIil9Z2V0TW9iaWxlUHJvdmlkZXIoKXtpZighdGhpcy5zZGtQcm92aWRlcil0aHJvdyBuZXcgRXJyb3IoXCJTREsgc3RhdGUgaW52YWxpZCAtLSB1bmRlZmluZWQgbW9iaWxlIHByb3ZpZGVyXCIpO3JldHVybiB0aGlzLnNka1Byb3ZpZGVyfWdldFVuaXZlcnNhbExpbmsoKXt2YXIgZTtjb25zdCB0PW51bGw9PT0oZT10aGlzLnJlbW90ZUNvbm5lY3Rpb24pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmdldFVuaXZlcnNhbExpbmsoKTtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJObyBVbml2ZXJzYWwgTGluayBhdmFpbGFibGUsIHBsZWFzZSBjYWxsIGV0aF9yZXF1ZXN0QWNjb3VudHMgZmlyc3QuXCIpO3JldHVybiB0fWdldENoYW5uZWxJZCgpe3ZhciBlLHQ7cmV0dXJuIG51bGw9PT0odD1udWxsPT09KGU9dGhpcy5yZW1vdGVDb25uZWN0aW9uKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5nZXRDaGFubmVsQ29uZmlnKCkpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmNoYW5uZWxJZH1nZXRSUENIaXN0b3J5KCl7dmFyIGUsdDtyZXR1cm4gbnVsbD09PSh0PW51bGw9PT0oZT10aGlzLnJlbW90ZUNvbm5lY3Rpb24pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmdldENvbm5lY3RvcigpKXx8dm9pZCAwPT09dD92b2lkIDA6dC5nZXRSUENNZXRob2RUcmFja2VyKCl9Z2V0VmVyc2lvbigpe3JldHVybiBoYy52ZXJzaW9ufWdldFdhbGxldFN0YXR1cygpe3ZhciBlLHQ7cmV0dXJuIG51bGw9PT0odD1udWxsPT09KGU9dGhpcy5yZW1vdGVDb25uZWN0aW9uKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5nZXRDb25uZWN0b3IoKSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuZ2V0Q29ubmVjdGlvblN0YXR1cygpfV9nZXRDaGFubmVsQ29uZmlnKCl7dmFyIGU7cmV0dXJuIG51bGw9PT0oZT10aGlzLnJlbW90ZUNvbm5lY3Rpb24pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmdldENoYW5uZWxDb25maWcoKX1fcGluZygpe3ZhciBlLHQ7bnVsbD09PSh0PW51bGw9PT0oZT10aGlzLnJlbW90ZUNvbm5lY3Rpb24pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmdldENvbm5lY3RvcigpKXx8dm9pZCAwPT09dHx8dC5waW5nKCl9X2tleUNoZWNrKCl7dmFyIGUsdDtudWxsPT09KHQ9bnVsbD09PShlPXRoaXMucmVtb3RlQ29ubmVjdGlvbil8fHZvaWQgMD09PWU/dm9pZCAwOmUuZ2V0Q29ubmVjdG9yKCkpfHx2b2lkIDA9PT10fHx0LmtleUNoZWNrKCl9X2dldFNlcnZpY2VTdGF0dXMoKXt2YXIgZSx0O3JldHVybiBudWxsPT09KHQ9bnVsbD09PShlPXRoaXMucmVtb3RlQ29ubmVjdGlvbil8fHZvaWQgMD09PWU/dm9pZCAwOmUuZ2V0Q29ubmVjdG9yKCkpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmdldFNlcnZpY2VTdGF0dXMoKX1fZ2V0UmVtb3RlQ29ubmVjdGlvbigpe3JldHVybiB0aGlzLnJlbW90ZUNvbm5lY3Rpb259X2dldERhcHBNZXRhZGF0YSgpe3JldHVybiB0aGlzLmRhcHBNZXRhZGF0YX1fZ2V0S2V5SW5mbygpe3ZhciBlO3JldHVybiBudWxsPT09KGU9dGhpcy5yZW1vdGVDb25uZWN0aW9uKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5nZXRLZXlJbmZvKCl9X3Jlc2V0S2V5cygpe3ZhciBlLHQ7bnVsbD09PSh0PW51bGw9PT0oZT10aGlzLnJlbW90ZUNvbm5lY3Rpb24pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmdldENvbm5lY3RvcigpKXx8dm9pZCAwPT09dHx8dC5yZXNldEtleXMoKX1fZ2V0Q29ubmVjdGlvbigpe3JldHVybiB0aGlzLnJlbW90ZUNvbm5lY3Rpb259ZW1pdChlLHQpe3JldHVybiBzdXBlci5lbWl0KGUsdCl9b24oZSx0KXtyZXR1cm4gc3VwZXIub24oZSx0KX19dmFyIEtkPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLFN0b3JhZ2VNYW5hZ2VyV2ViOmNsYXNze2NvbnN0cnVjdG9yKHtlbmFibGVkOmV9PXtlbmFibGVkOiExfSl7dGhpcy5lbmFibGVkPSExLHRoaXMuZW5hYmxlZD1lfXBlcnNpc3RDaGFubmVsQ29uZmlnKGUpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3QgdD1KU09OLnN0cmluZ2lmeShlKTtSYShgW1N0b3JhZ2VNYW5hZ2VyV2ViOiBwZXJzaXN0Q2hhbm5lbENvbmZpZygpXSBlbmFibGVkPSR7dGhpcy5lbmFibGVkfWAsZSksbG9jYWxTdG9yYWdlLnNldEl0ZW0oU2MsdCl9KSl9Z2V0UGVyc2lzdGVkQ2hhbm5lbENvbmZpZygpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7bGV0IGU7dHJ5e2lmKFJhKGBbU3RvcmFnZU1hbmFnZXJXZWI6IGdldFBlcnNpc3RlZENoYW5uZWxDb25maWcoKV0gZW5hYmxlZD0ke3RoaXMuZW5hYmxlZH1gKSxlPWxvY2FsU3RvcmFnZS5nZXRJdGVtKFNjKSxSYShcIltTdG9yYWdlTWFuYWdlcldlYjogZ2V0UGVyc2lzdGVkQ2hhbm5lbENvbmZpZygpXVwiLGUpLCFlKXJldHVybjtjb25zdCB0PUpTT04ucGFyc2UoZSk7cmV0dXJuIFJhKFwiW1N0b3JhZ2VNYW5hZ2VyV2ViOiBnZXRQZXJzaXN0ZWRDaGFubmVsQ29uZmlnKCldIGNoYW5uZWxDb25maWdcIix0KSx0fWNhdGNoKGUpe3JldHVybiB2b2lkIGNvbnNvbGUuZXJyb3IoXCJbU3RvcmFnZU1hbmFnZXJXZWI6IGdldFBlcnNpc3RlZENoYW5uZWxDb25maWcoKV0gQ2FuJ3QgZmluZCBleGlzdGluZyBjaGFubmVsIGNvbmZpZ1wiLGUpfX0pKX1wZXJzaXN0QWNjb3VudHMoZSl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtSYShgW1N0b3JhZ2VNYW5hZ2VyV2ViOiBwZXJzaXN0QWNjb3VudHMoKV0gZW5hYmxlZD0ke3RoaXMuZW5hYmxlZH1gLGUpO2NvbnN0IHQ9SlNPTi5zdHJpbmdpZnkoZSk7bG9jYWxTdG9yYWdlLnNldEl0ZW0oQ2MsdCl9KSl9Z2V0Q2FjaGVkQWNjb3VudHMoKXtyZXR1cm4gbCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3RyeXtjb25zdCBlPWxvY2FsU3RvcmFnZS5nZXRJdGVtKENjKTtyZXR1cm4gZT9KU09OLnBhcnNlKGUpOltdfWNhdGNoKGUpe3Rocm93IGNvbnNvbGUuZXJyb3IoXCJbU3RvcmFnZU1hbmFnZXJXZWI6IGdldENhY2hlZEFjY291bnRzKCldIEVycm9yIHJlYWRpbmcgY2FjaGVkIGFjY291bnRzXCIsZSksZX19KSl9cGVyc2lzdENoYWluSWQoZSl7cmV0dXJuIGwodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtSYShgW1N0b3JhZ2VNYW5hZ2VyV2ViOiBwZXJzaXN0Q2hhaW5JZCgpXSBlbmFibGVkPSR7dGhpcy5lbmFibGVkfWAsZSksbG9jYWxTdG9yYWdlLnNldEl0ZW0oeGMsZSl9KSl9Z2V0Q2FjaGVkQ2hhaW5JZCgpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dHJ5e2NvbnN0IGU9bG9jYWxTdG9yYWdlLmdldEl0ZW0oeGMpO3JldHVybiBudWxsIT1lP2U6dm9pZCAwfWNhdGNoKGUpe3Rocm93IGNvbnNvbGUuZXJyb3IoXCJbU3RvcmFnZU1hbmFnZXJXZWI6IGdldENhY2hlZENoYWluSWQoKV0gRXJyb3IgcmVhZGluZyBjYWNoZWQgY2hhaW5JZFwiLGUpLGV9fSkpfXRlcm1pbmF0ZSgpe3JldHVybiBsKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7UmEoYFtTdG9yYWdlTWFuYWdlcldlYjogdGVybWluYXRlKCldIGVuYWJsZWQ9JHt0aGlzLmVuYWJsZWR9YCksbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oU2MpfSkpfX19KTtleHBvcnRzLkRFRkFVTFRfU0VSVkVSX1VSTD1ucixleHBvcnRzLk1ldGFNYXNrU0RLPUJkLGV4cG9ydHMuTWV0YU1hc2tTREtFdmVudD1zYyxleHBvcnRzLlNES1Byb3ZpZGVyPWxjLGV4cG9ydHMuZGVmYXVsdD1CZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGFtYXNrLXNkay5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/sdk/dist/node/cjs/metamask-sdk.js\n");

/***/ })

};
;